Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: VIE

; Microsoft Dynamics AX View : InventSumDeltaAggrView unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  VIEW #InventSumDeltaAggrView
    PROPERTIES
      Name                #InventSumDeltaAggrView
      Label               #@SYS4000119
      TitleField1         #ItemId
      TitleField2         #InventDimId
      SaveDataPerCompany  #Yes
      DeveloperDocumentation  #@SYS4000120
      Origin              #{54D6DE3B-A142-4051-8B7D-B18E04096FD2}
    ENDPROPERTIES
    
    QUERY #Metadata
      PROPERTIES
        Name                #Metadata
        Version             #23
        NextUniqueId        #1001
        Origin              #{38937309-10AC-4CB7-964D-ECED38FF49C8}
      ENDPROPERTIES
      
      BLOCKS
        BLOCK #InventSumDelta
          PROPERTIES
            Name                #InventSumDelta
            Table               #InventSumDelta
            UniqueId            #1000
          ENDPROPERTIES
          
          FIELDLIST
            PROPERTIES
            ENDPROPERTIES
            
          ENDFIELDLIST
          LINES
            LINE #IsAggregated
            PROPERTIES
              Name                #IsAggregated
              Table               #InventSumDelta
              Field               #IsAggregated
              Value               #No
            ENDPROPERTIES
            
          ENDLINES
          BLOCKS
          ENDBLOCKS
          GROUPBY
            FIELD
              PROPERTIES
                DataSource          #InventSumDelta
                Field               #TTSId
              ENDPROPERTIES
              
            FIELD
              PROPERTIES
                DataSource          #InventSumDelta
                Field               #ItemId
              ENDPROPERTIES
              
            FIELD
              PROPERTIES
                DataSource          #InventSumDelta
                Field               #InventDimId
              ENDPROPERTIES
              
            FIELD
              PROPERTIES
                DataSource          #InventSumDelta
                Field               #InventSiteId
              ENDPROPERTIES
              
            FIELD
              PROPERTIES
                DataSource          #InventSumDelta
                Field               #InventLocationId
              ENDPROPERTIES
              
            FIELD
              PROPERTIES
                DataSource          #InventSumDelta
                Field               #InventBatchId
              ENDPROPERTIES
              
            FIELD
              PROPERTIES
                DataSource          #InventSumDelta
                Field               #WMSLocationId
              ENDPROPERTIES
              
            FIELD
              PROPERTIES
                DataSource          #InventSumDelta
                Field               #WMSPalletId
              ENDPROPERTIES
              
          ENDGROUPBY
          HAVING
          ENDHAVING
          ORDERBY
          ENDORDERBY
        ENDBLOCK
      ENDBLOCKS
    ENDQUERY
    
    FIELDS
      VIEWFIELD #Arrived
        PROPERTIES
          Type                #Real
          Name                #Arrived
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyArrived
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #Arrived
          Aggregation         #Sum
          Origin              #{54B13BA0-EBB5-4644-B37E-9AD18476D9B3}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #AvailOrdered
        PROPERTIES
          Type                #Real
          Name                #AvailOrdered
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyAvailOrdered
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #AvailOrdered
          Aggregation         #Sum
          Origin              #{C9B4CC7D-F54B-44D2-AAD2-C3EF35A01F8A}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #AvailPhysical
        PROPERTIES
          Type                #Real
          Name                #AvailPhysical
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyAvailPhysical
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #AvailPhysical
          Aggregation         #Sum
          Origin              #{A1CE23A7-EAAD-453E-95E7-BDFDA7508860}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #Deducted
        PROPERTIES
          Type                #Real
          Name                #Deducted
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyDeducted
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #Deducted
          Aggregation         #Sum
          Origin              #{25031504-2284-42FB-B5F2-C5B8C06E15C5}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #InventDimId
        PROPERTIES
          Name                #InventDimId
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventDimId
          StringSize          #20
          DataSource          #InventSumDelta
          DataField           #InventDimId
          Origin              #{55172EB5-BE1D-478C-8231-AD93106B051C}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #ItemId
        PROPERTIES
          Name                #ItemId
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #ItemId
          StringSize          #20
          DataSource          #InventSumDelta
          DataField           #ItemId
          Origin              #{E453B049-357C-465F-A846-E3D89B9A3574}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #LastUpdDateExpected
        PROPERTIES
          Type                #Date
          Name                #LastUpdDateExpected
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #DateExpected
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #LastUpdDateExpected
          Aggregation         #Max
          Origin              #{30FF3802-42AA-454D-B80C-45B9160D893C}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #LastUpdDatePhysical
        PROPERTIES
          Type                #Date
          Name                #LastUpdDatePhysical
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #DatePhysical
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #LastUpdDatePhysical
          Aggregation         #Max
          Origin              #{2ECCE2F8-C020-475E-9A44-848D9A50D96E}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #OnOrder
        PROPERTIES
          Type                #Real
          Name                #OnOrder
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyOnOrder
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #OnOrder
          Aggregation         #Sum
          Origin              #{A9BB048C-DB85-440E-A321-41F8B0E6B1E8}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #Ordered
        PROPERTIES
          Type                #Real
          Name                #Ordered
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyOrdered
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #Ordered
          Aggregation         #Sum
          Origin              #{01D31D58-2FA1-4E3B-8A91-269E31A676B6}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWArrived
        PROPERTIES
          Type                #Real
          Name                #PdsCWArrived
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWArrived
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWArrived
          Aggregation         #Sum
          Origin              #{3D2F0DFA-C563-4726-9615-77C2AB2D4F07}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWAvailOrdered
        PROPERTIES
          Type                #Real
          Name                #PdsCWAvailOrdered
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWAvailOrdered
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWAvailOrdered
          Aggregation         #Sum
          Origin              #{DF11F55E-F719-47A3-B498-8B855A67FEC3}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWAvailPhysical
        PROPERTIES
          Type                #Real
          Name                #PdsCWAvailPhysical
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWAvailPhysical
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWAvailPhysical
          Aggregation         #Sum
          Origin              #{FC417D31-7BA9-4874-8C80-18A500CB1FB0}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWDeducted
        PROPERTIES
          Type                #Real
          Name                #PdsCWDeducted
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWDeducted
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWDeducted
          Aggregation         #Sum
          Origin              #{FE64E9D0-F457-4F51-BEE0-D62824199AD1}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWOnOrder
        PROPERTIES
          Type                #Real
          Name                #PdsCWOnOrder
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWOnOrder
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWOnOrder
          Aggregation         #Sum
          Origin              #{0A39F640-6569-48F3-BEF6-CC946BC20B80}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWOrdered
        PROPERTIES
          Type                #Real
          Name                #PdsCWOrdered
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWOrdered
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWOrdered
          Aggregation         #Sum
          Origin              #{899BDFA6-D131-48EE-A504-510E3853E3F7}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWPhysicalInvent
        PROPERTIES
          Type                #Real
          Name                #PdsCWPhysicalInvent
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWPhysicalInvent
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWPhysicalInvent
          Aggregation         #Sum
          Origin              #{2FE8D218-27BE-4FD6-BA6F-A95E0DEC90DD}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWPicked
        PROPERTIES
          Type                #Real
          Name                #PdsCWPicked
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWPicked
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWPicked
          Aggregation         #Sum
          Origin              #{F6FD7C87-0087-440B-9BEF-31312400134A}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWPostedQty
        PROPERTIES
          Type                #Real
          Name                #PdsCWPostedQty
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWPostedQty
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWPostedQty
          Aggregation         #Sum
          Origin              #{07A110FC-D95D-4019-896D-9351DAEA3846}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWQuotationIssue
        PROPERTIES
          Type                #Real
          Name                #PdsCWQuotationIssue
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWQuotationIssue
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWQuotationIssue
          Aggregation         #Sum
          Origin              #{C798C6A6-1EAD-4488-80A2-0AB7A3DDAA2C}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWQuotationReceipt
        PROPERTIES
          Type                #Real
          Name                #PdsCWQuotationReceipt
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWQuotationReceipt
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWQuotationReceipt
          Aggregation         #Sum
          Origin              #{EE41581C-98B4-4E80-B2F0-E781A2C47141}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWReceived
        PROPERTIES
          Type                #Real
          Name                #PdsCWReceived
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWReceived
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWReceived
          Aggregation         #Sum
          Origin              #{2813A327-37EC-4CCA-A1B2-042763030B45}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWRegistered
        PROPERTIES
          Type                #Real
          Name                #PdsCWRegistered
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWRegistered
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWRegistered
          Aggregation         #Sum
          Origin              #{F1BC3705-4283-4D90-AA5B-23A576BA35A0}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWReservOrdered
        PROPERTIES
          Type                #Real
          Name                #PdsCWReservOrdered
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWReservOrdered
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWReservOrdered
          Aggregation         #Sum
          Origin              #{EFDDC40A-A1C1-467F-A67F-93679C01D3B0}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PdsCWReservPhysical
        PROPERTIES
          Type                #Real
          Name                #PdsCWReservPhysical
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #PdsCWReservPhysical
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PdsCWReservPhysical
          Aggregation         #Sum
          Origin              #{80493AB6-3890-4A2D-9739-2236FBB69ED3}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PhysicalInvent
        PROPERTIES
          Type                #Real
          Name                #PhysicalInvent
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyPhysicalOnhand
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PhysicalInvent
          Aggregation         #Sum
          Origin              #{82E2959B-129F-4673-8E66-21CCD3B8B7EE}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PhysicalValue
        PROPERTIES
          Type                #Real
          Name                #PhysicalValue
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #CostAmountPhysical
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PhysicalValue
          Aggregation         #Sum
          Origin              #{1DDBDDE3-4C7B-4C8E-BCC9-263A77EC109F}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PhysicalValueSecCur_RU
        PROPERTIES
          Type                #Real
          Name                #PhysicalValueSecCur_RU
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #CostAmountPhysicalSecCur_RU
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PhysicalValueSecCur_RU
          Aggregation         #Sum
          Origin              #{76F54442-35DC-44AA-A251-40BFB8F2D12F}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #Picked
        PROPERTIES
          Type                #Real
          Name                #Picked
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyPicked
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #Picked
          Aggregation         #Sum
          Origin              #{F4C2A2C3-ED95-4883-B573-3C4C77078FA5}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PostedQty
        PROPERTIES
          Type                #Real
          Name                #PostedQty
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyPosted
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PostedQty
          Aggregation         #Sum
          Origin              #{5D251CDE-44F1-47C3-92FA-A88DA1E52074}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PostedValue
        PROPERTIES
          Type                #Real
          Name                #PostedValue
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #CostAmountPosted
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PostedValue
          Aggregation         #Sum
          Origin              #{382D5854-636F-4682-BBF0-0131CCF69F40}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PostedValueSecCur_RU
        PROPERTIES
          Type                #Real
          Name                #PostedValueSecCur_RU
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #CostAmountPostedSecCur_RU
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #PostedValueSecCur_RU
          Aggregation         #Sum
          Origin              #{25D0F874-C6AE-47CA-98B5-8B9B0CAE1E4B}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #QuotationIssue
        PROPERTIES
          Type                #Real
          Name                #QuotationIssue
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyQuotationIssue
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #QuotationIssue
          Aggregation         #Sum
          Origin              #{F853450E-72A4-4128-9A97-1C33C90E5B9D}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #QuotationReceipt
        PROPERTIES
          Type                #Real
          Name                #QuotationReceipt
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyQuotationReceipt
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #QuotationReceipt
          Aggregation         #Sum
          Origin              #{5FA368AB-D98B-4E95-AABD-AB4FA5E2AD9C}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #Received
        PROPERTIES
          Type                #Real
          Name                #Received
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyReceived
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #Received
          Aggregation         #Sum
          Origin              #{C0A4EE34-0E89-477C-A2F5-97187695DFC0}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #Registered
        PROPERTIES
          Type                #Real
          Name                #Registered
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyRegistered
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #Registered
          Aggregation         #Sum
          Origin              #{1B534FA4-60EC-49AF-AE50-2EA1FDA74D04}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #ReservOrdered
        PROPERTIES
          Type                #Real
          Name                #ReservOrdered
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyReservOrdered
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #ReservOrdered
          Aggregation         #Sum
          Origin              #{04123ECC-773E-4791-AD7B-40AA13A0C7EC}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #ReservPhysical
        PROPERTIES
          Type                #Real
          Name                #ReservPhysical
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventQtyReservPhysical
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #ReservPhysical
          Aggregation         #Sum
          Origin              #{D5C53DC5-9648-4A11-A7D1-6E8BEB6937E7}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #TTSId
        PROPERTIES
          Type                #Int64
          Name                #TTSId
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #CreatedTransactionId
          StringSize          #(Memo)
          DataSource          #InventSumDelta
          DataField           #TTSId
          Origin              #{58DF92E4-8039-4946-9A1C-521B17B95F29}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #InventBatchId
        PROPERTIES
          Name                #InventBatchId
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventBatchId
          StringSize          #20
          DataSource          #InventSumDelta
          DataField           #InventBatchId
          Origin              #{36795BC9-1B6C-49F6-992F-DD0843CA817F}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #InventLocationId
        PROPERTIES
          Name                #InventLocationId
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventLocationId
          StringSize          #10
          DataSource          #InventSumDelta
          DataField           #InventLocationId
          Origin              #{061317CF-25AF-4F79-A6EF-BB544E34FD5D}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #InventSiteId
        PROPERTIES
          Name                #InventSiteId
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #InventSiteId
          StringSize          #10
          DataSource          #InventSumDelta
          DataField           #InventSiteId
          Origin              #{A30382F7-50C7-47E9-9D7B-631B3F4B766E}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #WMSLocationId
        PROPERTIES
          Name                #WMSLocationId
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #WMSLocationId
          StringSize          #10
          DataSource          #InventSumDelta
          DataField           #WMSLocationId
          Origin              #{AA1B332B-0452-4CA0-A9DC-ED6D72B0EF90}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #WMSPalletId
        PROPERTIES
          Name                #WMSPalletId
          Table               #InventSumDeltaAggrView
          ExtendedDataType    #WMSPalletId
          StringSize          #18
          DataSource          #InventSumDelta
          DataField           #WMSPalletId
          Origin              #{8D4DF2D7-28DA-4878-9CD7-36A9959223ED}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #InventDimId
          #Arrived
          #AvailOrdered
          #AvailPhysical
          #Deducted
          #LastUpdDateExpected
          #LastUpdDatePhysical
          #OnOrder
          #Ordered
          #PdsCWArrived
          #PdsCWAvailOrdered
          #PdsCWAvailPhysical
          #PdsCWDeducted
          #PdsCWOnOrder
          #PdsCWOrdered
          #PdsCWPhysicalInvent
          #PdsCWPicked
          #PdsCWPostedQty
          #PdsCWQuotationIssue
          #PdsCWQuotationReceipt
          #PdsCWReceived
          #PdsCWRegistered
          #PdsCWReservOrdered
          #PdsCWReservPhysical
          #PhysicalInvent
          #PhysicalValue
          #PhysicalValueSecCur_RU
          #Picked
          #PostedQty
          #PostedValue
          #PostedValueSecCur_RU
          #QuotationIssue
          #QuotationReceipt
          #Received
          #Registered
          #ReservOrdered
          #ReservPhysical
          #TTSId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LastDate
        PROPERTIES
          Name                #LastDate
          Label               #@SYS15992
        ENDPROPERTIES
        
        GROUPFIELDS
          #LastUpdDateExpected
          #LastUpdDatePhysical
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Value
        PROPERTIES
          Name                #Value
          Label               #@SYS11762
        ENDPROPERTIES
        
        GROUPFIELDS
          #PhysicalValue
          #PhysicalValueSecCur_RU
          #PostedValue
          #PostedValueSecCur_RU
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    METHODS
    ENDMETHODS
  ENDVIEW
  

***Element: VIE

; Microsoft Dynamics AX View : InventSumDeltaAggrSumView unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  VIEW #InventSumDeltaAggrSumView
    PROPERTIES
      Name                #InventSumDeltaAggrSumView
      Label               #@SYS4000117
      TitleField1         #ItemId
      TitleField2         #InventDimId
      SaveDataPerCompany  #Yes
      DeveloperDocumentation  #@SYS4000118
      Origin              #{BF71E433-2018-4FA4-A2A9-6418F4C5D162}
      Query               #InventSumDeltaAggrSum
    ENDPROPERTIES
    
    QUERY #Metadata
      PROPERTIES
        Name                #Metadata
        Version             #1
        Origin              #{C45A35B6-5388-4325-AFF6-BA64BFA0D0C9}
      ENDPROPERTIES
      
      BLOCKS
      ENDBLOCKS
      QUERY #InventSumDeltaAggrSum
      ENDQUERY
      
    ENDQUERY
    
    FIELDS
      VIEWFIELD #ItemId
        PROPERTIES
          Name                #ItemId
          Table               #InventSumDeltaAggrSumView
          ExtendedDataType    #ItemId
          StringSize          #20
          DataSource          #InventSumDeltaAggrView
          DataField           #ItemId
          Origin              #{7352D4C8-AF5C-4DFB-B198-A08D323B0FE1}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #InventDimId
        PROPERTIES
          Name                #InventDimId
          Table               #InventSumDeltaAggrSumView
          ExtendedDataType    #InventDimId
          StringSize          #20
          DataSource          #InventSumDeltaAggrView
          DataField           #InventDimId
          Origin              #{B414C1D9-AE59-4D8D-8C0E-72C79339E7A9}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      REALCOMPUTEDCOLUMN #Arrived
        PROPERTIES
          Type                #Real
          Name                #Arrived
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{EB82684E-D982-4061-8C12-6DC137320605}
          ViewMethod          #arrived
          ExtendedDataType    #InventQtyArrived
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      VIEWFIELD #TTSId
        PROPERTIES
          Type                #Int64
          Name                #TTSId
          Table               #InventSumDeltaAggrSumView
          ExtendedDataType    #CreatedTransactionId
          StringSize          #(Memo)
          DataSource          #InventSumDeltaAggrView
          DataField           #TTSId
          Origin              #{BD73BC74-26A0-494D-A220-2AE6110C9568}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      REALCOMPUTEDCOLUMN #PostedQty
        PROPERTIES
          Type                #Real
          Name                #PostedQty
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{4663B07E-7D28-4700-9F12-C17DD469E71C}
          ViewMethod          #postedQty
          ExtendedDataType    #InventQtyPosted
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #AvailOrdered
        PROPERTIES
          Type                #Real
          Name                #AvailOrdered
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{F22A9C9B-E3E3-4AA6-A248-201235747F7B}
          ViewMethod          #availOrdered
          ExtendedDataType    #InventQtyAvailOrdered
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #AvailPhysical
        PROPERTIES
          Type                #Real
          Name                #AvailPhysical
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{98A7AE45-F9E4-471C-A0F6-936199A82773}
          ViewMethod          #availPhysical
          ExtendedDataType    #InventQtyAvailPhysical
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #Deducted
        PROPERTIES
          Type                #Real
          Name                #Deducted
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{6608CE4A-CAA5-4523-ADD0-50F018525E87}
          ViewMethod          #deducted
          ExtendedDataType    #InventQtyDeducted
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #OnOrder
        PROPERTIES
          Type                #Real
          Name                #OnOrder
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{DA21A7F5-D526-4F6F-9ED2-A07AFBEE5DB0}
          ViewMethod          #onOrder
          ExtendedDataType    #InventQtyOnOrder
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #Ordered
        PROPERTIES
          Type                #Real
          Name                #Ordered
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{28547F5A-D59E-45C7-8FAB-253BDE3C050E}
          ViewMethod          #Ordered
          ExtendedDataType    #InventQtyOrdered
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PhysicalInvent
        PROPERTIES
          Type                #Real
          Name                #PhysicalInvent
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{A9E8168B-11CE-48A2-9BB9-BD84F87B80C2}
          ViewMethod          #physicalInvent
          ExtendedDataType    #InventQtyPhysicalOnhand
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PhysicalValue
        PROPERTIES
          Type                #Real
          Name                #PhysicalValue
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{5217C61B-337B-48F3-A99B-B4DBFF799941}
          ViewMethod          #physicalValue
          ExtendedDataType    #CostAmountPhysical
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PhysicalValueSecCur_RU
        PROPERTIES
          Type                #Real
          Name                #PhysicalValueSecCur_RU
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{F4AB7658-13A6-4592-ADDF-0D4D3F3CCD0F}
          ViewMethod          #physicalValueSecCur_RU
          ExtendedDataType    #CostAmountPhysicalSecCur_RU
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #Picked
        PROPERTIES
          Type                #Real
          Name                #Picked
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{EEE2D597-0E1A-44CA-AB0B-272A617ED040}
          ViewMethod          #picked
          ExtendedDataType    #InventQtyPicked
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PostedValue
        PROPERTIES
          Type                #Real
          Name                #PostedValue
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{99978457-2DB3-489D-82A8-0F0BC31BA890}
          ViewMethod          #postedValue
          ExtendedDataType    #CostAmountPosted
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PostedValueSecCur_RU
        PROPERTIES
          Type                #Real
          Name                #PostedValueSecCur_RU
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{61E4CA86-D746-4D80-A535-A387784DD8D0}
          ViewMethod          #postedValueSecCur_RU
          ExtendedDataType    #CostAmountPostedSecCur_RU
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #QuotationIssue
        PROPERTIES
          Type                #Real
          Name                #QuotationIssue
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{8F6E71EF-6847-4BAD-AEBB-3E099DA276D1}
          ViewMethod          #quotationIssue
          ExtendedDataType    #InventQtyQuotationIssue
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #QuotationReceipt
        PROPERTIES
          Type                #Real
          Name                #QuotationReceipt
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{074737D0-5B93-4955-A24F-786E95B65ABB}
          ViewMethod          #quotationReceipt
          ExtendedDataType    #InventQtyQuotationReceipt
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #Received
        PROPERTIES
          Type                #Real
          Name                #Received
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{9350F2E6-1E75-4B4B-BECB-C29F42B092D5}
          ViewMethod          #received
          ExtendedDataType    #InventQtyReceived
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #Registered
        PROPERTIES
          Type                #Real
          Name                #Registered
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{5D20E4D2-99C7-46FF-B318-2F7AE75ED844}
          ViewMethod          #registered
          ExtendedDataType    #InventQtyRegistered
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #ReservOrdered
        PROPERTIES
          Type                #Real
          Name                #ReservOrdered
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{17FCF214-00D4-4E2F-840B-5BF6403E4501}
          ViewMethod          #reservOrdered
          ExtendedDataType    #InventQtyReservOrdered
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #ReservPhysical
        PROPERTIES
          Type                #Real
          Name                #ReservPhysical
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{5F432971-3E32-4726-AB93-924C797EFB35}
          ViewMethod          #reservPhysical
          ExtendedDataType    #InventQtyReservPhysical
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWArrived
        PROPERTIES
          Type                #Real
          Name                #PdsCWArrived
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{4431CF96-D3A6-4178-9F51-46CEE2E61699}
          ViewMethod          #pdsCWArrived
          ExtendedDataType    #PdsCWArrived
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWPostedQty
        PROPERTIES
          Type                #Real
          Name                #PdsCWPostedQty
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{71F2B91F-7BEF-450D-AC3B-D9D90E643832}
          ViewMethod          #pdsCWPostedQty
          ExtendedDataType    #PdsCWPostedQty
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWAvailOrdered
        PROPERTIES
          Type                #Real
          Name                #PdsCWAvailOrdered
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{A2CE6C17-A9DE-43A6-8503-21FC787A83C5}
          ViewMethod          #pdsCWAvailOrdered
          ExtendedDataType    #PdsCWAvailOrdered
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWAvailPhysical
        PROPERTIES
          Type                #Real
          Name                #PdsCWAvailPhysical
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{B765850E-0A2D-448C-AE9A-A362DC376176}
          ViewMethod          #pdsCWAvailPhysical
          ExtendedDataType    #PdsCWAvailPhysical
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWDeducted
        PROPERTIES
          Type                #Real
          Name                #PdsCWDeducted
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{527C734A-0C7B-439A-8AE7-1F2A4A85D268}
          ViewMethod          #pdsCWDeducted
          ExtendedDataType    #PdsCWDeducted
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWOnOrder
        PROPERTIES
          Type                #Real
          Name                #PdsCWOnOrder
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{2F1400D6-82B5-4F1B-A124-F6DDDEEE6EA6}
          ViewMethod          #pdsCWOnOrder
          ExtendedDataType    #PdsCWOnOrder
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWOrdered
        PROPERTIES
          Type                #Real
          Name                #PdsCWOrdered
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{784AC6DD-4B42-4B95-98BC-CB54B88BE1EC}
          ViewMethod          #pdsCWOrdered
          ExtendedDataType    #PdsCWOrdered
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWPhysicalInvent
        PROPERTIES
          Type                #Real
          Name                #PdsCWPhysicalInvent
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{B2E22FB7-7B66-4832-B6DC-208E181209A0}
          ViewMethod          #pdsCWPhysicalInvent
          ExtendedDataType    #PdsCWPhysicalInvent
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWPicked
        PROPERTIES
          Type                #Real
          Name                #PdsCWPicked
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{1840A34E-9427-4DAD-B14C-48F41EE8C0CB}
          ViewMethod          #pdsCWPicked
          ExtendedDataType    #PdsCWPicked
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWQuotationIssue
        PROPERTIES
          Type                #Real
          Name                #PdsCWQuotationIssue
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{0F9EAC98-ABF8-42D7-AF5F-E2ADE0685E0D}
          ViewMethod          #pdsCWQuotationIssue
          ExtendedDataType    #PdsCWQuotationIssue
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWQuotationReceipt
        PROPERTIES
          Type                #Real
          Name                #PdsCWQuotationReceipt
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{9DEBCFC9-3427-4344-9C0C-C7653B792C4C}
          ViewMethod          #pdsCWQuotationReceipt
          ExtendedDataType    #PdsCWQuotationReceipt
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWReceived
        PROPERTIES
          Type                #Real
          Name                #PdsCWReceived
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{5C5B91FB-BC8E-4A22-87E5-4CE46F66940F}
          ViewMethod          #pdsCWReceived
          ExtendedDataType    #PdsCWReceived
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWRegistered
        PROPERTIES
          Type                #Real
          Name                #PdsCWRegistered
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{921D4175-C9C9-4BB8-95DF-E2104347EF6B}
          ViewMethod          #pdsCWRegistered
          ExtendedDataType    #PdsCWRegistered
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWReservOrdered
        PROPERTIES
          Type                #Real
          Name                #PdsCWReservOrdered
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{91F6DF96-68F6-4E96-87E4-8FCA66742C2E}
          ViewMethod          #pdsCWReservOrdered
          ExtendedDataType    #PdsCWReservOrdered
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      REALCOMPUTEDCOLUMN #PdsCWReservPhysical
        PROPERTIES
          Type                #Real
          Name                #PdsCWReservPhysical
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{4637A2C7-DFBA-471B-A11D-B289B7B7FA5C}
          ViewMethod          #pdsCWReservPhysical
          ExtendedDataType    #PdsCWReservPhysical
        ENDPROPERTIES
        
      ENDREALCOMPUTEDCOLUMN
      
      DATECOMPUTEDCOLUMN #LastUpdDatePhysical
        PROPERTIES
          Type                #Date
          Name                #LastUpdDatePhysical
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{DD928378-A66F-4616-8722-126F8139ED52}
          ViewMethod          #lastUpdDatePhysical
          ExtendedDataType    #DatePhysical
        ENDPROPERTIES
        
      ENDDATECOMPUTEDCOLUMN
      
      DATECOMPUTEDCOLUMN #LastUpdDateExpected
        PROPERTIES
          Type                #Date
          Name                #LastUpdDateExpected
          MinReadAccess       #Auto
          Table               #InventSumDeltaAggrSumView
          Origin              #{FF4BB68E-1660-4BA9-9654-DEE9376DBC08}
          ViewMethod          #lastUpdDateExpected
          ExtendedDataType    #DateExpected
        ENDPROPERTIES
        
      ENDDATECOMPUTEDCOLUMN
      
      VIEWFIELD #InventBatchId
        PROPERTIES
          Name                #InventBatchId
          Table               #InventSumDeltaAggrSumView
          ExtendedDataType    #InventBatchId
          StringSize          #20
          DataSource          #InventSumDeltaAggrView
          DataField           #InventBatchId
          Origin              #{48B51569-47A1-481E-900B-B1769C7D71D8}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #InventLocationId
        PROPERTIES
          Name                #InventLocationId
          Table               #InventSumDeltaAggrSumView
          ExtendedDataType    #InventLocationId
          StringSize          #10
          DataSource          #InventSumDeltaAggrView
          DataField           #InventLocationId
          Origin              #{B9D7AF6A-6780-4795-9C83-456275061DFC}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #InventSiteId
        PROPERTIES
          Name                #InventSiteId
          Table               #InventSumDeltaAggrSumView
          ExtendedDataType    #InventSiteId
          StringSize          #10
          DataSource          #InventSumDeltaAggrView
          DataField           #InventSiteId
          Origin              #{5CD5338F-701C-44EB-88F0-01EB4626B7F5}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #WMSLocationId
        PROPERTIES
          Name                #WMSLocationId
          Table               #InventSumDeltaAggrSumView
          ExtendedDataType    #WMSLocationId
          StringSize          #10
          DataSource          #InventSumDeltaAggrView
          DataField           #WMSLocationId
          Origin              #{FBFEDE24-BEE4-4F2B-8861-75CF9FD1CC0A}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #WMSPalletId
        PROPERTIES
          Name                #WMSPalletId
          Table               #InventSumDeltaAggrSumView
          ExtendedDataType    #WMSPalletId
          StringSize          #18
          DataSource          #InventSumDeltaAggrView
          DataField           #WMSPalletId
          Origin              #{B208764D-AC4A-4B7B-9EC9-C19D309512C2}
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #PdsCWQuotationReceipt
          #PdsCWQuotationIssue
          #PdsCWPicked
          #PdsCWPhysicalInvent
          #InventDimId
          #Arrived
          #Picked
          #PhysicalValueSecCur_RU
          #PhysicalValue
          #PhysicalInvent
          #Ordered
          #OnOrder
          #Deducted
          #AvailPhysical
          #AvailOrdered
          #PostedQty
          #PostedValue
          #PostedValueSecCur_RU
          #QuotationIssue
          #QuotationReceipt
          #Received
          #Registered
          #ReservOrdered
          #ReservPhysical
          #PdsCWArrived
          #PdsCWPostedQty
          #PdsCWAvailOrdered
          #PdsCWAvailPhysical
          #PdsCWDeducted
          #PdsCWOnOrder
          #PdsCWOrdered
          #PdsCWReceived
          #PdsCWRegistered
          #PdsCWReservOrdered
          #PdsCWReservPhysical
          #LastUpdDatePhysical
          #LastUpdDateExpected
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LastDate
        PROPERTIES
          Name                #LastDate
          Label               #@SYS15992
        ENDPROPERTIES
        
        GROUPFIELDS
          #LastUpdDatePhysical
          #LastUpdDateExpected
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Value
        PROPERTIES
          Name                #Value
          Label               #@SYS11762
        ENDPROPERTIES
        
        GROUPFIELDS
          #PhysicalValue
          #PhysicalValueSecCur_RU
          #PostedValue
          #PostedValueSecCur_RU
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    METHODS
      SOURCE #arrived
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str arrived()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, Arrived));
        #}
      ENDSOURCE
      SOURCE #availOrdered
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str availOrdered()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, AvailOrdered));
        #}
      ENDSOURCE
      SOURCE #availPhysical
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str availPhysical()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, AvailPhysical));
        #}
      ENDSOURCE
      SOURCE #deducted
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str deducted()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, Deducted));
        #}
      ENDSOURCE
      SOURCE #fieldLatestDate
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view where latest date is neede.
        #/// </summary>
        #/// <param name="_fieldName">
        #/// The name of the <c>InventSum</c> AND <c>InventSumDeltaAggrView</c> field.
        #/// </param>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #
        #private static server str fieldLatestDate(FieldName _fieldName)
        #{
        #    TableName   viewName = tableStr(InventSumDeltaAggrSumView);
        #    str         fieldNameDelta = SysComputedColumn::returnField(viewName, identifierStr(InventSumDeltaAggrView), _fieldName);
        #    str         fieldNameSum   = SysComputedColumn::returnField(viewName, identifierStr(InventSum), _fieldName);
        #
        #    return SysComputedColumn::if(SysComputedColumn::isNullExpression(fieldNameSum),
        #            fieldNameDelta,                                         // If InventSum is null then just return the delta value
        #            SysComputedColumn::if(SysComputedColumn::compareExpressions(fieldNameSum, '>', fieldNameDelta),
        #            fieldNameSum,       // If InventSum is has the latest date then return that
        #            fieldNameDelta)    // else use the value from InventSumDelta
        #    );
        #}
      ENDSOURCE
      SOURCE #fieldString
        #/// <summary>
        #/// Retrieve the string to compute the specified column in the view.
        #/// </summary>
        #/// <param name="_fieldName">
        #/// The name of the <c>InventSum</c> AND <c>InventSumDeltaAggrView</c> field.
        #/// </param>
        #/// <returns>
        #/// A string to compute the specified column in the view.
        #/// </returns>
        #
        #private static server str fieldString(FieldName _fieldName)
        #{
        #    TableName   viewName = tableStr(InventSumDeltaAggrSumView);
        #    str         fieldNameDelta = SysComputedColumn::returnField(viewName, identifierStr(InventSumDeltaAggrView), _fieldName);
        #    str         fieldNameSum   = SysComputedColumn::returnField(viewName, identifierStr(InventSum), _fieldName);
        #
        #    return SysComputedColumn::if(SysComputedColumn::isNullExpression(fieldNameSum),
        #            fieldNameDelta,                                         // If InventSum is null then just return the delta value
        #            SysComputedColumn::add(fieldNameDelta, fieldNameSum));  // Add the values from InventSumDelta and InventSum
        #}
      ENDSOURCE
      SOURCE #lastUpdDateExpected
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #
        #public static server str lastUpdDateExpected()
        #{
        #    return InventSumDeltaAggrSumView::fieldLatestDate(fieldStr(InventSum, LastUpdDateExpected));
        #}
      ENDSOURCE
      SOURCE #lastUpdDatePhysical
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #
        #public static server str lastUpdDatePhysical()
        #{
        #    return InventSumDeltaAggrSumView::fieldLatestDate(fieldStr(InventSum, LastUpdDatePhysical));
        #}
      ENDSOURCE
      SOURCE #onOrder
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str onOrder()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, OnOrder));
        #}
      ENDSOURCE
      SOURCE #ordered
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str ordered()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, Ordered));
        #}
      ENDSOURCE
      SOURCE #pdsCWArrived
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWArrived()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWArrived));
        #}
      ENDSOURCE
      SOURCE #pdsCWAvailOrdered
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWAvailOrdered()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWAvailOrdered));
        #}
      ENDSOURCE
      SOURCE #pdsCWAvailPhysical
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWAvailPhysical()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWAvailPhysical));
        #}
      ENDSOURCE
      SOURCE #pdsCWDeducted
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWDeducted()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWDeducted));
        #}
      ENDSOURCE
      SOURCE #pdsCWOnOrder
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWOnOrder()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWOnOrder));
        #}
      ENDSOURCE
      SOURCE #pdsCWOrdered
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWOrdered()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWOrdered));
        #}
      ENDSOURCE
      SOURCE #pdsCWPhysicalInvent
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWPhysicalInvent()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWPhysicalInvent));
        #}
      ENDSOURCE
      SOURCE #pdsCWPicked
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWPicked()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWPicked));
        #}
      ENDSOURCE
      SOURCE #pdsCWPostedQty
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWPostedQty()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWPostedQty));
        #}
      ENDSOURCE
      SOURCE #pdsCWQuotationIssue
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWQuotationIssue()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWQuotationIssue));
        #}
      ENDSOURCE
      SOURCE #pdsCWQuotationReceipt
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWQuotationReceipt()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWQuotationReceipt));
        #}
      ENDSOURCE
      SOURCE #pdsCWReceived
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWReceived()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWReceived));
        #}
      ENDSOURCE
      SOURCE #pdsCWRegistered
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWRegistered()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWRegistered));
        #}
      ENDSOURCE
      SOURCE #pdsCWReservOrdered
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWReservOrdered()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWReservOrdered));
        #}
      ENDSOURCE
      SOURCE #pdsCWReservPhysical
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str pdsCWReservPhysical()
        #{
        #    if (!#PdsCatchWeightEnabled)
        #    {
        #        return SysComputedColumn::returnLiteral(0);
        #    }
        #
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PdsCWReservPhysical));
        #}
      ENDSOURCE
      SOURCE #physicalInvent
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str physicalInvent()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PhysicalInvent));
        #}
      ENDSOURCE
      SOURCE #physicalValue
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str physicalValue()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PhysicalValue));
        #}
      ENDSOURCE
      SOURCE #physicalValueSecCur_RU
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str physicalValueSecCur_RU()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PhysicalValueSecCur_RU));
        #}
      ENDSOURCE
      SOURCE #picked
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str picked()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, Picked));
        #}
      ENDSOURCE
      SOURCE #postedQty
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str postedQty()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PostedQty));
        #}
      ENDSOURCE
      SOURCE #postedValue
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str postedValue()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PostedValue));
        #}
      ENDSOURCE
      SOURCE #postedValueSecCur_RU
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str postedValueSecCur_RU()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, PostedValueSecCur_RU));
        #}
      ENDSOURCE
      SOURCE #quotationIssue
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str quotationIssue()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, QuotationIssue));
        #}
      ENDSOURCE
      SOURCE #quotationReceipt
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str quotationReceipt()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, QuotationReceipt));
        #}
      ENDSOURCE
      SOURCE #received
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str received()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, Received));
        #}
      ENDSOURCE
      SOURCE #registered
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str registered()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, Registered));
        #}
      ENDSOURCE
      SOURCE #reservOrdered
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str reservOrdered()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, ReservOrdered));
        #}
      ENDSOURCE
      SOURCE #reservPhysical
        #/// <summary>
        #/// Retrieve the string to compute the related column in the view.
        #/// </summary>
        #/// <returns>
        #/// A string to compute the related column in the view.
        #/// </returns>
        #public static server str reservPhysical()
        #{
        #    return InventSumDeltaAggrSumView::fieldString(fieldStr(InventSum, ReservPhysical));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDVIEW
  

***Element: DBT

; Microsoft Dynamics AX Table : InventSumDelta unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #InventSumDelta
    EnforceFKRelation 0
    PROPERTIES
      Name                #InventSumDelta
      Label               #@SYS98313
      TitleField1         #ItemId
      TitleField2         #TTSId
      ConfigurationKey    #LogisticsBasic
      SecurityKey         #InventTables
      CacheLookup         #NotInTTS
      TableGroup          #Transaction
      PrimaryIndex        #TTSItemDimIdx
      ClusterIndex        #TTSItemDimIdx
      OccEnabled          #No
      DeveloperDocumentation  #@SYS124073
      Origin              #{2C0E095D-0000-1000-C840-914139783684}
      LegacyId            #2397
    ENDPROPERTIES
    
    FIELDS
      FIELD #AggregationCounter
        INT
        PROPERTIES
          Name                #AggregationCounter
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{C65D8F2D-3128-445A-89B1-EF45CFCE977A}
          LegacyId            #24
          ExtendedDataType    #Counter
        ENDPROPERTIES
        
      FIELD #Arrived
        REAL
        PROPERTIES
          Name                #Arrived
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{A4C3D493-F1EC-4A33-BD74-2981D8CA0D25}
          LegacyId            #18
          ExtendedDataType    #InventQtyArrived
        ENDPROPERTIES
        
      FIELD #AvailOrdered
        REAL
        PROPERTIES
          Name                #AvailOrdered
          HelpText            #@SYS68568
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{E58DCEC6-D951-4A5A-A30B-675C0050F117}
          LegacyId            #15
          ExtendedDataType    #InventQtyAvailOrdered
        ENDPROPERTIES
        
      FIELD #AvailPhysical
        REAL
        PROPERTIES
          Name                #AvailPhysical
          HelpText            #@SYS68567
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{BE869C83-49AD-4796-8367-67F5BE36CCB7}
          LegacyId            #16
          ExtendedDataType    #InventQtyAvailPhysical
        ENDPROPERTIES
        
      FIELD #Deducted
        REAL
        PROPERTIES
          Name                #Deducted
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{8DBA7FA7-B722-4CD8-88FC-251AA2717354}
          LegacyId            #4
          ExtendedDataType    #InventQtyDeducted
        ENDPROPERTIES
        
      FIELD #InventBatchId
        STRING
        PROPERTIES
          Name                #InventBatchId
          Table               #InventSumDelta
          IgnoreEDTRelation   #Yes
          Origin              #{7AE3ACFA-07D0-4574-91D3-47A171127D65}
          ExtendedDataType    #InventBatchId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventDimId
        STRING
        PROPERTIES
          Name                #InventDimId
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          IgnoreEDTRelation   #Yes
          Origin              #{19506BAE-AA12-4958-813B-CB69B2DBAB7E}
          LegacyId            #12
          ExtendedDataType    #InventDimId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventLocationId
        STRING
        PROPERTIES
          Name                #InventLocationId
          Table               #InventSumDelta
          IgnoreEDTRelation   #Yes
          Origin              #{6E5B5475-7698-4281-ADB2-8DD64D46B04B}
          ExtendedDataType    #InventLocationId
        ENDPROPERTIES
        
      FIELD #InventSiteId
        STRING
        PROPERTIES
          Name                #InventSiteId
          Table               #InventSumDelta
          IgnoreEDTRelation   #Yes
          Origin              #{B8EF5C28-2CCF-42CD-A407-8A31142E5A59}
          ExtendedDataType    #InventSiteId
        ENDPROPERTIES
        
      FIELD #IsAggregated
        ENUM
        PROPERTIES
          Name                #IsAggregated
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{99CF124B-AC9A-4AD7-A641-57B6157299DB}
          LegacyId            #23
          ExtendedDataType    #InventSumDeltaAggregated
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ItemId
        STRING
        PROPERTIES
          Name                #ItemId
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          IgnoreEDTRelation   #Yes
          Origin              #{BCA4998C-7938-4EBA-B359-71843B62CD4A}
          LegacyId            #1
          ExtendedDataType    #ItemId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #LastUpdDateExpected
        DATE
        PROPERTIES
          Name                #LastUpdDateExpected
          HelpText            #@SYS9749
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{FFE8AE09-2C68-4907-AB64-C34223C0F75A}
          LegacyId            #21
          ExtendedDataType    #DateExpected
        ENDPROPERTIES
        
      FIELD #LastUpdDatePhysical
        DATE
        PROPERTIES
          Name                #LastUpdDatePhysical
          HelpText            #@SYS9749
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{59FD0BD1-5002-4F5D-B6B3-9F637A5E5B89}
          LegacyId            #20
          ExtendedDataType    #DatePhysical
        ENDPROPERTIES
        
      FIELD #OnOrder
        REAL
        PROPERTIES
          Name                #OnOrder
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{35CA0FCE-F2F1-4A90-A9A5-A8FED33375FF}
          LegacyId            #8
          ExtendedDataType    #InventQtyOnOrder
        ENDPROPERTIES
        
      FIELD #Ordered
        REAL
        PROPERTIES
          Name                #Ordered
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{EB89543D-E4CB-4D72-93B9-DB2EB865C941}
          LegacyId            #9
          ExtendedDataType    #InventQtyOrdered
        ENDPROPERTIES
        
      FIELD #PdsCWArrived
        REAL
        PROPERTIES
          Name                #PdsCWArrived
          Table               #InventSumDelta
          Origin              #{C92F8D16-8CBD-4756-B2FC-5C61EADCC547}
          ExtendedDataType    #PdsCWArrived
        ENDPROPERTIES
        
      FIELD #PdsCWAvailOrdered
        REAL
        PROPERTIES
          Name                #PdsCWAvailOrdered
          Table               #InventSumDelta
          Origin              #{7E09A8B1-397F-42AA-AABC-55C95ABE250D}
          ExtendedDataType    #PdsCWAvailOrdered
        ENDPROPERTIES
        
      FIELD #PdsCWAvailPhysical
        REAL
        PROPERTIES
          Name                #PdsCWAvailPhysical
          Table               #InventSumDelta
          Origin              #{CD544CD3-27F8-4929-92F2-1112F9E2C2D3}
          ExtendedDataType    #PdsCWAvailPhysical
        ENDPROPERTIES
        
      FIELD #PdsCWDeducted
        REAL
        PROPERTIES
          Name                #PdsCWDeducted
          Table               #InventSumDelta
          Origin              #{FD91ACE0-C762-4380-9426-127ACED24C7A}
          ExtendedDataType    #PdsCWDeducted
        ENDPROPERTIES
        
      FIELD #PdsCWOnOrder
        REAL
        PROPERTIES
          Name                #PdsCWOnOrder
          Table               #InventSumDelta
          Origin              #{73B08432-2107-4BB8-90F9-07FE26F66D4B}
          ExtendedDataType    #PdsCWOnOrder
        ENDPROPERTIES
        
      FIELD #PdsCWOrdered
        REAL
        PROPERTIES
          Name                #PdsCWOrdered
          Table               #InventSumDelta
          Origin              #{758971A5-D39E-4437-A379-C7BD4BEEE2AF}
          ExtendedDataType    #PdsCWOrdered
        ENDPROPERTIES
        
      FIELD #PdsCWPhysicalInvent
        REAL
        PROPERTIES
          Name                #PdsCWPhysicalInvent
          Table               #InventSumDelta
          Origin              #{E304CF47-95EF-489E-8E61-FAC6E55CCDAE}
          ExtendedDataType    #PdsCWPhysicalInvent
        ENDPROPERTIES
        
      FIELD #PdsCWPicked
        REAL
        PROPERTIES
          Name                #PdsCWPicked
          Table               #InventSumDelta
          Origin              #{5A4C0D0A-F862-4848-A465-7EA99920A4FA}
          ExtendedDataType    #PdsCWPicked
        ENDPROPERTIES
        
      FIELD #PdsCWPostedQty
        REAL
        PROPERTIES
          Name                #PdsCWPostedQty
          Table               #InventSumDelta
          Origin              #{1DA60A42-7643-4665-9429-8F1A1C016408}
          ExtendedDataType    #PdsCWPostedQty
        ENDPROPERTIES
        
      FIELD #PdsCWQuotationIssue
        REAL
        PROPERTIES
          Name                #PdsCWQuotationIssue
          Table               #InventSumDelta
          Origin              #{FC9280DF-9365-4A5A-B718-E70A9F7051A0}
          ExtendedDataType    #PdsCWQuotationIssue
        ENDPROPERTIES
        
      FIELD #PdsCWQuotationReceipt
        REAL
        PROPERTIES
          Name                #PdsCWQuotationReceipt
          Table               #InventSumDelta
          Origin              #{1DEFDEC9-D1F6-48C6-8C7E-93804C2EC4AE}
          ExtendedDataType    #PdsCWQuotationReceipt
        ENDPROPERTIES
        
      FIELD #PdsCWReceived
        REAL
        PROPERTIES
          Name                #PdsCWReceived
          Table               #InventSumDelta
          Origin              #{5EE34F83-A6DA-4C5C-9540-99E6D876E32A}
          ExtendedDataType    #PdsCWReceived
        ENDPROPERTIES
        
      FIELD #PdsCWRegistered
        REAL
        PROPERTIES
          Name                #PdsCWRegistered
          Table               #InventSumDelta
          Origin              #{FD7EDD17-3A73-4B16-8F0B-769E530B0603}
          ExtendedDataType    #PdsCWRegistered
        ENDPROPERTIES
        
      FIELD #PdsCWReservOrdered
        REAL
        PROPERTIES
          Name                #PdsCWReservOrdered
          Table               #InventSumDelta
          Origin              #{101E45D2-E4E5-45D4-B22A-F2350A1E9420}
          ExtendedDataType    #PdsCWReservOrdered
        ENDPROPERTIES
        
      FIELD #PdsCWReservPhysical
        REAL
        PROPERTIES
          Name                #PdsCWReservPhysical
          Table               #InventSumDelta
          Origin              #{635AFD24-5258-4010-BDC1-F715DE3705EA}
          ExtendedDataType    #PdsCWReservPhysical
        ENDPROPERTIES
        
      FIELD #PhysicalInvent
        REAL
        PROPERTIES
          Name                #PhysicalInvent
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{D78327F5-B94B-4E5B-B604-CCD348FB3908}
          LegacyId            #19
          ExtendedDataType    #InventQtyPhysicalOnhand
        ENDPROPERTIES
        
      FIELD #PhysicalValue
        REAL
        PROPERTIES
          Name                #PhysicalValue
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{1011BAD6-03E1-486B-8CCA-F022B66A6481}
          LegacyId            #17
          ExtendedDataType    #CostAmountPhysical
        ENDPROPERTIES
        
      FIELD #PhysicalValueSecCur_RU
        REAL
        PROPERTIES
          Name                #PhysicalValueSecCur_RU
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{2A161F42-095D-1000-7359-ABD93A30CE64}
          LegacyId            #8002
          ExtendedDataType    #CostAmountPhysicalSecCur_RU
        ENDPROPERTIES
        
      FIELD #Picked
        REAL
        PROPERTIES
          Name                #Picked
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{9F4A721F-79C7-4757-9979-1FC924070D70}
          LegacyId            #14
          ExtendedDataType    #InventQtyPicked
        ENDPROPERTIES
        
      FIELD #PostedQty
        REAL
        PROPERTIES
          Name                #PostedQty
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{0FDFE7C3-9A90-4455-8D54-3FE34A957EC5}
          LegacyId            #2
          ExtendedDataType    #InventQtyPosted
        ENDPROPERTIES
        
      FIELD #PostedValue
        REAL
        PROPERTIES
          Name                #PostedValue
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{75A5EA4F-ED41-481A-8F3B-48DCC53458D1}
          LegacyId            #3
          ExtendedDataType    #CostAmountPosted
        ENDPROPERTIES
        
      FIELD #PostedValueSecCur_RU
        REAL
        PROPERTIES
          Name                #PostedValueSecCur_RU
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{2A141F41-095D-1000-BAB4-4441D25C9603}
          LegacyId            #8001
          ExtendedDataType    #CostAmountPostedSecCur_RU
        ENDPROPERTIES
        
      FIELD #QuotationIssue
        REAL
        PROPERTIES
          Name                #QuotationIssue
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{4EBF8BF9-360B-4912-8C23-F4505252FE73}
          LegacyId            #10
          ExtendedDataType    #InventQtyQuotationIssue
        ENDPROPERTIES
        
      FIELD #QuotationReceipt
        REAL
        PROPERTIES
          Name                #QuotationReceipt
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{745369FA-214B-4D40-91CD-D0FCD78A1021}
          LegacyId            #11
          ExtendedDataType    #InventQtyQuotationReceipt
        ENDPROPERTIES
        
      FIELD #Received
        REAL
        PROPERTIES
          Name                #Received
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{097849E6-3092-4350-BE7E-06DFDDBA5DC5}
          LegacyId            #5
          ExtendedDataType    #InventQtyReceived
        ENDPROPERTIES
        
      FIELD #Registered
        REAL
        PROPERTIES
          Name                #Registered
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{C368468B-1A9D-4816-9518-500CFF4912F4}
          LegacyId            #13
          ExtendedDataType    #InventQtyRegistered
        ENDPROPERTIES
        
      FIELD #ReservOrdered
        REAL
        PROPERTIES
          Name                #ReservOrdered
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{74BBD2E9-36DD-4DDB-A7FF-7217C337C2EA}
          LegacyId            #7
          ExtendedDataType    #InventQtyReservOrdered
        ENDPROPERTIES
        
      FIELD #ReservPhysical
        REAL
        PROPERTIES
          Name                #ReservPhysical
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{45893503-490F-4946-A2B8-0FB59A0D4686}
          LegacyId            #6
          ExtendedDataType    #InventQtyReservPhysical
        ENDPROPERTIES
        
      FIELD #TTSId
        INT64
        PROPERTIES
          Name                #TTSId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSumDelta
          Origin              #{F3FC915D-1198-470C-A8E5-E66E3477E065}
          LegacyId            #22
          ExtendedDataType    #CreatedTransactionId
        ENDPROPERTIES
        
      FIELD #WMSLocationId
        STRING
        PROPERTIES
          Name                #WMSLocationId
          Table               #InventSumDelta
          IgnoreEDTRelation   #Yes
          Origin              #{5B9C185B-A91A-4B47-AF57-C7713F7D781B}
          ExtendedDataType    #WMSLocationId
        ENDPROPERTIES
        
      FIELD #WMSPalletId
        STRING
        PROPERTIES
          Name                #WMSPalletId
          Table               #InventSumDelta
          IgnoreEDTRelation   #Yes
          Origin              #{2AE67192-FBD9-4DEB-8F79-C430054891BB}
          ExtendedDataType    #WMSPalletId
          StringSize          #18
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #PostedValue
          #PostedQty
          #Deducted
          #Received
          #ReservOrdered
          #ReservPhysical
          #OnOrder
          #Ordered
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AvailablePhysical
        PROPERTIES
          Name                #AvailablePhysical
          Label               #@SYS22389
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostedQty
          #Deducted
          #Picked
          #Received
          #Registered
          #ReservPhysical
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AvailableQuantity
        PROPERTIES
          Name                #AvailableQuantity
          Label               #@SYS54429
        ENDPROPERTIES
        
        GROUPFIELDS
          #AvailOrdered
          #AvailPhysical
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DeltaFields
        PROPERTIES
          Name                #DeltaFields
          Label               #@SYS98311
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostedQty
          #PdsCWPostedQty
          #PostedValue
          #Deducted
          #Received
          #ReservOrdered
          #ReservPhysical
          #OnOrder
          #Ordered
          #QuotationIssue
          #QuotationReceipt
          #Registered
          #Picked
          #AvailOrdered
          #AvailPhysical
          #PhysicalValue
          #Arrived
          #PhysicalInvent
          #PdsCWDeducted
          #PdsCWQuotationReceipt
          #PdsCWQuotationIssue
          #PdsCWArrived
          #PdsCWOrdered
          #PdsCWOnOrder
          #PdsCWReservOrdered
          #PdsCWReservPhysical
          #PdsCWRegistered
          #PdsCWReceived
          #PdsCWPicked
          #PdsCWAvailOrdered
          #PdsCWAvailPhysical
          #PdsCWPhysicalInvent
          #PostedValueSecCur_RU
          #PhysicalValueSecCur_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DeltaFieldsQty
        PROPERTIES
          Name                #DeltaFieldsQty
          Label               #@SYS98312
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostedQty
          #PdsCWPostedQty
          #Deducted
          #Picked
          #Received
          #Registered
          #ReservPhysical
          #ReservOrdered
          #OnOrder
          #Ordered
          #Arrived
          #QuotationIssue
          #QuotationReceipt
          #PdsCWDeducted
          #PdsCWPicked
          #PdsCWReceived
          #PdsCWRegistered
          #PdsCWReservPhysical
          #PdsCWReservOrdered
          #PdsCWOnOrder
          #PdsCWOrdered
          #PdsCWArrived
          #PdsCWQuotationIssue
          #PdsCWQuotationReceipt
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@Sys5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #InventDimId
          #TTSId
          #IsAggregated
          #AggregationCounter
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LastDate
        PROPERTIES
          Name                #LastDate
          Label               #@SYS15992
        ENDPROPERTIES
        
        GROUPFIELDS
          #LastUpdDatePhysical
          #LastUpdDateExpected
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PhysicalInventory
        PROPERTIES
          Name                #PhysicalInventory
          Label               #@SYS23942
        ENDPROPERTIES
        
        GROUPFIELDS
          #PhysicalInvent
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #System
        PROPERTIES
          Name                #System
          Label               #@SYS4278
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TotalAvailable
        PROPERTIES
          Name                #TotalAvailable
          Label               #@SYS24243
        ENDPROPERTIES
        
        GROUPFIELDS
          #Arrived
          #Ordered
          #ReservOrdered
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Value
        PROPERTIES
          Name                #Value
          Label               #@SYS11762
        ENDPROPERTIES
        
        GROUPFIELDS
          #PhysicalValue
          #PostedValue
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ValueSecCur_RU
        PROPERTIES
          Name                #ValueSecCur_RU
          Label               #@SYS22515
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostedValueSecCur_RU
          #PhysicalValueSecCur_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Various
        PROPERTIES
          Name                #Various
          Label               #@SYS28008
        ENDPROPERTIES
        
        GROUPFIELDS
          #OnOrder
          #QuotationReceipt
          #QuotationIssue
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #TTSItemDimIdx
      PROPERTIES
        Name                #TTSItemDimIdx
        AllowDuplicates     #No
        Origin              #{2B0D0001-095D-1000-67DD-BC0C6EC97F44}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #TTSId
        #ItemId
        #InventDimId
        #IsAggregated
        #AggregationCounter
        #RecId
      ENDINDEXFIELDS
      
      #TTSDimIdx
      PROPERTIES
        Name                #TTSDimIdx
        Origin              #{2B090002-095D-1000-FCA8-6544696D4964}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #TTSId
        #InventDimId
      ENDINDEXFIELDS
      
      #AggregationIdx
      PROPERTIES
        Name                #AggregationIdx
        Origin              #{A1E055C9-DE29-4A56-A290-BEB712937536}
      ENDPROPERTIES
      
      INDEXFIELDS
        #TTSId
        #AggregationCounter
        #IsAggregated
        #dataAreaId
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #InventDim
        PROPERTIES
          Name                #InventDim
          Table               #InventDim
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #InventDimId
            RelatedField        #inventDimId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventSum
        PROPERTIES
          Name                #InventSum
          Table               #InventSum
          EntityRelationshipRole  #@SYS123816
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #InventDimId
            RelatedField        #InventDimId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventTable
        PROPERTIES
          Name                #InventTable
          Table               #InventTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #availOrderedCalculate
        #private InventQtyAvailOrdered   availOrderedCalculate()
        #{
        #    return this.AvailPhysical + this.Ordered + this.Arrived - this.ReservOrdered - this.OnOrder;
        #}
      ENDSOURCE
      SOURCE #availPhysicalCalculate
        #private InventQtyAvailPhysical availPhysicalCalculate()
        #{
        #    return this.PhysicalInvent - this.ReservPhysical;
        #}
      ENDSOURCE
      SOURCE #initFromInventSum
        #public void initFromInventSum(InventSum _inventSum)
        #{
        #    this.PostedQty        += _inventSum.PostedQty;
        #    this.PostedValue      += _inventSum.PostedValue;
        #    this.Deducted         += _inventSum.Deducted;
        #    this.Received         += _inventSum.Received;
        #    this.ReservPhysical   += _inventSum.ReservPhysical;
        #    this.ReservOrdered    += _inventSum.ReservOrdered;
        #    this.OnOrder          += _inventSum.OnOrder;
        #    this.Ordered          += _inventSum.Ordered;
        #    this.QuotationIssue   += _inventSum.QuotationIssue;
        #    this.QuotationReceipt += _inventSum.QuotationReceipt;
        #    this.Registered       += _inventSum.Registered;
        #    this.Picked           += _inventSum.Picked;
        #    this.AvailOrdered     += _inventSum.AvailOrdered;
        #    this.AvailPhysical    += _inventSum.AvailPhysical;
        #    this.PhysicalValue    += _inventSum.PhysicalValue;
        #    this.Arrived          += _inventSum.Arrived;
        #    this.PhysicalInvent   += _inventSum.PhysicalInvent;
        #    // <GEERU>
        #    this.PhysicalValueSecCur_RU += _inventSum.PhysicalValueSecCur_RU;
        #    this.PostedValueSecCur_RU   += _inventSum.PostedValueSecCur_RU;
        #    // </GEERU>
        #    this.PdsCWPostedQty        += _inventSum.PdsCWPostedQty;
        #    this.PdsCWDeducted         += _inventSum.PdsCWDeducted;
        #    this.PdsCWReceived         += _inventSum.PdsCWReceived;
        #    this.PdsCWReservPhysical   += _inventSum.PdsCWReservPhysical;
        #    this.PdsCWReservOrdered    += _inventSum.PdsCWReservOrdered;
        #    this.PdsCWOnOrder          += _inventSum.PdsCWOnOrder;
        #    this.PdsCWOrdered          += _inventSum.PdsCWOrdered;
        #    this.PdsCWQuotationIssue   += _inventSum.PdsCWQuotationIssue;
        #    this.PdsCWQuotationReceipt += _inventSum.PdsCWQuotationReceipt;
        #    this.PdsCWRegistered       += _inventSum.PdsCWRegistered;
        #    this.PdsCWPicked           += _inventSum.PdsCWPicked;
        #    this.PdsCWAvailOrdered     += _inventSum.PdsCWAvailOrdered;
        #    this.PdsCWAvailPhysical    += _inventSum.PdsCWAvailPhysical;
        #    this.PdsCWArrived          += _inventSum.PdsCWArrived;
        #    this.PdsCWPhysicalInvent   += _inventSum.PdsCWPhysicalInvent;
        #    if (this.LastUpdDatePhysical < _inventSum.LastUpdDatePhysical)
        #    {
        #        this.LastUpdDatePhysical  = _inventSum.LastUpdDatePhysical;
        #    }
        #
        #    if (this.LastUpdDateExpected < _inventSum.LastUpdDateExpected)
        #    {
        #        this.LastUpdDateExpected  = _inventSum.LastUpdDateExpected;
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromInventSumDeltaAggrSumView
        #/// <summary>
        #/// Initializes the buffer based on the InventSumDeltaAggrSumView buffer.
        #/// </summary>
        #/// <param name="_inventSumDeltaAggrSumView">
        #/// An <c>InventSumDeltaAggrSumView</c> buffer.
        #/// </param>
        #public void initFromInventSumDeltaAggrSumView(InventSumDeltaAggrSumView _inventSumDeltaAggrSumView)
        #{
        #    this.ItemId             = _inventSumDeltaAggrSumView.ItemId;
        #    this.InventDimId        = _inventSumDeltaAggrSumView.InventDimId;
        #    DEV_InventSumFields::updateInventSumDeltaFromAggrView(this, _inventSumDeltaAggrSumView);//InventDim fields in InventSum, dtrunin
        #
        #    this.PostedQty          = _inventSumDeltaAggrSumView.PostedQty;
        #    this.PostedValue        = _inventSumDeltaAggrSumView.PostedValue;
        #    this.Deducted           = _inventSumDeltaAggrSumView.Deducted;
        #    this.Received           = _inventSumDeltaAggrSumView.Received;
        #    this.ReservPhysical     = _inventSumDeltaAggrSumView.ReservPhysical;
        #    this.ReservOrdered      = _inventSumDeltaAggrSumView.ReservOrdered;
        #    this.OnOrder            = _inventSumDeltaAggrSumView.OnOrder;
        #    this.Ordered            = _inventSumDeltaAggrSumView.Ordered;
        #    this.QuotationIssue     = _inventSumDeltaAggrSumView.QuotationIssue;
        #    this.QuotationReceipt   = _inventSumDeltaAggrSumView.QuotationReceipt;
        #    this.Registered         = _inventSumDeltaAggrSumView.Registered;
        #    this.Picked             = _inventSumDeltaAggrSumView.Picked;
        #    this.AvailOrdered       = _inventSumDeltaAggrSumView.AvailOrdered;
        #    this.AvailPhysical      = _inventSumDeltaAggrSumView.AvailPhysical;
        #    this.PhysicalValue      = _inventSumDeltaAggrSumView.PhysicalValue;
        #    this.Arrived            = _inventSumDeltaAggrSumView.Arrived;
        #    this.PhysicalInvent     = _inventSumDeltaAggrSumView.PhysicalInvent;
        #
        #    this.PdsCWPostedQty        = _inventSumDeltaAggrSumView.PdsCWPostedQty;
        #    this.PdsCWDeducted         = _inventSumDeltaAggrSumView.PdsCWDeducted;
        #    this.PdsCWReceived         = _inventSumDeltaAggrSumView.PdsCWReceived;
        #    this.PdsCWReservPhysical   = _inventSumDeltaAggrSumView.PdsCWReservPhysical;
        #    this.PdsCWReservOrdered    = _inventSumDeltaAggrSumView.PdsCWReservOrdered;
        #    this.PdsCWOnOrder          = _inventSumDeltaAggrSumView.PdsCWOnOrder;
        #    this.PdsCWOrdered          = _inventSumDeltaAggrSumView.PdsCWOrdered;
        #    this.PdsCWQuotationIssue   = _inventSumDeltaAggrSumView.PdsCWQuotationIssue;
        #    this.PdsCWQuotationReceipt = _inventSumDeltaAggrSumView.PdsCWQuotationReceipt;
        #    this.PdsCWRegistered       = _inventSumDeltaAggrSumView.PdsCWRegistered;
        #    this.PdsCWPicked           = _inventSumDeltaAggrSumView.PdsCWPicked;
        #    this.PdsCWAvailOrdered     = _inventSumDeltaAggrSumView.PdsCWAvailOrdered;
        #    this.PdsCWAvailPhysical    = _inventSumDeltaAggrSumView.PdsCWAvailPhysical;
        #    this.PdsCWArrived          = _inventSumDeltaAggrSumView.PdsCWArrived;
        #    this.PdsCWPhysicalInvent   = _inventSumDeltaAggrSumView.PdsCWPhysicalInvent;
        #    // <GEERU>
        #    this.PhysicalValueSecCur_RU = _inventSumDeltaAggrSumView.PhysicalValueSecCur_RU;
        #    this.PostedValueSecCur_RU   = _inventSumDeltaAggrSumView.PostedValueSecCur_RU;
        #    // </GEERU>
        #    this.LastUpdDatePhysical  = _inventSumDeltaAggrSumView.LastUpdDatePhysical;
        #    this.LastUpdDateExpected  = _inventSumDeltaAggrSumView.LastUpdDateExpected;
        #}
      ENDSOURCE
      SOURCE #initFromInventTrans
        #public void initFromInventTrans(InventTrans _inventTrans)
        #{
        #    this.ItemId             = _inventTrans.ItemId;
        #    this.InventDimId        = _inventTrans.InventDimId;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    this.setAvailFields();
        #    DEV_InventSumFields::updateInventSumDeltaFromDimId(this);//InventDim fields in InventSum, dtrunin
        #    super();
        #}
      ENDSOURCE
      SOURCE #merge
        #public void merge(Common _mergeInto)
        #{
        #    InventSumDelta mergeIntoSumDelta;
        #    if (_mergeInto is InventSumDelta)
        #    {
        #        mergeIntoSumDelta = _mergeInto as InventSumDelta;
        #        mergeIntoSumDelta.PostedQty        += this.PostedQty;
        #        mergeIntoSumDelta.PostedValue      += this.PostedValue;
        #        mergeIntoSumDelta.Deducted         += this.Deducted;
        #        mergeIntoSumDelta.Received         += this.Received;
        #        mergeIntoSumDelta.ReservPhysical   += this.ReservPhysical;
        #        mergeIntoSumDelta.ReservOrdered    += this.ReservOrdered;
        #        mergeIntoSumDelta.OnOrder          += this.OnOrder;
        #        mergeIntoSumDelta.Ordered          += this.Ordered;
        #        mergeIntoSumDelta.QuotationIssue   += this.QuotationIssue;
        #        mergeIntoSumDelta.QuotationReceipt += this.QuotationReceipt;
        #        mergeIntoSumDelta.Registered       += this.Registered;
        #        mergeIntoSumDelta.Picked           += this.Picked;
        #        mergeIntoSumDelta.AvailOrdered     += this.AvailOrdered;
        #        mergeIntoSumDelta.AvailPhysical    += this.AvailPhysical;
        #        mergeIntoSumDelta.PhysicalValue    += this.PhysicalValue;
        #        mergeIntoSumDelta.Arrived          += this.Arrived;
        #        mergeIntoSumDelta.PhysicalInvent   += this.PhysicalInvent;
        #        // <GEERU>
        #        mergeIntoSumDelta.PhysicalValueSecCur_RU += this.PhysicalValueSecCur_RU;
        #        mergeIntoSumDelta.PostedValueSecCur_RU   += this.PostedValueSecCur_RU;
        #        // </GEERU>
        #        mergeIntoSumDelta.PdsCWPostedQty        += this.PdsCWPostedQty;
        #        mergeIntoSumDelta.PdsCWDeducted         += this.PdsCWDeducted;
        #        mergeIntoSumDelta.PdsCWReceived         += this.PdsCWReceived;
        #        mergeIntoSumDelta.PdsCWReservPhysical   += this.PdsCWReservPhysical;
        #        mergeIntoSumDelta.PdsCWReservOrdered    += this.PdsCWReservOrdered;
        #        mergeIntoSumDelta.PdsCWOnOrder          += this.PdsCWOnOrder;
        #        mergeIntoSumDelta.PdsCWOrdered          += this.PdsCWOrdered;
        #        mergeIntoSumDelta.PdsCWQuotationIssue   += this.PdsCWQuotationIssue;
        #        mergeIntoSumDelta.PdsCWQuotationReceipt += this.PdsCWQuotationReceipt;
        #        mergeIntoSumDelta.PdsCWRegistered       += this.PdsCWRegistered;
        #        mergeIntoSumDelta.PdsCWPicked           += this.PdsCWPicked;
        #        mergeIntoSumDelta.PdsCWAvailOrdered     += this.PdsCWAvailOrdered;
        #        mergeIntoSumDelta.PdsCWAvailPhysical    += this.PdsCWAvailPhysical;
        #        mergeIntoSumDelta.PdsCWArrived          += this.PdsCWArrived;
        #        mergeIntoSumDelta.PdsCWPhysicalInvent   += this.PdsCWPhysicalInvent;
        #        if (mergeIntoSumDelta.LastUpdDatePhysical < this.LastUpdDatePhysical)
        #        {
        #            mergeIntoSumDelta.LastUpdDatePhysical  = this.LastUpdDatePhysical;
        #        }
        #
        #        if (mergeIntoSumDelta.LastUpdDateExpected < this.LastUpdDateExpected)
        #        {
        #            mergeIntoSumDelta.LastUpdDateExpected  = this.LastUpdDateExpected;
        #        }
        #    }
        #
        #    super(_mergeInto);
        #}
      ENDSOURCE
      SOURCE #pdsCWAvailOrderedCalculated
        #//BP Deviation documented
        #public display PdsCWAvailOrdered pdsCWAvailOrderedCalculated(boolean _inclAvailPhysical = true)
        #{
        #    return (_inclAvailPhysical ? this.pdsCWAvailPhysicalCalculated() : 0)
        #        + this.PdsCWOrdered
        #        + this.PdsCWArrived
        #        - this.PdsCWReservOrdered
        #        - this.PdsCWOnOrder;
        #}
      ENDSOURCE
      SOURCE #pdsCWAvailPhysicalCalculated
        #//BP Deviation documented
        #public display PdsCWAvailPhysical pdsCWAvailPhysicalCalculated()
        #{
        #    return (this.pdsCWPhysicalInventCalculated() - this.PdsCWReservPhysical);
        #}
      ENDSOURCE
      SOURCE #pdsCWPhysicalInventCalculated
        #
        #//BP Deviation documented
        #public display PdsCWPhysicalInvent pdsCWPhysicalInventCalculated()
        #{
        #    return this.PdsCWPostedQty
        #        + this.PdsCWReceived
        #        - this.PdsCWDeducted
        #        + this.PdsCWRegistered
        #        - this.PdsCWPicked;
        #}
      ENDSOURCE
      SOURCE #physicalInventCalculate
        #private InventQtyPhysicalOnhand physicalInventCalculate()
        #{
        #    return this.PostedQty + this.Received - this.Deducted + this.Registered - this.Picked;
        #}
      ENDSOURCE
      SOURCE #setAvailFields
        #private void setAvailFields()
        #{
        #    this.PhysicalInvent = this.physicalInventCalculate();    // The order is important as values are dependent
        #    this.AvailPhysical  = this.availPhysicalCalculate();
        #    this.AvailOrdered   = this.availOrderedCalculate();
        #    this.PdsCWAvailOrdered  = this.pdsCWAvailOrderedCalculated();
        #    this.PdsCWAvailPhysical = this.pdsCWAvailPhysicalCalculated();
        #    this.PdsCWPhysicalInvent = this.pdsCWPhysicalInventCalculated();
        #
        #}
      ENDSOURCE
      SOURCE #update
        #public void update()
        #{
        #    this.setAvailFields();
        #
        #    //InventDim fields in InventSum, dtrunin -->
        #    if (this.InventDimId != this.orig().InventDimId)
        #    {
        #        DEV_InventSumFields::updateInventSumDeltaFromDimId(this);
        #    }
        #    //InventDim fields in InventSum, dtrunin <--
        #    super();
        #}
      ENDSOURCE
      SOURCE #aggrCountFactorCombineNonAggregatedRecs
        #/// <summary>
        #/// Returns an integer that determines when non-aggregated <c>InventSumDelta</c> records will be attempted to be combined.
        #/// </summary>
        #/// <returns>
        #/// The number 100.
        #/// </returns>
        #public static int aggrCountFactorCombineNonAggregatedRecs()
        #{
        #    return 100;
        #}
      ENDSOURCE
      SOURCE #cleanupAggrCounter
        #/// <summary>
        #/// Remove aggregated records not needed any more.
        #/// </summary>
        #/// <param name="_aggregationCnt">
        #/// The aggregation counter ID for the records to be removed.
        #/// </param>
        #
        #static public void cleanupAggrCounter(Counter _aggregationCnt)
        #{
        #    if (_aggregationCnt)
        #    {
        #        appl.inventUpdateOnhandGlobal().inventUpdateOnhand().cleanupAggrCounter(_aggregationCnt);
        #    }
        #}
      ENDSOURCE
      SOURCE #combineNonAggregated
        #/// <summary>
        #///    Combines non-aggregated records where many records for the same set of dimensions exist.
        #/// </summary>
        #/// <param name="_ttsId">
        #///    The identification of the transaction ID being processed.
        #/// </param>
        #
        #static private void combineNonAggregated(CreatedTransactionId _ttsId)
        #{
        #    InventUpdateOnhand      inventUpdateOnhand = appl.inventUpdateOnhandGlobal().inventUpdateOnhand();
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbds = query.addDataSource(tableNum(InventSumDelta));
        #    QueryHavingFilter       havingFilter;
        #    QueryRun                queryRun;
        #
        #    InventSumDelta          inventSumDelta;
        #    InventSumDelta          inventSumDeltaDelete;
        #    RecordInsertList        recordInsertList;
        #    ItemId                  previousItemId;
        #    Counter                 itemAddedCounter;
        #
        #    qbds.addRange(fieldNum(InventSumDelta, IsAggregated)).value(queryValue(NoYes::No));
        #    qbds.addRange(fieldNum(InventSumDelta, ttsId)).value(queryValue(_ttsId));
        #    qbds.addGroupByField(fieldNum(InventSumDelta, ttsId));
        #    qbds.addGroupByField(fieldNum(InventSumDelta, ItemId));
        #    qbds.addGroupByField(fieldNum(InventSumDelta, InventDimId));
        #    InventSumDelta::queryAddSumFields(qbds);
        #
        #    // combine those with more than 10 records with same dimensions as too many records slow down generation of aggregated sums
        #    havingFilter = query.addHavingFilter(qbds, fieldStr(InventSumDelta, ItemId), AggregateFunction::Count);
        #    havingFilter.value('10..');
        #
        #    queryRun = new QueryRun(query);
        #    while (queryRun.next())
        #    {
        #        inventSumDelta = queryRun.get(tableNum(InventSumDelta));
        #
        #        if (previousItemId != inventSumDelta.ItemId)
        #        {
        #            if (previousItemId)
        #            {
        #                inventUpdateOnhand.addInventSumDeltaNonAggrCountItem(previousItemId,itemAddedCounter);
        #            }
        #            itemAddedCounter    = 0;
        #        }
        #        previousItemId      = inventSumDelta.ItemId;
        #        itemAddedCounter++;
        #
        #        // Delete the existing records
        #        delete_from inventSumDeltaDelete
        #            where inventSumDeltaDelete.ttsId        == _ttsId
        #               && inventSumDeltaDelete.ItemId       == inventSumDelta.ItemId
        #               && inventSumDeltaDelete.InventDimId  == inventSumDelta.InventDimId
        #               && inventSumDeltaDelete.IsAggregated == NoYes::No;
        #
        #        //subtract the deleted count since that needs to be adjusted as well
        #        itemAddedCounter -= inventSumDeltaDelete.RowCount();
        #
        #        // insert the new combined record
        #        inventSumDelta.IsAggregated = NoYes::No;
        #
        #        if (!recordInsertList)
        #        {
        #            recordInsertList = new RecordInsertList(tableNum(InventSumDelta));
        #        }
        #        recordInsertList.add(inventSumDelta);
        #
        #    }
        #
        #    //handle results from the last iteration
        #    if (previousItemId)
        #    {
        #        inventUpdateOnhand.addInventSumDeltaNonAggrCountItem(previousItemId,itemAddedCounter);
        #    }
        #
        #    if (recordInsertList)
        #    {
        #        recordInsertList.insertDatabase();
        #    }
        #}
      ENDSOURCE
      SOURCE #findSumDelta
        #static public InventSumDelta findSumDelta(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm,
        #    InventSumFields     _sumFields  = InventSumFields::All)
        #{
        #    InventSumDelta  inventSumDelta;
        #    InventDim       inventDim;
        #
        #    switch (_sumFields)
        #    {
        #        case InventSumFields::Financial:
        #            select sum(PostedQty),sum(PostedValue)
        #            , sum(PdsCWPostedQty)
        #            // <GEERU>
        #            , sum(PostedValueSecCur_RU)
        #            // </GEERU>
        #            from inventSumDelta
        #                where inventSumDelta.ItemId         == _itemId   &&
        #                      inventSumDelta.IsAggregated   == NoYes::No &&
        #                      inventSumDelta.ttsId          == appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId()
        #            #inventDimExistsJoin(inventSumDelta.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
        #            break;
        #
        #        case InventSumFields::Physical:
        #            select sum(PostedQty),sum(PostedValue),sum(Received),sum(Deducted),sum(Picked),sum(Registered)
        #            , sum(PdsCWPostedQty)
        #            , sum(PdsCWReceived)
        #            , sum(PdsCWDeducted)
        #            , sum(PdsCWPicked)
        #            , sum(PdsCWRegistered)
        #            // <GEERU>
        #            , sum(PostedValueSecCur_RU)
        #            // </GEERU>
        #            from inventSumDelta
        #                where inventSumDelta.ItemId         == _itemId   &&
        #                      inventSumDelta.IsAggregated   == NoYes::No &&
        #                      inventSumDelta.ttsId          == appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId()
        #            #inventDimExistsJoin(inventSumDelta.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
        #            break;
        #
        #        default:
        #            select
        #            #inventSumFields
        #            from inventSumDelta
        #                where inventSumDelta.ItemId         == _itemId   &&
        #                      inventSumDelta.IsAggregated   == NoYes::No &&
        #                      inventSumDelta.ttsId          == appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId()
        #            #inventDimExistsJoin(inventSumDelta.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
        #    }
        #    return inventSumDelta;
        #}
      ENDSOURCE
      SOURCE #findSumDeltaDimId
        #static public InventSumDelta findSumDeltaDimId(
        #    ItemId              _itemId,
        #    InventDimId         _inventDimId,
        #    InventSumFields     _sumFields  = InventSumFields::All)
        #{
        #    InventSumDelta  inventSumDelta;
        #
        #    switch (_sumFields)
        #    {
        #        case InventSumFields::Financial:
        #            select sum(PostedQty),sum(PostedValue)
        #            , sum(PdsCWPostedQty)
        #            // <GEERU>
        #            , sum(PostedValueSecCur_RU)
        #            // </GEERU>
        #            from inventSumDelta
        #                where inventSumDelta.ItemId         == _itemId      &&
        #                      inventSumDelta.InventDimId    == _inventDimId &&
        #                      inventSumDelta.IsAggregated   == NoYes::No    &&
        #                      inventSumDelta.ttsId          == appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId();
        #            break;
        #
        #        case InventSumFields::Physical:
        #            select sum(PostedQty),sum(PostedValue),sum(Received),sum(Deducted),sum(Picked),sum(Registered)
        #            , sum(PdsCWPostedQty),sum(PdsCWReceived),sum(PdsCWDeducted),sum(PdsCWPicked),sum(PdsCWRegistered)
        #            // <GEERU>
        #            , sum(PostedValueSecCur_RU)
        #            // </GEERU>
        #            from inventSumDelta
        #                where inventSumDelta.ItemId         == _itemId      &&
        #                      inventSumDelta.InventDimId    == _inventDimId &&
        #                      inventSumDelta.IsAggregated   == NoYes::No    &&
        #                      inventSumDelta.ttsId          == appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId();
        #            break;
        #
        #        default:
        #            select
        #            #inventSumFields
        #            from inventSumDelta
        #                where inventSumDelta.ItemId         == _itemId      &&
        #                      inventSumDelta.InventDimId    == _inventDimId &&
        #                      inventSumDelta.IsAggregated   == NoYes::No    &&
        #                      inventSumDelta.ttsId          == appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId();
        #    }
        #    return inventSumDelta;
        #}
      ENDSOURCE
      SOURCE #limitBeforeUsingSetBasedInsToSummarize
        #/// <summary>
        #/// Returns an integer that determines when a set-based insert will be used when <c>InventSumDelta</c> records are aggregated using the summarizeDelta methods.
        #/// </summary>
        #/// <returns>
        #/// The number 200.
        #/// </returns>
        #/// <remarks>
        #/// The limit for when it is optimal to switch to a set-based insert may vary dependent on system setup so this method should be overlayered if needed.
        #/// </remarks>
        #public static int limitBeforeUsingSetBasedInsToSummarize()
        #{
        #    return 200;
        #}
      ENDSOURCE
      SOURCE #newQuery
        #/// <summary>
        #///    Creates a query to find on hand delta for the specified parameters.
        #/// </summary>
        #/// <param name="_itemId">
        #///    The item.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #///    The inventory dimensions to limit to.
        #/// </param>
        #/// <param name="_inventDimParmCriteria">
        #///    Identification of which dimensions to limit to.
        #/// </param>
        #/// <param name="_inventDimParmGroupBy">
        #///    Identification of which dimensions to group the result by.
        #/// </param>
        #/// <returns>
        #///    A query to find on hand delta for the specified parameters.
        #/// </returns>
        #client server static public Query newQuery(
        #    ItemId          _itemId,
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParmCriteria,
        #    InventDimParm   _inventDimParmGroupBy)
        #{
        #    Query                   onHandDeltaQuery;
        #    QueryBuildDataSource    dsSumDelta;
        #    QueryBuildDataSource    dsDim;
        #    str                     itemIdCriteria;
        #
        #    onHandDeltaQuery = new Query();
        #
        #    dsSumDelta = onHandDeltaQuery.addDataSource(tableNum(InventSumDelta));
        #    dsSumDelta.addRange(fieldNum(InventSumDelta, ttsId)).value(queryValue(appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId()));
        #    dsSumDelta.addRange(fieldNum(InventSumDelta, IsAggregated)).value(queryValue(NoYes::No));
        #
        #    dsDim = dsSumDelta.addDataSource(tableNum(InventDim));
        #    dsDim.joinMode(JoinMode::InnerJoin);
        #    dsDim.relations(true);
        #
        #    if (_inventDimParmCriteria.ItemIdFlag)
        #    {
        #        itemIdCriteria = _itemId ? queryValue(_itemId) : SysQuery::valueEmptyString();
        #        dsSumDelta.addRange(fieldNum(InventSumDelta, ItemId)).value(itemIdCriteria);
        #    }
        #
        #    if (_inventDimParmGroupBy.ItemIdFlag)
        #    {
        #        dsSumDelta.addSortField(fieldNum(InventSumDelta, ItemId));
        #        dsSumDelta.orderMode(OrderMode::GroupBy);
        #    }
        #
        #    InventSumDelta::queryAddSumFields(dsSumDelta);
        #
        #    InventDim::queryDatasourceAddRangeSortFromParms(dsDim, false, _inventDimCriteria, _inventDimParmCriteria, _inventDimParmGroupBy, InventDim::dimFieldsList());
        #
        #    return onHandDeltaQuery;
        #}
      ENDSOURCE
      SOURCE #newQueryAggregated
        #client server static public Query newQueryAggregated(
        #    Query               _query,
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParmCriteria,
        #    InventDimParm       _inventDimParmGroupBy,
        #    Counter             _aggregationCounter)
        #{
        #    QueryBuildDataSource    qbsSumDelta;
        #    QueryBuildDataSource    qbsDim;
        #    QueryBuildRange         queryRange;
        #    boolean                 doFindRange;
        #
        #    if (!_query)
        #    {
        #        _query = new Query();
        #    }
        #
        #    if (_query.dataSourceTable(tableNum(InventSumDelta)))
        #    {
        #        qbsSumDelta = _query.dataSourceTable(tableNum(InventSumDelta));
        #        qbsSumDelta.sortClear();
        #
        #        doFindRange = true;
        #    }
        #    else
        #    {
        #        qbsSumDelta = _query.addDataSource(tableNum(InventSumDelta));
        #    }
        #
        #    if (_query.dataSourceTable(tableNum(InventDim)))
        #    {
        #        qbsDim = _query.dataSourceTable(tableNum(InventDim));
        #        qbsDim.sortClear();
        #
        #        doFindRange = true;
        #    }
        #    else
        #    {
        #        qbsDim = qbsSumDelta.addDataSource(tableNum(InventDim));
        #    }
        #
        #    qbsDim.joinMode(JoinMode::InnerJoin);
        #    qbsDim.relations(true);
        #
        #    queryRange = SysQuery::findOrCreateRange(qbsSumDelta, fieldNum(InventSumDelta,IsAggregated));
        #    queryRange.value(queryValue(NoYes::Yes));
        #
        #    queryRange = SysQuery::findOrCreateRange(qbsSumDelta, fieldNum(InventSumDelta,AggregationCounter));
        #    queryRange.value(queryValue(_aggregationCounter));
        #
        #    queryRange = SysQuery::findOrCreateRange(qbsSumDelta, fieldNum(InventSumDelta,ttsId));
        #    queryRange.value(queryValue(appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId()));
        #
        #    if (_inventDimParmCriteria.ItemIdFlag)
        #    {
        #        queryRange = doFindRange ? qbsSumDelta.findRange(fieldNum(InventSumDelta,ItemId)) : null;
        #        if (! queryRange)
        #        {
        #            queryRange = qbsSumDelta.addRange(fieldNum(InventSumDelta,ItemId));
        #        }
        #
        #        if (_itemId)
        #        {
        #            queryRange.value(queryValue(_itemId));
        #        }
        #        else
        #        {
        #            queryRange.value(SysQuery::valueEmptyString());
        #        }
        #    }
        #
        #    if (_inventDimParmGroupBy.ItemIdFlag)
        #    {
        #        qbsSumDelta.addSortField(fieldNum(InventSumDelta,ItemId));
        #        qbsSumDelta.orderMode(OrderMode::GroupBy);
        #    }
        #
        #    InventSumDelta::queryAddSumFields(qbsSumDelta);
        #    InventDim::queryDatasourceAddRangeSortFromParms(qbsDim,doFindRange,_inventDimCriteria,_inventDimParmCriteria,_inventDimParmGroupBy);
        #
        #    return _query;
        #}
      ENDSOURCE
      SOURCE #queryAddSumFields
        #static
        #public
        #void queryAddSumFields(
        #    QueryBuildDataSource    _qbS,
        #    boolean                 _onlyAvail = false)
        #{
        #    QueryBuildFieldList qbfl = _qbS.fields();
        #    Set                 fields  = new Set(Types::Integer);
        #    Counter     i;
        #
        #    void addField(FieldId fieldId, SelectionField _fieldType = SelectionField::Sum)
        #    {
        #        if (!fields.in(fieldId))
        #        {
        #            qbfl.addField(fieldId, _fieldType);
        #        }
        #    }
        #
        #    for (i=1;i<=qbfl.fieldCount();i++)
        #    {
        #        if (qbfl.fieldKind(i) == SelectionField::Sum || qbfl.fieldKind(i) == SelectionField::Min)
        #        {
        #            fields.add(qbfl.field(i));
        #        }
        #    }
        #
        #    if (! _onlyAvail)
        #    {
        #        addField(fieldNum(InventSumDelta,PostedQty));
        #        addField(fieldNum(InventSumDelta,PostedValue));
        #        addField(fieldNum(InventSumDelta,PhysicalValue));
        #        addField(fieldNum(InventSumDelta,Deducted));
        #        addField(fieldNum(InventSumDelta,Registered));
        #        addField(fieldNum(InventSumDelta,Received));
        #        addField(fieldNum(InventSumDelta,Picked));
        #        addField(fieldNum(InventSumDelta,ReservPhysical));
        #        addField(fieldNum(InventSumDelta,ReservOrdered));
        #        addField(fieldNum(InventSumDelta,OnOrder));
        #        addField(fieldNum(InventSumDelta,Ordered));
        #        addField(fieldNum(InventSumDelta,Arrived));
        #        addField(fieldNum(InventSumDelta,QuotationReceipt));
        #        addField(fieldNum(InventSumDelta,QuotationIssue));
        #        addField(fieldNum(InventSumDelta,PhysicalInvent));
        #        // <GEERU>
        #        addField(fieldNum(InventSumDelta,PhysicalValueSecCur_RU));
        #        addField(fieldNum(InventSumDelta,PostedValueSecCur_RU));
        #        // </GEERU>
        #        addField(fieldNum(InventSum,PdsCWPostedQty));
        #        addField(fieldNum(InventSum,PdsCWDeducted));
        #        addField(fieldNum(InventSum,PdsCWRegistered));
        #        addField(fieldNum(InventSum,PdsCWReceived));
        #        addField(fieldNum(InventSum,PdsCWPicked));
        #        addField(fieldNum(InventSum,PdsCWReservPhysical));
        #        addField(fieldNum(InventSum,PdsCWReservOrdered));
        #        addField(fieldNum(InventSum,PdsCWOnOrder));
        #        addField(fieldNum(InventSum,PdsCWOrdered));
        #        addField(fieldNum(InventSum,PdsCWArrived));
        #        addField(fieldNum(InventSum,PdsCWQuotationReceipt));
        #        addField(fieldNum(InventSum,PdsCWQuotationIssue));
        #        addField(fieldNum(InventSum,PdsCWPhysicalInvent));
        #    }
        #
        #    addField(fieldNum(InventSumDelta,AvailPhysical));
        #    addField(fieldNum(InventSumDelta,AvailOrdered));
        #    addField(fieldNum(InventSum,PdsCWAvailPhysical));
        #    addField(fieldNum(InventSum,PdsCWAvailOrdered));
        #    addField(fieldNum(InventSumDelta,LastUpdDatePhysical), SelectionField::Max);
        #    addField(fieldNum(InventSumDelta,LastUpdDateExpected), SelectionField::Min);
        #}
      ENDSOURCE
      SOURCE #summarizeDeltaRecords
        #/// <summary>
        #/// Creates new <c>InventSumDelta</c> records that are a summation of the <c>InventSumDelta</c> and
        #/// <c>InventSum</c> records that exist.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> value for which sum records should be created.
        #/// </param>
        #/// <param name="_limitBeforeUsingSetBasedinsert">
        #/// A number that will determine when a set-based insert is used. Optional.
        #/// </param>
        #/// <param name="_aggrCountFactorCombineNonAggrRecs">
        #/// A number that will determines when non-aggregated records should be combined . Optional.
        #/// </param>
        #/// <returns>
        #/// A counter that can be used to identify the <c>InventSumDelta</c> records that were created based on
        #/// the <c>AggregationCounter</c> field.
        #/// </returns>
        #public static server Counter summarizeDeltaRecords(
        #    ItemId  _itemId,
        #    int     _limitBeforeUsingSetBasedinsert     = InventSumDelta::limitBeforeUsingSetBasedInsToSummarize(),
        #    int     _aggrCountFactorCombineNonAggrRecs  = InventSumDelta::aggrCountFactorCombineNonAggregatedRecs())
        #{
        #    InventSumDelta              inventSumDeltaSum;
        #    InventUpdateOnhand          inventUpdateOnhand  = appl.inventUpdateOnhandGlobal().inventUpdateOnhand();
        #    CreatedTransactionId        ttsId               = inventUpdateOnhand.ttsId();
        #    Counter                     aggrCnt             = inventUpdateOnhand.nextAggregationCnt();
        #    InventSumDeltaAggrSumView   inventSumDeltaAggrSumView;
        #    NoYes                       isAggregated = NoYes::Yes;
        #    Counter                     deltaRecordsAddedForItem;
        #
        #    if (aggrCnt mod _aggrCountFactorCombineNonAggrRecs == 0)   // Only do this for large transactions and only every 100th aggregation as the cost otherwise might outweigh the benefit.
        #    {
        #        InventSumDelta::combineNonAggregated(ttsId);
        #    }
        #    //must be set after the combine of non-aggregated since that can impact the result
        #    deltaRecordsAddedForItem = inventUpdateOnhand.getInventSumDeltaNonAggrAddCountForItem(_itemId);
        #
        #    if (deltaRecordsAddedForItem < _limitBeforeUsingSetBasedinsert)
        #    {
        #        InventSumDelta::summarizeDeltaRecordsForItemLoop(_itemId,aggrCnt,ttsId);
        #    }
        #    else
        #    {
        #        inventSumDeltaSum.skipDataMethods(true);
        #        inventSumDeltaSum.skipDatabaseLog(true);
        #
        #        insert_recordset inventSumDeltaSum (ttsId, ItemId, InventDimId,
        #                IsAggregated, AggregationCounter, LastUpdDatePhysical, LastUpdDateExpected,
        #                InventSiteId, InventLocationId, InventBatchId, WMSLocationId, WMSPalletId, //InventDim fields in InventSum, dtrunin
        #                #InventSumFieldsList)
        #            select ttsId, ItemId, InventDimId, isAggregated, aggrCnt, LastUpdDatePhysical, LastUpdDateExpected,
        #                InventSiteId, InventLocationId, InventBatchId, WMSLocationId, WMSPalletId, //InventDim fields in InventSum, dtrunin
        #            #InventSumFieldsList
        #                from inventSumDeltaAggrSumView
        #                    where inventSumDeltaAggrSumView.ttsId   == ttsId
        #                       && inventSumDeltaAggrSumView.ItemId  == _itemId;
        #    }
        #
        #    return aggrCnt;
        #}
      ENDSOURCE
      SOURCE #summarizeDeltaRecordsDim
        #/// <summary>
        #/// Creates new <c>InventSumDelta</c> records that are a summation of the <c>InventSumDelta</c> and
        #/// <c>InventSum</c> records that exist.
        #/// </summary>
        #/// <param name="_inventDimCriteria">
        #/// An <c>InventDim</c> record that will be used for filtering the <c>InventSumDelta</c> records.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// A <c>InventDimParm</c> record that will be used for filtering the <c>InventSumDelta</c> records.
        #/// </param>
        #/// <param name="_aggrCountFactorCombineNonAggrRecs">
        #/// A number that will determines when non-aggregated records should be combined . Optional.
        #/// </param>
        #/// <returns>
        #/// A counter that can be used to identify the <c>InventSumDelta</c> records that were created based on
        #/// the <c>AggregationCounter</c> field.
        #/// </returns>
        #public static server Counter summarizeDeltaRecordsDim(
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParm,
        #    int             _aggrCountFactorCombineNonAggrRecs  = InventSumDelta::aggrCountFactorCombineNonAggregatedRecs())
        #{
        #    InventSumDelta          inventSumDeltaSum;
        #    InventDim               inventDim;
        #    InventUpdateOnhand      inventUpdateOnhand  = appl.inventUpdateOnhandGlobal().inventUpdateOnhand();
        #    CreatedTransactionId    ttsId       = inventUpdateOnhand.ttsId();
        #    Counter                 aggrCnt     = inventUpdateOnhand.nextAggregationCnt();
        #
        #    InventSumDeltaAggrSumView   inventSumDeltaAggrSumView;
        #    NoYes                       isAggregated = NoYes::Yes;
        #
        #    if (aggrCnt mod _aggrCountFactorCombineNonAggrRecs == 0)   // Only do this for large transactions and only every 100th aggregation as the cost otherwise might outweigh the benefit.
        #    {
        #        InventSumDelta::combineNonAggregated(ttsId);
        #    }
        #
        #    inventSumDeltaSum.skipDataMethods(true);
        #
        #    insert_recordset inventSumDeltaSum (ttsId, ItemId, InventDimId,
        #            IsAggregated, AggregationCounter, LastUpdDatePhysical, LastUpdDateExpected,
        #                InventSiteId, InventLocationId, InventBatchId, WMSLocationId, WMSPalletId, //InventDim fields in InventSum, dtrunin
        #                #InventSumFieldsList)
        #        select ttsId, ItemId, InventDimId, isAggregated, aggrCnt, LastUpdDatePhysical, LastUpdDateExpected,
        #            InventSiteId, InventLocationId, InventBatchId, WMSLocationId, WMSPalletId, //InventDim fields in InventSum, dtrunin
        #            #InventSumFieldsList
        #            from inventSumDeltaAggrSumView
        #                where inventSumDeltaAggrSumView.ttsId   == ttsId
        #        #InventDimExistsJoinNoField(inventSumDeltaAggrSumView.inventDimId, inventDim, _inventDimCriteria, _inventDimParm);
        #
        #    return aggrCnt;
        #}
      ENDSOURCE
      SOURCE #summarizeDeltaRecordsForItemAndDim
        #/// <summary>
        #/// Creates new <c>InventSumDelta</c> records that are a summation of the <c>InventSumDelta</c> and
        #/// <c>InventSum</c> records that exist.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> value for which sum records should be created.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #/// An <c>InventDim</c> record that will be used for filtering the <c>InventSumDelta</c> records.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// A <c>InventDimParm</c> record that will be used for filtering the <c>InventSumDelta</c> records.
        #/// </param>
        #/// <param name="_limitBeforeUsingSetBasedinsert">
        #/// A number that will determines when a set-based insert is used. Optional.
        #/// </param>
        #/// <param name="_aggrCountFactorCombineNonAggrRecs">
        #/// A number that will determines when non-aggregated records should be combined . Optional.
        #/// </param>
        #/// <returns>
        #/// A counter that can be used to identify the <c>InventSumDelta</c> records that were created based on
        #/// the <c>AggregationCounter</c> field.
        #/// </returns>
        #public static server Counter summarizeDeltaRecordsForItemAndDim(
        #    ItemId          _itemId,
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParm,
        #    int             _limitBeforeUsingSetBasedinsert = InventSumDelta::limitBeforeUsingSetBasedInsToSummarize(),
        #    int             _aggrCountFactorCombineNonAggrRecs = InventSumDelta::aggrCountFactorCombineNonAggregatedRecs())
        #{
        #    InventSumDelta          inventSumDeltaSum;
        #    InventDim               inventDim;
        #    InventUpdateOnhand      inventUpdateOnhand = appl.inventUpdateOnhandGlobal().inventUpdateOnhand();
        #    CreatedTransactionId    ttsId                       = inventUpdateOnhand.ttsId();
        #    Counter                 aggrCnt                     = inventUpdateOnhand.nextAggregationCnt();
        #    Counter                 deltaRecordsAddedForItem;
        #
        #    InventSumDeltaAggrSumView   inventSumDeltaAggrSumView;
        #    NoYes                       isAggregated = NoYes::Yes;
        #
        #    if (aggrCnt mod _aggrCountFactorCombineNonAggrRecs == 0)   // Only do this for large transactions and only every 100th aggregation as the cost otherwise might outweigh the benefit.
        #    {
        #        InventSumDelta::combineNonAggregated(ttsId);
        #    }
        #    //must be set after the combine of non-aggregated since that can impact the result
        #    deltaRecordsAddedForItem = inventUpdateOnhand.getInventSumDeltaNonAggrAddCountForItem(_itemId);
        #
        #    if (deltaRecordsAddedForItem < _limitBeforeUsingSetBasedinsert)
        #    {
        #        InventSumDelta::summarizeDeltaRecordsForItemAndDimLoop(_itemId,_inventDimCriteria,_inventDimParm,aggrCnt, ttsId);
        #    }
        #    else
        #    {
        #        inventSumDeltaSum.skipDataMethods(true);
        #        inventSumDeltaSum.skipDatabaseLog(true);
        #
        #        insert_recordset inventSumDeltaSum (ttsId, ItemId, InventDimId,
        #                IsAggregated, AggregationCounter, LastUpdDatePhysical, LastUpdDateExpected,
        #                InventSiteId, InventLocationId, InventBatchId, WMSLocationId, WMSPalletId, //InventDim fields in InventSum, dtrunin
        #                #InventSumFieldsList)
        #            select ttsId, ItemId, InventDimId, isAggregated, aggrCnt, LastUpdDatePhysical, LastUpdDateExpected,
        #            InventSiteId, InventLocationId, InventBatchId, WMSLocationId, WMSPalletId, //InventDim fields in InventSum, dtrunin
        #                #InventSumFieldsList
        #                from inventSumDeltaAggrSumView
        #                    where inventSumDeltaAggrSumView.ttsId   == ttsId
        #                      &&  inventSumDeltaAggrSumView.ItemId  == _itemId
        #            #InventDimExistsJoinNoField(inventSumDeltaAggrSumView.inventDimId, inventDim, _inventDimCriteria, _inventDimParm);
        #    }
        #
        #    return aggrCnt;
        #}
      ENDSOURCE
      SOURCE #summarizeDeltaRecordsForItemAndDimLoop
        #/// <summary>
        #/// Creates new <c>InventSumDelta</c> records that are a summation of the <c>InventSumDelta</c> and
        #/// <c>InventSum</c> records that exist using a loop based approach.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> value for which sum records should be created.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #/// An <c>InventDim</c> record that will be used for filtering the <c>InventSumDelta</c> records.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// A <c>InventDimParm</c> record that will be used for filtering the <c>InventSumDelta</c> records.
        #/// </param>
        #/// <param name="_aggrCnt">
        #/// The aggreation counter that should be assigned to the <c>InventSumDelta</c> records.
        #/// </param>
        #/// <param name="_ttsId">
        #/// The transaction ID that should be assigned to the <c>InventSumDelta</c> records.
        #/// </param>
        #private static server void summarizeDeltaRecordsForItemAndDimLoop(
        #    ItemId                  _itemId,
        #    InventDim               _inventDimCriteria,
        #    InventDimParm           _inventDimParm,
        #    Counter                 _aggrCnt,
        #    CreatedTransactionId    _ttsId)
        #{
        #    InventSumDeltaAggrSumView   inventSumDeltaAggrSumView;
        #    InventSumDelta              inventSumDeltaSum;
        #    InventDim                   inventDim;
        #    RecordInsertList            insertList          = new RecordInsertList(tableNum(InventSumDelta), true);
        #
        #    while select ItemId, InventDimId, LastUpdDatePhysical, LastUpdDateExpected,
        #        InventSiteId, InventLocationId, InventBatchId, WMSLocationId, WMSPalletId, //InventDim fields in InventSum, dtrunin
        #        #InventSumFieldsList from inventSumDeltaAggrSumView
        #        where inventSumDeltaAggrSumView.ttsId   == _ttsId
        #        &&  inventSumDeltaAggrSumView.ItemId    == _itemId
        #    #InventDimExistsJoinNoField(inventSumDeltaAggrSumView.inventDimId, inventDim, _inventDimCriteria, _inventDimParm)
        #    {
        #        inventSumDeltaSum.clear();
        #        inventSumDeltaSum.initFromInventSumDeltaAggrSumView(inventSumDeltaAggrSumView);
        #        inventSumDeltaSum.ttsId                 = _ttsId;
        #        inventSumDeltaSum.AggregationCounter    = _aggrCnt;
        #        inventSumDeltaSum.IsAggregated          = NoYes::Yes;
        #        insertList.add(inventSumDeltaSum);
        #    }
        #
        #    insertList.insertDatabase();
        #
        #}
      ENDSOURCE
      SOURCE #summarizeDeltaRecordsForItemLoop
        #/// <summary>
        #/// Creates new <c>InventSumDelta</c> records that are a summation of the <c>InventSumDelta</c> and
        #/// <c>InventSum</c> records that exist using a loop based approach.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> value for which sum records should be created.
        #/// </param>
        #/// <param name="_aggrCnt">
        #/// The aggreation counter that should be assigned to the <c>InventSumDelta</c> records.
        #/// </param>
        #/// <param name="_ttsId">
        #/// The transaction ID that should be assigned to the <c>InventSumDelta</c> records.
        #/// </param>
        #private static server void summarizeDeltaRecordsForItemLoop(
        #    ItemId                  _itemId,
        #    Counter                 _aggrCnt,
        #    CreatedTransactionId    _ttsId)
        #{
        #    InventSumDeltaAggrSumView   inventSumDeltaAggrSumView;
        #    InventSumDelta              inventSumDeltaSum;
        #    RecordInsertList            insertList  = new RecordInsertList(tableNum(InventSumDelta), true);
        #
        #    while select ItemId, InventDimId, LastUpdDatePhysical, LastUpdDateExpected,
        #        InventSiteId, InventLocationId, InventBatchId, WMSLocationId, WMSPalletId, //InventDim fields in InventSum, dtrunin
        #    #InventSumFieldsList from inventSumDeltaAggrSumView
        #        where inventSumDeltaAggrSumView.ttsId   == _ttsId
        #        &&  inventSumDeltaAggrSumView.ItemId    == _itemId
        #    {
        #        inventSumDeltaSum.clear();
        #        inventSumDeltaSum.initFromInventSumDeltaAggrSumView(inventSumDeltaAggrSumView);
        #        inventSumDeltaSum.ttsId                 = _ttsId;
        #        inventSumDeltaSum.AggregationCounter    = _aggrCnt;
        #        inventSumDeltaSum.IsAggregated          = NoYes::Yes;
        #        insertList.add(inventSumDeltaSum);
        #    }
        #
        #    insertList.insertDatabase();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : InventSum unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #InventSum
    EnforceFKRelation 0
    PROPERTIES
      Name                #InventSum
      Label               #@SYS7092
      FormRef             #InventOnhandItem
      TitleField1         #ItemId
      TitleField2         #Closed
      ConfigurationKey    #LogisticsBasic
      SecurityKey         #InventTables
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      TableGroup          #Transaction
      PrimaryIndex        #ItemDimIdx
      ClusterIndex        #ItemDimIdx
      ModifiedDateTime    #Yes
      OccEnabled          #No
      DeveloperDocumentation  #@SYS123836
      Origin              #{2C0900AE-0000-1000-C814-87656E745375}
      LegacyId            #174
    ENDPROPERTIES
    
    FIELDS
      FIELD #Arrived
        REAL
        PROPERTIES
          Name                #Arrived
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{E4AE28AD-D9D9-4CF4-9F93-2EE7AB0B0DB0}
          LegacyId            #30
          ExtendedDataType    #InventQtyArrived
        ENDPROPERTIES
        
      FIELD #AvailOrdered
        REAL
        PROPERTIES
          Name                #AvailOrdered
          HelpText            #@SYS68568
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{648C49BD-DCEF-481D-8ADD-EFE4A0624EE2}
          LegacyId            #27
          ExtendedDataType    #InventQtyAvailOrdered
        ENDPROPERTIES
        
      FIELD #AvailPhysical
        REAL
        PROPERTIES
          Name                #AvailPhysical
          HelpText            #@SYS68567
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{63AEFB95-0425-4BF7-950A-AEED4B767352}
          LegacyId            #28
          ExtendedDataType    #InventQtyAvailPhysical
        ENDPROPERTIES
        
      FIELD #Closed
        ENUM
        PROPERTIES
          Name                #Closed
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{55904F3A-1F88-47A0-B5E7-3091CBB1BE06}
          LegacyId            #24
          ExtendedDataType    #InventSumClosed
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ClosedQty
        ENUM
        PROPERTIES
          Name                #ClosedQty
          Label               #@SYS4009638
          HelpText            #@SYS4009639
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{BDF59E14-1A10-4BDD-AA9C-43EB52E87BC7}
          LegacyId            #32
          ExtendedDataType    #InventSumClosed
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Deducted
        REAL
        PROPERTIES
          Name                #Deducted
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{ABCAC6D1-CAF6-43F2-BA5A-6E5B9EA78702}
          LegacyId            #5
          ExtendedDataType    #InventQtyDeducted
        ENDPROPERTIES
        
      FIELD #InventBatchId
        STRING
        PROPERTIES
          Name                #InventBatchId
          Table               #InventSum
          IgnoreEDTRelation   #Yes
          Origin              #{E1F2A96D-67CF-4CD2-A45E-038D46EAB5B2}
          ExtendedDataType    #InventBatchId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventDimId
        STRING
        PROPERTIES
          Name                #InventDimId
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          IgnoreEDTRelation   #Yes
          Origin              #{1FB944C7-CE59-464A-9428-E98F2C4804C0}
          LegacyId            #23
          ExtendedDataType    #InventDimId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventLocationId
        STRING
        PROPERTIES
          Name                #InventLocationId
          Table               #InventSum
          IgnoreEDTRelation   #Yes
          Origin              #{527A8A48-B3B0-4CD2-BCCD-4BD6073CC93A}
          ExtendedDataType    #InventLocationId
        ENDPROPERTIES
        
      FIELD #InventSiteId
        STRING
        PROPERTIES
          Name                #InventSiteId
          Table               #InventSum
          IgnoreEDTRelation   #Yes
          Origin              #{DCBFC2A6-538E-4B8E-98ED-C7DD8448E2AC}
          ExtendedDataType    #InventSiteId
        ENDPROPERTIES
        
      FIELD #IsDimFieldsPopulated
        ENUM
        PROPERTIES
          Name                #IsDimFieldsPopulated
          SaveContents        #No
          Table               #InventSum
          Origin              #{3F1E0788-5C9E-42A5-BAFC-2C1C2F1F878F}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ItemId
        STRING
        PROPERTIES
          Name                #ItemId
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          IgnoreEDTRelation   #Yes
          Origin              #{A670CB36-7491-48ED-9AB3-C7C58ACEB544}
          LegacyId            #1
          ExtendedDataType    #ItemId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #LastUpdDateExpected
        DATE
        PROPERTIES
          Name                #LastUpdDateExpected
          HelpText            #@SYS9749
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{B33E2699-6C80-4FE7-B8A5-B571F6AFE65C}
          LegacyId            #34
          ExtendedDataType    #DateExpected
        ENDPROPERTIES
        
      FIELD #LastUpdDatePhysical
        DATE
        PROPERTIES
          Name                #LastUpdDatePhysical
          HelpText            #@SYS9749
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{3FBE366B-A040-4396-9B9C-BF90FEDD515D}
          LegacyId            #33
          ExtendedDataType    #DatePhysical
        ENDPROPERTIES
        
      FIELD #OnOrder
        REAL
        PROPERTIES
          Name                #OnOrder
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{F918700D-6BE7-4ABB-BF7B-28AB77311C70}
          LegacyId            #9
          ExtendedDataType    #InventQtyOnOrder
        ENDPROPERTIES
        
      FIELD #Ordered
        REAL
        PROPERTIES
          Name                #Ordered
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{ADFF220E-8244-47B3-8A0F-E5627C079B91}
          LegacyId            #10
          ExtendedDataType    #InventQtyOrdered
        ENDPROPERTIES
        
      FIELD #PdsCWArrived
        REAL
        PROPERTIES
          Name                #PdsCWArrived
          Table               #InventSum
          Origin              #{ECC2D772-6990-4D25-8252-B56E1826354F}
          ExtendedDataType    #PdsCWArrived
        ENDPROPERTIES
        
      FIELD #PdsCWAvailOrdered
        REAL
        PROPERTIES
          Name                #PdsCWAvailOrdered
          Table               #InventSum
          Origin              #{06AFDD3A-FE16-4C67-9DB1-B48DDECCC9C5}
          ExtendedDataType    #PdsCWAvailOrdered
        ENDPROPERTIES
        
      FIELD #PdsCWAvailPhysical
        REAL
        PROPERTIES
          Name                #PdsCWAvailPhysical
          Table               #InventSum
          Origin              #{A827B085-ECFD-4076-B986-C06438BE6300}
          ExtendedDataType    #PdsCWAvailPhysical
        ENDPROPERTIES
        
      FIELD #PdsCWDeducted
        REAL
        PROPERTIES
          Name                #PdsCWDeducted
          Table               #InventSum
          Origin              #{34971E32-86DB-449A-9A1D-0281A10BA768}
          ExtendedDataType    #PdsCWDeducted
        ENDPROPERTIES
        
      FIELD #PdsCWOnOrder
        REAL
        PROPERTIES
          Name                #PdsCWOnOrder
          Table               #InventSum
          Origin              #{49057395-D059-49D0-9548-53146BAFBDCE}
          ExtendedDataType    #PdsCWOnOrder
        ENDPROPERTIES
        
      FIELD #PdsCWOrdered
        REAL
        PROPERTIES
          Name                #PdsCWOrdered
          Table               #InventSum
          Origin              #{30268193-DD57-4592-8F51-DF07AA0ABBFD}
          ExtendedDataType    #PdsCWOrdered
        ENDPROPERTIES
        
      FIELD #PdsCWPhysicalInvent
        REAL
        PROPERTIES
          Name                #PdsCWPhysicalInvent
          Table               #InventSum
          Origin              #{897ACB12-D5FB-4108-8E5A-FC6DC9B109C2}
          ExtendedDataType    #PdsCWPhysicalInvent
        ENDPROPERTIES
        
      FIELD #PdsCWPicked
        REAL
        PROPERTIES
          Name                #PdsCWPicked
          Table               #InventSum
          Origin              #{6196A979-E24D-4D30-B175-4FAE2F2B14FA}
          ExtendedDataType    #PdsCWPicked
        ENDPROPERTIES
        
      FIELD #PdsCWPostedQty
        REAL
        PROPERTIES
          Name                #PdsCWPostedQty
          Table               #InventSum
          Origin              #{8F05EEE3-C7BC-49B1-A839-E23042036B21}
          ExtendedDataType    #PdsCWPostedQty
        ENDPROPERTIES
        
      FIELD #PdsCWQuotationIssue
        REAL
        PROPERTIES
          Name                #PdsCWQuotationIssue
          Table               #InventSum
          Origin              #{F10DC28C-9EA2-4918-AF72-EC972F5C0638}
          ExtendedDataType    #PdsCWQuotationIssue
        ENDPROPERTIES
        
      FIELD #PdsCWQuotationReceipt
        REAL
        PROPERTIES
          Name                #PdsCWQuotationReceipt
          Table               #InventSum
          Origin              #{FE728186-EB4F-4129-85FE-17F137FC0FCD}
          ExtendedDataType    #PdsCWQuotationReceipt
        ENDPROPERTIES
        
      FIELD #PdsCWReceived
        REAL
        PROPERTIES
          Name                #PdsCWReceived
          Table               #InventSum
          Origin              #{B22FEB2E-B209-456C-B03E-A64AFED31978}
          ExtendedDataType    #PdsCWReceived
        ENDPROPERTIES
        
      FIELD #PdsCWRegistered
        REAL
        PROPERTIES
          Name                #PdsCWRegistered
          Table               #InventSum
          Origin              #{F5354A7B-A7DE-486F-926C-B211EBC16842}
          ExtendedDataType    #PdsCWRegistered
        ENDPROPERTIES
        
      FIELD #PdsCWReservOrdered
        REAL
        PROPERTIES
          Name                #PdsCWReservOrdered
          Table               #InventSum
          Origin              #{D1BE2C8A-ED36-46E2-BFFD-E11C564729C8}
          ExtendedDataType    #PdsCWReservOrdered
        ENDPROPERTIES
        
      FIELD #PdsCWReservPhysical
        REAL
        PROPERTIES
          Name                #PdsCWReservPhysical
          Table               #InventSum
          Origin              #{CDAAF3B1-75E0-4B12-8ECE-C478DAC9291E}
          ExtendedDataType    #PdsCWReservPhysical
        ENDPROPERTIES
        
      FIELD #PhysicalInvent
        REAL
        PROPERTIES
          Name                #PhysicalInvent
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{367C619A-26BD-49F4-9F50-C963559E78B5}
          LegacyId            #31
          ExtendedDataType    #InventQtyPhysicalOnhand
        ENDPROPERTIES
        
      FIELD #PhysicalValue
        REAL
        PROPERTIES
          Name                #PhysicalValue
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{962E2D3F-517B-4401-AA2E-6C7894FD84B3}
          LegacyId            #29
          ExtendedDataType    #CostAmountPhysical
        ENDPROPERTIES
        
      FIELD #PhysicalValueSecCur_RU
        REAL
        PROPERTIES
          Name                #PhysicalValueSecCur_RU
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{2A163E82-00AE-1000-7359-ABD93A30CE64}
          LegacyId            #16002
          ExtendedDataType    #CostAmountPhysicalSecCur_RU
        ENDPROPERTIES
        
      FIELD #Picked
        REAL
        PROPERTIES
          Name                #Picked
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{DC2F6A0B-5715-4C16-A410-90B670EEB9D8}
          LegacyId            #26
          ExtendedDataType    #InventQtyPicked
        ENDPROPERTIES
        
      FIELD #PostedQty
        REAL
        PROPERTIES
          Name                #PostedQty
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{2365C41B-862B-4631-BF77-0ACC98FDEAF8}
          LegacyId            #3
          ExtendedDataType    #InventQtyPosted
        ENDPROPERTIES
        
      FIELD #PostedValue
        REAL
        PROPERTIES
          Name                #PostedValue
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{F0F3BF34-93F3-49CA-9B8E-CD07BC222159}
          LegacyId            #4
          ExtendedDataType    #CostAmountPosted
        ENDPROPERTIES
        
      FIELD #PostedValueSecCur_RU
        REAL
        PROPERTIES
          Name                #PostedValueSecCur_RU
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{2A143E81-00AE-1000-BAB4-4441D25C9603}
          LegacyId            #16001
          ExtendedDataType    #CostAmountPostedSecCur_RU
        ENDPROPERTIES
        
      FIELD #QuotationIssue
        REAL
        PROPERTIES
          Name                #QuotationIssue
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{C998021F-960D-4EC2-A908-CBD14E211CD2}
          LegacyId            #16
          ExtendedDataType    #InventQtyQuotationIssue
        ENDPROPERTIES
        
      FIELD #QuotationReceipt
        REAL
        PROPERTIES
          Name                #QuotationReceipt
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{D98638BB-2462-4CD3-AE7D-B5136A4B2B13}
          LegacyId            #17
          ExtendedDataType    #InventQtyQuotationReceipt
        ENDPROPERTIES
        
      FIELD #Received
        REAL
        PROPERTIES
          Name                #Received
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{63052DC4-7A66-4ED8-BB09-81FDD7D5EB7D}
          LegacyId            #6
          ExtendedDataType    #InventQtyReceived
        ENDPROPERTIES
        
      FIELD #Registered
        REAL
        PROPERTIES
          Name                #Registered
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{43FB3B0C-525C-4A97-9CB7-90B2CAD54FA6}
          LegacyId            #25
          ExtendedDataType    #InventQtyRegistered
        ENDPROPERTIES
        
      FIELD #ReservOrdered
        REAL
        PROPERTIES
          Name                #ReservOrdered
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{2220A5A2-C591-4CDD-9B15-3529EDE87ED6}
          LegacyId            #8
          ExtendedDataType    #InventQtyReservOrdered
        ENDPROPERTIES
        
      FIELD #ReservPhysical
        REAL
        PROPERTIES
          Name                #ReservPhysical
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventSum
          Origin              #{E61BFA8C-ED01-44D1-A961-97098CE89CBD}
          LegacyId            #7
          ExtendedDataType    #InventQtyReservPhysical
        ENDPROPERTIES
        
      FIELD #WMSLocationId
        STRING
        PROPERTIES
          Name                #WMSLocationId
          Table               #InventSum
          IgnoreEDTRelation   #Yes
          Origin              #{7233CFAB-BA30-4BDB-A6E4-5E59BDEE46C2}
          ExtendedDataType    #WMSLocationId
        ENDPROPERTIES
        
      FIELD #WMSPalletId
        STRING
        PROPERTIES
          Name                #WMSPalletId
          Table               #InventSum
          IgnoreEDTRelation   #Yes
          Origin              #{FA90E704-BD95-4393-B1E7-97F240A2985B}
          ExtendedDataType    #WMSPalletId
          StringSize          #18
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #PostedValue
          #PostedQty
          #Deducted
          #Received
          #ReservOrdered
          #ReservPhysical
          #OnOrder
          #Ordered
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AvailablePhysical
        PROPERTIES
          Name                #AvailablePhysical
          Label               #@SYS22389
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostedQty
          #Deducted
          #Picked
          #Received
          #Registered
          #ReservPhysical
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AvailableQuantity
        PROPERTIES
          Name                #AvailableQuantity
          Label               #@SYS54429
        ENDPROPERTIES
        
        GROUPFIELDS
          #AvailOrdered
          #AvailPhysical
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DeltaFields
        PROPERTIES
          Name                #DeltaFields
          Label               #@SYS98311
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostedQty
          #PdsCWPostedQty
          #PostedValue
          #Deducted
          #Received
          #ReservOrdered
          #ReservPhysical
          #OnOrder
          #Ordered
          #QuotationIssue
          #QuotationReceipt
          #Registered
          #Picked
          #AvailOrdered
          #AvailPhysical
          #PhysicalValue
          #Arrived
          #PhysicalInvent
          #PdsCWDeducted
          #PdsCWPicked
          #PdsCWReceived
          #PdsCWRegistered
          #PdsCWReservPhysical
          #PdsCWReservOrdered
          #PdsCWOnOrder
          #PdsCWOrdered
          #PdsCWArrived
          #PdsCWQuotationIssue
          #PdsCWQuotationReceipt
          #PdsCWAvailOrdered
          #PdsCWAvailPhysical
          #PdsCWPhysicalInvent
          #PhysicalValueSecCur_RU
          #PostedValueSecCur_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DeltaFieldsQty
        PROPERTIES
          Name                #DeltaFieldsQty
          Label               #@SYS98312
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostedQty
          #PdsCWPostedQty
          #Deducted
          #Picked
          #Received
          #Registered
          #ReservPhysical
          #ReservOrdered
          #OnOrder
          #Ordered
          #Arrived
          #QuotationIssue
          #QuotationReceipt
          #PdsCWDeducted
          #PdsCWPicked
          #PdsCWReceived
          #PdsCWRegistered
          #PdsCWReservPhysical
          #PdsCWReservOrdered
          #PdsCWOnOrder
          #PdsCWOrdered
          #PdsCWArrived
          #PdsCWQuotationIssue
          #PdsCWQuotationReceipt
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@Sys5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #InventDimId
          #Closed
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Item
        PROPERTIES
          Name                #Item
          Label               #@SYS7407
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LastDate
        PROPERTIES
          Name                #LastDate
          Label               #@SYS15992
        ENDPROPERTIES
        
        GROUPFIELDS
          #LastUpdDatePhysical
          #LastUpdDateExpected
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PhysicalInventory
        PROPERTIES
          Name                #PhysicalInventory
          Label               #@SYS23942
        ENDPROPERTIES
        
        GROUPFIELDS
          #PhysicalInvent
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #System
        PROPERTIES
          Name                #System
          Label               #@SYS4278
        ENDPROPERTIES
        
        GROUPFIELDS
          #ClosedQty
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TotalAvailable
        PROPERTIES
          Name                #TotalAvailable
          Label               #@SYS24243
        ENDPROPERTIES
        
        GROUPFIELDS
          #Arrived
          #Ordered
          #ReservOrdered
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Value
        PROPERTIES
          Name                #Value
          Label               #@SYS11762
        ENDPROPERTIES
        
        GROUPFIELDS
          #PhysicalValue
          #PostedValue
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ValueSecCur_RU
        PROPERTIES
          Name                #ValueSecCur_RU
          Label               #@GLS101833
        ENDPROPERTIES
        
        GROUPFIELDS
          #PhysicalValueSecCur_RU
          #PostedValueSecCur_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Various
        PROPERTIES
          Name                #Various
          Label               #@SYS28008
        ENDPROPERTIES
        
        GROUPFIELDS
          #OnOrder
          #QuotationReceipt
          #QuotationIssue
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ClosedItemDimIdx
      PROPERTIES
        Name                #ClosedItemDimIdx
        Origin              #{2B100002-00AE-1000-EA58-51FAF8CD0C6E}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #Closed
        #ItemId
      ENDINDEXFIELDS
      
      #ItemDimIdx
      PROPERTIES
        Name                #ItemDimIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{2B0A0003-00AE-1000-D562-C97F44696D49}
        LegacyId            #3
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #InventDimId
      ENDINDEXFIELDS
      
      #DimIdIdx
      PROPERTIES
        Name                #DimIdIdx
        Origin              #{2B080004-00AE-1000-4469-6D4964496478}
        LegacyId            #4
      ENDPROPERTIES
      
      INDEXFIELDS
        #InventDimId
        #Closed
      ENDINDEXFIELDS
      
      #ClosedQtyIdx
      PROPERTIES
        Name                #ClosedQtyIdx
        Origin              #{DACA66D8-F467-4D78-947C-3B17502270C6}
      ENDPROPERTIES
      
      INDEXFIELDS
        #ClosedQty
        #ItemId
        #InventDimId
      ENDINDEXFIELDS
      
      #ReservationIdx
      PROPERTIES
        Name                #ReservationIdx
        Origin              #{7516043D-FB34-44F6-8B49-C145971ED728}
      ENDPROPERTIES
      
      INDEXFIELDS
        #ClosedQty
        #Closed
        #dataAreaId
        #Partition
        #ItemId
        #AvailPhysical
        #InventDimId
        #LastUpdDatePhysical
        #AvailOrdered
        #INCLUDEDCOLUMNPRESENT
        #OnOrder
        #INCLUDEDCOLUMNPRESENT
        #PdsCWOnOrder
        #INCLUDEDCOLUMNPRESENT
        #PdsCWAvailPhysical
        #INCLUDEDCOLUMNPRESENT
        #PdsCWAvailOrdered
        #INCLUDEDCOLUMNPRESENT
      ENDINDEXFIELDS
      
      #DimIdClosedQtyIdx
      PROPERTIES
        Name                #DimIdClosedQtyIdx
        Origin              #{3DB27C7F-9C0C-4D7A-82F2-AE7AAC0AAA43}
      ENDPROPERTIES
      
      INDEXFIELDS
        #InventDimId
        #ClosedQty
      ENDINDEXFIELDS
      
      #BatchIdIdx
      PROPERTIES
        Name                #BatchIdIdx
        Origin              #{DD007CC9-3A14-453A-B8E0-0EF822755777}
      ENDPROPERTIES
      
      INDEXFIELDS
        #InventBatchId
      ENDINDEXFIELDS
      
      #PalletIdIdx
      PROPERTIES
        Name                #PalletIdIdx
        Origin              #{459E8AE1-DFAC-468A-8161-79DDF1898386}
      ENDPROPERTIES
      
      INDEXFIELDS
        #WMSPalletId
        #WMSLocationId
      ENDINDEXFIELDS
      
      #InventLocationIdx
      PROPERTIES
        Name                #InventLocationIdx
        Origin              #{77A80D31-9226-42FA-AF0C-F10B89960B44}
      ENDPROPERTIES
      
      INDEXFIELDS
        #InventLocationId
        #WMSLocationId
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #InventDim
        PROPERTIES
          Name                #InventDim
          Table               #InventDim
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #InventDimId
            RelatedField        #inventDimId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventJournalTrans
        PROPERTIES
          Name                #InventJournalTrans
          Table               #InventJournalTrans
          Validate            #No
          EntityRelationshipRole  #@SYS123453
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventSum
        PROPERTIES
          Name                #InventSum
          Table               #InventSum
          Validate            #No
          EntityRelationshipRole  #@SYS123816
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventTable
        PROPERTIES
          Name                #InventTable
          Table               #InventTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventTransferLine
        PROPERTIES
          Name                #InventTransferLine
          Table               #InventTransferLine
          Validate            #No
          EntityRelationshipRole  #@SYS123837
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProdBOM
        PROPERTIES
          Name                #ProdBOM
          Table               #ProdBOM
          Validate            #No
          EntityRelationshipRole  #@SYS123838
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProdJournalBOM
        PROPERTIES
          Name                #ProdJournalBOM
          Table               #ProdJournalBOM
          Validate            #No
          EntityRelationshipRole  #@SYS123839
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProdTable
        PROPERTIES
          Name                #ProdTable
          Table               #ProdTable
          Validate            #No
          EntityRelationshipRole  #@SYS123840
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PurchLine
        PROPERTIES
          Name                #PurchLine
          Table               #PurchLine
          Validate            #No
          EntityRelationshipRole  #@SYS123841
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ReqTrans
        PROPERTIES
          Name                #ReqTrans
          Table               #ReqTrans
          Validate            #No
          EntityRelationshipRole  #@SYS123842
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesOrderLine
        PROPERTIES
          Name                #SalesOrderLine
          Table               #SalesLine
          Validate            #No
          EntityRelationshipRole  #@SYS123843
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #addInventSumDelta
        #public void addInventSumDelta(InventSumDelta _inventSumDelta)
        #{
        #    this.addInventSumDeltaQty(_inventSumDelta);
        #    this.addInventSumDeltaValues(_inventSumDelta);
        #    this.addInventSumDeltaDates(_inventSumDelta);
        #}
      ENDSOURCE
      SOURCE #addInventSumDeltaDates
        #/// <summary>
        #/// Sets date fields that are based on the specified <c>InventSumDelta</c> buffer.
        #/// </summary>
        #/// <param name="_inventSumDelta">
        #/// The <c>InventSumDelta</c> buffer from which to initialize.
        #/// </param>
        #private void addInventSumDeltaDates(InventSumDelta _inventSumDelta)
        #{
        #    if (this.LastUpdDatePhysical < _inventSumDelta.LastUpdDatePhysical)
        #    {
        #        this.LastUpdDatePhysical  = _inventSumDelta.LastUpdDatePhysical;
        #    }
        #    if (this.LastUpdDateExpected < _inventSumDelta.LastUpdDateExpected)
        #    {
        #        this.LastUpdDateExpected  = _inventSumDelta.LastUpdDateExpected;
        #    }
        #}
      ENDSOURCE
      SOURCE #addInventSumDeltaQty
        #/// <summary>
        #/// Sets quantity fields based on the specified <c>InventSumDelta</c> buffer.
        #/// </summary>
        #/// <param name="_inventSumDelta">
        #/// The <c>InventSumDelta</c> buffer to initialize from.
        #/// </param>
        #public void addInventSumDeltaQty(InventSumDelta _inventSumDelta)
        #{
        #    this.PostedQty        += _inventSumDelta.PostedQty;
        #    this.Deducted         += _inventSumDelta.Deducted;
        #    this.Received         += _inventSumDelta.Received;
        #    this.ReservPhysical   += _inventSumDelta.ReservPhysical;
        #    this.ReservOrdered    += _inventSumDelta.ReservOrdered;
        #    this.OnOrder          += _inventSumDelta.OnOrder;
        #    this.Ordered          += _inventSumDelta.Ordered;
        #    this.QuotationIssue   += _inventSumDelta.QuotationIssue;
        #    this.QuotationReceipt += _inventSumDelta.QuotationReceipt;
        #    this.Registered       += _inventSumDelta.Registered;
        #    this.Picked           += _inventSumDelta.Picked;
        #    this.AvailOrdered     += _inventSumDelta.AvailOrdered;
        #    this.AvailPhysical    += _inventSumDelta.AvailPhysical;
        #    this.Arrived          += _inventSumDelta.Arrived;
        #    this.PhysicalInvent   += _inventSumDelta.PhysicalInvent;
        #
        #    this.PdsCWPostedQty         += _inventSumDelta.PdsCWPostedQty;
        #    this.PdsCWDeducted          += _inventSumDelta.PdsCWDeducted;
        #    this.PdsCWReceived          += _inventSumDelta.PdsCWReceived;
        #    this.PdsCWReservPhysical    += _inventSumDelta.PdsCWReservPhysical;
        #    this.PdsCWReservOrdered     += _inventSumDelta.PdsCWReservOrdered;
        #    this.PdsCWOnOrder           += _inventSumDelta.PdsCWOnOrder;
        #    this.PdsCWOrdered           += _inventSumDelta.PdsCWOrdered;
        #    this.PdsCWQuotationIssue    += _inventSumDelta.PdsCWQuotationIssue;
        #    this.PdsCWQuotationReceipt  += _inventSumDelta.PdsCWQuotationReceipt;
        #    this.PdsCWRegistered        += _inventSumDelta.PdsCWRegistered;
        #    this.PdsCWPicked            += _inventSumDelta.PdsCWPicked;
        #    this.PdsCWAvailOrdered      += _inventSumDelta.PdsCWAvailOrdered;
        #    this.PdsCWAvailPhysical     += _inventSumDelta.PdsCWAvailPhysical;
        #    this.PdsCWArrived           += _inventSumDelta.PdsCWArrived;
        #    this.PdsCWPhysicalInvent    += _inventSumDelta.PdsCWPhysicalInvent;
        #}
      ENDSOURCE
      SOURCE #addInventSumDeltaValues
        #/// <summary>
        #/// Sets value fields that are based on the specified <c>InventSumDelta</c> buffer.
        #/// </summary>
        #/// <param name="_inventSumDelta">
        #/// The <c>InventSumDelta</c> buffer from which to initialize.
        #/// </param>
        #public void addInventSumDeltaValues(InventSumDelta _inventSumDelta)
        #{
        #    this.PostedValue      += _inventSumDelta.PostedValue;
        #    this.PhysicalValue    += _inventSumDelta.PhysicalValue;
        #    // <GEERU>
        #    this.PhysicalValueSecCur_RU += _inventSumDelta.PhysicalValueSecCur_RU;
        #    this.PostedValueSecCur_RU   += _inventSumDelta.PostedValueSecCur_RU;
        #    // </GEERU>
        #}
      ENDSOURCE
      SOURCE #addInventTransDatesOnSum
        #/// <summary>
        #/// Sets the relevant dates on this record based on the specified <c>InventTrans</c> buffer.
        #/// </summary>
        #/// <param name="_inventTrans">
        #/// The <c>InventTrans</c> record from which to retrieve dates.
        #/// </param>
        #public void addInventTransDatesOnSum(InventTrans _inventTrans)
        #{
        #    if (_inventTrans.DatePhysical)
        #    {
        #        this.LastUpdDatePhysical = _inventTrans.DatePhysical;
        #    }
        #    else if (_inventTrans.DateInvent)
        #    {
        #        this.LastUpdDatePhysical = _inventTrans.DateInvent;
        #    }
        #    else if (_inventTrans.DateExpected)
        #    {
        #        this.LastUpdDateExpected = _inventTrans.DateExpected;
        #    }
        #}
      ENDSOURCE
      SOURCE #addInventTransOnSum
        #/// <summary>
        #/// Adds the quantities and values of the specified <c>InventTrans</c> table buffer to this record.
        #/// </summary>
        #/// <param name="_inventTrans">
        #/// The <c>InventTrans</c> record to add to this record.
        #/// </param>
        #/// <param name="_inventDimIdTransferIssue">
        #///    An <c>InventDimId</c> ID for the matching issue transaction for a transfer. This parameter is optional but can be passed to improve performance.
        #/// </param>
        #public void addInventTransOnSum(InventTrans _inventTrans, InventDimId _inventDimIdTransferIssue = '')
        #{
        #    this.addInventTransQtyOnSum(_inventTrans);
        #
        #    if (_inventTrans.StatusReceipt != StatusReceipt::None)
        #    { // only update dates when receiving items
        #        if (_inventTrans.isTransfer())
        #        { // Note: Can only determine if it is a transfer if InventTransOrigin field is selected/specified!
        #            this.setLastUpdDatesFromTransferIssue(_inventTrans, _inventDimIdTransferIssue);
        #        }
        #        else
        #        {
        #            this.addInventTransDatesOnSum(_inventTrans);
        #        }
        #    }
        #
        #    this.addInventTransValuesOnSum(_inventTrans);
        #}
      ENDSOURCE
      SOURCE #addInventTransQtyOnSum
        #/// <summary>
        #///    Adds the quantity of the specified <c>InventTrans</c> buffer to this record.
        #/// </summary>
        #/// <param name="_inventTrans">
        #///    The <c>InventTrans</c> record to add to this record.
        #/// </param>
        #public void addInventTransQtyOnSum(InventTrans _inventTrans)
        #{
        #    if (_inventTrans.StatusReceipt== StatusReceipt::None)
        #    {
        #        switch(_inventTrans.StatusIssue)
        #        {
        #            case StatusIssue::Sold:
        #                this.PostedQty += _inventTrans.Qty;
        #                this.PdsCWPostedQty += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::Deducted:
        #                this.Deducted -= _inventTrans.Qty;
        #                this.PdsCWDeducted -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::Picked:
        #                this.Picked -= _inventTrans.Qty;
        #                this.PdsCWPicked  -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::ReservPhysical:
        #                this.ReservPhysical -= _inventTrans.Qty;
        #                this.PdsCWReservPhysical -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::ReservOrdered:
        #                this.ReservOrdered -= _inventTrans.Qty;
        #                this.PdsCWReservOrdered-= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::OnOrder:
        #                this.OnOrder -= _inventTrans.Qty;
        #                this.PdsCWOnOrder -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::QuotationIssue:
        #                this.QuotationIssue -= _inventTrans.Qty;
        #                this.PdsCWQuotationIssue    -= _inventTrans.PdsCWQty;
        #                break;
        #            default:
        #        }
        #    }
        #    else
        #    {
        #        switch(_inventTrans.StatusReceipt)
        #        {
        #            case StatusReceipt::Purchased:
        #                this.PostedQty += _inventTrans.Qty;
        #                this.PdsCWPostedQty  += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::Received:
        #                this.Received += _inventTrans.Qty;
        #                this.PdsCWReceived += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::Registered:
        #                this.Registered += _inventTrans.Qty;
        #                this.PdsCWRegistered += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::Arrived:
        #                this.Arrived += _inventTrans.Qty;
        #                this.PdsCWArrived   += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::Ordered:
        #                this.Ordered += _inventTrans.Qty;
        #                this.PdsCWOrdered   += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::QuotationReceipt:
        #                this.QuotationReceipt += _inventTrans.Qty;
        #                this.PdsCWQuotationReceipt += _inventTrans.PdsCWQty;
        #                break;
        #            default:
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addInventTransValuesOnSum
        #/// <summary>
        #///    Adds the values of the specified <c>InventTrans</c> buffer to this record.
        #/// </summary>
        #/// <param name="_inventTrans">
        #///    The <c>InventTrans</c> record to add to this record.
        #/// </param>
        #public void addInventTransValuesOnSum(InventTrans _inventTrans)
        #{
        #    this.PostedValue += _inventTrans.costValue();
        #    this.PostedValueSecCur_RU += _inventTrans.costValueSecCur_RU();
        #
        #    if (_inventTrans.isUpdatedPhysical())
        #    {
        #        this.PhysicalValue += _inventTrans.CostAmountPhysical;
        #        // <GEERU>
        #        this.PhysicalValueSecCur_RU += _inventTrans.CostAmountSecCurPhysical_RU;
        #        // </GEERU>
        #    }
        #}
      ENDSOURCE
      SOURCE #applyInventSumDeltaQuantities
        #/// <summary>
        #/// Applies quantities from matching <c>InventSumDelta</c> records to this buffer.
        #/// </summary>
        #/// <param name="_ttsId">
        #/// The current ttsId.
        #/// </param>
        #public void applyInventSumDeltaQuantities(CreatedTransactionId _ttsId)
        #{
        #    InventSumDelta inventSumDelta;
        #
        #    select #inventSumFields from inventSumDelta
        #        where inventSumDelta.ItemId       == this.ItemId
        #        && inventSumDelta.InventDimId     == this.InventDimId
        #        && inventSumDelta.ttsId           == _ttsId
        #        && inventSumDelta.IsAggregated    == NoYes::No;
        #
        #    this.addInventSumDeltaQty(inventSumDelta);
        #}
      ENDSOURCE
      SOURCE #availECP
        #[SysObsoleteAttribute('Use availECP method on EPCSSItemDescription dataset instead', true)]
        #display public InventQtyAvailOrderedECP   availECP()
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #availOrderedCalculated
        #display public InventQtyAvailOrdered   availOrderedCalculated(boolean _inclAvailPhysical = true)
        #{
        #    return (_inclAvailPhysical ? this.availPhysicalCalculated() : 0) + this.Ordered + this.Arrived - this.ReservOrdered - this.OnOrder;
        #}
      ENDSOURCE
      SOURCE #availPhysicalCalculated
        #display public InventQtyAvailPhysical availPhysicalCalculated()
        #{
        #    return (this.physicalInventCalculated() - this.ReservPhysical);
        #}
      ENDSOURCE
      SOURCE #availReservation
        #/// <summary>
        #///    Retrieves the quantity available for reservation.
        #/// </summary>
        #/// <param name="_reserveOnOrdered">
        #///    A Boolean value that defines if on order quantities are included; optional.
        #/// </param>
        #/// <param name="_inventDimId">
        #///    The inventory dimension ID to display the ordered quantity for; optional.
        #/// </param>
        #/// <returns>
        #///    The quantity available for reservation.
        #/// </returns>
        #display public InventQtyAvailReservation  availReservation(
        #    NoYes       _reserveOnOrdered = NoYes::Yes,
        #    InventDimId _inventDimId      = '')
        #{
        #    InventQtyAvailReservation   availReservation;
        #
        #    if (   _reserveOnOrdered
        #        && !pdsIsCWItem(this.ItemId))
        #    {
        #        availReservation = this.availOrderedCalculated() + this.OnOrder;
        #    }
        #    else
        #    {
        #        availReservation = this.availPhysicalCalculated();
        #    }
        #
        #    return availReservation;
        #}
      ENDSOURCE
      SOURCE #averageCostPrice
        #// AOSRunMode::Called
        #display public CostPriceAverage  averageCostPrice()
        #{
        #    return this.costPricePcs();
        #}
      ENDSOURCE
      SOURCE #canInventTransBeUpdated
        #public boolean canInventTransBeUpdated(InventTrans _inventTrans)
        #{
        #    if (_inventTrans.ItemId         != this.ItemId           ||
        #        _inventTrans.InventDimId    != this.InventDimId)
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #costPricePcs
        #display public CostPrice costPricePcs(
        #    boolean      _onHandOnly = false,
        #    PriceDate    _priceDate  = maxDate())
        #{
        #    InventModelGroup    inventModelGroup;
        #    InventModelType     inventModelType;
        #
        #    inventModelGroup = InventTable::find(this.ItemId).modelGroup();
        #    inventModelType = inventModelGroup.inventModelType();
        #    return inventModelType.costPricePcs(this, inventModelGroup, _onHandOnly, _priceDate);
        #}
      ENDSOURCE
      SOURCE #costPriceSecCurPcs_RU
        #display CostPrice costPriceSecCurPcs_RU(
        #    boolean   _onHandOnly = false,
        #    PriceDate _priceDate  = maxDate())
        #{
        #    InventModelGroup    inventModelGroup = InventTable::find(this.ItemId).modelGroup();
        #    CostAmount          value;
        #    InventQty           qty;
        #
        #    value            = (this.PostedValueSecCur_RU) + (inventModelGroup.InclPhysicalValueInCost ? (this.PhysicalValueSecCur_RU)   : 0);
        #    qty              = (this.PostedQty)            + (inventModelGroup.InclPhysicalValueInCost ? (this.Received - this.Deducted) : 0);
        #
        #    if (_onHandOnly)
        #    {
        #        if (qty <= 0 || value <= 0)
        #        {
        #            return 0;
        #        }
        #    }
        #    else
        #    {
        #        if (qty <= 0 || value <= 0 || inventModelGroup.StandardCost || inventModelGroup.inventModelTypeSecCur_RU().stdCostBased())
        #        {
        #            return InventTable::findCostPcsPriceSecCur_RU(this.ItemId, this.InventDimId, this.inventDim(), _priceDate);
        #        }
        #    }
        #
        #    return value / qty;
        #}
      ENDSOURCE
      SOURCE #displayAvailOrdered
        #/// <summary>
        #///    Retrieves the available ordered quantity.
        #/// </summary>
        #/// <param name="_inventDimId">
        #///    The inventory dimension ID to display the ordered quantity for; optional.
        #/// </param>
        #/// <returns>
        #///    The available ordered quantity.
        #/// </returns>
        #/// <remarks>
        #///    Call this method only, if the information cannot be retrieved in another way.
        #///    If the item in question is not a WHS item, then the field value can be used directly.
        #///    If the item is a WHS item, there may be other ways to retrieve the information faster
        #///    (for example through InventAvailabilityFormCache class).
        #/// </remarks>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display InventQtyAvailOrdered displayAvailOrdered(InventDimId _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    WHSInventReserveQty     whsInventReserveQty = this.whsInventReserveQty(InventDim::find(_inventDimId));
        #
        #    return whsInventReserveQty ? whsInventReserveQty.availOrdered() : this.AvailOrdered;
        #}
      ENDSOURCE
      SOURCE #displayAvailPhysical
        #/// <summary>
        #///    Retrieves the available physical quantity.
        #/// </summary>
        #/// <param name="_inventDimId">
        #///    The inventory dimension ID to display the ordered quantity for; optional.
        #/// </param>
        #/// <returns>
        #///    The available physical quantity.
        #/// </returns>
        #/// <remarks>
        #///    Call this method only, if the information cannot be retrieved in another way.
        #///    If the item in question is not a WHS item, then the field value can be used directly.
        #///    If the item is a WHS item, there may be other ways to retrieve the information faster
        #///    (for example through WHSInventOnHandFormCache class).
        #/// </remarks>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display InventQtyAvailPhysical displayAvailPhysical(InventDimId _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    WHSInventReserveQty     whsInventReserveQty = this.whsInventReserveQty(InventDim::find(_inventDimId));
        #
        #    return whsInventReserveQty ? whsInventReserveQty.availPhysical() : this.AvailPhysical;
        #}
      ENDSOURCE
      SOURCE #hasOpenTransactions
        #/// <summary>
        #///    Queries whether any open <c>InventTrans</c> records exist for the item and dimension combination
        #///    related to the current record.
        #/// </summary>
        #/// <returns>
        #///    true if an open <c>InventTrans</c> record exists; otherwise, false.
        #/// </returns>
        #public boolean hasOpenTransactions()
        #{
        #    return (select firstonly inventTrans
        #            where inventTrans.InventDimId       == this.InventDimId
        #              &&  inventTrans.ItemId            == this.ItemId
        #              &&  inventTrans.StatusIssue       != StatusIssue::Sold
        #              &&  inventTrans.StatusReceipt     != StatusReceipt::Purchased).RecId;
        #}
      ENDSOURCE
      SOURCE #hasTransactions
        #private boolean hasTransactions()
        #{
        #    return (select firstonly inventTrans
        #            where inventTrans.InventDimId       == this.InventDimId
        #              &&  inventTrans.ItemId            == this.ItemId).RecId;
        #}
      ENDSOURCE
      SOURCE #initFromInventTrans
        #public void initFromInventTrans(InventTrans _inventTrans)
        #{
        #    this.ItemId             = _inventTrans.ItemId;
        #    this.InventDimId        = _inventTrans.InventDimId;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    this.ClosedQty = this.isAllQtyFieldsZero();
        #    this.Closed    = this.isAllValueFieldsZero() && this.ClosedQty;
        #    this.setAvailFields();
        #
        #    //InventDim fields in InventSum, dtrunin -->
        #    DEV_InventSumFields::updateInventSumFromDimId(this);
        #    //InventDim fields in InventSum, dtrunin <--
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #inventBatchId
        #display public InventBatchId inventBatchId()
        #{
        #    return InventDim::find(this.InventDimId).InventBatchId;
        #}
      ENDSOURCE
      SOURCE #inventDim
        #public InventDim   inventDim()
        #{
        #    return InventDim::find(this.InventDimId);
        #}
      ENDSOURCE
      SOURCE #inventLocationId
        #display public InventLocationId inventLocationId()
        #{
        #    return InventDim::find(this.InventDimId).InventLocationId;
        #}
      ENDSOURCE
      SOURCE #inventSerialId
        #display public InventSerialId inventSerialId()
        #{
        #    return InventDim::find(this.InventDimId).InventSerialId;
        #}
      ENDSOURCE
      SOURCE #inventTable
        #public InventTable inventTable(boolean _forupdate = false)
        #{
        #    return InventTable::find(this.ItemId,_forupdate);
        #}
      ENDSOURCE
      SOURCE #isAllFieldsZero
        #public boolean isAllFieldsZero()
        #{
        #    return (this.PostedQty          == 0  &&
        #            this.PostedValue        == 0  &&
        #            this.PhysicalValue      == 0  &&
        #            this.Deducted           == 0  &&
        #            this.Picked             == 0  &&
        #            this.Received           == 0  &&
        #            this.Registered         == 0  &&
        #            this.ReservPhysical     == 0  &&
        #            this.ReservOrdered      == 0  &&
        #            this.OnOrder            == 0  &&
        #            this.Arrived            == 0  &&
        #            this.Ordered            == 0  &&
        #            this.QuotationReceipt   == 0  &&
        #            this.QuotationIssue     == 0
        #            // <GEERU>
        #            &&
        #            this.PostedValueSecCur_RU   == 0 &&
        #            this.PhysicalValueSecCur_RU == 0
        #            // </GEERU>
        #            );
        #}
      ENDSOURCE
      SOURCE #isAllQtyFieldsZero
        #public boolean isAllQtyFieldsZero()
        #{
        #    return (this.PostedQty          == 0  &&
        #            this.Deducted           == 0  &&
        #            this.Picked             == 0  &&
        #            this.Received           == 0  &&
        #            this.Registered         == 0  &&
        #            this.ReservPhysical     == 0  &&
        #            this.ReservOrdered      == 0  &&
        #            this.OnOrder            == 0  &&
        #            this.Arrived            == 0  &&
        #            this.Ordered            == 0  &&
        #            this.QuotationReceipt   == 0  &&
        #            this.QuotationIssue     == 0 );
        #}
      ENDSOURCE
      SOURCE #isAllValueFieldsZero
        #public boolean isAllValueFieldsZero()
        #{
        #    return (this.PostedValue            == 0  &&
        #            this.PhysicalValue          == 0  &&
        #            this.PostedValueSecCur_RU   == 0  &&
        #            this.PhysicalValueSecCur_RU == 0);
        #}
      ENDSOURCE
      SOURCE #isItemWHSEnabled
        #/// <summary>
        #/// Determines if item is WHS enabled.
        #/// </summary>
        #/// <returns>
        #/// NoYes::Yes if item is WHS enabled; otherwise, NoYes::No.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute]
        #public display WHSIsItemWHSEnabled isItemWHSEnabled()
        #{
        #    return WHSInventEnabled::exist(this.ItemId) ?
        #            NoYes::Yes                          :
        #            NoYes::No;
        #}
      ENDSOURCE
      SOURCE #itemName
        #display public ItemNameDisplay itemName()
        #{
        #    // Fields might not have been selected on the specified buffers, or might have been updated since selection
        #    this.checkInvalidFieldAccess(false);
        #
        #    if (this.InventDimId)
        #    {
        #        return this.inventTable().itemName(InventDim::find(this.InventDimId));
        #    }
        #    return this.inventTable().itemName();
        #}
      ENDSOURCE
      SOURCE #lastPhysicalDate
        #display public DatePhysical lastPhysicalDate(
        #    InventDim       _inventDimCriteria  = null,
        #    InventDimParm   _inventDimParm      = null)
        #{
        #    #InventDimDevelop
        #
        #    InventTrans inventTrans;
        #    InventDim   inventDim;
        #
        #    if (_inventDimParm.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
        #    {
        #        #inventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,serialIdIdx)
        #        join maxof(DatePhysical) from inventTrans
        #            index hint DimIdIdx
        #            where inventTrans.InventDimId        == inventDim.InventDimId
        #               && inventTrans.ItemId             == this.ItemId;
        #    }
        #    else if (_inventDimParm.InventBatchIdFlag && _inventDimCriteria.InventBatchId)
        #    {
        #        #inventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,batchIdIdx)
        #        join maxof(DatePhysical) from inventTrans
        #            index hint DimIdIdx
        #            where inventTrans.InventDimId        == inventDim.InventDimId
        #               && inventTrans.ItemId             == this.ItemId;
        #    }
        #    else
        #    {
        #        select maxof(DatePhysical) from inventTrans
        #            where inventTrans.ItemId             == this.ItemId
        #        #InventDimExistsJoin(inventTrans.InventDimId,InventDim,_inventDimCriteria,_inventDimParm);
        #    }
        #
        #    return inventTrans.DatePhysical;
        #}
      ENDSOURCE
      SOURCE #merge
        #public void merge(Common _mergeInto)
        #{
        #    InventSum mergeIntoSum;
        #    if (_mergeInto is InventSum)
        #    {
        #        mergeIntoSum = _mergeInto as InventSum;
        #        mergeIntoSum.PostedQty        += this.PostedQty;
        #        mergeIntoSum.PostedValue      += this.PostedValue;
        #        mergeIntoSum.Deducted         += this.Deducted;
        #        mergeIntoSum.Received         += this.Received;
        #        mergeIntoSum.ReservPhysical   += this.ReservPhysical;
        #        mergeIntoSum.ReservOrdered    += this.ReservOrdered;
        #        mergeIntoSum.OnOrder          += this.OnOrder;
        #        mergeIntoSum.Ordered          += this.Ordered;
        #        mergeIntoSum.QuotationIssue   += this.QuotationIssue;
        #        mergeIntoSum.QuotationReceipt += this.QuotationReceipt;
        #        mergeIntoSum.Registered       += this.Registered;
        #        mergeIntoSum.Picked           += this.Picked;
        #        mergeIntoSum.AvailOrdered     += this.AvailOrdered;
        #        mergeIntoSum.AvailPhysical    += this.AvailPhysical;
        #        mergeIntoSum.PhysicalValue    += this.PhysicalValue;
        #        mergeIntoSum.Arrived          += this.Arrived;
        #        mergeIntoSum.PhysicalInvent   += this.PhysicalInvent;
        #
        #        mergeIntoSum.PdsCWPostedQty        += this.PdsCWPostedQty;
        #        mergeIntoSum.PdsCWDeducted         += this.PdsCWDeducted;
        #        mergeIntoSum.PdsCWReceived         += this.PdsCWReceived;
        #        mergeIntoSum.PdsCWReservPhysical   += this.PdsCWReservPhysical;
        #        mergeIntoSum.PdsCWReservOrdered    += this.PdsCWReservOrdered;
        #        mergeIntoSum.PdsCWOnOrder          += this.PdsCWOnOrder;
        #        mergeIntoSum.PdsCWOrdered          += this.PdsCWOrdered;
        #        mergeIntoSum.PdsCWQuotationIssue   += this.PdsCWQuotationIssue;
        #        mergeIntoSum.PdsCWQuotationReceipt += this.PdsCWQuotationReceipt;
        #        mergeIntoSum.PdsCWRegistered       += this.PdsCWRegistered;
        #        mergeIntoSum.PdsCWPicked           += this.PdsCWPicked;
        #        mergeIntoSum.PdsCWAvailOrdered     += this.PdsCWAvailOrdered;
        #        mergeIntoSum.PdsCWAvailPhysical    += this.PdsCWAvailPhysical;
        #        mergeIntoSum.PdsCWArrived          += this.PdsCWArrived;
        #        mergeIntoSum.PdsCWPhysicalInvent   += this.PdsCWPhysicalInvent;
        #
        #        // <GEERU>
        #        mergeIntoSum.PhysicalValueSecCur_RU   += this.PhysicalValueSecCur_RU;
        #        mergeIntoSum.PostedValueSecCur_RU     += this.PostedValueSecCur_RU;
        #        // </GEERU>
        #        if (mergeIntoSum.LastUpdDatePhysical < this.LastUpdDatePhysical)
        #        {
        #            mergeIntoSum.LastUpdDatePhysical  = this.LastUpdDatePhysical;
        #        }
        #        if (mergeIntoSum.LastUpdDateExpected < this.LastUpdDateExpected)
        #        {
        #            mergeIntoSum.LastUpdDateExpected  = this.LastUpdDateExpected;
        #        }
        #        mergeIntoSum.ClosedQty        = mergeIntoSum.isAllQtyFieldsZero();
        #        mergeIntoSum.Closed           = mergeIntoSum.isAllValueFieldsZero() && mergeIntoSum.ClosedQty;
        #    }
        #
        #    super(_mergeInto);
        #}
      ENDSOURCE
      SOURCE #orderedSum
        #display public inventQtyOrderedSum orderedSum()
        #{
        #    return this.Ordered + this.Arrived;
        #}
      ENDSOURCE
      SOURCE #pdsAddSum
        #public void pdsAddSum(InventSum _inventSum)
        #{
        #    if (this.ItemId == _inventSum.ItemId
        #        && this.InventDimId == _inventSum.InventDimId)
        #    {
        #        this.AvailOrdered           += _inventSum.AvailOrdered;
        #        this.AvailPhysical          += _inventSum.AvailPhysical;
        #        this.Deducted               += _inventSum.Deducted;
        #        this.OnOrder                += _inventSum.OnOrder;
        #        this.Ordered                += _inventSum.Ordered;
        #        this.PhysicalInvent         += _inventSum.PhysicalInvent;
        #        this.Picked                 += _inventSum.Picked;
        #        this.PostedQty              += _inventSum.PostedQty;
        #        this.QuotationIssue         += _inventSum.QuotationIssue;
        #        this.QuotationReceipt       += _inventSum.QuotationReceipt;
        #        this.Received               += _inventSum.Received;
        #        this.Registered             += _inventSum.Registered;
        #        this.ReservOrdered          += _inventSum.ReservOrdered;
        #        this.ReservPhysical         += _inventSum.ReservPhysical;
        #        this.PdsCWArrived           += _inventSum.PdsCWArrived;
        #        this.PdsCWAvailOrdered      += _inventSum.PdsCWAvailOrdered;
        #        this.PdsCWAvailPhysical     += _inventSum.PdsCWAvailPhysical;
        #        this.PdsCWDeducted          += _inventSum.PdsCWDeducted;
        #        this.PdsCWOnOrder           += _inventSum.PdsCWOnOrder;
        #        this.PdsCWOrdered           += _inventSum.PdsCWOrdered;
        #        this.PdsCWPhysicalInvent    += _inventSum.PdsCWPhysicalInvent;
        #        this.PdsCWPicked            += _inventSum.PdsCWPicked;
        #        this.PdsCWPostedQty         += _inventSum.PdsCWPostedQty;
        #        this.PdsCWQuotationIssue    += _inventSum.PdsCWQuotationIssue;
        #        this.PdsCWQuotationReceipt  += _inventSum.PdsCWQuotationReceipt;
        #        this.PdsCWReceived          += _inventSum.PdsCWReceived;
        #        this.PdsCWRegistered        += _inventSum.PdsCWRegistered;
        #        this.PdsCWReservOrdered     += _inventSum.PdsCWReservOrdered;
        #        this.PdsCWReservPhysical    += _inventSum.PdsCWReservPhysical;
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsAvailAttribReservation
        #/// <summary>
        #/// Retrieves the available inventory for reservation based on batch attributes; obsolete.
        #/// </summary>
        #/// <param name="_buffer">
        #/// The current record for which to retrieve availability information.
        #/// </param>
        #/// <param name="_reserveOnOrdered">
        #/// A <c>NoYes</c> parameter that specifies if reservation against ordered items should be allowed.
        #/// </param>
        #/// <returns>
        #/// The inventory available for reservation minus the batch attribute limitation.
        #/// </returns>
        #/// <remarks>
        #/// Check the available inventory to determine is any of all is available based on the batch
        #/// attributes. The return value cannot be less than <c>0</c>.
        #/// </remarks>
        #[SysObsoleteAttribute('Use InventOnhandQty.availReservation instead. Make sure to use advanced reservation criteria.', true)]
        #public display InventQtyAvailReservation pdsAvailAttribReservation(
        #    Common  _buffer,
        #    NoYes   _reserveOnOrdered = NoYes::Yes)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsClearSum
        #public void pdsClearSum()
        #{
        #    this.AvailOrdered           = 0;
        #    this.AvailPhysical          = 0;
        #    this.Deducted               = 0;
        #    this.OnOrder                = 0;
        #    this.Ordered                = 0;
        #    this.PhysicalInvent         = 0;
        #    this.Picked                 = 0;
        #    this.PostedQty              = 0;
        #    this.QuotationIssue         = 0;
        #    this.QuotationReceipt       = 0;
        #    this.Received               = 0;
        #    this.Registered             = 0;
        #    this.ReservOrdered          = 0;
        #    this.ReservPhysical         = 0;
        #    this.PdsCWArrived           = 0;
        #    this.PdsCWAvailOrdered      = 0;
        #    this.PdsCWAvailPhysical     = 0;
        #    this.PdsCWDeducted          = 0;
        #    this.PdsCWOnOrder           = 0;
        #    this.PdsCWOrdered           = 0;
        #    this.PdsCWPhysicalInvent    = 0;
        #    this.PdsCWPicked            = 0;
        #    this.PdsCWPostedQty         = 0;
        #    this.PdsCWQuotationIssue    = 0;
        #    this.PdsCWQuotationReceipt  = 0;
        #    this.PdsCWReceived          = 0;
        #    this.PdsCWRegistered        = 0;
        #    this.PdsCWReservOrdered     = 0;
        #    this.PdsCWReservPhysical    = 0;
        #}
      ENDSOURCE
      SOURCE #pdsCustExpiredOrBlockPhysical
        #/// <summary>
        #///     Retrieves the unavailable inventory quantity that is expired or sales-reserve-blocked.
        #/// </summary>
        #/// <param name="_sellDays">
        #///     Allowed sell days.
        #/// </param>
        #/// <param name="_dateReq">
        #///     A date value that contains a requested date for search.
        #/// </param>
        #/// <param name="_inventDim">
        #///     InventDim criteria to use for search.
        #/// </param>
        #/// <returns>
        #///     Retrieves the container that contains PhysicalInvent and PdsCWPhysicalInvent.
        #/// </returns>
        #public server container pdsCustExpiredOrBlockPhysical(
        #    PdsSellableDays             _sellDays,
        #    SalesReceiptDateRequested   _dateReq,
        #    InventDim                   _inventDim
        #    )
        #{
        #    InventModelGroup inventModelGroup;
        #    InventSum inventSum;
        #    InventDim inventDim;
        #    InventDimParm inventDimParm;
        #    InventBatch inventBatch;
        #    PdsDispositionMaster pdsDispositionMaster;
        #    InventQty expiredOrBlockQty;
        #    PdsCWInventQty expiredOrBlockCwQty;
        #
        #    InventTable inventTable = this.inventTable();
        #
        #    if (inventTable.isItemBatchActivated())
        #    {
        #        inventModelGroup = this.inventTable().modelGroup();
        #
        #        select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
        #            from inventSum
        #            where inventSum.ClosedQty  == NoYes::No
        #               && inventSum.ItemId == this.ItemId
        #            #inventDimExistsJoin(InventSum.inventDimId, inventDim, _inventDim, inventDimParm)
        #            exists join inventBatch
        #            where inventBatch.InventBatchId == inventDim.InventBatchId
        #                && inventBatch.ItemId == this.ItemId
        #            exists join pdsDispositionMaster
        #            where (inventBatch.PdsDispositionCode == pdsDispositionMaster.DispositionCode
        #                       && pdsDispositionMaster.PdsSalesBlockReserve == NoYes::Yes);
        #
        #        expiredOrBlockQty = inventSum.PhysicalInvent;
        #        expiredOrBlockCwQty = inventSum.PdsCWPhysicalInvent;
        #
        #        select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
        #            from inventSum
        #            where inventSum.ClosedQty == NoYes::No
        #               && inventSum.ItemId    == this.ItemId
        #            #inventDimExistsJoin(InventSum.inventDimId, inventDim, _inventDim, inventDimParm)
        #            exists join inventBatch
        #            where inventBatch.InventBatchId == inventDim.InventBatchId
        #                && inventBatch.ItemId == this.ItemId
        #                && (#PdsShelfEnabled
        #                        && inventBatch.ExpDate != dateNull()
        #                        && ((inventModelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate
        #                                && inventBatch.PdsBestBeforeDate < _dateReq + _sellDays)
        #                            || (inventModelGroup.PdsPickCriteria  == PdsPickCriteria::ExpiryDate
        #                                && inventBatch.ExpDate < _dateReq + _sellDays - 1)))
        #            notexists join pdsDispositionMaster
        #            where inventBatch.PdsDispositionCode == pdsDispositionMaster.DispositionCode
        #                      && pdsDispositionMaster.PdsSalesBlockReserve == NoYes::Yes;
        #
        #        expiredOrBlockQty += inventSum.PhysicalInvent;
        #        expiredOrBlockCwQty += inventSum.PdsCWPhysicalInvent;
        #    }
        #
        #    return [expiredOrBlockQty, expiredOrBlockCwQty];
        #}
      ENDSOURCE
      SOURCE #pdsCustExpiredPhysical
        #public server container pdsCustExpiredPhysical(
        #    PdsSellableDays             _sellDays,
        #    SalesReceiptDateRequested   _dateReq,
        #    InventDim                   _inventDim,
        #    InventBatch                 _inventBatch = null
        #    )
        #{
        #    InventModelGroup    inventModelGroup;
        #
        #    InventSum           inventSum;
        #    InventDim           inventDim;
        #    InventBatch         inventBatch;
        #
        #    InventTable         inventTable = this.inventTable();
        #
        #    if (#PdsShelfEnabled
        #        && inventTable.isItemBatchActivated())
        #    {
        #        inventModelGroup = this.inventTable().modelGroup();
        #
        #        if (_inventBatch && !_inventDim.InventBatchId)
        #        {
        #            select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
        #                from inventSum
        #                group by ItemId
        #                where  inventSum.ClosedQty  == NoYes::No
        #                    && inventSum.ItemId     == this.ItemId
        #                join TableId
        #                from inventDim
        #                where inventDim.InventDimId             == inventSum.InventDimId
        #                    && inventDim.InventBatchId          == _inventBatch.InventBatchId
        #                    && (!_inventDim.InventLocationId
        #                        || inventDim.InventLocationId   == _inventDim.InventLocationId)
        #                    && (!_inventDim.InventSiteId
        #                        || inventDim.InventSiteId       == _inventDim.InventSiteId)
        #                join TableId
        #                from inventBatch
        #                where inventBatch.InventBatchId                 == inventDim.InventBatchId
        #                    && inventBatch.ItemId                       == this.ItemId
        #                    && ((inventModelGroup.PdsPickCriteria       == PdsPickCriteria::BestBeforeDate
        #                            && inventBatch.PdsBestBeforeDate    > _dateReq + _sellDays)
        #                        || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
        #                            && inventBatch.ExpDate              < _dateReq + _sellDays-1))
        #                    &&  inventBatch.ExpDate                     != dateNull();
        #        }
        #        else
        #        {
        #            select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
        #                from inventSum
        #                group by ItemId
        #                where  inventSum.ClosedQty  == NoYes::No
        #                    && inventSum.ItemId     == this.ItemId
        #                join TableId
        #                from inventDim
        #                where inventDim.InventDimId             == inventSum.InventDimId
        #                    && (!_inventDim.InventBatchId
        #                        || inventDim.InventBatchId      == _inventDim.InventBatchId)
        #                    && (!_inventDim.InventLocationId
        #                        || inventDim.InventLocationId   == _inventDim.InventLocationId)
        #                    && (!_inventDim.InventSiteId
        #                        || inventDim.InventSiteId       == _inventDim.InventSiteId)
        #                join TableId
        #                from inventBatch
        #                where inventBatch.InventBatchId                 == inventDim.InventBatchId
        #                    && inventBatch.ItemId                       == this.ItemId
        #                    && ((inventModelGroup.PdsPickCriteria       == PdsPickCriteria::BestBeforeDate
        #                            && inventBatch.PdsBestBeforeDate    > _dateReq + _sellDays)
        #                        || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
        #                            && inventBatch.ExpDate              < _dateReq+ _sellDays-1))
        #                    &&  inventBatch.ExpDate                     != dateNull();
        #        }
        #    }
        #
        #    return [inventSum.PhysicalInvent, inventSum.PdsCWPhysicalInvent];
        #}
      ENDSOURCE
      SOURCE #pdsCWAvailAttribReservation
        #/// <summary>
        #/// Retrieves the available inventory for reservation based on batch attributes.
        #/// </summary>
        #/// <param name="_buffer">
        #/// The current record for which to retrieve availability information.
        #/// </param>
        #/// <param name="_reserveOnOrdered">
        #/// A <c>NoYes</c> parameter that specifies if reservation against ordered items should be allowed.
        #/// </param>
        #/// <returns>
        #/// Available for reservation minus the batch attribute limitation.
        #/// </returns>
        #/// <remarks>
        #/// Check the available inventory to determine is any of all is available based on the batch
        #/// attributes. The return value cannot be less than <c>0</c>.
        #/// </remarks>
        #[SysObsoleteAttribute('Use InventAvailabilityProvider.findByDimWithAutoReservationCriteria instead.', true)]
        #public display PdsCWAvailReservation pdsCWAvailAttribReservation(
        #    Common  _buffer,
        #    NoYes   _reserveOnOrdered = NoYes::Yes)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsCWAvailOrderedCalculated
        #public display PdsCWAvailOrdered  pdsCWAvailOrderedCalculated(
        #    boolean _inclAvailPhysical = true)
        #{
        #    return (_inclAvailPhysical ? this.pdsCWAvailPhysicalCalculated() : 0)
        #        + this.PdsCWOrdered
        #        + this.PdsCWArrived
        #        - this.PdsCWReservOrdered
        #        - this.PdsCWOnOrder;
        #
        #}
      ENDSOURCE
      SOURCE #pdsCWAvailPhysicalCalculated
        #public display PdsCWAvailPhysical pdsCWAvailPhysicalCalculated()
        #{
        #    return (this.pdsCWPhysicalInventCalculated() - this.PdsCWReservPhysical);
        #}
      ENDSOURCE
      SOURCE #pdsCWAvailReservation
        #/// <summary>
        #/// Retrieves available for reservation inventory quantity in catch weight unit.
        #/// </summary>
        #/// <param name="_reserveOnOrdered">
        #/// A <c>NoYes</c> parameter that specifies if reservation against ordered items should be allowed.
        #/// </param>
        #/// <returns>
        #/// Available for reservation inventory quantity in catch weight unit.
        #/// </returns>
        #public display PdsCWAvailReservation pdsCWAvailReservation(NoYes _reserveOnOrdered = NoYes::Yes)
        #{
        #    if (_reserveOnOrdered)
        #    {
        #        return this.pdsCWAvailOrderedCalculated() + this.PdsCWOnOrder;
        #    }
        #
        #    return this.pdsCWAvailPhysicalCalculated();
        #}
      ENDSOURCE
      SOURCE #pdsCWOrderedSum
        #public display PdsCWInventQtyOrderedSum pdsCWOrderedSum()
        #{
        #
        #    return this.PdsCWOrdered + this.PdsCWArrived;
        #}
      ENDSOURCE
      SOURCE #pdsCWPhysicalInventCalculated
        #public display PdsCWPhysicalInvent pdsCWPhysicalInventCalculated()
        #{
        #    return this.PdsCWPostedQty
        #        + this.PdsCWReceived
        #        - this.PdsCWDeducted
        #        + this.PdsCWRegistered
        #        - this.PdsCWPicked;
        #}
      ENDSOURCE
      SOURCE #pdsCWUnitId
        #/// <summary>
        #/// Returns the catchweight unit of the item that is related to the current record.
        #/// </summary>
        #/// <returns>
        #/// The catchweight unit of the item.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(false)]
        #display PdsCWUnitId pdsCWUnitId()
        #{
        #    return PdsCatchWeight::cwUnitId(this.ItemId);
        #}
      ENDSOURCE
      SOURCE #pdsExpiredPhysical
        #/// <summary>
        #///    Gets the total physical inventory for batches that have expired.
        #/// </summary>
        #/// <param name="_inventDim">
        #///    A record for the <c>InventDim</c> table containing the criteria site, warehouse, and batch to search.
        #/// </param>
        #/// <param name="_inventBatch">
        #///    A record for the <c>InventBatch</c> table containing the batch to check; optional. This will only be used
        #///    if the inventory batch field in <paramref name="_inventDim"/> is empty.
        #/// </param>
        #/// <returns>
        #///    A container of two elements with the total inventory and total catch weight inventory for all the matching expired batches.
        #/// </returns>
        #public server container pdsExpiredPhysical(
        #    InventDim   _inventDim,
        #    InventBatch _inventBatch = null)
        #{
        #    InventSum               inventSum;
        #    InventDim               inventDim;
        #    InventTable             inventTable = this.inventTable();
        #    InventShelfLifeCriteria criteria;
        #    InventDimParm           inventDimParm;
        #    Query                   query;
        #
        #    if (#PdsShelfEnabled
        #        && inventTable.PdsShelfLife
        #        && inventTable.isItemBatchActivated())
        #    {
        #        inventDim.data(_inventDim);
        #        if (!inventDim.InventBatchId && _inventBatch)
        #        {
        #            inventDim.InventBatchId = _inventBatch.InventBatchId;
        #        }
        #        inventDimParm.ItemIdFlag            = NoYes::Yes;
        #        #InventDimDevelop
        #        inventDimParm.InventSiteIdFlag      = (inventDim.InventSiteId     != "");
        #        inventDimParm.InventLocationIdFlag  = (inventDim.InventLocationId != "");
        #        inventDimParm.InventBatchIdFlag     = (inventDim.InventBatchId    != "");
        #
        #        criteria = InventShelfLifeCriteria::newItemExpiry(this.ItemId, systemDateGet());
        #        criteria.parmSelectExpired(true);
        #        query = InventSum::newQuery(null, this.ItemId, inventDim, inventDimParm, null);
        #        criteria.applyToOnHand(query);
        #        inventSum = criteria.mergeMatchingRecords(query, tableNum(InventSum));
        #    }
        #
        #    return [inventSum.PhysicalInvent, inventSum.PdsCWPhysicalInvent];
        #}
      ENDSOURCE
      SOURCE #pdsNonNetPhysical
        #public container pdsNonNetPhysical(
        #    InventDim   _inventDim,
        #    InventBatch _inventBatch = null)
        #{
        #    InventSum               inventSum;
        #    boolean                 shelflifeItem;
        #    InventTable             inventTable = this.inventTable();
        #
        #    if (#PdsEnabled
        #        && this.PhysicalInvent
        #        && inventTable.isItemBatchActivated())
        #    {
        #        shelflifeItem = inventTable.isShelfLifeItem();
        #
        #        if (shelflifeItem)
        #        {
        #            inventSum = this.pdsNonNetPhysicalSLItem(_inventDim,_inventBatch);
        #        }
        #        else
        #        {
        #            inventSum = this.pdsNonNetPhysicalNonSL(_inventDim,_inventBatch);
        #        }
        #
        #    }
        #
        #    return [inventSum.PhysicalInvent, inventSum.PdsCWPhysicalInvent];
        #}
      ENDSOURCE
      SOURCE #pdsNonNetPhysicalNonSL
        #private server InventSum pdsNonNetPhysicalNonSL(
        #    InventDim   _inventDim,
        #    InventBatch _inventBatch = null)
        #{
        #    InventSum               inventSum;
        #    InventDim               inventDim;
        #    InventBatch             inventBatch;
        #    PdsDispositionMaster    dispositionMaster;
        #
        #    if (_inventBatch && !_inventDim.InventBatchId)
        #    {
        #        select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
        #            from inventSum
        #            group by ItemId
        #            where  inventSum.ClosedQty == NoYes::No
        #                && inventSum.ItemId == this.ItemId
        #            join TableId
        #            from inventDim
        #            where inventDim.InventDimId == inventSum.InventDimId
        #                && inventDim.InventBatchId == _inventBatch.InventBatchId
        #                && (!_inventDim.InventLocationId
        #                    || inventDim.InventLocationId
        #                        == _inventDim.InventLocationId)
        #                && (!_inventDim.InventSiteId
        #                    || inventDim.InventSiteId == _inventDim.InventSiteId)
        #            join TableId
        #            from inventBatch
        #            where inventBatch.InventBatchId == inventDim.InventBatchId
        #                && inventBatch.ItemId       == this.ItemId
        #            join TableId
        #            from dispositionMaster
        #            where dispositionMaster.DispositionCode
        #                    == inventBatch.PdsDispositionCode
        #                && dispositionMaster.Status == PdsStatus::Unavailable
        #                && !dispositionMaster.PdsNettable;
        #    }
        #    else
        #    {
        #        select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
        #        from inventSum
        #        group by ItemId
        #        where  inventSum.ClosedQty == NoYes::No
        #            && inventSum.ItemId == this.ItemId
        #        join TableId
        #        from inventDim
        #        where inventDim.InventDimId == inventSum.InventDimId
        #            && (!_inventDim.InventBatchId
        #                || inventDim.InventBatchId == _inventDim.InventBatchId)
        #            && (!_inventDim.InventLocationId
        #                || inventDim.InventLocationId
        #                    == _inventDim.InventLocationId)
        #            && (!_inventDim.InventSiteId
        #                || inventDim.InventSiteId == _inventDim.InventSiteId)
        #        join TableId
        #        from inventBatch
        #        where inventBatch.InventBatchId == inventDim.InventBatchId
        #            && inventBatch.ItemId       == this.ItemId
        #        join TableId
        #        from dispositionMaster
        #        where dispositionMaster.DispositionCode
        #                == inventBatch.PdsDispositionCode
        #            && dispositionMaster.Status == PdsStatus::Unavailable
        #            && !dispositionMaster.PdsNettable;
        #    }
        #
        #    return inventSum;
        #}
      ENDSOURCE
      SOURCE #pdsNonNetPhysicalSLItem
        #private server InventSum pdsNonNetPhysicalSLItem(
        #    InventDim   _inventDim,
        #    InventBatch _inventBatch = null)
        #{
        #    InventModelGroup    inventModelGroup;
        #
        #    InventSum               inventSum;
        #    InventDim               inventDim;
        #    InventBatch             inventBatch;
        #    PdsDispositionMaster    dispositionMaster;
        #
        #    TransDate               bestBeforeDate = systemDateGet()-1;
        #
        #    inventModelGroup = this.inventTable().modelGroup();
        #
        #    if (_inventBatch && !_inventDim.InventBatchId)
        #    {
        #        select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
        #            from inventSum
        #            group by ItemId
        #            where  inventSum.ClosedQty  == NoYes::No
        #                && inventSum.ItemId     == this.ItemId
        #            join TableId
        #            from inventDim
        #            where  inventDim.InventDimId            == inventSum.InventDimId
        #                && inventDim.InventBatchId          == _inventBatch.InventBatchId
        #                && (!_inventDim.InventLocationId
        #                    || inventDim.InventLocationId   == _inventDim.InventLocationId)
        #                && (!_inventDim.InventSiteId
        #                    || inventDim.InventSiteId       == _inventDim.InventSiteId)
        #            join TableId
        #            from inventBatch
        #            where  inventBatch.InventBatchId                == inventDim.InventBatchId
        #                && inventBatch.ItemId                       == this.ItemId
        #                && !((inventModelGroup.PdsPickCriteria      == PdsPickCriteria::BestBeforeDate
        #                        && inventBatch.PdsBestBeforeDate    < bestBeforeDate)
        #                    || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
        #                        && inventBatch.ExpDate              < systemDateGet()))
        #            join TableId
        #            from dispositionMaster
        #            where dispositionMaster.DispositionCode == inventBatch.PdsDispositionCode
        #                && dispositionMaster.Status         == PdsStatus::Unavailable
        #                && !dispositionMaster.PdsNettable;
        #    }
        #    else
        #    {
        #        select sum(PhysicalInvent), sum(PdsCWPhysicalInvent)
        #            from inventSum
        #            group by ItemId
        #            where  inventSum.ClosedQty  == NoYes::No
        #                && inventSum.ItemId     == this.ItemId
        #            join TableId
        #            from inventDim
        #            where  inventDim.InventDimId            == inventSum.InventDimId
        #                && (!_inventDim.InventBatchId
        #                    || inventDim.InventBatchId      == _inventDim.InventBatchId)
        #                && (!_inventDim.InventLocationId
        #                    || inventDim.InventLocationId   == _inventDim.InventLocationId)
        #                && (!_inventDim.InventSiteId
        #                    || inventDim.InventSiteId       == _inventDim.InventSiteId)
        #            join TableId
        #            from inventBatch
        #            where  inventBatch.InventBatchId                == inventDim.InventBatchId
        #                && inventBatch.ItemId                       == this.ItemId
        #                && !((inventModelGroup.PdsPickCriteria      == PdsPickCriteria::BestBeforeDate
        #                        && inventBatch.PdsBestBeforeDate    < bestBeforeDate)
        #                    || (inventModelGroup.PdsPickCriteria    == PdsPickCriteria::ExpiryDate
        #                        && inventBatch.ExpDate              < systemDateGet()))
        #            join TableId
        #            from dispositionMaster
        #            where dispositionMaster.DispositionCode == inventBatch.PdsDispositionCode
        #                && dispositionMaster.Status         == PdsStatus::Unavailable
        #                && !dispositionMaster.PdsNettable;
        #    }
        #
        #    return inventSum;
        #}
      ENDSOURCE
      SOURCE #pdsSubSum
        #/// <summary>
        #/// Subtract the value of one InventSum record from another.
        #/// </summary>
        #/// <param name="_subFrom">
        #/// The InventSum Record from which to subtract.
        #/// </param>
        #/// <returns>
        #/// Returns resulting InventSum record
        #/// </returns>
        #/// <remarks>
        #/// The current InventSum record is subtracted from the record passed in
        #/// via the _subFrom parameter.
        #/// </remarks>
        #public InventSum pdsSubSum(InventSum _subFrom)
        #{
        #    _subFrom.PostedQty          -= this.PostedQty;
        #    _subFrom.PostedValue        -= this.PostedValue;
        #    _subFrom.Deducted           -= this.Deducted;
        #    _subFrom.Received           -= this.Received;
        #    _subFrom.ReservPhysical     -= this.ReservPhysical;
        #    _subFrom.ReservOrdered      -= this.ReservOrdered;
        #    _subFrom.OnOrder            -= this.OnOrder;
        #    _subFrom.Ordered            -= this.Ordered;
        #    _subFrom.QuotationIssue     -= this.QuotationIssue;
        #    _subFrom.QuotationReceipt   -= this.QuotationReceipt;
        #    _subFrom.Registered         -= this.Registered;
        #    _subFrom.Picked             -= this.Picked;
        #    _subFrom.AvailOrdered       -= this.AvailOrdered;
        #    _subFrom.AvailPhysical      -= this.AvailPhysical;
        #    _subFrom.PhysicalValue      -= this.PhysicalValue;
        #    _subFrom.Arrived            -= this.Arrived;
        #    _subFrom.PhysicalInvent     -= this.PhysicalInvent;
        #
        #    _subFrom.PdsCWPostedQty         -= this.PdsCWPostedQty;
        #    _subFrom.PdsCWDeducted          -= this.PdsCWDeducted;
        #    _subFrom.PdsCWReceived          -= this.PdsCWReceived;
        #    _subFrom.PdsCWReservPhysical    -= this.PdsCWReservPhysical;
        #    _subFrom.PdsCWReservOrdered     -= this.PdsCWReservOrdered;
        #    _subFrom.PdsCWOnOrder           -= this.PdsCWOnOrder;
        #    _subFrom.PdsCWOrdered           -= this.PdsCWOrdered;
        #    _subFrom.PdsCWQuotationIssue    -= this.PdsCWQuotationIssue;
        #    _subFrom.PdsCWQuotationReceipt  -= this.PdsCWQuotationReceipt;
        #    _subFrom.PdsCWRegistered        -= this.PdsCWRegistered;
        #    _subFrom.PdsCWPicked            -= this.PdsCWPicked;
        #    _subFrom.PdsCWAvailOrdered      -= this.PdsCWAvailOrdered;
        #    _subFrom.PdsCWAvailPhysical     -= this.PdsCWAvailPhysical;
        #    _subFrom.PdsCWArrived           -= this.PdsCWArrived;
        #    _subFrom.PdsCWPhysicalInvent    -= this.PdsCWPhysicalInvent;
        #
        #    _subFrom.ClosedQty        = _subFrom.isAllQtyFieldsZero();
        #    _subFrom.Closed           = _subFrom.isAllValueFieldsZero() && _subFrom.ClosedQty;
        #
        #    return _subFrom;
        #}
      ENDSOURCE
      SOURCE #physicalInventCalculated
        #display public InventQtyPhysicalOnhand physicalInventCalculated()
        #{
        #    return this.PostedQty + this.Received - this.Deducted + this.Registered - this.Picked;
        #}
      ENDSOURCE
      SOURCE #reqTrans
        #ReqTrans reqTrans(InventDimId   _covInventDimId,
        #                  RefRecId      _reqPlanVersion = ReqPlanVersion::findActiveReqPlanIdDynamic().RecId,
        #                  boolean       _forupdate      = false)
        #{
        #    ReqTrans    reqTrans;
        #
        #    reqTrans.selectForupdate(_forupdate);
        #
        #    select firstonly reqTrans
        #        where reqTrans.itemid          == this.itemId
        #            && reqTrans.CovInventDimId == _covInventDimId
        #            && reqTrans.PlanVersion    == _reqPlanVersion;
        #
        #    return reqTrans;
        #}
      ENDSOURCE
      SOURCE #setAvailFields
        #public void setAvailFields()
        #{
        #    this.AvailOrdered   = this.availOrderedCalculated();
        #    this.AvailPhysical  = this.availPhysicalCalculated();
        #    this.PhysicalInvent = this.physicalInventCalculated();
        #
        #    this.PdsCWAvailOrdered  = this.pdsCWAvailOrderedCalculated();
        #    this.PdsCWAvailPhysical = this.pdsCWAvailPhysicalCalculated();
        #    this.PdsCWPhysicalInvent = this.pdsCWPhysicalInventCalculated();
        #}
      ENDSOURCE
      SOURCE #setLastUpdDatesFromTransferIssue
        #private void setLastUpdDatesFromTransferIssue(
        #    InventTrans _inventTransReceipt,
        #    InventDimId _inventDimIdTransferIssue = '')
        #{
        #    InventTransOriginId         issueInventTransOriginId;
        #    InventTrans                 inventTrans;
        #    InventTrans                 inventTrans2;
        #    InventSum                   inventSumIssue;
        #    InventSumDelta              inventSumDelta;
        #    InventJournalTrans          inventJournalTrans;
        #    WMSOrder                    wmsOrder;
        #    WMSOrderTrans               wmsOrderTrans;
        #    InventQuarantineOrder       inventQuarantineOrder;
        #    InventTransferLine          inventTransferLine;
        #    InventTransferTable         inventTransferTable;
        #    InventTransOriginWMSOrder   inventTransOriginWMSOrder;
        #    KanbanJob                   kanbanJob;
        #
        #    InventDimParm               inventDimParmTransfer;
        #    InventDim                   inventDimTransferIssue;
        #    InventDim                   inventDimIssue;
        #    InventDimId                 inventDimIdFrom = '';
        #    InventTransOrigin           receiptInventTransOrigin;
        #
        #    boolean issueTransactionExists(InventDimId inventDimId)
        #    {
        #        InventTrans inventTransLocal;
        #
        #        select firstonly RecId from inventTransLocal
        #            where inventTransLocal.InventDimId          == inventDimId
        #               && inventTransLocal.InventTransOrigin    == issueInventTransOriginId
        #               && inventTransLocal.StatusReceipt        == StatusReceipt::None
        #               && inventTransLocal.Qty                   < 0;
        #
        #        return (inventTransLocal.RecId != 0);
        #    }
        #
        #    void mergeDimWithOwnerAndTest(InventDim _inventDimOwner)
        #    {
        #        InventDim   inventDimIssueLocal;
        #
        #        inventDimIssueLocal.data(_inventTransReceipt.inventDim());
        #        inventDimIssueLocal.mergeUsedDim(InventDimGroupSetup::newItemId(_inventTransReceipt.ItemId), _inventDimOwner);
        #        inventDimIssueLocal = InventDim::findOrCreate(inventDimIssueLocal);
        #        if (inventDimIssueLocal.InventDimId != _inventTransReceipt.InventDimId && issueTransactionExists(inventDimIssueLocal.InventDimId))
        #        {
        #            inventDimIdFrom = inventDimIssueLocal.InventDimId;
        #        }
        #    }
        #
        #    if (_inventDimIdTransferIssue)
        #    {
        #        inventSumIssue = InventSum::find(_inventTransReceipt.ItemId,_inventDimIdTransferIssue);
        #        if (inventSumIssue.RecId)
        #        {
        #            this.LastUpdDateExpected = inventSumIssue.LastUpdDateExpected;
        #            this.LastUpdDatePhysical = inventSumIssue.LastUpdDatePhysical;
        #            return;
        #        }
        #    }
        #
        #    issueInventTransOriginId = _inventTransReceipt.transferInventTransOrigin().RecId;
        #    receiptInventTransOrigin    = _inventTransReceipt.inventTransOrigin();
        #    // If all issues have same inventDimId then use that to find dates for transfered items
        #    select firstonly InventDimId from inventTrans
        #        where inventTrans.InventTransOrigin == issueInventTransOriginId
        #           && inventTrans.StatusReceipt     == StatusReceipt::None
        #        notexists join inventTrans2
        #            where inventTrans2.InventTransOrigin    == inventTrans.InventTransOrigin
        #               && inventTrans2.StatusReceipt        == StatusReceipt::None
        #               && inventTrans2.InventDimId          != inventTrans.InventDimId;
        #
        #    if (inventTrans.InventDimId)
        #    {
        #        if (_inventTransReceipt.InventDimId != inventTrans.InventDimId)
        #        {
        #            inventSumIssue = InventSum::find(receiptInventTransOrigin.ItemId, inventTrans.InventDimId);
        #            if (inventSumIssue.RecId)
        #            {
        #                this.LastUpdDateExpected = inventSumIssue.LastUpdDateExpected;
        #                this.LastUpdDatePhysical = inventSumIssue.LastUpdDatePhysical;
        #            }
        #            else
        #            {
        #                // When updating invent transaction, the related InventSum may not exists, it will be inserted into datebase later.
        #                // In this case, we need to query dates of inventSumDelta.
        #                select maxOf(LastUpdDateExpected), maxOf(LastUpdDatePhysical) from inventSumDelta
        #                    where inventSumDelta.ItemId        == this.ItemId
        #                        && inventSumDelta.InventDimId  == inventTrans.InventDimId
        #                        && inventSumDelta.IsAggregated == NoYes::No
        #                        && inventSumDelta.ttsId        == appl.inventUpdateOnhandGlobal().inventUpdateOnhand().ttsId();
        #
        #                if (inventSumDelta.LastUpdDateExpected)
        #                {
        #                    this.LastUpdDateExpected = inventSumDelta.LastUpdDateExpected;
        #                }
        #                if (inventSumDelta.LastUpdDatePhysical)
        #                {
        #                    this.LastUpdDatePhysical = inventSumDelta.LastUpdDatePhysical;
        #                }
        #            }
        #        }
        #        return;
        #    }
        #
        #    switch (receiptInventTransOrigin.ReferenceCategory)
        #    {
        #        case InventTransType::InventTransfer:
        #            // for transfer journal it isn't possible to narrow the issue transactions much.
        #            inventJournalTrans = _inventTransReceipt.inventJournalTrans();
        #            if (inventJournalTrans.RecId)
        #            {
        #                mergeDimWithOwnerAndTest(inventJournalTrans.inventDim());
        #            }
        #            break;
        #
        #        case InventTransType::WMSTransport:
        #            select firstonly wmsOrderTrans
        #                exists join wmsOrder
        #                    where wmsOrder.OrderId == wmsOrderTrans.OrderId
        #                    exists join inventTransOriginWMSOrder
        #                        where inventTransOriginWMSOrder.wmsOrderDataAreaId == wmsOrderTrans.DataAreaId
        #                           && inventTransOriginWMSOrder.wmsOrderId         == wmsOrderTrans.OrderId
        #                           && inventTransOriginWMSOrder.InventTransOrigin  == _inventTransReceipt.InventTransOrigin;
        #
        #            if (wmsOrderTrans.RecId)
        #            {
        #                mergeDimWithOwnerAndTest(wmsOrderTrans.inventDim());
        #            }
        #            break;
        #
        #        case InventTransType::QuarantineOrder:
        #            inventQuarantineOrder = InventTransOriginQuarantineOrder::inventQuarantineOrder(receiptInventTransOrigin.RecId);
        #            if (inventQuarantineOrder.RecId)
        #            {
        #                mergeDimWithOwnerAndTest(inventQuarantineOrder.inventDim());
        #            }
        #            break;
        #
        #        case InventTransType::TransferOrderShip,
        #             InventTransType::TransferOrderReceive:
        #            if (receiptInventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip)
        #            {
        #                inventTransferLine = InventTransOriginTransferTransitTo::inventTransferLine(receiptInventTransOrigin.RecId);
        #            }
        #            else
        #            {
        #                inventTransferLine = InventTransOriginTransferReceive::inventTransferLine(receiptInventTransOrigin.RecId);
        #            }
        #            if (inventTransferLine)
        #            {
        #                inventTransferTable = inventTransferLine.inventTransferTable();
        #                issueInventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum);
        #                inventDimIssue = InventDim::find(_inventTransReceipt.InventDimId);
        #                inventDimIssue.InventLocationId = inventTransferTable.InventLocationIdFrom;
        #                inventDimIssue.initFromInventLocation(inventDimIssue.inventLocation());
        #                inventDimParmTransfer.setAllInventDim();
        #                inventDimParmTransfer.wmsLocationIdFlag = NoYes::No; // location won't be the same
        #
        #                select firstonly inventTrans
        #                    where inventTrans.InventTransOrigin == issueInventTransOriginId
        #                       && inventTrans.StatusReceipt     == StatusReceipt::None
        #                       && inventTrans.Qty                < 0
        #                    #InventDimExistsJoin(inventTrans.inventDimId, inventDimTransferIssue, inventDimIssue, inventDimParmTransfer);
        #                if (inventTrans.RecId)
        #                {
        #                    inventDimIdFrom = inventTrans.InventDimId;
        #                }
        #                else if (inventDimIssue.wmsPalletId)
        #                { // pallet itself migth not be transfered
        #                    inventDimParmTransfer.wmsPalletIdFlag = NoYes::No;
        #                    inventDimIssue.wmsPalletId = '';
        #
        #                    select firstonly InventDimId, RecId from inventTrans
        #                        where inventTrans.InventTransOrigin == issueInventTransOriginId
        #                           && inventTrans.StatusReceipt     == StatusReceipt::None
        #                           && inventTrans.Qty                < 0
        #                        #InventDimExistsJoin(inventTrans.inventDimId, inventDimTransferIssue, inventDimIssue, inventDimParmTransfer);
        #
        #                    if (inventTrans.RecId)
        #                    {
        #                        inventDimIdFrom = inventTrans.InventDimId;
        #                    }
        #                }
        #            }
        #            break;
        #        case InventTransType::KanbanJobTransferReceipt:
        #            kanbanJob = InventTransOriginKanbanJobTrsReceipt::kanbanJob(receiptInventTransOrigin.RecId);
        #            if (kanbanJob.RecId)
        #            {
        #                mergeDimWithOwnerAndTest(kanbanJob.issueInventDim());
        #            }
        #            break;
        #        case InventTransType::KanbanJobTransferIssue:
        #            kanbanJob = InventTransOriginKanbanJobTrsIssue::kanbanJob(receiptInventTransOrigin.RecId);
        #            if (kanbanJob.RecId)
        #            {
        #                mergeDimWithOwnerAndTest(kanbanJob.issueInventDim());
        #            }
        #            break;
        #    }
        #
        #    if (!inventDimIdFrom)
        #    {
        #        return;
        #    }
        #
        #    inventSumIssue = InventSum::find(_inventTransReceipt.ItemId, inventDimIdFrom);
        #    if (inventSumIssue.RecId)
        #    {
        #        this.LastUpdDateExpected = inventSumIssue.LastUpdDateExpected;
        #        this.LastUpdDatePhysical = inventSumIssue.LastUpdDatePhysical;
        #    }
        #}
      ENDSOURCE
      SOURCE #subInventTransOnSum
        #public void subInventTransOnSum(InventTrans _inventTrans)
        #{
        #    if (_inventTrans.StatusReceipt== StatusReceipt::None)
        #    {
        #        switch (_inventTrans.StatusIssue)
        #        {
        #            case StatusIssue::Sold:
        #                this.PostedQty    -= _inventTrans.Qty;
        #                this.PostedValue  -= _inventTrans.costValue();
        #                this.PdsCWPostedQty  -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::Deducted:
        #                this.Deducted     += _inventTrans.Qty;
        #                this.PdsCWDeducted     += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::Picked:
        #                this.Picked     += _inventTrans.Qty;
        #                this.PdsCWPicked     += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::ReservPhysical:
        #                this.ReservPhysical+= _inventTrans.Qty;
        #                this.PdsCWReservPhysical+= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::ReservOrdered:
        #                this.ReservOrdered+= _inventTrans.Qty;
        #                this.PdsCWReservOrdered+= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::OnOrder:
        #                this.OnOrder      += _inventTrans.Qty;
        #                this.PdsCWOnOrder      += _inventTrans.PdsCWQty;
        #                break;
        #            case StatusIssue::QuotationIssue:
        #                this.QuotationIssue+= _inventTrans.Qty;
        #                this.PdsCWQuotationIssue+= _inventTrans.PdsCWQty;
        #                break;
        #            default:
        #        }
        #    }
        #    else
        #    {
        #        switch(_inventTrans.StatusReceipt)
        #        {
        #            case StatusReceipt::Purchased:
        #                this.PostedQty    -= _inventTrans.Qty;
        #                this.PostedValue  -= _inventTrans.costValue();
        #                this.PdsCWPostedQty    -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::Received:
        #                this.Received     -= _inventTrans.Qty;
        #                this.PdsCWReceived     -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::Registered:
        #                this.Registered   -= _inventTrans.Qty;
        #                this.PdsCWRegistered   -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::Arrived:
        #                this.Arrived      -= _inventTrans.Qty;
        #                this.PdsCWArrived      -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::Ordered:
        #                this.Ordered      -= _inventTrans.Qty;
        #                this.PdsCWOrdered      -= _inventTrans.PdsCWQty;
        #                break;
        #            case StatusReceipt::QuotationReceipt:
        #                this.QuotationReceipt-= _inventTrans.Qty;
        #                this.PdsCWQuotationReceipt-= _inventTrans.PdsCWQty;
        #                break;
        #            default:
        #        }
        #    }
        #
        #    this.PostedValueSecCur_RU -= _inventTrans.costValueSecCur_RU();
        #
        #    if (_inventTrans.isUpdatedPhysical())
        #    {
        #        this.PhysicalValue -= _inventTrans.CostAmountPhysical;
        #        this.PhysicalValueSecCur_RU -= _inventTrans.CostAmountSecCurPhysical_RU;
        #    }
        #}
      ENDSOURCE
      SOURCE #update
        #public void update()
        #{
        #    this.ClosedQty = this.isAllQtyFieldsZero();
        #    this.Closed    = this.isAllValueFieldsZero() && this.ClosedQty;
        #    this.setAvailFields();
        #
        #    //InventDim fields in InventSum, dtrunin -->
        #    if (this.InventDimId != this.orig().InventDimId)
        #    {
        #        DEV_InventSumFields::updateInventSumFromDimId(this);
        #    }
        #    //InventDim fields in InventSum, dtrunin <--
        #
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #updateInventTrans
        #/// <summary>
        #///    Updates inventory on hand based on the specified transaction.
        #/// </summary>
        #/// <param name="_inventTrans">
        #///    The inventory transaction.
        #/// </param>
        #/// <param name="_plus">
        #///    Yes if the transaction is added to on hand; otherwise, No.
        #/// </param>
        #/// <param name="_inventTrans_ORIG">
        #///    The originally selected values for the transaction.
        #/// </param>
        #/// <param name="_keepSequenceNumber">
        #///    true if the internal counter for log records to help secure correct order when rollback is
        #///    performed should remain unchanged; otherwise, false.
        #/// </param>
        #/// <param name="_canDropInventSumDelta">
        #///    Yes if <c>InventSum</c> record may be updated directly instead of using <c>InventSumDelta</c>
        #/// </param>
        #/// <param name="_inventDimIdTransferIssue">
        #///    An <c>InventDimId</c> ID for the matching issue transaction for a transfer. This parameter is optional but can be passed to improve performance.
        #/// </param>
        #public server void updateInventTrans(
        #    InventTrans     _inventTrans,
        #    NoYes           _plus,
        #    InventTrans     _inventTrans_ORIG   = null,
        #    boolean         _keepSequenceNumber = false,
        #    NoYes           _canDropInventSumDelta = NoYes::No,
        #    InventDimId     _inventDimIdTransferIssue = '')
        #{
        #    InventTable         inventTable;
        #    InventSum           inventSum;
        #    InventItemType      inventItemType;
        #    InventSumDelta      inventSumDelta;
        #    boolean             addedInventSumLogTTS;
        #    boolean             skipInventTransValidation;
        #
        #    inventSum = this;
        #    inventTable = _inventTrans.inventTable();
        #    inventItemType = inventTable.inventItemType();
        #
        #    if (inventItemType.mustInventBeControlled())
        #    {
        #        if (_plus)
        #        {
        #            inventSum.addInventTransOnSum(_inventTrans, _inventDimIdTransferIssue);
        #        }
        #        else
        #        {
        #            inventSum.subInventTransOnSum(_inventTrans);
        #        }
        #
        #        // When the sumLogTTS updating of the orig part is handled seperately, no check should be made if fields has changed
        #        skipInventTransValidation = (_inventTrans_ORIG == null);
        #
        #        addedInventSumLogTTS = appl.inventUpdateOnhandGlobal().inventUpdateOnhand().addInventSumLogTTS(_inventTrans,
        #                                                                                                       _plus,
        #                                                                                                       _keepSequenceNumber,
        #                                                                                                       skipInventTransValidation);
        #
        #        if (_inventTrans_ORIG)
        #        {
        #            if (!_plus)
        #            {
        #                inventSum.addInventTransOnSum(_inventTrans_ORIG);
        #            }
        #            else
        #            {
        #                inventSum.subInventTransOnSum(_inventTrans_ORIG);
        #            }
        #
        #            if (addedInventSumLogTTS)
        #            {
        #                appl.inventUpdateOnhandGlobal().inventUpdateOnhand().addInventSumLogTTS(_inventTrans_ORIG,!_plus,true, true);
        #            }
        #        }
        #
        #        if (inventSum.RecId && _canDropInventSumDelta)
        #        {
        #            inventSum.update();
        #        }
        #        else
        #        {
        #            inventSumDelta.initFromInventTrans(_inventTrans);
        #            inventSumDelta.initFromInventSum(inventSum);
        #            appl.inventUpdateOnhandGlobal().inventUpdateOnhand().addInventSumDelta(inventSumDelta,_inventTrans, inventTable);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #public boolean  validateDelete()
        #{
        #    if (!this.isAllFieldsZero())
        #    {
        #        return checkFailed("@SYS10633");
        #    }
        #
        #    if (this.hasOpenTransactions())
        #    {
        #        return checkFailed("@SYS18483");
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #public boolean validateWrite()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #whsDisplayCostPrice
        #/// <summary>
        #/// Displays cost price for forms.
        #/// </summary>
        #/// <returns>
        #/// The string value representing cost price.
        #/// </returns>
        #// BP Deviation documented
        #display CostPrice whsDisplayCostPrice()
        #{
        #    InventModelGroup    inventModelGroup;
        #    CostPrice           ret;
        #
        #    inventModelGroup = InventModelGroup::find(InventModelGroupItem::findByItemIdLegalEntity(this.ItemId).ModelGroupId);
        #
        #    if (inventModelGroup.StandardCost || inventModelGroup.inventModelType().stdCostBased())
        #    {
        #        ret = InventTable::findCostPcsPrice(this.ItemId, this.InventDimId, this.inventDim(), maxDate());  // Standard Cost
        #    }
        #    else
        #    {
        #        ret = this.costPricePcs();  // Average Cost
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #whsDisplayItemName
        #/// <summary>
        #/// Displays item description for forms
        #/// </summary>
        #/// <returns>
        #/// Item description string
        #/// </returns>
        #// BP Deviation Documented
        #display ItemName whsDisplayItemName()
        #{
        #    return EcoResProductTranslation::findByProductLanguage(InventTable::itemProduct(this.ItemId), Global::currentUserLanguage()).Name;
        #}
      ENDSOURCE
      SOURCE #whsInventReserveQty
        #private WHSInventReserveQty whsInventReserveQty(InventDim _inventDim)
        #{
        #    InventDimParm       inventDimParm;
        #    WHSInventReserveQty whsInventReserveQty;
        #
        #    if (WHSInventEnabled::exist(this.ItemId))
        #    {
        #        inventDimParm.initFromInventDim(_inventDim);
        #        whsInventReserveQty = WHSInventReserveQty::newFromParms(this.inventTable(),_inventDim,inventDimParm,this);
        #    }
        #
        #    return whsInventReserveQty;
        #}
      ENDSOURCE
      SOURCE #wmsLocationId
        #display public WMSLocationId wmsLocationId()
        #{
        #    return InventDim::find(this.InventDimId).wmsLocationId;
        #}
      ENDSOURCE
      SOURCE #wmsPalletId
        #display public WMSPalletId wmsPalletId()
        #{
        #    return InventDim::find(this.InventDimId).wmsPalletId;
        #}
      ENDSOURCE
      SOURCE #exist
        #static public boolean exist(
        #    ItemId          itemId,
        #    InventDimId     inventDimId)
        #{
        #    return itemId && (select firstonly RecId from inventSum
        #                          where inventSum.ItemId        == itemId
        #                             && inventSum.InventDimId   == inventDimId).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #static public InventSum find(
        #    ItemId            _itemId,
        #    InventDimId       _dimId,
        #    boolean           _forUpdate = false)
        #{
        #    InventSum  inventSum;
        #
        #    if (_forUpdate)
        #    {
        #        inventSum.selectForUpdate(_forUpdate);
        #    }
        #    else
        #    {
        #        inventSum.selectLocked(false);
        #    }
        #
        #    if (_itemId)
        #    {
        #        select firstonly inventSum
        #            where inventSum.ItemId              == _itemId
        #              &&  inventSum.InventDimId         == _dimId;
        #    }
        #    return inventSum;
        #}
      ENDSOURCE
      SOURCE #findInventSumAllWithoutSerialId
        #/// <summary>
        #/// Retrieves the on hand inventory sum without serial id for InventSumFields::All.
        #/// </summary>
        #/// <param name = "_itemId">An item id.</param>
        #/// <param name = "_inventDimCriteria">The inventory dimension criteria.</param>
        #/// <param name = "_inventDimParm">The inventory dimension parameters.</param>
        #/// <returns>An on-hand inventory record.</returns>
        #public static InventSum findInventSumAllWithoutSerialId(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm)
        #{
        #    InventSum inventSum;
        #    InventDim InventDim;
        #
        #    select #inventSumFields
        #        from inventSum
        #        #InventSumFindSumFilter(inventSum, _itemId)
        #        #inventDimExistsJoin(inventSum.InventDimId, inventDim, _inventDimCriteria, _inventDimParm);
        #
        #    return InventSum;
        #}
      ENDSOURCE
      SOURCE #findInventSumAllWithSerialId
        #/// <summary>
        #/// Retrieves the on hand inventory sum without serial id for InventSumFields::All.
        #/// </summary>
        #/// <param name = "_itemId">An item id.</param>
        #/// <param name = "_inventDimCriteria">The inventory dimension criteria.</param>
        #/// <param name = "_inventDimParm">The inventory dimension parameters.</param>
        #/// <returns>An on-hand inventory record.</returns>
        #public static InventSum findInventSumAllWithSerialId(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm)
        #{
        #    InventSum inventSum;
        #    InventDim inventDim;
        #
        #    #inventDimSelect(inventDim, _inventDimCriteria, _inventDimParm, forcePlaceholders TableId from, serialIdIdx)
        #    join
        #        #inventSumFields
        #    from inventSum
        #        index hint ItemDimIdx
        #        #InventSumFindSumDimIdFilter(inventSum, _itemId, inventDim.InventDimId);
        #
        #    return inventSum;
        #}
        #
      ENDSOURCE
      SOURCE #findSameBatchFirstOrLargest
        #/// <summary>
        #/// Gets an <c>InventSum</c> and <c>InventDim</c> for the same batch inventory that is first that meets
        #/// the requirements or largest available for reservation, depending on parameter settings.
        #/// </summary>
        #/// <param name="_movement">
        #/// The inventory movement.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #/// The criteria to limit the batch search to.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The flags for the inventory dimension criteria values.
        #/// </param>
        #/// <param name="_reqQty">
        #/// The required minimum inventory quantity that a batch must have; optional. If specified this method will
        #/// search for a batch that has at least this inventory quantity available.
        #/// </param>
        #/// <param name="_cwReqQty">
        #/// The required minimum catch weight quantity that a batch must have; optional. If specified this method will
        #/// search for a batch that has at least this catch weight quantity available.
        #/// </param>
        #/// <returns>
        #/// A container with two values: the <c>InventSum</c> record and the <c>InventDim</c> record found by the search. If
        #/// there is no batch found with available inventory for reservation that is enough for the required quantity, then
        #/// the largest available will be returned. If there is no inventory found matching the item and dimension criteria
        #/// then the two record buffers will be empty.
        #/// </returns>
        #/// <remarks>
        #/// The selection of the actual batch depends on the reservation settings in the inventory model group
        #/// (ReserveByDate and FEFO). If either of these are set, meaning date dependent reservation is selected; and
        #/// if <paramref name="_reqQty"/> or <paramref name="_cwReqQty"/> are either non-zero, then the first batch that
        #/// matches that requirement is returned. Otherwise, this will find the batch with the largest available
        #/// inventory available for reservation that matches the given item and dimension selection parameters.
        #/// </remarks>
        #[SysObsoleteAttribute('Use InventAvailabilityProvider::findSameBatchFirstOrLargest instead.', true)]
        #public static server container findSameBatchFirstOrLargest(
        #    InventMovement      _movement,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm,
        #    InventQty           _reqQty                 = 0,
        #    PdsCWInventQty      _cwReqQty               = 0)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #findSum
        #public static InventSum findSum(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm,
        #    InventSumFields     _sumFields  = InventSumFields::All)
        #{
        #    #InventDimDevelop
        #
        #    if (_inventDimParm.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
        #    {
        #        return InventSum::findSumWithSerialId(_itemId, _inventDimCriteria, _inventDimParm, _sumFields);
        #    }
        #    else
        #    {
        #        return InventSum::findSumWithoutSerialId(_itemId, _inventDimCriteria, _inventDimParm, _sumFields);
        #    }
        #}
      ENDSOURCE
      SOURCE #findSumBatchExist
        #/// <summary>
        #/// Get the inventsum and inventory dimension for a batch
        #/// </summary>
        #/// <param name="_itemId" type="ItemId">
        #/// The item to search the batch inventory for
        #/// </param>
        #/// <param name="_inventDimCriteria" type="InventDim">
        #/// The criteria to limit the batch search for
        #/// </param>
        #/// <param name="_inventDimParm" type="InventDimParm">
        #/// The flags for the inventory dimension values
        #/// </param>
        #/// <param name="_inventDimExists" type="InventDim">
        #/// Optional value to only consider batches, where inventory exists also
        #/// on the specified inventory dimensions
        #/// </param>
        #/// <param name="_inventDimParmExists" type="InventDim">
        #/// The flags for the inventory dimension values for the exists dimensions
        #/// </param>
        #/// <param name="_reqQty" type="InventQty">
        #/// Optional parameter to search for a batch that has at least the
        #/// specified quantity available
        #/// </param>
        #/// <param name="_cwReqQty" type="PdsCWInventQty">
        #/// Optional parameter to search for a batch that has at least the
        #/// specified catch weight quantity available
        #/// </param>
        #/// <param name="_expDate" type="TransDate">
        #/// The expiration date requested
        #/// </param>
        #/// <param name="_custAcct" type="CustAccount">
        #/// Customer account to be used to validate item batch attributes.
        #/// </param>
        #/// <returns type="container">
        #/// A container with the InventSum record and the InventDim record
        #/// </returns>
        #/// <remarks>
        #/// The method search for the inventory of a batch, that is located
        #/// within the _inventDimCriteria/_inventDimParm inventory dimensions.
        #/// Inventory for that batch, that is not within that criteria is not being
        #/// included in the InventSum record.
        #/// If the _inventDimExists/_inventDimParmExists pair is specified, then only
        #/// batches, that have inventory within these inventory dimensions are
        #/// considered.
        #/// The selection of the actual batch depends on the reservation settings
        #/// in the inventory model group (ReserveByDate and FEFO). If the date depend
        #/// reservation is selected and a required quantity is being passed, then the
        #/// first batch that matches that requirement is being returned.
        #/// <syntax>
        #/// public static container findSumBatchExist(
        #///             ItemId          _itemId,
        #///             InventDim       _inventDimCriteria,
        #///             InventDimParm   _inventDimParm,
        #///             InventDim       _inventDimExists,
        #///             InventDimParm   _inventDimParmExists,
        #///             InventQty       _reqQty,
        #///             PdsCWInventQty  _cwReqQty
        #///             TransDate       _expDate)
        #/// </syntax>
        #/// </remarks>
        #[SysObsoleteAttribute('Use InventSum.findSumSameBatchExistingInventory instead.', true)]
        #public static server container findSumBatchExist(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm,
        #    InventDim           _inventDimExists = null,
        #    InventDimParm       _inventDimParmExists = null,
        #    InventQty           _reqQty = 0,
        #    PdsCWInventQty      _cwReqQty = 0,
        #    TransDate           _expDate = systemDateGet(),
        #    CustAccount         _custAcct = ''
        #    )
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
        #
      ENDSOURCE
      SOURCE #findSumQty
        #/// <summary>
        #///     Retrieves <c>InventSum</c> with only the quantity fields initialized.
        #/// </summary>
        #/// <param name="_itemId">
        #///     ItemId to use for search.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #///     InventDim criteria to use for search.
        #/// </param>
        #/// <param name="_inventDimParm">
        #///     InventDimParm to use for search.
        #/// </param>
        #/// <returns>
        #///     Partially filled <c>InventSum</c> table.
        #/// </returns>
        #static public InventSum findSumQty(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm)
        #{
        #    #InventDimDevelop
        #
        #    InventSum   inventSum;
        #    InventDim   inventDim;
        #
        #    inventSum.selectLocked(false);
        #
        #    if (_inventDimParm.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
        #    {
        #        #inventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,serialIdIdx)
        #        join
        #        #inventSumQtyFields
        #        from inventSum
        #            index hint ItemDimIdx
        #            where inventSum.InventDimId == inventDim.InventDimId
        #                && inventSum.ItemId     == _itemId
        #                && inventSum.ClosedQty  == NoYes::No;
        #    }
        #    else
        #    {
        #        //DEV_InventSumFields, InventDim fields in InventSum -->
        #        if (DEV_InventSumFields::isInventSumFilterEnabled(_InventDimParm))
        #        {
        #            select #inventSumQtyFields
        #            from inventSum
        #                where inventSum.ItemId      == _itemId
        #                   && inventSum.ClosedQty   == NoYes::No
        #                   && #InventDimFieldsFilter(inventSum, _InventDimCriteria, _InventDimParm);
        #        }
        #        else
        #        //DEV_InventSumFields, InventDim fields in InventSum <--
        #        {
        #        select
        #        #inventSumQtyFields
        #        from inventSum
        #            where inventSum.ItemId      == _itemId
        #               && inventSum.ClosedQty   == NoYes::No
        #        #inventDimExistsJoin(inventSum.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
        #        }
        #    }
        #
        #    return inventSum;
        #}
      ENDSOURCE
      SOURCE #findSumSameBatch
        #/// <summary>
        #/// Gets a cummulative <c>InventSum</c> and inventory dimension for available inventory for a batch tracked item, taking
        #/// into consideration appropriate conditions that block the availablity of batches.
        #/// </summary>
        #/// <param name="_movement">
        #/// The inventory movement.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #/// The criteria to limit the inventory search to.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The flags for the inventory dimension criteria values.
        #/// </param>
        #/// <returns>
        #/// A cummulative <c>InventSum</c> record for the available inventory.
        #/// </returns>
        #/// <exception cref="Exception::Error">
        #/// Thrown if the dimension criteria is set to match on a serial number as
        #/// that situation is not allowed for same batch matching.
        #/// </exception>
        #/// <exception cref="Excpetion::Error">
        #/// Thrown if the item in <paramref name="_movement"/> is not batch activated.
        #/// </exception>
        #[SysObsoleteAttribute('Use InventAvailabilityProvider.findByDimWithAutoReservationCriteria instead', true)]
        #public static server InventSum findSumSameBatch(InventMovement _movement, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #findSumSameLot
        #/// <summary>
        #/// Get the inventsum and inventory dimension for a batch
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item to find the cumulative Inventsum values.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #/// The criteria to limit the batch search for
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The flags for the inventory dimension values
        #/// </param>
        #/// <param name="_sumFields">
        #/// Which field groups to use for the summation.
        #/// </param>
        #/// <param name="_expDate">
        #/// The Expiration date for which the batches for not exceed
        #/// </param>
        #/// <param name="_custAcct">
        #/// A specific customer for which to retreive batch attribute information.
        #/// Defaults to empty str or no customer.
        #/// </param>
        #/// <returns>
        #/// A cumulative InventSum Record
        #/// </returns>
        #/// <remarks>
        #/// The method goes through all inventSum record within the inventDim and
        #/// InventDimParm combination and creates a cumulative InventSum record.
        #/// After the summation occurs, additional validation is done on the inventSum
        #/// records within this range to see if they are either expired based on the
        #/// _expdate value or if the batch has a disposition code that is does allow
        #/// it to be included. The results of these two validations are subtracted
        #/// from the cumulative amount.
        #/// </remarks>
        #/// <exception cref="Exception::Error">
        #/// If the _nventDimCriteria contains a serial number and the _inventDimParm
        #///record has the InventSerialIdFlag as active, an error will be return as this
        #/// combination is not allowed.
        #/// </exception>
        #[SysObsoleteAttribute('Use InventAvailabilityProvider.findByDimWithAutoReservationCriteria instead.', true)]
        #public static server InventSum findSumSameLot(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm,
        #    InventSumFields     _sumFields  = InventSumFields::All,
        #    TransDate           _expDate = systemDateGet(),
        #    CustAccount         _custAcct = '')
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
        #
      ENDSOURCE
      SOURCE #findSumWithoutSerialId
        #/// <summary>
        #/// Retrieves on hand inventory when serial number is not set.
        #/// </summary>
        #/// <param name = "_itemId">An item ID.</param>
        #/// <param name = "_inventDimCriteria">The inventory dimension criteria.</param>
        #/// <param name = "_inventDimParm">The inventory dimension parameters.</param>
        #/// <param name = "_sumFields">An <c>InventSumFields</c> value.</param>
        #/// <returns>An on hand inventory record.</returns>
        #public static InventSum findSumWithoutSerialId(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm,
        #    InventSumFields     _sumFields)
        #{
        #    InventSum   inventSum;
        #    InventDim   inventDim;
        #
        #    inventSum.selectLocked(false);
        #
        #    switch (_sumFields)
        #    {
        #        case InventSumFields::Financial:
        #            select sum(PostedQty),sum(PostedValue)
        #                // <GEERU>
        #            , sum(PostedValueSecCur_RU)
        #                // </GEERU>
        #            , sum(PdsCWPostedQty)
        #                    from inventSum
        #                    where inventSum.ItemId      == _itemId   &&
        #                            inventSum.Closed      == NoYes::No
        #                #inventDimExistsJoin(inventSum.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
        #            break;
        #
        #        case InventSumFields::Physical:
        #            select sum(PostedQty),sum(PostedValue),sum(Received),sum(Deducted),sum(Picked),sum(Registered)
        #                // <GEERU>
        #            , sum(PostedValueSecCur_RU)
        #                // </GEERU>
        #            , sum(PdsCWPostedQty)
        #                , sum(PdsCWReceived)
        #                , sum(PdsCWDeducted)
        #                , sum(PdsCWPicked)
        #                , sum(PdsCWRegistered)
        #                from inventSum
        #                    where inventSum.ItemId      == _itemId   &&
        #                            inventSum.Closed      == NoYes::No
        #                #inventDimExistsJoin(inventSum.InventDimId,inventDim,_InventDimCriteria,_InventDimParm);
        #            break;
        #
        #        case InventSumFields::All:
        #            inventSum =  InventSum::findInventSumAllWithoutSerialId(_itemId, _inventDimCriteria, _inventDimParm);
        #            break;
        #
        #        default:
        #            // Support default to avoid breaking - because the default case was supported when the enum was made extensible.
        #            if (!InventSum::skipDefCaseForFindInvSumWithoutSerialId(_sumFields))
        #            {
        #                inventSum =  InventSum::findInventSumAllWithoutSerialId(_itemId, _inventDimCriteria, _inventDimParm);
        #            }
        #    }
        #
        #    return inventSum;
        #}
      ENDSOURCE
      SOURCE #findSumWithSerialId
        #/// <summary>
        #/// Retrieves on hand inventory when only serial number is set.
        #/// </summary>
        #/// <param name = "_itemId">An item ID</param>
        #/// <param name = "_inventDimCriteria">The inventory dimension criteria.</param>
        #/// <param name = "_inventDimParm">The inventory dimension parameters.</param>
        #/// <param name = "_sumFields">An <c>InventSumFields</c> value.</param>
        #/// <returns>An on hand inventory record.</returns>
        #public static InventSum findSumWithSerialId(
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    InventDimParm       _inventDimParm,
        #    InventSumFields     _sumFields)
        #{
        #    InventSum inventSum;
        #    InventDim inventDim;
        #
        #    inventSum.selectLocked(false);
        #
        #    switch (_sumFields)
        #    {
        #        case InventSumFields::Financial:
        #            #inventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,serialIdIdx)
        #            join sum(PostedQty),sum(PostedValue)
        #                //<GEERU>
        #                , sum(PostedValueSecCur_RU)
        #                //</GEERU>
        #                , sum(PdsCWPostedQty)
        #                from inventSum
        #                    index hint ItemDimIdx
        #                    where inventSum.InventDimId == inventDim.InventDimId
        #                        && inventSum.ItemId      == _itemId
        #                        && inventSum.Closed      == NoYes::No;
        #            break;
        #
        #        case InventSumFields::Physical:
        #            #inventDimSelect(inventDim,_inventDimCriteria,_inventDimParm,forcePlaceholders tableId from,serialIdIdx)
        #            join sum(PostedQty),sum(PostedValue),sum(Received),sum(Deducted),sum(Picked),sum(Registered)
        #                //<GEERU>
        #                , sum(PostedValueSecCur_RU)
        #                //</GEERU>
        #                , sum(PdsCWPostedQty)
        #                , sum(PdsCWReceived)
        #                , sum(PdsCWDeducted)
        #                , sum(PdsCWPicked)
        #                , sum(PdsCWRegistered)
        #                from inventSum
        #                    index hint ItemDimIdx
        #                    where inventSum.InventDimId == inventDim.InventDimId
        #                        && inventSum.ItemId      == _itemId
        #                        && inventSum.Closed      == NoYes::No;
        #            break;
        #
        #        case InventSumFields::All:
        #            inventSum =  InventSum::findInventSumAllWithSerialId(_itemId, _inventDimCriteria, _inventDimParm);
        #            break;
        #
        #        default:
        #            // Support default to avoid breaking - because the default case was supported when the enum was made extensible.
        #            if (!InventSum::skipDefCaseForFindInventSumWithSerialId(_sumFields))
        #            {
        #                inventSum = InventSum::findInventSumAllWithSerialId(_itemId, _inventDimCriteria, _inventDimParm);
        #            }
        #    }
        #
        #    return inventSum;
        #}
      ENDSOURCE
      SOURCE #hhtAvailPhysical
        #/// <summary>
        #/// Calculates the physical quantity available for the specified item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item number of the specified item.
        #/// </param>
        #/// <returns>
        #/// the available quantity of the item.
        #/// </returns>
        #static InventQtyAvailPhysical hhtAvailPhysical(ItemId _itemId)
        #{
        #    InventSum inventSum;
        #
        #    if (_itemId)
        #        select sum(AvailPhysical) from inventSum
        #        where inventSum.ItemId == _itemId;
        #
        #    return inventSum.AvailPhysical;
        #}
      ENDSOURCE
      SOURCE #mustInventTransBeLogUpdated
        #static public boolean mustInventTransBeLogUpdated(
        #    InventTrans     _inventTrans,
        #    InventTrans     _inventTrans_Orig   = null)
        #{
        #    if  (_inventTrans_Orig.MarkingRefInventTransOrigin  != _inventTrans.MarkingRefInventTransOrigin
        #     && (_inventTrans_Orig.StatusIssue                  >= StatusIssue::ReservPhysical  || _inventTrans.StatusIssue == StatusIssue::None))
        #    {
        #        return true;
        #    }
        #
        #    if (_inventTrans_Orig.TimeExpected != _inventTrans.TimeExpected)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #mustInventTransBeUpdated
        #static public boolean mustInventTransBeUpdated(
        #    InventTrans     _inventTrans,
        #    InventTrans     _inventTrans_Orig   = null)
        #{
        #    // <GEERU>
        #    #ISOCountryRegionCodes
        #    // </GEERU>
        #    if (_inventTrans_Orig.Qty                   == _inventTrans.Qty                  &&
        #        _inventTrans_Orig.CostAmountPhysical    == _inventTrans.CostAmountPhysical   &&
        #        _inventTrans_Orig.StatusIssue           == _inventTrans.StatusIssue          &&
        #        _inventTrans_Orig.StatusReceipt         == _inventTrans.StatusReceipt        &&
        #        _inventTrans_Orig.InventDimId           == _inventTrans.InventDimId          &&
        #        _inventTrans_Orig.ItemId                == _inventTrans.ItemId               &&
        #        _inventTrans_Orig.DatePhysical          == _inventTrans.DatePhysical         &&
        #        _inventTrans_Orig.DateInvent            == _inventTrans.DateInvent           &&
        #        _inventTrans_Orig.DateExpected          == _inventTrans.DateExpected         &&
        #        _inventTrans_Orig.costValue()           == _inventTrans.costValue()          &&
        #        _inventTrans_Orig.costValueSecCur_RU()  == _inventTrans.costValueSecCur_RU()
        #       )
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #newQuery
        #/// <summary>
        #///    Creates a query to find on hand for the specified parameters.
        #/// </summary>
        #/// <param name="_query">
        #///    The query to extend. Can be null.
        #/// </param>
        #/// <param name="_itemId">
        #///    The item.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #///    The inventory dimensions to limit to.
        #/// </param>
        #/// <param name="_inventDimParmCriteria">
        #///    Identification of which dimensions to limit to.
        #/// </param>
        #/// <param name="_inventDimParmGroupBy">
        #///    Identification of which dimensions to group the result by.
        #/// </param>
        #/// <param name="_dimFields">
        #///    The list of inventory dimension fields to be be specified for performance reasons. Optional.
        #/// </param>
        #/// <param name="_onlyIncludeCWItems">
        #///    true if only catch weight items should be included; otherwise false. Optional.
        #/// </param>
        #/// <param name="_addSumFields">
        #///    true if all quantity and value fields from <c>InventSum</c> should be added as summation fields; otherwise, false. Optional
        #/// </param>
        #/// <returns>
        #///    A query.
        #/// </returns>
        #
        #client server static public Query newQuery(
        #    Query           _query,
        #    ItemId          _itemId,
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParmCriteria,
        #    InventDimParm   _inventDimParmGroupBy,
        #    List            _dimFields = InventDim::dimFieldsList(),
        #    boolean         _onlyIncludeCWItems = false,
        #    boolean         _addSumFields = true
        #    )
        #{
        #    QueryBuildDataSource    qbsSum;
        #    QueryBuildDataSource    qbsDim;
        #    QueryBuildRange         queryRange;
        #    boolean                 doFindRange;
        #    QueryBuildDataSource    qbsCatchWeightItem;
        #
        #    if (!_query)
        #    {
        #        _query = new Query();
        #    }
        #
        #    if (_query.dataSourceTable(tableNum(InventSum)))
        #    {
        #        qbsSum = _query.dataSourceTable(tableNum(InventSum));
        #        qbsSum.sortClear();
        #
        #        doFindRange = true;
        #    }
        #    else
        #    {
        #        qbsSum = _query.addDataSource(tableNum(InventSum));
        #    }
        #
        #    if (_query.dataSourceTable(tableNum(InventDim)))
        #    {
        #        qbsDim = _query.dataSourceTable(tableNum(InventDim));
        #        qbsDim.sortClear();
        #
        #        doFindRange = true;
        #    }
        #    else
        #    {
        #        qbsDim = qbsSum.addDataSource(tableNum(InventDim));
        #    }
        #
        #    qbsDim.joinMode(JoinMode::InnerJoin);
        #    qbsDim.relations(true);
        #
        #    if (!_inventDimParmCriteria.ClosedFlag)
        #    {
        #        queryRange = SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum,Closed));
        #        queryRange.value(queryValue(NoYes::No));
        #    }
        #
        #    if (_inventDimParmCriteria.ItemIdFlag)
        #    {
        #        queryRange = doFindRange ? qbsSum.findRange(fieldNum(InventSum,ItemId)) : null;
        #        if (! queryRange)
        #        {
        #            queryRange = qbsSum.addRange(fieldNum(InventSum,ItemId));
        #        }
        #
        #        if (_itemId)
        #        {
        #            queryRange.value(queryValue(_itemId));
        #        }
        #        else
        #        {
        #            queryRange.value(SysQuery::valueEmptyString());
        #        }
        #    }
        #
        #    if (_onlyIncludeCWItems)
        #    {
        #        qbsCatchWeightItem = qbsSum.addDataSource(tableNum(PdsCatchWeightItem));
        #        qbsCatchWeightItem.joinMode(JoinMode::ExistsJoin);
        #        qbsCatchWeightItem.addLink(fieldNum(InventSum,ItemId),fieldNum(PdsCatchWeightItem,ItemId));
        #    }
        #
        #    if (_inventDimParmGroupBy.ItemIdFlag)
        #    {
        #        qbsSum.addSortField(fieldNum(InventSum,ItemId));
        #        qbsSum.orderMode(OrderMode::GroupBy);
        #    }
        #
        #    if (_addSumFields)
        #    {
        #        InventSum::queryAddSumFields(qbsSum);
        #    }
        #    InventDim::queryDatasourceAddRangeSortFromParms(qbsDim,doFindRange,_inventDimCriteria,_inventDimParmCriteria,_inventDimParmGroupBy,_dimFields);
        #    InventSum::queryAddHint(_query,_inventDimCriteria,_inventDimParmCriteria,qbsSum,qbsDim);
        #
        #    return _query;
        #}
      ENDSOURCE
      SOURCE #newQueryBatchExist
        #[SysObsoleteAttribute('This method is no longer used; there is no replacement and the method will be removed.', true)]
        #public client server static Query newQueryBatchExist(
        #    ItemId          _itemId,
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParmCriteria,
        #    InventDim       _inventDimExists,
        #    InventDimParm   _inventDimParmExists
        #    )
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #newQueryBatchMax
        #/// <summary>
        #/// Create a query to find the batch that most closely matches a reservation request
        #/// </summary>
        #/// <param name="_itemId" type="ItemId">The item to search the batch for</param>
        #/// <param name="_inventDimCriteria" type="InventDim">inventory dimension to search the batch in</param>
        #/// <param name="_inventDimParmCriteria" type="InventDimParm">the flags for the inventory dimensions to search the batch</param>
        #/// <returns type="Query">The created query object</returns>
        #/// <remarks>
        #/// <syntax>
        #/// public static Query newQueryBatchMax(ItemId _itemId, Record _inventDimCriteria, Record _inventDimParmCriteria)
        #/// </syntax>
        #/// </remarks>
        #[SysObsoleteAttribute('This method is no longer used; there is no replacement and the method will be removed.', true)]
        #public client server static Query newQueryBatchMax(
        #    ItemId          _itemId,
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParmCriteria
        #    )
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #newQueryReservation
        #/// <summary>
        #///    Creates a query to find on hand for the specified parameters.
        #/// </summary>
        #/// <param name="_itemId">
        #///    The item.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #///    The inventory dimensions to limit to.
        #/// </param>
        #/// <param name="_inventDimParmCriteria">
        #///    Identification of which dimensions to limit to.
        #/// </param>
        #/// <param name="_inventDimParmGroupBy">
        #///    Identification of which dimensions to group the result by.
        #/// </param>
        #/// <param name="_cwItem">
        #///    true if catch weight fields should beincluded; otherwise false. Optional.
        #/// </param>
        #/// <param name="_dimFields">
        #///    The list of inventory dimension fields to be be specified for performance reasons. Optional.
        #/// </param>
        #/// <returns>
        #///    A query.
        #/// </returns>
        #
        #client server static public Query newQueryReservation(
        #    ItemId          _itemId,
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParmCriteria,
        #    InventDimParm   _inventDimParmGroupBy,
        #    boolean         _cwItem = false,
        #    List            _dimFields = InventDim::dimFieldsList()
        #    )
        #{
        #    Query                   query           = new Query();
        #    QueryBuildDataSource    qbsSum          = query.addDataSource(tableNum(InventSum));
        #    QueryBuildDataSource    qbsDim          = qbsSum.addDataSource(tableNum(InventDim));
        #    QueryBuildRange         queryRange;
        #
        #    qbsDim.joinMode(JoinMode::InnerJoin);
        #    qbsDim.relations(true);
        #
        #    // Only consider records with quantity values.
        #    SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        #    SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum,Closed)).value(queryValue(NoYes::No));
        #
        #    if (_inventDimParmCriteria.ItemIdFlag)
        #    {
        #        queryRange = qbsSum.addRange(fieldNum(InventSum,ItemId));
        #
        #        if (_itemId)
        #        {
        #            queryRange.value(queryValue(_itemId));
        #        }
        #        else
        #        {
        #            queryRange.value(SysQuery::valueEmptyString());
        #        }
        #    }
        #
        #    if (_inventDimParmGroupBy.ItemIdFlag)
        #    {
        #        qbsSum.addSortField(fieldNum(InventSum,ItemId));
        #        qbsSum.orderMode(OrderMode::GroupBy);
        #    }
        #
        #    // Don't use a query plan with join from InventDim to InventSum if dimensions aren't selective
        #    query.forceSelectOrder(!_inventDimParmCriteria.isFlagSelective());
        #
        #    // Only select the fields needed for reservation purposes and not all fields.
        #    qbsSum.addSelectionField(fieldNum(InventSum,AvailPhysical), SelectionField::Sum);
        #    qbsSum.addSelectionField(fieldNum(InventSum,AvailOrdered), SelectionField::Sum);
        #    qbsSum.addSelectionField(fieldNum(InventSum,OnOrder), SelectionField::Sum);
        #    if (_cwItem)
        #    {
        #        qbsSum.addSelectionField(fieldNum(InventSum,PdsCWAvailPhysical), SelectionField::Sum);
        #        qbsSum.addSelectionField(fieldNum(InventSum,PdsCWAvailOrdered), SelectionField::Sum);
        #        qbsSum.addSelectionField(fieldNum(InventSum,PdsCWOnOrder), SelectionField::Sum);
        #    }
        #
        #    InventDim::queryDatasourceAddRangeSortFromParms(qbsDim,false,_inventDimCriteria,_inventDimParmCriteria,_inventDimParmGroupBy,_dimFields);
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #pds_FEFOQuery
        #/// <summary>
        #/// Constructs a query to retreive a batch or batches that best match the reservation request.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> to use in the query.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #/// The inventory dimension criteria used to filter query.
        #/// </param>
        #/// <param name="_inventDimParmCriteria">
        #/// The dimension parameters to determine the criteria fields to filter on.
        #/// </param>
        #/// <param name="_inventDimParmGroupBy">
        #/// The dimension parameters to determine the criteria fields to group by.
        #/// </param>
        #/// <param name="_dimFields">
        #/// A list of the inventory dimension fields used to filter the query.
        #/// </param>
        #/// <returns>
        #/// A <c>Query</c> object generated based on the provided parameters.
        #/// </returns>
        #public client server static Query pds_FEFOQuery(
        #    ItemId          _itemId,
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParmCriteria,
        #    InventDimParm   _inventDimParmGroupBy,
        #    List            _dimFields = InventDim::dimFieldsList()
        #    )
        #{
        #    #define.InventBatchDSName('DS_INVENTBATCH')
        #
        #    QueryBuildDataSource    qbsSum;
        #    QueryBuildDataSource    qbsDim;
        #    QueryBuildDataSource    qbsBatch;
        #    QueryBuildRange         queryRange;
        #
        #    boolean                 doFindRange = false;
        #
        #    Query                   query;
        #
        #    query = new Query();
        #
        #    qbsBatch = query.addDataSource(tableNum(InventBatch),#InventBatchDSName);
        #    qbsBatch.fetchMode(QueryFetchMode::One2One);
        #    qbsDim   = qbsBatch.addDataSource(tableNum(InventDim));
        #    qbsDim.joinMode(JoinMode::InnerJoin);
        #    qbsDim.fetchMode(QueryFetchMode::One2One);
        #    qbsDim.relations(true);
        #    qbsSum   = qbsDim.addDataSource(tableNum(InventSum));
        #    qbsSum.joinMode(JoinMode::InnerJoin);
        #    qbsSum.fetchMode(QueryFetchMode::One2One);
        #    qbsSum.relations(true);
        #    qbsSum.addLink(fieldNum(InventBatch,ItemId),fieldNum(InventSum,ItemId),#InventBatchDSName);
        #    queryRange = SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum,ClosedQty));
        #    queryRange.value(queryValue(NoYes::No));
        #    queryRange = doFindRange ? qbsSum.findRange(fieldNum(InventSum,ItemId)) : null;
        #
        #    if (!queryRange)
        #    {
        #        queryRange = qbsSum.addRange(fieldNum(InventSum,ItemId));
        #    }
        #
        #    queryRange.value(queryValue(_itemId));
        #    qbsSum.addSortField(fieldNum(InventSum,ItemId));
        #    qbsSum.orderMode(OrderMode::GroupBy);
        #    InventSum::queryAddSumFields(qbsSum);
        #
        #    if (_inventDimParmCriteria.ItemIdFlag
        #        && _itemId
        #        && InventDimParm::activeDimFlag(InventDimGroupSetup::newItemId(_itemId)).InventBatchIdFlag)
        #    {
        #        qbsDim.addSortField(fieldNum(InventDim, InventBatchId));
        #        qbsDim.orderMode(OrderMode::GroupBy);
        #
        #        if (InventTable::find(_itemId).modelGroup().PdsPickCriteria == PdsPickCriteria::ExpiryDate)
        #        {
        #            qbsBatch.addSortField(fieldNum(InventBatch,ExpDate));
        #        }
        #        else
        #        {
        #            qbsBatch.addSortField(fieldNum(InventBatch,PdsBestBeforeDate));
        #        }
        #
        #        qbsBatch.addSortField(fieldNum(InventBatch,InventBatchId));
        #        qbsBatch.orderMode(OrderMode::GroupBy);
        #    }
        #
        #    InventDim::queryDatasourceAddRangeSortFromParms(
        #        qbsDim,
        #        doFindRange,
        #        _inventDimCriteria,
        #        _inventDimParmCriteria,
        #        _inventDimParmGroupBy,
        #        _dimFields);
        #
        #    InventSum::queryAddHint(
        #        query,
        #        _inventDimCriteria,
        #        _inventDimParmCriteria,
        #        qbsSum,
        #        qbsDim);
        #
        #    return query;
        #}
        #
      ENDSOURCE
      SOURCE #pdsNoSalesResPhysical
        #/// <summary>
        #/// Get the cumulative inventsum for batches that are blocked for sales
        #/// reservation
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item to find the cumulative Inventsum values.
        #/// </param>
        #/// <param name="_inventSum">
        #/// The inventSum record against which to validate
        #/// </param>
        #/// <param name="_inventDim">
        #/// The criteria to limit the batch search for
        #/// </param>
        #/// <param name="_expDate">
        #/// The Expiration date for which the batches for not exceed
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The flags for the inventory dimension values
        #/// </param>
        #/// <returns>
        #/// A cumulative InventSum Record
        #/// </returns>
        #[SysObsoleteAttribute('This method is no longer used; there is no replacement and the method will be removed.', true)]
        #public static server InventSum pdsNoSalesResPhysical(
        #    ItemId          _itemId,
        #    InventSum       _inventSum,
        #    InventDim       _inventDim,
        #    TransDate       _expDate        = systemDateGet(),
        #    InventDimParm   _inventDimParm  = null)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsNoSalesResPhysicalNonSL
        #/// <summary>
        #/// Get the cumulative inventsum for batches that are blocked for sales
        #/// reservation for non-Shelf Life items
        #/// </summary>
        #/// <param name="_itemId">
        #/// Item for which to search
        #/// </param>
        #/// <param name="_inventDim">
        #/// The criteria to limit the batch search for
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The flags for the inventory dimension values
        #/// </param>
        #/// <returns>
        #/// A cumulative InventSum Record
        #/// </returns>
        #[SysObsoleteAttribute('This method is no longer used; there is no replacement and the method will be removed.', true)]
        #public static server InventSum pdsNoSalesResPhysicalNonSL(
        #    ItemId          _itemId,
        #    InventDim       _inventDim,
        #    InventDimParm   _inventDimParm)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsNoSalesResPhysicalSLItem
        #/// <summary>
        #/// Get the cumulative inventsum for batches that are blocked for sales
        #/// reservation for Shelf Life items
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item to find the batches which are not allowed
        #/// </param>
        #/// <param name="_inventDim">
        #/// The criteria to limit the batch search for
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The flags for the inventory dimension values
        #/// </param>
        #/// <param name="_expDate">
        #/// The Expiration date for which the batches can not exceed
        #/// </param>
        #/// <returns>
        #/// A cumulative InventSum Record
        #/// </returns>
        #/// <remarks>
        #/// The method goes through all inventSum record within the inventDim and
        #/// InventDimParm combination and examines the related InventBatch records.
        #/// The InventSum record is included if the underlying InventBatch record
        #/// has a disposition code that is does not allow the item to be included
        #/// as it is blocked for sales reservation. In addition to the disposition,
        #/// and since the item is a shelf life item, the search is limited to batches
        #/// which are still within their expiration dates. This is done so that the
        #/// batch will not be counted twice.The resulting InventSum record is
        #/// returned to the caller.
        #/// </remarks>
        #[SysObsoleteAttribute('This method is no longer used; there is no replacement and the method will be removed.', true)]
        #public static server InventSum pdsNoSalesResPhysicalSLItem(
        #    ItemId          _itemId,
        #    InventDim       _inventDim,
        #    InventDimParm   _inventDimParm,
        #    TransDate       _expDate)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsSameBatchBatchAttrib
        #/// <summary>
        #/// Get the cumulative inventsum for batches that are not to be used based on
        #/// entered batch attribute values.
        #/// </summary>
        #/// <param name="_itemId">
        #///  The item to find the batches which are expired
        #/// </param>
        #/// <param name="_inventDim">
        #/// The criteria to limit the batch search for
        #/// </param>
        #/// <param name="_date">
        #/// The Expiration date for which the batches can not exceed
        #/// </param>
        #/// <param name="_custAcct">
        #/// A specific customer for which to retreive batch attribute information.
        #/// Defaults to empty str or no customer.
        #/// </param>
        #/// <returns>
        #/// A cumulative InventSum Record
        #/// </returns>
        #/// <remarks>
        #/// The method goes through all inventSum record within the inventDim and
        #/// InventDimParm combination and examines the related InventBatch records.
        #/// The InventSum record is included if the underlying InventBatch record
        #/// is considered if the associated batch attribute are not within valid
        #/// ranges.The resulting InventSum record is returned to the caller.
        #/// </remarks>
        #[SysObsoleteAttribute('Use sameBatchBatchAttrib instead.', true)]
        #public static server InventSum pdsSameBatchBatchAttrib(
        #    ItemId          _itemId,
        #    InventDim       _inventDim,
        #    TransDate       _date,
        #    CustAccount     _custAcct = '')
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsSameBatchExpiredPhysical
        #/// <summary>
        #/// Get the cumulative inventsum for batches that are expired based on an
        #/// expiration date.
        #/// </summary>
        #/// <param name="_itemId">
        #///  The item to find the batches which are expired
        #/// </param>
        #/// <param name="_inventDim">
        #/// The criteria to limit the batch search for
        #/// </param>
        #/// <param name="_date">
        #/// The Expiration date for which the batches can not exceed
        #/// </param>
        #/// <returns>
        #/// A cumulative InventSum Record
        #/// </returns>
        #/// <remarks>
        #/// The method goes through all inventSum record within the inventDim and
        #/// InventDimParm combination and examines the related InventBatch records.
        #/// The InventSum record is included if the underlying InventBatch record
        #/// is concidered expired based on the date provided. The expired batch is
        #/// evaluated by looking at either the BestBeforeDate or the ExpDate as
        #/// defined in the Inventory model group.The resulting InventSum record is
        #/// returned to the caller.
        #/// </remarks>
        #[SysObsoleteAttribute('This method is no longer used; there is no replacement and the method will be removed.', true)]
        #public static server InventSum pdsSameBatchExpiredPhysical(
        #    ItemId          _itemId,
        #    InventDim       _inventDim,
        #    TransDate       _date)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsSameBatchUnavailDispPhysical
        #/// <summary>
        #/// Get the cumulative inventsum for batches that are blocked by
        #/// disposition status
        #/// </summary>
        #/// <param name="_itemId">
        #///  The item to find the batches which are blocked by disposition
        #/// </param>
        #/// <param name="_inventDim">
        #/// The criteria to limit the batch search for
        #/// </param>
        #/// <returns>
        #/// A cumulative InventSum Record
        #/// </returns>
        #/// <remarks>
        #/// The method goes through all inventSum record within the inventDim and
        #/// InventDimParm combination and examines the related InventBatch records.
        #/// The InventSum record is included if the underlying InventBatch record
        #/// is concidered blocked by disposition status. The resulting InventSum record is
        #/// returned to the caller.
        #/// </remarks>
        #[SysObsoleteAttribute('This method is no longer used; there is no replacement and the method will be removed.', true)]
        #public static server InventSum pdsSameBatchUnavailDispPhysical(
        #    ItemId          _itemId,
        #    InventDim       _inventDim)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsSameLotQuery
        #/// <summary>
        #/// instantiate the query relevant for the same lot batch reservation.
        #/// </summary>
        #/// <param name="_itemId" type="ItemId">The item to search the batch for</param>
        #/// <param name="_inventDimCriteria" type="InventDim">The inventory dimensions to search the batch in</param>
        #/// <param name="_inventDimParmCriteria" type="InventDimParm">The flags for the inventory dimensions to search the batch</param>
        #/// <param name="_inventDimParmGroupBy" type="InventDimParm">Flags to group the query with</param>
        #/// <param name="_dimFields" type="container">The dimension fields to check</param>
        #/// <returns type="Query">The query to use for the same lot batch reservation search</returns>
        #/// <remarks>
        #/// Process 2.0 Same Batch Lot Reservation
        #/// <syntax>
        #/// public static Query pdsSameLotQuery(ItemId,InventDim,InventDimParm,InventDimParm,container)
        #/// </syntax>
        #/// </remarks>
        #public static Query pdsSameLotQuery(
        #    ItemId          _itemId,
        #    InventDim       _inventDimCriteria,
        #    InventDimParm   _inventDimParmCriteria,
        #    InventDimParm   _inventDimParmGroupBy,
        #    List            _dimFields = InventDim::dimFieldsList()
        #    )
        #{
        #    Query               query;
        #    InventModelGroup    inventModelGroup;
        #
        #    if (InventTable::find(_itemId).pdsCheck())
        #    {
        #        query = InventSum::pds_FEFOQuery(
        #                    _itemId,
        #                    _inventDimCriteria,
        #                    _inventDimParmCriteria,
        #                    _inventDimParmGroupBy,
        #                    _dimFields);
        #    }
        #    else
        #    {
        #        query = InventSum::newQuery(
        #                    null,
        #                    _itemId,
        #                    _inventDimCriteria,
        #                    _inventDimParmCriteria,
        #                    _inventDimParmGroupBy,
        #                    _dimFields);
        #
        #        inventModelGroup = InventTable::find(_itemId).modelGroup();
        #
        #        if (inventModelGroup.ReserveByDate)
        #        {
        #            query.dataSourceTable(tableNum(InventSum)).addSortField(
        #                fieldNum(InventSum, LastUpdDatePhysical),
        #                inventModelGroup.ReserveReversed
        #                    ? SortOrder::Descending
        #                    : SortOrder::Ascending);
        #        }
        #    }
        #
        #    return query;
        #}
        #
      ENDSOURCE
      SOURCE #queryAddFilterOnBatchExpiryDate
        #/// <summary>
        #/// Adds additional criteria to the specified on hand query to filter out expired batches for the movement.
        #/// </summary>
        #/// <param name="_onHandQuery">
        #/// On hand query.
        #/// </param>
        #/// <param name="_movement">
        #/// Inventory movement that should be used to determine expired batches.
        #/// </param>
        #/// <exception cref="Exception::Error">
        #/// Throws an error if the on hand query is not specified.
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #/// Throws an error if the inventory movement is not specified.
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #/// Throws an error if the on hand query does not contain the <c>InventSum</c> data source.
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #/// Throws an error if the on hand query does not contain the <c>InventDim</c> data source.
        #/// </exception>
        #[SysObsoleteAttribute('This method is no longer used; there is no replacement and the method will be removed.', true)]
        #public static void queryAddFilterOnBatchExpiryDate(
        #    Query           _onHandQuery,
        #    InventMovement  _movement)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #queryAddHint
        #client server static private void queryAddHint(
        #    Query                   _query,
        #    InventDim               _inventDimCriteria,
        #    InventDimParm           _inventDimParmCriteria,
        #    QueryBuildDataSource    _qbsSum = _query.dataSourceTable(tableNum(InventSum)),
        #    QueryBuildDataSource    _qbsDim = _query.dataSourceTable(tableNum(InventDim))
        #    )
        #{
        #    #InventDimDevelop
        #
        #    boolean doHint = false;
        #
        #    if (_inventDimParmCriteria.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
        #    {
        #        if (_inventDimParmCriteria.ItemIdFlag)
        #        {
        #            _qbsSum.addSortIndex(indexNum(InventSum,ItemDimIdx));
        #        }
        #        else
        #        {
        #            _qbsSum.addSortIndex(indexNum(InventSum,DimIdIdx));
        #        }
        #
        #        _qbsDim.addSortIndex(indexNum(InventDim,SerialIdIdx));
        #
        #        doHint = true;
        #    }
        #    else
        #    if (_inventDimParmCriteria.InventBatchIdFlag && _inventDimCriteria.InventBatchId)
        #    {
        #        if (_inventDimParmCriteria.ItemIdFlag)
        #        {
        #            _qbsSum.addSortIndex(indexNum(InventSum,ItemDimIdx));
        #        }
        #        else
        #        {
        #            _qbsSum.addSortIndex(indexNum(InventSum,DimIdIdx));
        #        }
        #
        #        _qbsDim.addSortIndex(indexNum(InventDim,BatchIdIdx));
        #
        #        doHint = true;
        #    }
        #    else
        #    if (!_inventDimParmCriteria.ClosedFlag
        #     &&  _inventDimParmCriteria.ItemIdFlag
        #     &&  _inventDimParmCriteria.allProductDimensionFlagSet()
        #     && !_inventDimParmCriteria.isFlagSelective())
        #    {
        #        _qbsSum.addSortIndex(indexNum(InventSum,ClosedItemDimIdx));
        #        _qbsDim.addSortIndex(indexNum(InventDim,DimIdIdx));
        #
        #        doHint = true;
        #    }
        #
        #    if (doHint)
        #    {
        #        _query.literals(2);
        #
        #        _qbsSum.indexIsHint(true);
        #        _qbsDim.indexIsHint(true);
        #    }
        #}
      ENDSOURCE
      SOURCE #queryAddHintFromCaller
        #client server static public boolean queryAddHintFromCaller(
        #    QueryBuildDataSource    _qbs,
        #    Args                    _callerArgs)
        #{
        #    #InventDimDevelop
        #
        #    boolean ret = false;
        #
        #    switch(_callerArgs.dataset())
        #    {
        #        case(tableNum(InventBatch)):
        #        case(tableNum(InventSerial)):
        #        case(tableNum(WMSPallet)):
        #        case(tableNum(WMSLocation)):
        #            _qbs.addSortIndex(indexNum(InventSum,DimIdIdx));
        #            _qbs.indexIsHint(true);
        #            ret = true;
        #            break;
        #
        #        default:
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #queryAddSumFields
        #static public void queryAddSumFields(
        #    QueryBuildDataSource    _qbS,
        #    boolean                 _onlyAvail = false)
        #{
        #    QueryBuildFieldList qbfl = _qbS.fields();
        #    Set                 fields  = new Set(Types::Integer);
        #    Counter     i;
        #
        #    // <GEERU>
        #    #ISOCountryRegionCodes
        #    // </GEERU>
        #
        #    void addField(FieldId fieldId)
        #    {
        #        if (!fields.in(fieldId))
        #        {
        #            qbfl.addField(fieldId,SelectionField::Sum);
        #        }
        #    }
        #
        #    for (i = 1; i <= qbfl.fieldCount(); i++)
        #    {
        #        if (qbfl.fieldKind(i) == SelectionField::Sum)
        #        {
        #            fields.add(qbfl.field(i));
        #        }
        #    }
        #
        #    if (! _onlyAvail)
        #    {
        #        addField(fieldNum(InventSum,PostedQty));
        #        addField(fieldNum(InventSum,PostedValue));
        #        addField(fieldNum(InventSum,PhysicalValue));
        #        addField(fieldNum(InventSum,Deducted));
        #        addField(fieldNum(InventSum,Registered));
        #        addField(fieldNum(InventSum,Received));
        #        addField(fieldNum(InventSum,Picked));
        #        addField(fieldNum(InventSum,ReservPhysical));
        #        addField(fieldNum(InventSum,ReservOrdered));
        #        addField(fieldNum(InventSum,OnOrder));
        #        addField(fieldNum(InventSum,Ordered));
        #        addField(fieldNum(InventSum,Arrived));
        #        addField(fieldNum(InventSum,QuotationReceipt));
        #        addField(fieldNum(InventSum,QuotationIssue));
        #        addField(fieldNum(InventSum,PhysicalInvent));
        #        // <GEERU>
        #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #        {
        #            addField(fieldNum(InventSum,PostedValueSecCur_RU));
        #            addField(fieldNum(InventSum,PhysicalValueSecCur_RU));
        #        }
        #        // </GEERU>
        #    }
        #
        #    addField(fieldNum(InventSum,AvailPhysical));
        #    addField(fieldNum(InventSum,AvailOrdered));
        #
        #    if (#PdsCatchWeightEnabled)
        #    {
        #        if (!_onlyAvail)
        #        {
        #            addField(fieldNum(InventSum,PdsCWPostedQty));
        #            addField(fieldNum(InventSum,PdsCWDeducted));
        #            addField(fieldNum(InventSum,PdsCWRegistered));
        #            addField(fieldNum(InventSum,PdsCWReceived));
        #            addField(fieldNum(InventSum,PdsCWPicked));
        #            addField(fieldNum(InventSum,PdsCWReservPhysical));
        #            addField(fieldNum(InventSum,PdsCWReservOrdered));
        #            addField(fieldNum(InventSum,PdsCWOnOrder));
        #            addField(fieldNum(InventSum,PdsCWOrdered));
        #            addField(fieldNum(InventSum,PdsCWArrived));
        #            addField(fieldNum(InventSum,PdsCWQuotationReceipt));
        #            addField(fieldNum(InventSum,PdsCWQuotationIssue));
        #            addField(fieldNum(InventSum,PdsCWPhysicalInvent));
        #        }
        #
        #        addField(fieldNum(InventSum,PdsCWAvailPhysical));
        #        addField(fieldNum(InventSum,PdsCWAvailOrdered));
        #    }
        #}
      ENDSOURCE
      SOURCE #skipDefCaseForFindInventSumWithSerialId
        #/// <summary>
        #/// Determines whether to skip the default case for the finding on hand inventory with serial id;
        #/// extenders of findSumWithSerialId where any extensions of <c>InventSumFields</c> has been handled must wrap this method to skip the default query.
        #/// </summary>
        #/// <param name = "_inventSumFields">The on hand inventory fields to select.</param>
        #/// <returns>true if the default case for the finding on hand inventory must be skipped; otherwise, false.</returns>
        #public static boolean skipDefCaseForFindInventSumWithSerialId(InventSumFields _inventSumFields)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #skipDefCaseForFindInvSumWithoutSerialId
        #/// <summary>
        #/// Determines whether to skip the default case for the finding on hand inventory without serial id;
        #/// extenders of findSumWithoutSerialId where any extensions of <c>InventSumFields</c> has been handled must wrap this method to skip the default query.
        #/// </summary>
        #/// <param name = "_inventSumFields">The inventory sum fields type.</param>
        #/// <returns>true if the default case for the finding inventory sum fields must be skipped; otherwise, false.</returns>
        #public static boolean skipDefCaseForFindInvSumWithoutSerialId(InventSumFields _inventSumFields)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #sumBatchWithBatchAttrib
        #/// <summary>
        #/// Gets a cummulative <c>InventSum</c> table buffer for batches available where the batch attribute values
        #/// match the required batch attribute tolerances.
        #/// </summary>
        #/// <param name="_movement">
        #/// The inventory movement.
        #/// </param>
        #/// <returns>
        #/// A cummulative <c>InventSum</c> table buffer for available batches or an empty buffer if the item does not
        #/// have any batch attributes assigned.
        #/// </returns>
        #public static server InventSum sumBatchWithBatchAttrib(InventMovement _movement)
        #{
        #    InventSum                           inventSum;
        #    InventDim                           inventDim = _movement.inventdim();
        #    InventReservationCriteriaBuilder    criteriaBuilder;
        #    InventOnHandCriteria                criteria;
        #    InventDimParm                       inventDimParm;
        #    Query                               query;
        #
        #    if (#PdsBatchAttribEnabled
        #        && PdsBatchAttribByItem::existItemIdAny(_movement.itemId()))
        #    {
        #        inventDimParm.ItemIdFlag            = NoYes::Yes;
        #        #InventDimDevelop
        #        inventDimParm.InventSiteIdFlag      = (inventDim.InventSiteId     != "");
        #        inventDimParm.InventLocationIdFlag  = (inventDim.InventLocationId != "");
        #        inventDimParm.InventBatchIdFlag     = (inventDim.InventBatchId    != "");
        #
        #        criteriaBuilder = InventReservationCriteriaBuilder::newMovement(_movement);
        #        criteriaBuilder.parmAlwaysApplyBatchAttributes(true);
        #        criteria = criteriaBuilder.buildCriteria();
        #
        #        query = InventSum::newQuery(null, _movement.itemId(), inventDim, inventDimParm, null);
        #        criteria.applyToOnHand(query);
        #        inventSum = criteria.mergeMatchingRecords(query, tableNum(InventSum));
        #    }
        #
        #    return inventSum;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: MCR

; Microsoft Dynamics AX Macro: InventDimFieldsFilter unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #InventDimFieldsFilter
    #/* %1 InventSum, WHSInventReserveDelta or WHSInventReserve that contains inventory dimension fields */
    #/* %2 InventDimCriteria or WHSInventReserve */
    #/* %3 InventDimParm         */
    #/* This macro is corresponding to the macro InventDimExistsJoin */
    #
    #    (%1.InventSiteId      == %2.InventSiteId          || ! %3.InventSiteIdFlag)       &&
    #    (%1.InventLocationId  == %2.InventLocationId      || ! %3.InventLocationIdFlag)   &&
    #    (%1.InventBatchId     == %2.InventBatchId         || ! %3.InventBatchIdFlag)      &&
    #    (%1.WMSLocationId     == %2.WMSLocationId         || ! %3.WMSLocationIdFlag)      &&
    #    (%1.WMSPalletId       == %2.WMSPalletId           || ! %3.WMSPalletIdFlag)
    ##InventDimDevelop
  ENDSOURCE
  PROPERTIES
    Origin              #{BDB33A16-9391-460C-BA8D-79B5D67E5F7B}
  ENDPROPERTIES
  

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #DEV_InventSumFieldsSetup
  PROPERTIES
    Name                #DEV_InventSumFieldsSetup
    Origin              #{5610019B-3EE1-418C-B19B-57160979EDEA}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      SetCompany          #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTON
        PROPERTIES
          Name                #GenerateInitSQL
          HelpText            #Fill fields in InventSum
          ElementPosition     #1073741823
          Text                #Fill fields
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    DEV_InventSumFields::fillFieldsCommand();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #StaticText
          ElementPosition     #536870911
          Text                #InventSum fields control
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: CLS

; Microsoft Dynamics AX Class: DEV_InventSumFields unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEV_InventSumFields
    PROPERTIES
      Name                #DEV_InventSumFields
      Origin              #{401F206C-5B4C-4DCF-B38D-5973BE87FF50}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//DEV_InventSumFields, InventDim fields in InventSum
        #class DEV_InventSumFields
        #{
        #}
      ENDSOURCE
      SOURCE #testValidate
        #void testValidate()
        #{
        #/*
        #
        # SELECT TOP 10 * FROM INVENTSUM
        #         JOIN INVENTDIM
        #             ON INVENTSUM.PARTITION = INVENTDIM.PARTITION
        #             AND INVENTSUM.DATAAREAID = INVENTDIM.DATAAREAID
        #             AND INVENTSUM.INVENTDIMID = INVENTDIM.INVENTDIMID
        #WHERE (INVENTSUM.INVENTSITEID <> INVENTDIM.INVENTSITEID OR
        #     INVENTSUM.InventLocationId <> INVENTDIM.InventLocationId OR
        #     INVENTSUM.InventBatchId <> INVENTDIM.InventBatchId OR
        #     INVENTSUM.WMSLocationId <> INVENTDIM.WMSLocationId OR
        #     INVENTSUM.WMSPalletId <> INVENTDIM.WMSPalletId)
        #*/
        #}
      ENDSOURCE
      SOURCE #execQueryServer
        #static server ResultSet execQueryServer(str _query)
        #{
        #    Connection  connection = new Connection();
        #    Statement   statement  = connection.createStatement();
        #    ResultSet   resultSet;
        #    ;
        #
        #    new SqlStatementExecutePermission(_query).assert();
        #
        #    resultSet = statement.executeQuery(_query);
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return resultSet;
        #}
      ENDSOURCE
      SOURCE #execUpdateServer
        #static server int execUpdateServer(str _query)
        #{
        #    Connection  connection = new Connection();
        #    Statement   statement  = connection.createStatement();
        #    int         res;
        #    ;
        #
        #    new SqlStatementExecutePermission(_query).assert();
        #
        #    res = statement.executeUpdate(_query);
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #fieldsEnabled
        #public static boolean fieldsEnabled()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fillFieldsCommand
        #
        #//UPDATE INVENTSUM
        #    ///     SET INVENTSUM.CONFIGID = INVENTDIM.CONFIGID,
        #    ///         INVENTSUM.INVENTSIZEID = INVENTDIM.INVENTSIZEID,
        #    ///         INVENTSUM.INVENTCOLORID = INVENTDIM.INVENTCOLORID,
        #    //..
        #    ///     FROM INVENTSUM
        #    ///     JOIN INVENTDIM
        #    ///         ON INVENTSUM.PARTITION = INVENTDIM.PARTITION
        #    ///         AND INVENTSUM.DATAAREAID = INVENTDIM.DATAAREAID
        #    ///         AND INVENTSUM.INVENTDIMID = INVENTDIM.INVENTDIMID
        #server static void fillFieldsCommand()
        #{
        #    str         sSQL;
        #    ;
        #    sSQL =  strFmt('UPDATE %1 SET ', tableStr(InventSum));
        #    sSQL += strFmt('%1.%2 = %3.%4, ', tableStr(InventSum), fieldStr(InventSum, InventSiteId),
        #                                      tableStr(InventDim), fieldStr(InventDim, InventSiteId));
        #    sSQL += strFmt('%1.%2 = %3.%4, ', tableStr(InventSum), fieldStr(InventSum, InventLocationId),
        #                                      tableStr(InventDim), fieldStr(InventDim, InventLocationId));
        #    sSQL += strFmt('%1.%2 = %3.%4, ', tableStr(InventSum), fieldStr(InventSum, InventBatchId),
        #                                      tableStr(InventDim), fieldStr(InventDim, InventBatchId));
        #    sSQL += strFmt('%1.%2 = %3.%4, ', tableStr(InventSum), fieldStr(InventSum, WMSLocationId),
        #                                      tableStr(InventDim), fieldStr(InventDim, WMSLocationId));
        #    sSQL += strFmt('%1.%2 = %3.%4 \n', tableStr(InventSum),  fieldStr(InventSum, WMSPalletId),
        #                                      tableStr(InventDim), fieldStr(InventDim, WMSPalletId));
        #
        #    sSQL += strFmt(' FROM %1 JOIN %2 ON %1.%3 = %2.%4 AND %1.%5 = %2.%6 AND %1.%7 = %2.%8 \n',
        #                                      tableStr(InventSum), tableStr(InventDim),
        #                                      fieldStr(InventSum, PARTITION),fieldStr(InventDim, PARTITION),
        #                                      fieldStr(InventSum, DATAAREAID),fieldStr(InventDim, DATAAREAID),
        #                                      fieldStr(InventSum, INVENTDIMID),fieldStr(InventDim, INVENTDIMID));
        #
        #    info(sSQL);
        #
        #    DEV_InventSumFields::execUpdateServer(sSQL);
        #
        #    info("OK");
        #}
      ENDSOURCE
      SOURCE #isInventSumFilterEnabled
        #static boolean isInventSumFilterEnabled(InventDimParm  _inventDimParm)
        #{
        #    #InventDimDevelop
        #
        #    boolean res = true;
        #    ;
        #    if (_inventDimParm.ConfigIdFlag           ||
        #        _inventDimParm.InventSizeIdFlag       ||
        #        _inventDimParm.InventColorIdFlag      ||
        #        _inventDimParm.InventStyleIdFlag      ||
        #        _inventDimParm.LicensePlateFlag       ||
        #        _inventDimParm.InventStatusFlag       ||
        #        _inventDimParm.InventSerialIdFlag     ||
        #        _inventDimParm.InventGTDIdFlag_RU     ||
        #        _inventDimParm.InventProfileIdFlag_RU ||
        #        _inventDimParm.InventOwnerIdFlag_RU)
        #    {
        #        res = false;
        #    }
        #
        #    return res;
        #
        #}
      ENDSOURCE
      SOURCE #testPerf
        #//select count(*) from INVENTSUM
        #//select count(*) from INVENTDIM
        #static public void testPerf()
        #{
        #    InventSum          inventSum;
        #    InventDim          inventDim;
        #    InventDimParm      inventDimParm;
        #    int                curTime, curLoop, maxLoops = 2000;
        #    ;
        #    curTime = timeNow();
        #    while select inventSum
        #        group by ItemId
        #        where inventSum.AvailPhysical > 0 &&
        #              inventSum.Closed == false
        #    join inventDim
        #        group by InventLocationId
        #        where inventDim.inventDimId == InventSum.InventDimId
        #           && inventDim.InventLocationId
        #    {
        #        inventDimParm.initFromInventDim(inventDim);
        #        InventSum::findSumQty(inventSum.ItemId, inventDim, inventDimParm);
        #        //InventOnHandQty::newItemDim(inventSum.ItemId, inventDim, inventDimParm).availPhysical();
        #        curLoop++; if (curLoop >= maxLoops) break;
        #    }
        #    curTime = timeNow() - curTime;
        #    info(strFmt("Time %1 sec for %2 loops", curTime, curLoop));
        #}
      ENDSOURCE
      SOURCE #updateInventSumDeltaFromAggrView
        #public static void updateInventSumDeltaFromAggrView(InventSumDelta  _inventSumDelta, InventSumDeltaAggrSumView _inventSumDeltaAggrSumView)
        #{
        #    ;
        #
        #    _inventSumDelta.InventSiteId     = _inventSumDeltaAggrSumView.InventSiteId;
        #    _inventSumDelta.InventLocationId = _inventSumDeltaAggrSumView.InventLocationId;
        #    _inventSumDelta.InventBatchId    = _inventSumDeltaAggrSumView.InventBatchId;
        #    _inventSumDelta.WMSLocationId    = _inventSumDeltaAggrSumView.WMSLocationId;
        #    _inventSumDelta.WMSPalletId      = _inventSumDeltaAggrSumView.WMSPalletId;
        #
        #}
      ENDSOURCE
      SOURCE #updateInventSumDeltaFromDimId
        #public static void updateInventSumDeltaFromDimId(InventSumDelta  _inventSumDelta)
        #{
        #    InventDim   inventDim;
        #    ;
        #
        #    inventDim = InventDim::find(_inventSumDelta.InventDimId);
        #    if (inventDim.recId)
        #    {
        #        _inventSumDelta.InventSiteId     = inventDim.InventSiteId;
        #        _inventSumDelta.InventLocationId = inventDim.InventLocationId;
        #        _inventSumDelta.InventBatchId    = inventDim.InventBatchId;
        #        _inventSumDelta.WMSLocationId    = inventDim.WMSLocationId;
        #        _inventSumDelta.WMSPalletId      = inventDim.WMSPalletId;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #updateInventSumFromDelta
        #public static void updateInventSumFromDelta(InventSum  _inventSum, InventSumDelta _inventSumDelta)
        #{
        #    _inventSum.InventSiteId     = _inventSumDelta.InventSiteId;
        #    _inventSum.InventLocationId = _inventSumDelta.InventLocationId;
        #    _inventSum.InventBatchId    = _inventSumDelta.InventBatchId;
        #    _inventSum.WMSLocationId    = _inventSumDelta.WMSLocationId;
        #    _inventSum.WMSPalletId      = _inventSumDelta.WMSPalletId;
        #    _inventSum.IsDimFieldsPopulated = true;
        #
        #}
      ENDSOURCE
      SOURCE #updateInventSumFromDimId
        #public static void updateInventSumFromDimId(InventSum  _inventSum)
        #{
        #    InventDim   inventDim;
        #    ;
        #    if (! _inventSum.IsDimFieldsPopulated)
        #    {
        #        inventDim = InventDim::find(_inventSum.InventDimId);
        #        if (inventDim.recId)
        #        {
        #            _inventSum.InventSiteId     = inventDim.InventSiteId;
        #            _inventSum.InventLocationId = inventDim.InventLocationId;
        #            _inventSum.InventBatchId    = inventDim.InventBatchId;
        #            _inventSum.WMSLocationId    = inventDim.WMSLocationId;
        #            _inventSum.WMSPalletId      = inventDim.WMSPalletId;
        #        }
        #    }
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: InventUpdateOnhand unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #InventUpdateOnhand
    PROPERTIES
      Name                #InventUpdateOnhand
      Origin              #{2D120886-0000-1000-6F49-EAE2422F279F}
      LegacyId            #2182
    ENDPROPERTIES
    
    METHODS
      SOURCE #addDepreciateOrderedCheck
        #/// <summary>
        #///    Adds a record to the <c>InventSumDeltaDim</c> table to make sure that on hand checking during the
        #///    final commit.
        #/// </summary>
        #/// <param name="_itemId">
        #///    The item for which to perform the on hand check.
        #/// </param>
        #/// <param name="_inventDim">
        #///    The dimension values for which to perform the on hand check.
        #/// </param>
        #/// <param name="_inventDimParm">
        #///    The set of dimensions for which to perform the on hand check.
        #/// </param>
        #public void addDepreciateOrderedCheck(
        #    ItemId                  _itemId,
        #    InventDim               _inventDim,
        #    InventDimParm           _inventDimParm)
        #{
        #    InventDim           inventDim;
        #    InventDimParm       inventDimParm;
        #    InventSumDeltaDim   inventSumDeltaDim;
        #    InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);
        #
        #    inventSumDeltaDim.ItemId    = _itemId;
        #    inventSumDeltaDim.ttsId     = this.ttsId();
        #    inventSumDeltaDim.CheckType = (isWHSEnabled && WHSInventEnabled::exist(_itemId)) ? InventOnhandCheckType::WHSDepreciateOrdered : InventOnhandCheckType::DepreciateOrdered;
        #    inventDim.data(_inventDim);
        #    inventDim.clearNotSelectedDim(_inventDimParm);
        #    inventSumDeltaDim.initFromInventDim(inventDim);
        #    inventSumDeltaDim.initFromInventDimParm(_inventDimParm);
        #
        #    // The InventSum record for the physical dimensions are used for serialization around the set based update
        #    // and the following Onhand check. For that reason "Physical InventDimId" must be stored
        #    inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);
        #    inventDim.clearNotSelectedDim(inventDimParm);
        #    inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm); // inventDimId for physical dimensions
        #    this.determineOnhandCheckStrategy(inventSumDeltaDim);
        #
        #    this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        #}
      ENDSOURCE
      SOURCE #addInventSumDelta
        #/// <summary>
        #///    Adds the specified <c>InventSumDelta</c> record and updates internal values.
        #/// </summary>
        #/// <param name="_inventSumDelta">
        #///    The record to add.
        #/// </param>
        #/// <param name="_inventTrans">
        #///    The <c>InventTrans</c> record that causes the on hand changes.
        #/// </param>
        #/// <param name="_inventTable">
        #///    An <c>InventTable</c> record. This parameter can be passed to improve performance.
        #/// </param>
        #public void addInventSumDelta(
        #    InventSumDelta _inventSumDelta,
        #    InventTrans    _inventTrans,
        #    InventTable    _inventTable = null)
        #{
        #
        #    boolean insertedWHSInventReserveDelta;
        #    if (!activated)
        #    {
        #        activated = true;
        #        appl.inventUpdateOnhandGlobal().activateDataAreaId(dataAreaId);
        #    }
        #
        #    _inventSumDelta.ttsId = this.ttsId();
        #
        #    // insert into InventSumDelta table can not be delayed (i.e. executed in the pre-commit block), because
        #    // the InventOnhand class need to take the contribution from InventSumDelta into account upon inquiries
        #    _inventSumDelta.insert();
        #
        #    if (WHSInventEnabled::exist(_inventSumDelta.ItemId))
        #    {
        #        // Write reservation records if WHS Item
        #        insertedWHSInventReserveDelta = WHSInventOnHand::insertWHSInventReserveDeltaFromSumDelta(_inventSumDelta, _inventTrans);
        #
        #        // Flip flag for invent reserve table if WHS item
        #        inventReserveDeltaExist = (inventReserveDeltaExist || insertedWHSInventReserveDelta);
        #    }
        #
        #    // add the ItemId to set for performance optimization (used by the InventOnhand class to optimize sum-select)
        #    this.itemIdSet().add(_inventSumDelta.ItemId);
        #
        #    //track how many times we added inventSumDelta records for the same non-aggregated item since this can be used to determine if insert_recordSet should be used when creating aggregations of the records.
        #    this.addInventSumDeltaNonAggrCountItem(_inventSumDelta.ItemId, 1);
        #
        #    inventSumDeltaCnt++;
        #
        #    if (inventSumDeltaCnt == 1)
        #    {
        #        inventSumDeltaCache.data(_inventSumDelta);
        #    }
        #
        #    this.addOnHandCheck(_inventTrans,_inventSumDelta, _inventTable.modelGroup());
        #}
      ENDSOURCE
      SOURCE #addInventSumDeltaNonAggrCountItem
        #/// <summary>
        #/// Updates the internal structure that keeps count of how many non-aggregated <c>InventSumDelta</c> records were inserted.
        #/// </summary>
        #/// <param name="_itemId">
        #/// ID of the item.
        #/// </param>
        #/// <param name="_addedCountAdjustment">
        #/// The number of non-aggregated <c>InventSumDelta</c> records that were just inserted. This number will be added to the existing count.
        #/// </param>
        #/// <remarks>
        #/// This value is set to optimize performance for scenarios where many order lines with the same item is updated and summarized within the same transaction scope.
        #/// </remarks>
        #public void addInventSumDeltaNonAggrCountItem(
        #    ItemId  _itemId,
        #    int     _addedCountAdjustment)
        #{
        #    Counter numberOfTimesItemWasAdded = 0;
        #
        #    //done this way to avoid looking up the first time the map is created.
        #    if (inventSumDeltaAddCountItem && inventSumDeltaAddCountItem.exists(_itemId))
        #    {
        #        numberOfTimesItemWasAdded = inventSumDeltaAddCountItem.lookup(_itemId);
        #    }
        #
        #    if (inventSumDeltaAddCountItem == null)
        #    {
        #        inventSumDeltaAddCountItem = this.createItemIdAddCountMap();
        #    }
        #
        #    numberOfTimesItemWasAdded += _addedCountAdjustment;
        #
        #    inventSumDeltaAddCountItem.insert(_itemId,numberOfTimesItemWasAdded);
        #}
      ENDSOURCE
      SOURCE #addInventSumLogTTS
        #/// <summary>
        #///    Adds a record that indicates a change for master planning to consider.
        #/// </summary>
        #/// <param name="_inventTrans">
        #///    The <c>InventTrans</c> record that causes the on hand changes.
        #/// </param>
        #/// <param name="_plus">
        #///    <c>Yes</c> if the change is adding on hand; otherwise, <c>No</c>.
        #/// </param>
        #/// <param name="_keepSequenceNumber">
        #///    true if the internal counter for log records to help secure correct order when rollback is
        #///    performed should remain unchanged; otherwise, false.
        #/// </param>
        #/// <param name="_skipInventTransValidation">
        #///    true if the validation of inventTrans should be skipped; otherwise, false.
        #/// </param>
        #/// <returns>
        #///     <c>true</c> if a change record was added for the given <c>InventTrans</c> record; otherwise, <c>false</c>.
        #/// </returns>
        #public boolean addInventSumLogTTS(
        #    InventTrans _inventTrans,
        #    NoYes       _plus,
        #    boolean     _keepSequenceNumber = false,
        #    boolean     _skipInventTransValidation = false
        #    )
        #{
        #    InventSumLogTTS     inventSumLogTTS;
        #    InventTransOrigin   inventTransOrigin;
        #    boolean             added = false;
        #
        #    InventTransOrigin getInventTransOrigin()
        #    {
        #        if (!inventTransOrigin)
        #        {
        #            inventTransOrigin = _inventTrans.inventTransOrigin();
        #        }
        #
        #        return inventTransOrigin;
        #    }
        #
        #    if (this.mustCreateSumLogTTS()
        #        && (_skipInventTransValidation || this.mustCreateSumLogTTSForInventTrans(_inventTrans))
        #        && this.mustCreateSumLogTTSForDynamicPlan()
        #        && this.mustCreateSumLogTTSForInventTransOrigin(getInventTransOrigin()))
        #    {
        #        if (!activated)
        #        {
        #            activated = true;
        #            appl.inventUpdateOnhandGlobal().activateDataAreaId(dataAreaId);
        #        }
        #
        #        inventSumLogTTS.initFromInventTransOrigin(getInventTransOrigin());
        #        inventSumLogTTS.initFromInventTrans(_inventTrans);
        #        inventSumLogTTS.SoftDeleted         = skipTTSLog;
        #        inventSumLogTTS.AddTrans            = _plus;
        #        inventSumLogTTS.ttsId               = this.ttsId();
        #        inventSumLogTTS.SequenceNumber      = this.nextSequenceCount(!_keepSequenceNumber);
        #        inventSumLogTTS.utcCreatedDateTime  = this.utcTimeStampForTTS();
        #        this.inventSumLogTTSList().add(inventSumLogTTS);
        #
        #        added = true;
        #    }
        #
        #    return added;
        #}
      ENDSOURCE
      SOURCE #addOnHandCheck
        #protected void addOnHandCheck(
        #    InventTrans         _inventTrans,
        #    InventSumDelta      _inventSumDelta,
        #    InventModelGroup    _inventModelGroup = null)
        #{
        #    InventDim                       inventDim;
        #    InventDimParm                   inventDimParm;
        #    InventSumDeltaDim               inventSumDeltaDim;
        #    InventDimGroupSetup             inventDimGroupSetup;
        #
        #    if (this.mustCheckPhysicalOnhand(_inventSumDelta, _inventModelGroup))
        #    {
        #        if (!inventDimGroupSetup)
        #        {
        #            inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
        #        }
        #        inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);
        #        inventDim        = _inventTrans.inventDim();
        #        inventDim.clearNotSelectedDim(inventDimParm);
        #
        #        inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
        #        inventSumDeltaDim.ttsId     = this.ttsId();
        #        inventSumDeltaDim.CheckType = (isWHSEnabled && WHSInventEnabled::exist(_inventTrans.ItemId)) ? InventOnhandCheckType::WHSPhysical : InventOnhandCheckType::Physical;
        #        inventSumDeltaDim.initFromInventDim(inventDim);
        #        inventSumDeltaDim.initFromInventDimParm(inventDimParm);
        #        inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
        #        this.determineOnhandCheckStrategy(inventSumDeltaDim);
        #
        #        this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        #    }
        #
        #    if (this.mustCheckPhysicalInvent(_inventSumDelta, _inventModelGroup))
        #    {
        #        if (!inventDimGroupSetup)
        #        {
        #            inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
        #        }
        #
        #        inventDim   = _inventTrans.inventDim();
        #
        #        //we only need the check if we have any tracking dimensions that allow blank issue that are not specified in the dim
        #        if (this.anyTrackingDimsNeedPhysicalInventCheck(inventDimGroupSetup.getTrackingDimensionGroup(), inventDim))
        #        {
        #            inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);
        #
        #            inventDim.clearNotSelectedDim(inventDimParm);
        #
        #            inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
        #            inventSumDeltaDim.ttsId     = this.ttsId();
        #            inventSumDeltaDim.CheckType = InventOnhandCheckType::WHSPhysicalInventChange;
        #            inventSumDeltaDim.initFromInventDim(inventDim);
        #            inventSumDeltaDim.initFromInventDimParm(inventDimParm);
        #            inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
        #            this.determineOnhandCheckStrategy(inventSumDeltaDim);
        #
        #            this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        #        }
        #    }
        #
        #    if (this.mustCheckFinancialOnhand(_inventSumDelta, _inventModelGroup))
        #    {
        #        if (!inventDimGroupSetup)
        #        {
        #            inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
        #        }
        #        inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParm);
        #        inventDim        = _inventTrans.inventDim();
        #        inventDim.clearNotSelectedDim(inventDimParm);
        #
        #        inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
        #        inventSumDeltaDim.ttsId     = this.ttsId();
        #        inventSumDeltaDim.CheckType = InventOnhandCheckType::Financial;
        #        inventSumDeltaDim.initFromInventDim(inventDim);
        #        inventSumDeltaDim.initFromInventDimParm(inventDimParm);
        #        inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
        #        this.determineOnhandCheckStrategy(inventSumDeltaDim);
        #
        #        this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        #    }
        #
        #    if (this.mustCheckInventModel(_inventSumDelta))
        #    {
        #        mustUseOnHandAmounts = true;    // Amounts used by checkInventOnHand method in inventModelType_MovingAverage and inventModelType_StdCost
        #        if (!inventDimGroupSetup)
        #        {
        #            inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
        #        }
        #        inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParm);
        #        inventDim        = _inventTrans.inventDim();
        #        inventDim.clearNotSelectedDim(inventDimParm);
        #
        #        inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
        #        inventSumDeltaDim.ttsId     = this.ttsId();
        #        inventSumDeltaDim.CheckType = InventOnhandCheckType::InventModel;
        #        inventSumDeltaDim.initFromInventDim(inventDim);
        #        inventSumDeltaDim.initFromInventDimParm(inventDimParm);
        #        inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
        #        this.determineOnhandCheckStrategy(inventSumDeltaDim);
        #
        #        this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        #    }
        #
        #
        #    // <GEERU>
        #    if (this.mustCheckStdCostSecCur_RU(_inventSumDelta))
        #    {
        #        mustUseOnHandAmounts = true;    // Used by inventOnHand.checkItemStdCostSecur_RU()
        #        if (!inventDimGroupSetup)
        #        {
        #            inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
        #        }
        #        inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParm);
        #        inventDim        = _inventTrans.inventDim();
        #        inventDim.clearNotSelectedDim(inventDimParm);
        #
        #        inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
        #        inventSumDeltaDim.ttsId     = this.ttsId();
        #        inventSumDeltaDim.CheckType = InventOnhandCheckType::StdCostSecCur_RU;
        #        inventSumDeltaDim.initFromInventDim(inventDim);
        #        inventSumDeltaDim.initFromInventDimParm(inventDimParm);
        #        inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
        #        this.determineOnhandCheckStrategy(inventSumDeltaDim);
        #
        #        this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        #    }
        #    // </GEERU>
        #}
      ENDSOURCE
      SOURCE #addReservationCheck
        #/// <summary>
        #///    Adds a record to the <c>InventSumDeltaDim</c> table to make sure of the reserved quantity checking
        #///    during the final commit.
        #/// </summary>
        #/// <param name="_itemId">
        #///    The item for which to perform the reserved quantity check.
        #/// </param>
        #/// <param name="_inventDim">
        #///    The dimension values for which to perform the reserved quantity check.
        #/// </param>
        #/// <param name="_inventDimParm">
        #///    The set of dimensions for which to perform the reserved quantity check.
        #/// </param>
        #public void addReservationCheck(
        #    ItemId                  _itemId,
        #    InventDim               _inventDim,
        #    InventDimParm           _inventDimParm)
        #{
        #    InventDim           inventDim;
        #    InventDimParm       inventDimParm;
        #    InventDimParm       inventDimParmDisabled;
        #    InventSumDeltaDim   inventSumDeltaDim;
        #    InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);
        #
        #    inventSumDeltaDim.ItemId    = _itemId;
        #    inventSumDeltaDim.ttsId     = this.ttsId();
        #    inventSumDeltaDim.CheckType = (isWHSEnabled && WHSInventEnabled::exist(_itemId)) ? InventOnhandCheckType::WHSReservation : InventOnhandCheckType::Reservation;
        #    inventDim.data(_inventDim);
        #    // Clear dimensions not active and keep set of disabled dimensions
        #    inventDimParmDisabled = inventDim.clearAndGetDisabledDimensions(inventDimGroupSetup);
        #
        #    inventDimParm.data(_inventDimParm);
        #    // Ensure that both specified and non active dimensions are included.
        #    inventDimParm = InventDimParm::orParms(inventDimParmDisabled, _inventDimParm);
        #
        #    inventDim.clearNotSelectedDim(_inventDimParm);
        #    inventSumDeltaDim.initFromInventDim(inventDim);
        #    inventSumDeltaDim.initFromInventDimParm(inventDimParm); // Set all specified and all non-active dimensions
        #
        #    // The InventSum record for the physical dimensions are used for serialization around the set based update
        #    // and the following Onhand check. For that reason "Physical InventDimId" must be stored
        #    inventDimParm.clear();
        #    inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);
        #    inventDim.clearNotSelectedDim(inventDimParm);
        #    inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);  // inventDimId for physical dimensions
        #    this.determineOnhandCheckStrategy(inventSumDeltaDim);
        #
        #    this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        #}
      ENDSOURCE
      SOURCE #anyTrackingDimsNeedPhysicalInventCheck
        #private boolean anyTrackingDimsNeedPhysicalInventCheck(
        #    EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupID,
        #    InventDim                           _inventDim)
        #{
        #    boolean         result = false;
        #    InventDimParm   dimParmActiveTracking;
        #    InventDimParm   dimParmTrackingDim;
        #    List            trackingDimList;
        #
        #    if (_ecoResTrackingDimensionGroupID
        #        && EcoResTrackingDimGroupSetupCache::anyAllowBlankIssue(_ecoResTrackingDimensionGroupID))
        #    {
        #        dimParmActiveTracking = EcoResTrackingDimGroupSetupCache::active(_ecoResTrackingDimensionGroupID);
        #        trackingDimList = InventDim::dimTrackingDimFieldList();
        #        dimParmTrackingDim.initFromInventDim(_inventDim, trackingDimList);
        #
        #        //just check if all active ones are filled - if they are not, we need to do the check
        #        if (!InventDimParm::isInventDimParmEqual(dimParmActiveTracking, dimParmTrackingDim, trackingDimList))
        #        {
        #            result = true;
        #        }
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #checkOnhand
        #protected boolean checkOnhand()
        #{
        #    #InventDimDevelop
        #    #define.SummarizedCheckStrategy(2)
        #    #define.DirectCheckStrategy(1)
        #
        #    InventSumDeltaDim   inventSumDeltaDim;
        #    InventSum           inventSum;
        #    InventDim           inventDim;
        #    WHSInventReserve    whsInventReserve;
        #    InventOnhand        inventOnhand;
        #    InventDimParm       inventDimParmCheck;
        #    InventDim           inventDimCheck;
        #    int                 checkStrategy = #SummarizedCheckStrategy;
        #
        #    if (!this.parmDoOnhandCheck())
        #    {
        #        return true;
        #    }
        #
        #    do
        #    {
        #        if (checkStrategy == #SummarizedCheckStrategy && this.parmDoSummarizedOnhandCheck())
        #        {
        #            select #InventSumFields from inventSum
        #                where inventSum.Closed == NoYes::No
        #                    &&  (mustUseOnHandAmounts || inventSum.ClosedQty == NoYes::No) // If not needing amounts then only include those with open quantity
        #                join inventDim
        #                    where inventSum.InventDimId == inventDim.InventDimId
        #                    join inventSumDeltaDim
        #                        group by CheckType,
        #                                 ItemId,
        #                                 ConfigId,
        #                                 InventSizeId,
        #                                 InventColorId,
        #                                 InventStyleId,
        #                                 InventSiteId,
        #                                 InventLocationId,
        #                                 // Added License Plate and Status
        #                                 InventStatusId,
        #                                 LicensePlateId,
        #                                 InventBatchId,
        #                                 wmsLocationId,
        #                                 wmsPalletId,
        #                                 // <GEERU>
        #                                 InventSerialId,
        #                                 InventGTDId_RU,
        #                                 InventProfileId_RU,
        #                                 InventOwnerId_RU
        #                                 // </GEERU>
        #                        where inventSumDeltaDim.ItemId                  == inventSum.ItemId                     &&
        #                              inventSumDeltaDim.ttsId                   == this.ttsId()                         &&
        #                              inventSumDeltaDim.AreAllActiveDimensionsSpecified == NoYes::No                    &&
        #                             (inventSumDeltaDim.checkType == InventOnhandCheckType::DepreciateOrdered      ||
        #                              inventSumDeltaDim.checkType == InventOnhandCheckType::Financial              ||
        #                              inventSumDeltaDim.checkType == InventOnhandCheckType::InventModel            ||
        #                              inventSumDeltaDim.checkType == InventOnhandCheckType::Physical               ||
        #                              inventSumDeltaDim.checkType == InventOnhandCheckType::Reservation            ||
        #                              inventSumDeltaDim.checkType == InventOnhandCheckType::StdCost                ||
        #                              inventSumDeltaDim.checkType == InventOnhandCheckType::StdCostSecCur_RU       ||
        #                              inventSumDeltaDim.checkType == InventOnhandCheckType::WHSPhysicalInventChange)    &&
        #                             (inventSumDeltaDim.ConfigId                == inventDim.ConfigId           ||
        #                              inventSumDeltaDim.ConfigIdFlag            == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventSizeId            == inventDim.InventSizeId       ||
        #                              inventSumDeltaDim.InventSizeIdFlag        == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventColorId           == inventDim.InventColorId      ||
        #                              inventSumDeltaDim.InventColorIdFlag       == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventStyleId           == inventDim.InventStyleId      ||
        #                              inventSumDeltaDim.InventStyleIdFlag       == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventSiteId            == inventDim.InventSiteId       ||
        #                              inventSumDeltaDim.InventSiteIdFlag        == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventLocationId        == inventDim.InventLocationId   ||
        #                              inventSumDeltaDim.InventLocationIdFlag    == NoYes::No)                           &&
        #                             (inventSumDeltaDim.wmsLocationId           == inventDim.wmsLocationId      ||
        #                              inventSumDeltaDim.wmsLocationIdFlag       == NoYes::No)                           &&
        #                             (inventSumDeltaDim.wmsPalletId             == inventDim.wmsPalletId        ||
        #                              inventSumDeltaDim.wmsPalletIdFlag         == NoYes::No)                           &&
        #                             // Add license plate and inventory status
        #                             (inventSumDeltaDim.LicensePlateId       == inventDim.LicensePlateId  ||
        #                              inventSumDeltaDim.LicensePlateFlag     == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventStatusId       == inventDim.InventStatusId  ||
        #                              inventSumDeltaDim.InventStatusFlag     == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventBatchId           == inventDim.InventBatchId      ||
        #                              inventSumDeltaDim.InventBatchIdFlag       == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventSerialId          == inventDim.InventSerialId     ||
        #                              // <GEERU>
        #                              inventSumDeltaDim.InventSerialIdFlag      == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventGTDId_RU          == inventDim.InventGtdId_RU     ||
        #                              inventSumDeltaDim.InventGTDIdFlag_RU      == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventProfileId_RU      == inventDim.InventProfileId_RU ||
        #                              inventSumDeltaDim.InventProfileIdFlag_RU  == NoYes::No)                           &&
        #                             (inventSumDeltaDim.InventOwnerId_RU        == inventDim.InventOwnerId_RU   ||
        #                              inventSumDeltaDim.InventOwnerIdFlag_RU    == NoYes::No);
        #                              // </GEERU>
        #        }
        #
        #        if (checkStrategy == #DirectCheckStrategy && this.parmDoDirectOnhandCheck())
        #        {
        #            select inventSum
        #                where inventSum.Closed == NoYes::No
        #                    &&    (mustUseOnHandAmounts || inventSum.ClosedQty == NoYes::No)// If not needing amounts then only include those with open quantity
        #                join inventSumDeltaDim
        #                    where inventSumDeltaDim.ItemId                  == inventSum.ItemId                     &&
        #                          inventSumDeltaDim.InventDimId             == inventSum.InventDimId                &&
        #                          inventSumDeltaDim.ttsId                   == this.ttsId()                         &&
        #                          inventSumDeltaDim.AreAllActiveDimensionsSpecified == NoYes::Yes                   &&
        #                          (inventSumDeltaDim.checkType == InventOnhandCheckType::DepreciateOrdered      ||
        #                           inventSumDeltaDim.checkType == InventOnhandCheckType::Financial              ||
        #                           inventSumDeltaDim.checkType == InventOnhandCheckType::InventModel            ||
        #                           inventSumDeltaDim.checkType == InventOnhandCheckType::Physical               ||
        #                           inventSumDeltaDim.checkType == InventOnhandCheckType::Reservation            ||
        #                           inventSumDeltaDim.checkType == InventOnhandCheckType::StdCost                ||
        #                           inventSumDeltaDim.checkType == InventOnhandCheckType::StdCostSecCur_RU       ||
        #                           inventSumDeltaDim.checkType == InventOnhandCheckType::WHSPhysicalInventChange);
        #        }
        #
        #        while (inventSumDeltaDim.ItemId)
        #        {
        #            setPrefix(fieldLabelValue(inventSum.TableId, fieldNum(InventSum,ItemId), inventSumDeltaDim.ItemId));
        #
        #            inventSumDeltaDim.initInventDim(inventDimCheck);
        #            inventDimParmCheck.initFromInventDim(inventDimCheck);
        #            inventOnhand = InventOnhand::newParameters(inventSumDeltaDim.ItemId, inventDimCheck, inventDimParmCheck);
        #            inventOnhand.parmInventSum(inventSum);
        #
        #            switch (inventSumDeltaDim.CheckType)
        #            {
        #                case InventOnhandCheckType::DepreciateOrdered   :
        #                    if (!inventOnhand.checkDepreciateOrdered(0,false,0))
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                case InventOnhandCheckType::Reservation         :
        #                    if (!inventOnhand.checkReservation(0,false,InventParameters::find().ReserveOnOrdered))
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                case InventOnhandCheckType::Physical            :
        #                    if (!inventOnhand.checkItemDraw(0,false,true))
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                /*
        #                    For WHS items we cannot solely rely on the Physical check since it is relying on the data in the WHSInventReserve table.
        #                    There are cases, e.g. when using serial numbers and allowing blanks, where we risk reducing quantity since we remove quantities from higher levels in the hierarachy.
        #                    We need to check the actual physical invent for cases where we physically updated inventtrans.
        #                */
        #                case InventOnhandCheckType::WHSPhysicalInventChange            :
        #                    if (!inventOnhand.checkItemDrawPhysicalInvent(0))
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                case InventOnhandCheckType::Financial           :
        #                    if (!inventOnhand.checkItemDrawFinancial(0,false,true))
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                case InventOnhandCheckType::InventModel         :
        #                    if (!inventOnhand.checkInventModel())
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                // <GEERU>
        #                case InventOnhandCheckType::StdCostSecCur_RU    :
        #                    if (!inventOnhand.checkItemStdCostSecCur_RU())
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                // </GEERU>
        #
        #                default: throw error("@SYS98336");
        #            }
        #
        #            next inventSum;
        #        }
        #
        #        checkStrategy--;
        #    }
        #    while (checkStrategy);
        #
        #    if (checkOnHandForWHSItems)
        #    {
        #        while select inventSumDeltaDim
        #            where inventSumDeltaDim.ttsId       == this.ttsId()
        #            &&   (inventSumDeltaDim.checkType   == InventOnhandCheckType::WHSDepreciateOrdered
        #            ||    inventSumDeltaDim.checkType   == InventOnhandCheckType::WHSPhysical
        #            ||    inventSumDeltaDim.checkType   == InventOnhandCheckType::WHSReservation)
        #            exists join whsInventReserve
        #                where whsInventReserve.ItemId   == inventSumDeltaDim.ItemId
        #                   && (whsInventReserve.AvailOrdered < 0 || whsInventReserve.AvailPhysical < 0)
        #                #WHSInventDimInnerJoinTableId(whsInventReserve.inventDimId, inventDim, inventSumDeltaDim)
        #        {
        #            setPrefix(fieldLabelValue(tableNum(WHSInventReserve), fieldNum(WHSInventReserve,ItemId), inventSumDeltaDim.ItemId));
        #
        #            inventSumDeltaDim.initInventDim(inventDimCheck);
        #            inventDimParmCheck.initFromInventDim(inventDimCheck);
        #            inventOnhand = InventOnhand::newParameters(inventSumDeltaDim.ItemId, inventDimCheck, inventDimParmCheck);
        #            inventOnhand.whsParmSkipDelta(true);
        #
        #            switch (inventSumDeltaDim.CheckType)
        #            {
        #                case InventOnhandCheckType::WHSDepreciateOrdered:
        #                    if (!inventOnhand.checkDepreciateOrdered(0,false,0))
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                case InventOnhandCheckType::WHSReservation      :
        #                    if (!inventOnhand.checkReservation(0,false,InventParameters::find().ReserveOnOrdered))
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                case InventOnhandCheckType::WHSPhysical         :
        #                    if (!inventOnhand.checkItemDraw(0,false,true))
        #                    {
        #                        return false;
        #                    }
        #                    break;
        #                default:
        #                    //Invalid Argument
        #                    error("@SYS111577");
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class InventUpdateOnhand
        #{
        #    CreatedTransactionId    ttsId;                      // Unique identifier for Main transaction
        #    boolean                 activated;                  // Flag to indicate whether current database tranaction has updated the Inventory
        #    boolean                 isFinalCommit;              // Flag to indicate that final commit block (ttsNotifyPreCommit) is under execution
        #    boolean                 doOnhandCheck;              // Flag to indicate whether onhand checking is required
        #    boolean                 doSummarizedOnhandCheck;    // Flag to indicate whether summarized onhand check is required
        #    boolean                 doDirectOnhandCheck;        // Flag to indicate whether direct onhand check is required
        #    boolean                 mustUseOnHandAmounts;       // Flag used to indicate if it is enough to include records with ClosedQty set to No in on hand check
        #    RecordSortedList        inventSumDeltaDimList;      // used to store combinations to be checked
        #    RecordInsertList        inventSumLogTTSList;        // used for collecting new records for table InventSumLogTTS - bulk inserted in pre-commit block
        #    Set                     itemIdSet;                  // Used for collecting what items have updated during the transaction (performance optimization for InventOnhand class)
        #    Integer                 sequenceCounter;            // Used for new records in table InventSumLogTTs
        #    str                     sqlUpdateStr;               // Only build the update-str once
        #    SqlSystem               sqlSystem;                  // Expensive to instantiate SqlSystem class - only instantiate first time, and keep in memory
        #    DataAreaId              dataAreaId;                 // Each instance of the InventUpdateOnhand class applies to a specific company - this is kept in this variable
        #    str                     curExtensionSum;            // DataAreaIdInventSum formatted for database (lower case etc if needed)
        #    str                     curExtensionSumDelta;       // DataAreaIdInventSumDelta formatted for database (lower case etc if needed)
        #    Counter                 inventSumDeltaCnt;          // Count the number of delta records - if only one: do simplified update of InventSum
        #    InventSumDelta          inventSumDeltaCache;        // cache instance to be used with simplified update statement (when inventSumDeltaCnt = 1)
        #    boolean                 skipTTSLog;                 // flag that will prevent creation of records in InventSumLogTTS table.
        #    Counter                 aggregationCnt;             // Counter used for aggregated InventSumDelta records
        #    boolean                 isInventSumLogTTSEnabled;   // Flag to indicate if the InventSumLogTTS table should be used.
        #    boolean                 inventReserveDeltaExist;    // boolean if inventReserveDeltaCnt record exist
        #    str                     sqlUpdateReserveStr;        // Only build the update-str once
        #    Map                     inventSumDeltaAddCountItem;
        #    boolean                 checkOnHandForWHSItems;
        #    boolean                 isWHSEnabled;
        #    utcdatetime             initialCreatedDateTime;
        #}
      ENDSOURCE
      SOURCE #cleanupAggrCounter
        #/// <summary>
        #/// Remove aggregated records not needed any more.
        #/// </summary>
        #/// <param name="_aggregationCnt">
        #/// The aggregation counter ID for the records to be removed.
        #/// </param>
        #
        #public void cleanupAggrCounter(Counter _aggregationCnt)
        #{
        #    InventSumDelta inventSumDelta;
        #
        #    delete_from inventSumDelta
        #        where inventSumDelta.ttsId                  == this.ttsId()
        #            && inventSumDelta.IsAggregated          == NoYes::Yes
        #            && inventSumDelta.AggregationCounter    == _aggregationCnt;
        #}
      ENDSOURCE
      SOURCE #createItemIdAddCountMap
        #/// <summary>
        #/// Creates a map used to track how many times a non-aggreagted <c>InventSumDelta</c> record was inserted using this class api.
        #/// </summary>
        #/// <returns>
        #/// A map used to track how many times a non-aggreagted <c>InventSumDelta</c> record was inserted using this class api.
        #/// </returns>
        #protected Map createItemIdAddCountMap()
        #{
        #    return new Map(Types::String, Types::Integer);
        #}
      ENDSOURCE
      SOURCE #deleteInventSumDelta
        #protected void deleteInventSumDelta()
        #{
        #    InventSumDelta inventSumDelta;
        #
        #    delete_from inventSumDelta
        #        where inventSumDelta.ttsId == this.ttsId();
        #}
      ENDSOURCE
      SOURCE #deleteInventSumDeltaAggregated
        #protected void deleteInventSumDeltaAggregated()
        #{
        #    InventSumDelta inventSumDelta;
        #
        #    if (aggregationCnt != 0)
        #    {
        #        delete_from inventSumDelta
        #            where inventSumDelta.ttsId          == this.ttsId()  &&
        #                  inventSumDelta.IsAggregated   == NoYes::Yes;
        #    }
        #}
      ENDSOURCE
      SOURCE #deleteInventSumDeltaUpd
        #protected void deleteInventSumDeltaUpd()
        #{
        #    InventSumDeltaDim inventSumDeltaDim;
        #
        #    delete_from inventSumDeltaDim
        #        where inventSumDeltaDim.ttsId == this.ttsId();
        #}
      ENDSOURCE
      SOURCE #determineOnhandCheckStrategy
        #/// <summary>
        #///    Determines the necessary on-hand check strategy applicable for validating on-hand.
        #/// </summary>
        #/// <param name="_inventSumDeltaDim">
        #///    An <c>InventSumDeltaDim</c> buffer for which the on-hand check strategy must be determined.
        #/// </param>
        #protected void determineOnhandCheckStrategy(InventSumDeltaDim _inventSumDeltaDim)
        #{
        #    switch (_inventSumDeltaDim.checkType)
        #    {
        #        case InventOnhandCheckType::WHSDepreciateOrdered:
        #        case InventOnhandCheckType::WHSReservation:
        #        case InventOnhandCheckType::WHSPhysical:
        #            checkOnHandForWHSItems = true;
        #            break;
        #        default:
        #            if (_inventSumDeltaDim.AreAllActiveDimensionsSpecified)
        #            {
        #                doDirectOnhandCheck = true;
        #            }
        #            else
        #            {
        #                doSummarizedOnhandCheck = true;
        #            }
        #    }
        #
        #    doOnhandCheck = true;
        #}
      ENDSOURCE
      SOURCE #getInventSumDeltaNonAggrAddCountForItem
        #/// <summary>
        #/// Retrieves the number of non-aggregated records that is inserted into the <c>InventSumDelta</c> table for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// ID of the item.
        #/// </param>
        #/// <returns>
        #/// The number of non-aggregated records that is inserted into the <c>InventSumDelta</c> table for an item
        #/// </returns>
        #/// <remarks>
        #/// The number is maintained using the standard api addInventSumDelta() so any records inserted by other means are not tracked.
        #/// </remarks>
        #public int getInventSumDeltaNonAggrAddCountForItem(ItemId _itemId)
        #{
        #    if (inventSumDeltaAddCountItem == null || !inventSumDeltaAddCountItem.exists(_itemId))
        #    {
        #        return 0;
        #    }
        #
        #    return inventSumDeltaAddCountItem.lookup(_itemId);
        #}
      ENDSOURCE
      SOURCE #hasInventTransResourcePlanningDataChged
        #private boolean hasInventTransResourcePlanningDataChged(
        #    InventTrans   _inventTrans,
        #    InventTrans   _orig
        #    )
        #{
        #    boolean     resourcePlanningDataChanged = true;
        #
        #    if (_inventTrans.ItemId                      == _orig.ItemId        &&
        #        _inventTrans.Qty                         == _orig.Qty           &&
        #        _inventTrans.InventDimId                 == _orig.InventDimId   &&
        #        _inventTrans.DateStatus                  == _orig.DateStatus    &&
        #        _inventTrans.MarkingRefInventTransOrigin == _orig.MarkingRefInventTransOrigin)
        #    {
        #        resourcePlanningDataChanged = false;
        #    }
        #
        #    return resourcePlanningDataChanged;
        #}
      ENDSOURCE
      SOURCE #hasInventTransStatusChanged
        #private boolean hasInventTransStatusChanged(
        #    InventTrans   _inventTrans,
        #    InventTrans   _orig
        #    )
        #{
        #    boolean     hasStatusChanged = true;
        #
        #    if ((_inventTrans.StatusIssue   == StatusIssue::Sold        && _orig.StatusIssue   == StatusIssue::Deducted) ||
        #        (_inventTrans.StatusReceipt == StatusReceipt::Purchased && _orig.StatusReceipt == StatusReceipt::Received) ||
        #        (_inventTrans.StatusIssue   == _orig.StatusIssue        && _inventTrans.StatusReceipt == _orig.StatusReceipt))
        #    {
        #        hasStatusChanged = false;
        #    }
        #
        #    return hasStatusChanged;
        #}
      ENDSOURCE
      SOURCE #insertInventSum
        #protected void insertInventSum()
        #{
        #    InventSumDelta      inventSumDelta;
        #    InventSumDeltaDim   inventSumDeltaDim;
        #    InventSum           inventSum;
        #    InventSum           inventSumNew;
        #    RecordInsertList    insertList;
        #
        #    if (this.parmDoOnhandCheck())
        #    {
        #        this.inventSumDeltaDimList().insertDatabase();
        #    }
        #
        #    if (inventSumDeltaCnt > 1) // If inventSumDeltaCnt == 1 then this insert is handled by simplified update statement (using 'write')
        #    {
        #        while select ItemId, InventDimId from inventSumDelta
        #            group by ItemId, InventDimId
        #            where inventSumDelta.ttsId          == this.ttsId() &&
        #                  inventSumDelta.IsAggregated   == NoYes::No
        #                notexists join inventSum
        #                where inventSum.ItemId         == inventSumDelta.ItemId &&
        #                      inventSum.InventDimId    == inventSumDelta.InventDimId
        #        {
        #            if (!inventSumDelta.ItemId || !inventSumDelta.InventDimId)
        #            {
        #                throw error(strFmt("@SYS68912",funcName()));
        #            }
        #
        #            insertList                  = insertList ? insertList : new RecordInsertList(tableNum(InventSum),true,true,true);
        #            inventSumNew.ItemId         = inventSumDelta.ItemId;
        #            inventSumNew.InventDimId    = inventSumDelta.InventDimId;
        #            inventSumNew.ClosedQty      = NoYes::Yes;
        #            inventSumNew.Closed         = NoYes::Yes;
        #            insertList.add(inventSumNew);
        #        }
        #        if (insertList)
        #        {
        #            insertList.insertDatabase();
        #            insertList = null;
        #        }
        #    }
        #
        #    // create sum records for the 'check' dimensions ... used for serializing locks
        #    if (this.parmDoOnhandCheck())
        #    {
        #        while select ItemId, InventDimId from inventSumDeltaDim
        #            group by ItemId, InventDimId
        #            where inventSumDeltaDim.ttsId == this.ttsId()
        #                notexists join inventSum
        #                where inventSum.ItemId         == inventSumDeltaDim.ItemId &&
        #                      inventSum.InventDimId    == inventSumDeltaDim.InventDimId
        #        {
        #            if (!inventSumDeltaDim.ItemId || !inventSumDeltaDim.InventDimId)
        #            {
        #                throw error(strFmt("@SYS68912",funcName()));
        #            }
        #
        #            insertList                  = insertList ? insertList : new RecordInsertList(tableNum(InventSum),true,true,true);
        #            inventSumNew.ItemId         = inventSumDeltaDim.ItemId;
        #            inventSumNew.InventDimId    = inventSumDeltaDim.InventDimId;
        #            inventSumNew.ClosedQty      = NoYes::Yes;
        #            inventSumNew.Closed         = NoYes::Yes;
        #            insertList.add(inventSumNew);
        #        }
        #        if (insertList)
        #        {
        #            insertList.insertDatabase();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #insertInventSumLogTTS
        #/// <summary>
        #/// Saves the pending <c>InventSumLogTTS</c> records to the database.
        #/// </summary>
        #public void insertInventSumLogTTS()
        #{
        #    if (inventSumLogTTSList)
        #    {
        #        inventSumLogTTSList.insertDatabase();
        #    }
        #}
      ENDSOURCE
      SOURCE #inventSumDeltaDimList
        #protected RecordSortedList inventSumDeltaDimList()
        #{
        #    #InventDimDevelop
        #
        #    if (!inventSumDeltaDimList)
        #    {
        #        inventSumDeltaDimList = new RecordSortedList(tableNum(InventSumDeltaDim));
        #        inventSumDeltaDimList.sortOrder(fieldNum(InventSumDeltaDim,ttsId),
        #                                        fieldNum(InventSumDeltaDim,ItemId),
        #                                        fieldNum(InventSumDeltaDim,CheckType),
        #                                        fieldNum(InventSumDeltaDim,InventDimIdAllDimensions),
        #                                        fieldNum(InventSumDeltaDim,InventSerialIdFlag),
        #                                        fieldNum(InventSumDeltaDim,InventGTDIdFlag_RU),
        #                                        fieldNum(InventSumDeltaDim,InventProfileIdFlag_RU),
        #                                        fieldNum(InventSumDeltaDim,InventOwnerIdFlag_RU),
        #                                        // Add License Plate Id Flag
        #                                        fieldNum(InventSumDeltaDim, LicensePlateFlag),
        #                                        fieldNum(InventSumDeltaDim,wmsPalletIdFlag),
        #                                        fieldNum(InventSumDeltaDim,wmsLocationIdFlag),
        #                                        fieldNum(InventSumDeltaDim,InventBatchIdFlag),
        #                                        // Add Invent Status Id Flag
        #                                        fieldNum(InventSumDeltaDim, InventStatusFlag),
        #                                        fieldNum(InventSumDeltaDim,InventLocationIdFlag),
        #                                        fieldNum(InventSumDeltaDim,InventSiteIdFlag),
        #                                        fieldNum(InventSumDeltaDim,ConfigIdFlag),
        #                                        fieldNum(InventSumDeltaDim,InventColorIdFlag),
        #                                        fieldNum(InventSumDeltaDim,InventStyleIdFlag),
        #                                        fieldNum(InventSumDeltaDim,InventSizeIdFlag)
        #                                       );
        #    }
        #    return inventSumDeltaDimList;
        #}
      ENDSOURCE
      SOURCE #inventSumLogTTSList
        #protected RecordInsertList inventSumLogTTSList()
        #{
        #    if (!inventSumLogTTSList)
        #    {
        #        inventSumLogTTSList = new RecordInsertList(tableNum(InventSumLogTTS),true,true,true);
        #    }
        #
        #    return inventSumLogTTSList;
        #}
      ENDSOURCE
      SOURCE #isFinalCommit
        #/// <summary>
        #///    Queries whether the system thinks it is performing a database commit operation.
        #/// </summary>
        #/// <returns>
        #///    true if the system is considered in progress with a database commit operation; otherwise, false.
        #/// </returns>
        #public boolean isFinalCommit()
        #{
        #    return isFinalCommit;
        #}
      ENDSOURCE
      SOURCE #itemIdSet
        #protected Set itemIdSet()
        #{
        #    if (!itemIdSet)
        #    {
        #        itemIdSet = new Set(Types::String);
        #    }
        #
        #    return itemIdSet;
        #}
      ENDSOURCE
      SOURCE #lockInventSum
        #protected void lockInventSum()
        #{
        #    InventSum           inventSum;
        #    InventSumDeltaDim   inventSumDeltaDim;
        #
        #    if (!this.parmDoOnhandCheck())
        #    {
        #        return;
        #    }
        #
        #    select pessimisticlock ItemId, InventDimId from inventSum
        #        join TableId from inventSumDeltaDim // Don't use exists join as that might trick sql optimizer to choose a plan searching InventSum instead of InventSumDelta
        #            where inventSumDeltaDim.ItemId      == inventSum.ItemId         &&
        #                  inventSumDeltaDim.InventDimId == inventSum.InventDimId    &&
        #                  inventSumDeltaDim.ttsId       == this.ttsId();
        #}
      ENDSOURCE
      SOURCE #mustAddInventSumDeltaOnhand
        #/// <summary>
        #///    Specifies whether to include the <c>InventSumDelta</c> table when it considers the on hand for an
        #///    item.
        #/// </summary>
        #/// <param name="_itemId">
        #///    The item for which to calculate the on hand.
        #/// </param>
        #/// <returns>
        #///    true if the <c>InventSumDelta</c> table should be included; otherwise, false.
        #/// </returns>
        #public boolean mustAddInventSumDeltaOnhand(ItemId _itemId)
        #{
        #    return this.itemIdSet().in(_itemId);
        #}
      ENDSOURCE
      SOURCE #mustAddInventSumLogTTS
        #/// <summary>
        #///    Specifies whether to log a change to an <c>InventTrans</c> record in the <c>InventSumLogTTS</c>
        #///    table.
        #/// </summary>
        #/// <param name="_inventTrans">
        #///    The <c>InventTrans</c> record that causes the on hand changes.
        #/// </param>
        #/// <returns>
        #///    true if the changes should be logged; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Call addInventSumLogTTS instead. The validation will be done as part of the addInventSumLogTTS method.
        #/// </remarks>
        #[SysObsoleteAttribute]
        #public boolean mustAddInventSumLogTTS(InventTrans _inventTrans)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #mustCheckFinancialOnhand
        #protected boolean mustCheckFinancialOnhand(
        #    InventSumDelta      _inventSumDelta,
        #    InventModelGroup    _inventModelGroup = null)
        #{
        #    InventSum           inventSum;
        #    InventOnHandQty     inventOnHandQty;
        #    InventModelGroup    inventModelGroup = _inventModelGroup;
        #
        #    if (!inventModelGroup.RecId)
        #    {
        #        inventModelGroup = InventTable::modelGroupByItemId(_inventSumDelta.ItemId);
        #    }
        #
        #    if (inventModelGroup.NegativeFinancial)
        #    {
        #        return false;
        #    }
        #    else if (InventLocation::find(InventDim::find(_inventSumDelta.InventDimId).InventLocationId).RetailInventNegFinancial)
        #    {
        #        return false;
        #    }
        #
        #    inventSum.addInventSumDelta(_inventSumDelta);
        #    inventOnHandQty = InventOnHandQty::newParameters(_inventSumDelta.ItemId,null,null);
        #    inventOnHandQty.parmInventSum(inventSum);
        #
        #    return inventOnHandQty.mustCheckFinancialOnhand();
        #}
      ENDSOURCE
      SOURCE #mustCheckInventModel
        #/// <summary>
        #/// Indicates whether the inventory model must perform an on hand validation when the invent sum is
        #/// updated.
        #/// </summary>
        #/// <param name="_inventSumDelta">
        #/// The delta value that updates the inventory sum.
        #/// </param>
        #/// <returns>
        #/// true if the inventory model must perform an on hand validation when the invent sum is updated;
        #/// otherwise false.
        #/// </returns>
        #protected boolean mustCheckInventModel(InventSumDelta _inventSumDelta)
        #{
        #    InventTable     inventTable;
        #
        #    // We only need to perform onhand check if a qty or value is changed
        #
        #    if (_inventSumDelta.PostedQty ||
        #        _inventSumDelta.PostedValue ||
        #        _inventSumDelta.Deducted ||
        #        _inventSumDelta.Received ||
        #        _inventSumDelta.PhysicalValue)
        #    {
        #        inventTable = InventTable::find(_inventSumDelta.ItemId);
        #        if (inventTable.inventItemType().mustInventBeControlled())
        #        {
        #            return inventTable.modelGroup().inventModelType().mustCheckInventOnHand(_inventSumDelta);
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #mustCheckPhysicalInvent
        #/// <summary>
        #/// Determine if the physical inventory must be checked.
        #/// </summary>
        #/// <param name="_inventSumDelta">
        #/// The <c>InventSumDelta</c> buffer that is representing the change
        #/// </param>
        #/// <param name="_inventModelGroup">
        #/// A <c>InventModelGroup</c> model group.
        #/// </param>
        #/// <returns>
        #/// true if the physical inventory must be checked; otherwise, false.
        #/// </returns>
        #protected boolean mustCheckPhysicalInvent(
        #    InventSumDelta      _inventSumDelta,
        #    InventModelGroup    _inventModelGroup)
        #{
        #    //cheapest check is put here to have minimal impact
        #    //we only need to do this change if we have reduced the physical invent
        #    if (_inventSumDelta.PhysicalInvent >= 0)
        #    {
        #        return false;
        #    }
        #
        #    if (_inventModelGroup.NegativePhysical)
        #    {
        #        return false;
        #    }
        #
        #    if (!WHSInventEnabled::exist(_inventSumDelta.ItemId))
        #    {
        #        return false;
        #    }
        #
        #    if (InventLocation::find(InventDim::find(_inventSumDelta.InventDimId).InventLocationId).RetailInventNegPhysical)
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #mustCheckPhysicalOnhand
        #protected boolean mustCheckPhysicalOnhand(
        #    InventSumDelta      _inventSumDelta,
        #    InventModelGroup    _inventModelGroup = null)
        #{
        #    InventSum           inventSum;
        #    InventOnHandQty     inventOnHandQty;
        #    InventModelGroup    inventModelGroup;
        #
        #    if (InventLocation::find(InventDim::find(_inventSumDelta.InventDimId).InventLocationId).RetailInventNegPhysical)
        #    {
        #        return false;
        #    }
        #
        #    inventModelGroup = _inventModelGroup;
        #    if (!_inventModelGroup.RecId)
        #    {
        #        inventModelGroup = InventTable::modelGroupByItemId(_inventSumDelta.ItemId);
        #    }
        #
        #    if (inventModelGroup.NegativePhysical)
        #    {
        #        return false;
        #    }
        #
        #
        #    inventSum.addInventSumDelta(_inventSumDelta);
        #    inventOnHandQty = InventOnHandQty::newParameters(_inventSumDelta.ItemId,null,null);
        #    inventOnHandQty.parmInventSum(inventSum);
        #    inventOnHandQty.parmUseInventSumDirectly(true);
        #
        #    return inventOnHandQty.mustCheckPhysicalOnhand();
        #}
      ENDSOURCE
      SOURCE #mustCheckStdCost
        #[SysObsoleteAttribute('Use mustCheckInventModel instead.', true)]
        #protected boolean mustCheckStdCost(InventSumDelta _inventSumDelta)
        #{
        #    throw error(strFmt("@SYS22828",funcName()));
        #}
      ENDSOURCE
      SOURCE #mustCheckStdCostSecCur_RU
        #public boolean mustCheckStdCostSecCur_RU(
        #    InventSumDelta _inventSumDelta)
        #{
        #    InventTable inventTable;
        #
        #    if (_inventSumDelta.PostedValueSecCur_RU)
        #    {
        #        inventTable = InventTable::find(_inventSumDelta.ItemId);
        #        if (inventTable.modelGroup().inventModelTypeSecCur_RU().stdCostBased() &&
        #            inventTable.inventItemType().mustInventBeControlled())
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #mustCreateSumLogTTS
        #private boolean mustCreateSumLogTTS()
        #{
        #    return isInventSumLogTTSEnabled;
        #}
      ENDSOURCE
      SOURCE #mustCreateSumLogTTSForDynamicPlan
        #private boolean mustCreateSumLogTTSForDynamicPlan()
        #{
        #    return !skipTTSLog;
        #}
      ENDSOURCE
      SOURCE #mustCreateSumLogTTSForInventTrans
        #private boolean mustCreateSumLogTTSForInventTrans(
        #    InventTrans _inventTrans
        #    )
        #{
        #    InventTrans         orig;
        #    boolean             mustCreateInventSumLogTTS = false;
        #
        #    orig = _inventTrans.orig();
        #
        #    if (this.hasInventTransStatusChanged(_inventTrans, orig) || this.hasInventTransResourcePlanningDataChged(_inventTrans, orig))
        #    {
        #        mustCreateInventSumLogTTS = true;
        #    }
        #
        #    return mustCreateInventSumLogTTS;
        #}
      ENDSOURCE
      SOURCE #mustCreateSumLogTTSForInventTransOrigin
        #private boolean mustCreateSumLogTTSForInventTransOrigin(InventTransOrigin _inventTransOrigin)
        #{
        #    boolean             mustCreateInventSumLogTTS = true;
        #
        #    if (_inventTransOrigin.ReferenceCategory == InventTransType::SummedUp ||
        #        _inventTransOrigin.ReferenceCategory == InventTransType::WHSWork)
        #    {
        #        mustCreateInventSumLogTTS = false;
        #    }
        #
        #    return mustCreateInventSumLogTTS;
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new(DataAreaId _dataAreaId)
        #{
        #    DataAreaId      dataAreaIdInventSum         = appl.company(_dataAreaId).dataArea(tableNum(InventSum));
        #    DataAreaId      dataAreaIdInventSumDelta    = appl.company(_dataAreaId).dataArea(tableNum(InventSumDelta));
        #
        #    dataAreaId = _dataAreaId;
        #
        #    curExtensionSum = strFmt(this.sqlSystem().monocaseFmt(0,0,false, true), '\'' + dataAreaIdInventSum + '\'');
        #    curExtensionSumDelta = strFmt(this.sqlSystem().monocaseFmt(0,0,false, true), '\'' + dataAreaIdInventSumDelta + '\'');
        #
        #    isWHSEnabled = isConfigurationkeyEnabled(configurationKeyNum(WHSAndTMS));
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Req)))
        #    {
        #        changecompany(_dataAreaId)
        #        {
        #            if (!ReqParameters::find().ReqInactive)
        #            {
        #                isInventSumLogTTSEnabled = true;
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #nextAggregationCnt
        #/// <summary>
        #///    Increments the current value to use as aggregation counter for temporary on hand calculations.
        #/// </summary>
        #/// <returns>
        #///    The next value to use.
        #/// </returns>
        #public Counter nextAggregationCnt()
        #{
        #    aggregationCnt++;
        #    return aggregationCnt;
        #}
      ENDSOURCE
      SOURCE #nextSequenceCount
        #/// <summary>
        #///    Gets the next value to use as sequence counter
        #/// </summary>
        #/// <param name="_doDecrement">
        #///    true if counter should be decremented first; otherwise, false.
        #/// </param>
        #/// <returns>
        #///    returns the internal counter for log records to secure correct order by when rollback is performed
        #/// </returns>
        #protected Integer nextSequenceCount(boolean _doDecrement = true)
        #{
        #    if (_doDecrement)
        #    {
        #        sequenceCounter--;
        #    }
        #
        #    return sequenceCounter;
        #}
      ENDSOURCE
      SOURCE #parmDoDirectOnhandCheck
        #private boolean parmDoDirectOnhandCheck()
        #{
        #    return doDirectOnhandCheck;
        #}
        #
      ENDSOURCE
      SOURCE #parmDoOnhandCheck
        #protected boolean parmDoOnhandCheck()
        #{
        #    return doSummarizedOnhandCheck || doDirectOnhandCheck || checkOnHandForWHSItems;
        #}
        #
      ENDSOURCE
      SOURCE #parmDoSummarizedOnhandCheck
        #private boolean parmDoSummarizedOnhandCheck()
        #{
        #    return doSummarizedOnhandCheck;
        #}
        #
      ENDSOURCE
      SOURCE #parmSkipInventSumLogTTS
        #public boolean parmSkipInventSumLogTTS(boolean _skipTTSLog = skipTTSLog)
        #{
        #    skipTTSLog = _skipTTSLog;
        #    return skipTTSLog;
        #}
      ENDSOURCE
      SOURCE #reset
        #protected void reset()
        #{
        #    ttsId                   = 0;
        #    activated               = false;
        #    isFinalCommit           = false;
        #    inventSumDeltaDimList   = null;
        #    inventSumLogTTSList     = null;
        #    itemIdSet               = null;
        #    doOnhandCheck           = false;
        #    doSummarizedOnhandCheck = false;
        #    doDirectOnhandCheck     = false;
        #    mustUseOnHandAmounts    = false;
        #    inventSumDeltaCnt       = 0;
        #    skipTTSLog              = false;
        #    aggregationCnt          = 0;
        #    inventSumDeltaCache.clear();
        #    inventReserveDeltaExist = false;
        #    inventSumDeltaAddCountItem = null;
        #    checkOnHandForWHSItems  = false;
        #    initialCreatedDateTime  = utcDateTimeNull();
        #}
      ENDSOURCE
      SOURCE #shouldValidationBeSkipped
        #private boolean shouldValidationBeSkipped(NoYes  _plus)
        #{
        #    return _plus;
        #}
      ENDSOURCE
      SOURCE #sqlSystem
        #protected SqlSystem sqlSystem()
        #{
        #    if (!sqlSystem)
        #    {
        #        sqlSystem = new SqlSystem();
        #    }
        #    return sqlSystem;
        #}
      ENDSOURCE
      SOURCE #sqlUpdateInventSumStr
        #/// <summary>
        #/// The method builds a string with the SQL statement listed under remarks.
        #/// </summary>
        #/// <returns>
        #/// A string with the SQL statement to update InventSum.
        #/// </returns>
        #/// <remarks>
        #/// The SQL statement is dynamically generated and depends on contents of field groups and enabled configuration keys.
        #/// The statement will be similar to this:
        #/// execute sp_executesql N'UPDATE INVENTSUM
        #///     SET INVENTSUM.POSTEDQTY             = INVENTSUM.POSTEDQTY           + INVENTSUMDELTA.SUM_POSTEDQTY,
        #///         INVENTSUM.POSTEDVALUE           = INVENTSUM.POSTEDVALUE         + INVENTSUMDELTA.SUM_POSTEDVALUE,
        #///         INVENTSUM.DEDUCTED              = INVENTSUM.DEDUCTED            + INVENTSUMDELTA.SUM_DEDUCTED,
        #///         INVENTSUM.RECEIVED              = INVENTSUM.RECEIVED            + INVENTSUMDELTA.SUM_RECEIVED,
        #///         INVENTSUM.RESERVORDERED         = INVENTSUM.RESERVORDERED       + INVENTSUMDELTA.SUM_RESERVORDERED,
        #///         INVENTSUM.RESERVPHYSICAL        = INVENTSUM.RESERVPHYSICAL      + INVENTSUMDELTA.SUM_RESERVPHYSICAL,
        #///         INVENTSUM.ONORDER               = INVENTSUM.ONORDER             + INVENTSUMDELTA.SUM_ONORDER,
        #///         INVENTSUM.ORDERED               = INVENTSUM.ORDERED             + INVENTSUMDELTA.SUM_ORDERED,
        #///         INVENTSUM.QUOTATIONISSUE        = INVENTSUM.QUOTATIONISSUE      + INVENTSUMDELTA.SUM_QUOTATIONISSUE,
        #///         INVENTSUM.QUOTATIONRECEIPT      = INVENTSUM.QUOTATIONRECEIPT    + INVENTSUMDELTA.SUM_QUOTATIONRECEIPT,
        #///         INVENTSUM.REGISTERED            = INVENTSUM.REGISTERED          + INVENTSUMDELTA.SUM_REGISTERED,
        #///         INVENTSUM.PICKED                = INVENTSUM.PICKED              + INVENTSUMDELTA.SUM_PICKED,
        #///         INVENTSUM.AVAILORDERED          = INVENTSUM.AVAILORDERED        + INVENTSUMDELTA.SUM_AVAILORDERED,
        #///         INVENTSUM.AVAILPHYSICAL         = INVENTSUM.AVAILPHYSICAL       + INVENTSUMDELTA.SUM_AVAILPHYSICAL,
        #///         INVENTSUM.PHYSICALVALUE         = INVENTSUM.PHYSICALVALUE       + INVENTSUMDELTA.SUM_PHYSICALVALUE,
        #///         INVENTSUM.ARRIVED               = INVENTSUM.ARRIVED             + INVENTSUMDELTA.SUM_ARRIVED,
        #///         INVENTSUM.PHYSICALINVENT        = INVENTSUM.PHYSICALINVENT      + INVENTSUMDELTA.SUM_PHYSICALINVENT,
        #///         INVENTSUM.LASTUPDDATEPHYSICAL   = CASE WHEN INVENTSUM.LASTUPDDATEPHYSICAL > INVENTSUMDELTA.MAX_LASTUPDDATEPHYSICAL
        #///                                                THEN INVENTSUM.LASTUPDDATEPHYSICAL
        #///                                                ELSE INVENTSUMDELTA.MAX_LASTUPDDATEPHYSICAL
        #///                                           END ,
        #///         INVENTSUM.LASTUPDDATEEXPECTED   = CASE WHEN INVENTSUM.LASTUPDDATEEXPECTED > INVENTSUMDELTA.MAX_LASTUPDDATEEXPECTED
        #///                                                THEN INVENTSUM.LASTUPDDATEEXPECTED
        #///                                                ELSE INVENTSUMDELTA.MAX_LASTUPDDATEEXPECTED
        #///                                           END ,
        #///         INVENTSUM.MODIFIEDDATETIME      = dateadd(ms, -datepart(ms,getutcdate()), getutcdate())
        #///         INVENTSUM.CLOSEDQTY = CASE WHEN ((INVENTSUM.POSTEDQTY + INVENTSUMDELTA.SUM_POSTEDQTY) = 0 AND
        #///                                          (INVENTSUM.DEDUCTED + INVENTSUMDELTA.SUM_DEDUCTED) = 0 AND
        #///                                          (INVENTSUM.PICKED + INVENTSUMDELTA.SUM_PICKED) = 0 AND
        #///                                          (INVENTSUM.RECEIVED + INVENTSUMDELTA.SUM_RECEIVED) = 0 AND
        #///                                          (INVENTSUM.REGISTERED + INVENTSUMDELTA.SUM_REGISTERED) = 0 AND
        #///                                          (INVENTSUM.RESERVPHYSICAL + INVENTSUMDELTA.SUM_RESERVPHYSICAL) = 0 AND
        #///                                          (INVENTSUM.RESERVORDERED + INVENTSUMDELTA.SUM_RESERVORDERED) = 0 AND
        #///                                          (INVENTSUM.ONORDER + INVENTSUMDELTA.SUM_ONORDER) = 0 AND
        #///                                          (INVENTSUM.ORDERED + INVENTSUMDELTA.SUM_ORDERED) = 0 AND
        #///                                          (INVENTSUM.ARRIVED + INVENTSUMDELTA.SUM_ARRIVED) = 0 AND
        #///                                          (INVENTSUM.QUOTATIONISSUE + INVENTSUMDELTA.SUM_QUOTATIONISSUE) = 0 AND
        #///                                          (INVENTSUM.QUOTATIONRECEIPT + INVENTSUMDELTA.SUM_QUOTATIONRECEIPT) = 0)
        #///                                    THEN 1
        #///                                    ELSE 0
        #///                                    END,
        #///         INVENTSUM.CLOSED = CASE WHEN ((INVENTSUM.POSTEDQTY + INVENTSUMDELTA.SUM_POSTEDQTY) = 0 AND
        #///                                       (INVENTSUM.DEDUCTED + INVENTSUMDELTA.SUM_DEDUCTED) = 0 AND
        #///                                       (INVENTSUM.PICKED + INVENTSUMDELTA.SUM_PICKED) = 0 AND
        #///                                       (INVENTSUM.RECEIVED + INVENTSUMDELTA.SUM_RECEIVED) = 0 AND
        #///                                       (INVENTSUM.REGISTERED + INVENTSUMDELTA.SUM_REGISTERED) = 0 AND
        #///                                       (INVENTSUM.RESERVPHYSICAL + INVENTSUMDELTA.SUM_RESERVPHYSICAL) = 0 AND
        #///                                       (INVENTSUM.RESERVORDERED + INVENTSUMDELTA.SUM_RESERVORDERED) = 0 AND
        #///                                       (INVENTSUM.ONORDER + INVENTSUMDELTA.SUM_ONORDER) = 0 AND
        #///                                       (INVENTSUM.ORDERED + INVENTSUMDELTA.SUM_ORDERED) = 0 AND
        #///                                       (INVENTSUM.ARRIVED + INVENTSUMDELTA.SUM_ARRIVED) = 0 AND
        #///                                       (INVENTSUM.QUOTATIONISSUE + INVENTSUMDELTA.SUM_QUOTATIONISSUE) = 0 AND
        #///                                       (INVENTSUM.QUOTATIONRECEIPT + INVENTSUMDELTA.SUM_QUOTATIONRECEIPT) = 0 AND
        #///                                       (INVENTSUM.POSTEDVALUE + INVENTSUMDELTA.SUM_POSTEDVALUE) = 0 AND
        #///                                       (INVENTSUM.PHYSICALVALUE + INVENTSUMDELTA.SUM_PHYSICALVALUE) = 0)
        #///                                 THEN 1
        #///                                 ELSE 0 END
        #///     FROM (SELECT SUM(POSTEDQTY) AS SUM_POSTEDQTY,
        #///                  SUM(POSTEDVALUE) AS SUM_POSTEDVALUE,
        #///                  SUM(DEDUCTED) AS SUM_DEDUCTED,
        #///                  SUM(RECEIVED) AS SUM_RECEIVED,
        #///                  SUM(RESERVORDERED) AS SUM_RESERVORDERED,
        #///                  SUM(RESERVPHYSICAL) AS SUM_RESERVPHYSICAL,
        #///                  SUM(ONORDER) AS SUM_ONORDER,
        #///                  SUM(ORDERED) AS SUM_ORDERED,
        #///                  SUM(QUOTATIONISSUE) AS SUM_QUOTATIONISSUE,
        #///                  SUM(QUOTATIONRECEIPT) AS SUM_QUOTATIONRECEIPT,
        #///                  SUM(REGISTERED) AS SUM_REGISTERED,
        #///                  SUM(PICKED) AS SUM_PICKED,
        #///                  SUM(AVAILORDERED) AS SUM_AVAILORDERED,
        #///                  SUM(AVAILPHYSICAL) AS SUM_AVAILPHYSICAL,
        #///                  SUM(PHYSICALVALUE) AS SUM_PHYSICALVALUE,
        #///                  SUM(ARRIVED) AS SUM_ARRIVED,
        #///                  SUM(PHYSICALINVENT) AS SUM_PHYSICALINVENT,
        #///                  MAX(LASTUPDDATEPHYSICAL) AS MAX_LASTUPDDATEPHYSICAL,
        #///                  MAX(LASTUPDDATEEXPECTED) AS MAX_LASTUPDDATEEXPECTED,
        #///                  INVENTSUMDELTA.ITEMID,
        #///                  INVENTSUMDELTA.INVENTDIMID
        #///           FROM INVENTSUMDELTA
        #///           WHERE INVENTSUMDELTA.DATAAREAID   = @p2
        #///             AND INVENTSUMDELTA.PARTITION     = current_partition
        #///             AND INVENTSUMDELTA.TTSID        = @p3
        #///             AND INVENTSUMDELTA.ISAGGREGATED = 0
        #///           GROUP BY INVENTSUMDELTA.ITEMID, INVENTSUMDELTA.INVENTDIMID
        #///          ) AS INVENTSUMDELTA
        #///     WHERE INVENTSUM.DATAAREAID  = @p1
        #///       AND INVENTSUM.PARTITION    = current_partition
        #///       AND INVENTSUM.ITEMID      = INVENTSUMDELTA.ITEMID
        #///       AND INVENTSUM.INVENTDIMID = INVENTSUMDELTA.INVENTDIMID
        #/// ',N'@p1 NVARCHAR(4), @p2 NVARCHAR(4), @p3 BIGINT, @p4 BIGINT',@p1=%1, @p2=%2, @p3='%3', @p4='%4'
        #/// </remarks>
        #protected str sqlUpdateInventSumStr()
        #{
        #    str                 sqls1,sqls2;
        #    str                 pct2;
        #    str                 pct3;
        #    str                 pct5;
        #    str                 pct6;
        #    str                 pct8;
        #    str 5               sumPrefix                    = 'SUM_';
        #    str 5               maxPrefix                    = 'MAX_';
        #    str 256             tmpFieldName;
        #
        #    str                 sqls_base                    = 'UPDATE %1 SET %2 FROM (SELECT %3 FROM %4 WHERE %5 GROUP BY %6) AS %7 WHERE %8';
        #    str 256             inventSumName                = new SysDictTable(tableNum(InventSum)).name(DbBackend::Sql);  // %1
        #    str 256             inventSumDeltaName           = new SysDictTable(tableNum(InventSumDelta)).name(DbBackend::Sql);  // %4 and %7
        #
        #    str 256             tmpFieldNameUpdPhys          = new SysDictField(tableNum(InventSum),fieldNum(InventSum,LastUpdDatePhysical)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameUpdExp           = new SysDictField(tableNum(InventSum),fieldNum(InventSum,LastUpdDateExpected)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameItemId           = new SysDictField(tableNum(InventSum),fieldNum(InventSum,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameInventDimId      = new SysDictField(tableNum(InventSum),fieldNum(InventSum,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #
        #    str 256             tmpFieldNameClosed           = new SysDictField(tableNum(InventSum),fieldNum(InventSum,Closed)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameClosedQty        = new SysDictField(tableNum(InventSum),fieldNum(InventSum,ClosedQty)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #
        #    str 256             tmpFieldNameModifiedDate     = new SysDictField(tableNum(InventSum),fieldNum(InventSum, ModifiedDateTime)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameUpdPhysDelta     = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,LastUpdDatePhysical)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameUpdExpDelta      = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,LastUpdDateExpected)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameItemIdDelta      = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameInventDimIdDelta = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #
        #    DictFieldGroup      fieldGrp                     = new DictFieldGroup(tableNum(InventSum), tableFieldgroupStr(InventSum, DeltaFields));
        #    DictFieldGroup      deltaFieldGrp                = new DictFieldGroup(tableNum(InventSumDelta), tableFieldgroupStr(InventSumDelta, DeltaFields));
        #    DictFieldGroup      fieldGrpQty                  = new DictFieldGroup(tableNum(InventSum), tableFieldgroupStr(InventSum, DeltaFieldsQty));
        #    int                 h;
        #    boolean             isFirstDBField;
        #    str 50              sqlFieldTypeNameDataAreaId;
        #    str 50              sqlFieldTypeNameTTSId;
        #    str 50              sqlFieldTypeNamePartition;
        #
        #    #Define.SQLDataAreaIdType('NVARCHAR')
        #    #Define.SQLTTSIdType('BIGINT')
        #    #Define.SQLPartition('BIGINT')
        #
        #    // %2 Begin
        #    // SET InventSum.PostedQty = InventSum.PostedQty + InventSumDelta.SUM_PostedQty, InventSum.PostedValue = InventSum.PostedValue + InventSumDelta.SUM_PostedValue,.....
        #    for (h = 1; h <= fieldGrp.numberOfFields(); h++)
        #    {
        #        tmpFieldName = new SysDictField(tableNum(InventSum),fieldGrp.field(h)).name(DbBackend::Sql);
        #        if (tmpFieldName) // fields might be disabled by config keys
        #        {
        #            pct2 += pct2 ? ', ' : '';
        #            // Note: field names must be exactly the same on tables InventSum and InventSumDelta
        #            pct2 += inventSumName + '.' + tmpFieldName + ' = ' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName;
        #        }
        #    }
        #
        #    //  InventSum.LastUpdDatePhysical = CASE WHEN InventSum.LastUpdDatePhysical > InventSumDelta.MAX_LastUpdDatePhysical
        #    //                                       THEN InventSum.LastUpdDatePhysical
        #    //                                       ELSE InventSumDelta.MAX_LastUpdDatePhysical
        #    //                                  END,
        #    pct2 += ', ' + inventSumName + '.' + tmpFieldNameUpdPhys + ' = CASE WHEN '  + inventSumName + '.' + tmpFieldNameUpdPhys + ' > ' + inventSumDeltaName + '.' + maxPrefix + tmpFieldNameUpdPhys;
        #    pct2 += ' THEN '  + inventSumName + '.' + tmpFieldNameUpdPhys + ' ELSE ' + inventSumDeltaName + '.' + maxPrefix + tmpFieldNameUpdPhys + ' END ';
        #
        #    //  InventSum.LastUpdDateExpected = CASE WHEN InventSum.LastUpdDateExpected > InventSumDelta.MAX_LastUpdDateExpected
        #    //                                       THEN InventSum.LastUpdDateExpected
        #    //                                       ELSE InventSumDelta.MAX_LastUpdDateExpected
        #    //                                  END,
        #    pct2 += ', ' + inventSumName + '.' + tmpFieldNameUpdExp + ' = CASE WHEN '  + inventSumName + '.' + tmpFieldNameUpdExp + ' > ' + inventSumDeltaName + '.' + maxPrefix + tmpFieldNameUpdExp;
        #    pct2 += ' THEN '  + inventSumName + '.' + tmpFieldNameUpdExp + ' ELSE ' + inventSumDeltaName + '.' + maxPrefix + tmpFieldNameUpdExp + ' END ';
        #    //InventDim fields in InventSum, dtrunin -->
        #    if (DEV_InventSumFields::fieldsEnabled())
        #    {
        #        pct2 += strFmt(', %1.%4 = %2.%3%5 ', inventSumName, inventSumDeltaName, maxPrefix, fieldStr(InventSum, WMSPalletId),      fieldStr(InventSumDelta, WMSPalletId));
        #        pct2 += strFmt(', %1.%4 = %2.%3%5 ', inventSumName, inventSumDeltaName, maxPrefix, fieldStr(InventSum, WMSLocationId),    fieldStr(InventSumDelta, WMSLocationId));
        #        pct2 += strFmt(', %1.%4 = %2.%3%5 ', inventSumName, inventSumDeltaName, maxPrefix, fieldStr(InventSum, InventBatchId),    fieldStr(InventSumDelta, InventBatchId));
        #        pct2 += strFmt(', %1.%4 = %2.%3%5 ', inventSumName, inventSumDeltaName, maxPrefix, fieldStr(InventSum, InventLocationId), fieldStr(InventSumDelta, InventLocationId));
        #        pct2 += strFmt(', %1.%4 = %2.%3%5 ', inventSumName, inventSumDeltaName, maxPrefix, fieldStr(InventSum, InventSiteId),     fieldStr(InventSumDelta, InventSiteId));
        #    }
        #    //InventDim fields in InventSum, dtrunin <--
        #    //  InventSum.ModifiedDateTime = dateadd(ms, -datepart(ms,getutcdate()), getutcdate()),
        #    pct2 += ', '  + inventSumName + '.' + tmpFieldNameModifiedDate + ' = dateadd(ms, -datepart(ms,getutcdate()), getutcdate()) ';
        #
        #    //  InventSum.ClosedQty              = CASE WHEN ((InventSum.PostedQty + InventSumDelta.SUM_PostedQty) = 0 ANd
        #    //                                                (InventSum.Deducted  + InventSumDelta.SUM_Deducted)  = 0 ANd
        #    //                                                (InventSum.Picked    + InventSumDelta.SUM_Picked)    = 0 ANd
        #    //                                                ....
        #    //                                                ....
        #    //                                               )
        #    //                                          THEN 1
        #    //                                          ELSE 0
        #    //                                     END,
        #    isFirstDBField = true;
        #    pct2 += ', ' + inventSumName + '.' + tmpFieldNameClosedQty + ' = CASE WHEN (';
        #    for (h = 1; h <= fieldGrpQty.numberOfFields(); h++)
        #    {
        #        tmpFieldName = new SysDictField(tableNum(InventSum),fieldGrpQty.field(h)).name(DbBackend::Sql);
        #        if (tmpFieldName) // fields might be disabled by config keys
        #        {
        #            pct2 += isFirstDBField ? '' : ' AND ';
        #            isFirstDBField = false;
        #            // Note: field names must be exactly the same on tables InventSum and InventSumDelta
        #            pct2 += '(' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName + ') = 0';
        #        }
        #    }
        #    pct2 += ') THEN 1 ELSE 0 END,';
        #
        #    //  InventSum.Closed                 = CASE WHEN ((InventSum.PostedValue      + InventSumDelta.SUM_PostedValue)    = 0 ANd
        #    //                                                (InventSum.PhysicalValue    + InventSumDelta.SUM_PhysicalValue)  = 0 ANd
        #    //                                                ....
        #    //                                                ....
        #    //                                               )
        #    //                                          THEN 1
        #    //                                          ELSE 0
        #    //                                     ENd
        #    isFirstDBField = true;
        #    pct2 += inventSumName + '.' + tmpFieldNameClosed + ' = CASE WHEN (';
        #    for (h = 1; h <= fieldGrpQty.numberOfFields(); h++)
        #    {
        #        tmpFieldName = new SysDictField(tableNum(InventSum),fieldGrpQty.field(h)).name(DbBackend::Sql);
        #        if (tmpFieldName) // fields might be disabled by config keys
        #        {
        #            pct2 += isFirstDBField ? '' : ' AND ';
        #            isFirstDBField = false;
        #            // Note: field names must be exactly the same on tables InventSum and InventSumDelta
        #            pct2 += '(' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName + ') = 0';
        #        }
        #    }
        #    tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,PostedValue)).name(DbBackend::Sql);
        #    pct2 += ' AND (' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName + ') = 0';
        #    tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,PhysicalValue)).name(DbBackend::Sql);
        #    pct2 += ' AND (' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName + ') = 0';
        #    pct2 += ') THEN 1 ELSE 0 END';
        #    // %2 End
        #
        #    // %3 Begin
        #    // SUM (PostedQty) AS SUM_PostedQty, SUM(PostedValue) AS SUM_PostedValue, .....
        #    for (h=1;h<=deltaFieldGrp.numberOfFields();h++)
        #    {
        #        tmpFieldName = new SysDictField(tableNum(InventSumDelta),deltaFieldGrp.field(h)).name(DbBackend::Sql);
        #        if (tmpFieldName) // fields might be disabled by config keys
        #        {
        #            pct3 += 'SUM(' + tmpFieldName + ') AS ' + sumPrefix + tmpFieldName + ', ';
        #        }
        #    }
        #    // MAX (LastUpdDatePhysical) AS MAX_LastUpdDatePhysical, MAX (LastUpdDateExpected) AS MAX_LastUpdDateExpected
        #    pct3 += 'MAX(' + tmpFieldNameUpdPhysDelta + ') AS ' + maxPrefix + tmpFieldNameUpdPhysDelta + ', ';
        #    pct3 += 'MAX(' + tmpFieldNameUpdExpDelta + ') AS ' + maxPrefix + tmpFieldNameUpdExpDelta + ', ';
        #
        #    //InventDim fields in InventSum, dtrunin -->
        #    if (DEV_InventSumFields::fieldsEnabled())
        #    {
        #        pct3 += strFmt('MAX(%1) AS %2%1, ', fieldStr(InventSumDelta, WMSPalletId), maxPrefix);
        #        pct3 += strFmt('MAX(%1) AS %2%1, ', fieldStr(InventSumDelta, WMSLocationId), maxPrefix);
        #        pct3 += strFmt('MAX(%1) AS %2%1, ', fieldStr(InventSumDelta, InventBatchId), maxPrefix);
        #        pct3 += strFmt('MAX(%1) AS %2%1, ', fieldStr(InventSumDelta, InventLocationId), maxPrefix);
        #        pct3 += strFmt('MAX(%1) AS %2%1, ', fieldStr(InventSumDelta, InventSiteId), maxPrefix);
        #    }
        #    //InventDim fields in InventSum, dtrunin <--
        #
        #    // InventSumDelta.ItemId, InventSumDelta.InventDimId
        #    pct3 += inventSumDeltaName + '.' + tmpFieldNameItemIdDelta + ', ';
        #    pct3 += inventSumDeltaName + '.' + tmpFieldNameInventDimIdDelta;
        #    // %3 End
        #
        #    // %5 Begin
        #    //      InventSumDelta.DataAreaId   = @p2
        #    // AND  InventSumDelta.Partition    = @p4
        #    // AND  InventSumDelta.TTSId        = @p3
        #    // AND  InventSumDelta.IsAggregated = 0
        #    tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,DataAreaId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct5 += inventSumDeltaName + '.' + tmpFieldName + ' = @p2';
        #    pct5 += ' AND ';
        #
        #    tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,Partition)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct5 += inventSumDeltaName + '.' + tmpFieldName + ' = @p4';
        #    pct5 += ' AND ';
        #
        #    tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,ttsId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct5 += inventSumDeltaName + '.' + tmpFieldName + ' = ';
        #    pct5 += '@p3';
        #
        #    pct5 += ' AND ';
        #    tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,IsAggregated)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct5 += inventSumDeltaName + '.' + tmpFieldName + ' = ';
        #    pct5 += '0';
        #    // %5 End
        #
        #    // %6 Begin
        #    // InventSumDelta.ItemId, InventSumDelta.InventDimId
        #    pct6 += inventSumDeltaName + '.' + tmpFieldNameItemIdDelta + ', ';
        #    pct6 += inventSumDeltaName + '.' + tmpFieldNameInventDimIdDelta;
        #    // %6 End
        #
        #    // %8 Begin
        #    //          InventSum.DataAreaId        = @p1
        #    //    AND   InventSum.Partition         = @p4
        #    //    AND   InventSum.ItemId            = InventSumDelta.ItemId
        #    //    AND   InventSum.InventDimId       = InventSumDelta.InventDimId
        #    tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,DataAreaId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct8 += inventSumName + '.' + tmpFieldName + ' = ';
        #    pct8 += '@p1' + ' AND ';
        #
        #    tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,Partition)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct8 += inventSumName + '.' + tmpFieldName + ' = @p4';
        #    pct8 += ' AND ';
        #
        #    tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct8 += inventSumName       + '.' + tmpFieldName      + ' = ';
        #    tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct8 += inventSumDeltaName  + '.' + tmpFieldName + ' AND ';
        #    tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct8 += inventSumName       + '.' + tmpFieldName + ' = ';
        #    tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        #    pct8 += inventSumDeltaName  + '.' + tmpFieldNameInventDimIdDelta;
        #    // %8 End
        #
        #    // find SQL field type names
        #    sqlFieldTypeNameDataAreaId = #SQLDataAreaIdType + '(' + int2str(new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,DataAreaId)).stringLen()) + ')';
        #    sqlFieldTypeNameTTSId = #SQLTTSIdType;
        #    sqlFieldTypeNamePartition = #SQLPartition;
        #
        #    // build final str
        #    sqls1 = strFmt(sqls_base,inventSumName,pct2,pct3,inventSumDeltaName,pct5,pct6,inventSumDeltaName,pct8);
        #    sqls2 = 'execute sp_executesql N' + '\'' + sqls1 + '\',N\'@p1 ' + sqlFieldTypeNameDataAreaId +
        #                                                           ', @p2 ' + sqlFieldTypeNameDataAreaId +
        #                                                           ', @p3 ' + sqlFieldTypeNameTTSId +
        #                                                           ', @p4 ' + sqlFieldTypeNamePartition +
        #                                                           '\',@p1=%1, @p2=%2, @p3=\'%3\', @p4=\'%4\'';
        #
        #    return sqls2;
        #}
      ENDSOURCE
      SOURCE #sqlUpdateStr
        #protected str sqlUpdateStr()
        #{
        #    if (sqlUpdateStr == '')
        #    {
        #        sqlUpdateStr = this.sqlUpdateInventSumStr();
        #    }
        #
        #    return strFmt(sqlUpdateStr,curExtensionSum, curExtensionSumDelta, this.ttsId(), getcurrentpartitionrecid());
        #}
      ENDSOURCE
      SOURCE #ttsId
        #/// <summary>
        #///    Finds the current transaction ID as used by the kernel.
        #/// </summary>
        #/// <returns>
        #///    A transaction ID.
        #/// </returns>
        #public CreatedTransactionId ttsId()
        #{
        #    if (appl.ttsLevel() == 0)
        #    {
        #        return ttsId;
        #    }
        #
        #    if (!ttsId)
        #    {
        #        ttsId = appl.curTransactionId(true);
        #    }
        #
        #    return ttsId;
        #}
      ENDSOURCE
      SOURCE #ttsNotifyAbort
        #/// <summary>
        #///    Resets the internal variables after it is triggered by a <c>ttsAbort</c> event.
        #/// </summary>
        #public void ttsNotifyAbort()
        #{
        #    this.reset();
        #}
      ENDSOURCE
      SOURCE #ttsNotifyPostBegin
        #/// <summary>
        #///    Resets the internal variables after it is triggered by a <c>ttsBegin</c> event.
        #/// </summary>
        #public void ttsNotifyPostBegin()
        #{
        #    this.reset();
        #}
      ENDSOURCE
      SOURCE #ttsNotifyPreCommit
        #/// <summary>
        #///    Triggers during a <c>ttsCommit</c> event before data is committed to the database.
        #/// </summary>
        #/// <exception cref="M:Exception::Error">
        #///    All inner transaction scopes have been passed.
        #/// </exception>
        #/// <exception cref="M:Exception::Error">
        #///    There are not enough items on hand to prevent negative inventory.
        #/// </exception>
        #/// <exception cref="M:Exception::UpdateConflictNotRecovered">
        #///    The system keeps seeing update conflicts.
        #/// </exception>
        #/// <exception cref="M:Exception::UpdateConflict">
        #///    In an inner transaction scope.
        #/// </exception>
        #public void ttsNotifyPreCommit()
        #{
        #    #OCCRetryCount
        #
        #    if (appl.ttsLevel() != 1)
        #    {
        #        throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    if (!activated)
        #    {
        #        return;
        #    }
        #
        #    isFinalCommit = true;
        #
        #    try
        #    {
        #        this.insertInventSumLogTTS();           // log changes for MRp
        #
        #        this.insertInventSum();                 // insert new InventSum records
        #
        #        // Process Insert for reservation records
        #        this.whsInsertInventReserve();
        #
        #        this.lockInventSum();                   // serialize on InventSum for Onhand checks
        #
        #        this.updateInventSum();                 // set based update of inventSum
        #
        #        // Lock and process reservation records
        #        this.whsLockInventReserve();            // serialize on WHSInventReserve for Avail checks
        #
        #        this.whsAdjustDeltasForNegativeWarehouses();
        #
        #        this.whsUpdateInventReserve();          // set based update of WHSInventReserve
        #
        #        if (!this.checkOnhand())                // combined Onhand check for all movements
        #        {
        #            throw error("@SYS18447");
        #        }
        #
        #        this.deleteInventSumDelta();            // bulk delete InventSumDelta records
        #
        #        this.whsDeleteInventReserveDelta();     // bulk delete InventReserveDelta records
        #
        #
        #        this.deleteInventSumDeltaUpd();         // bulk delete InventSumDeltaDim records
        #
        #        this.reset();                           // reset all internal variables
        #
        #        isFinalCommit = false;
        #    }
        #    catch (Exception::Deadlock)
        #    {
        #        retry;
        #    }
        #    catch (Exception::UpdateConflict)
        #    {
        #        if (appl.ttsLevel() == 0)
        #        {
        #            if (xSession::currentRetryCount() >= #RetryNum)
        #            {
        #                throw Exception::UpdateConflictNotRecovered;
        #            }
        #            else
        #            {
        #                retry;
        #            }
        #        }
        #        else
        #        {
        #            throw Exception::UpdateConflict;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateInventSum
        #protected void updateInventSum()
        #{
        #    if (inventSumDeltaCnt == 1)
        #    {
        #        this.updateInventSumSimple();
        #    }
        #    else
        #    {
        #        this.updateInventSumAdvanced();
        #    }
        #}
      ENDSOURCE
      SOURCE #updateInventSumAdvanced
        #protected void updateInventSumAdvanced()
        #{
        #    str                             statement;
        #    SqlStatementExecutePermission   permission;
        #
        #    statement = this.sqlUpdateStr();
        #    permission = new SqlStatementExecutePermission(statement);
        #    permission.assert();
        #
        #    //BP Deviation documented
        #    new Connection().createStatement().executeUpdate(statement);
        #    permission = null;
        #}
      ENDSOURCE
      SOURCE #updateInventSumSimple
        #protected void updateInventSumSimple()
        #{
        #    InventSum inventSum = InventSum::find(inventSumDeltaCache.ItemId,inventSumDeltaCache.InventDimId,true);
        #
        #    if (inventSum.RecId == 0
        #     && !InventTable::exist(inventSumDeltaCache.ItemId))
        #    {
        #        return;     // Item no longer exists (could be deletion of product builder item)
        #    }
        #
        #    inventSum.ItemId        = inventSumDeltaCache.ItemId;
        #    inventSum.InventDimId   = inventSumDeltaCache.InventDimId;
        #    DEV_InventSumFields::updateInventSumFromDelta(inventSum, inventSumDeltaCache);//InventDim fields in InventSum, dtrunin
        #    inventSum.addInventSumDelta(inventSumDeltaCache);
        #    inventSum.write();  // if not exist: 'insert' else 'update'
        #}
      ENDSOURCE
      SOURCE #utcTimeStampForTTS
        #private UTCTimestamp utcTimeStampForTTS()
        #{
        #    if (!initialCreatedDateTime)
        #    {
        #        initialCreatedDateTime = DateTimeUtil::utcNow();
        #    }
        #    return initialCreatedDateTime;
        #}
      ENDSOURCE
      SOURCE #whsAdjustDeltasForNegativeWarehouses
        #private void whsAdjustDeltasForNegativeWarehouses()
        #{
        #    Enumerator onHandTrackersEnumerator = WHSNegativeOnHandTrackerCache::getOnHandTrackersEnumerator();
        #    WHSNegativeOnHandTrackerCacheValue onHandTrackers;
        #    WHSInventReserve inventReserve;
        #    InventQty availPhysicalAdjustment, availOrderedAdjustment;
        #
        #    while (onHandTrackersEnumerator.moveNext())
        #    {
        #        onHandTrackers = onHandTrackersEnumerator.current();
        #
        #        inventReserve = WHSInventReserve::find(onHandTrackers.itemId(), onHandTrackers.inventDimId());
        #
        #        availPhysicalAdjustment = onHandTrackers.availPhysicalTracker().getUpperLevelAdjOnCommitedQtyChange(inventReserve.AvailPhysical);
        #        availOrderedAdjustment = onHandTrackers.availOrderedTracker().getUpperLevelAdjOnCommitedQtyChange(inventReserve.AvailOrdered);
        #
        #        if (availPhysicalAdjustment || availOrderedAdjustment)
        #        {
        #            WHSInventOnHand::insertReserveDeltaNegWarehouseAdjustment(
        #                                onHandTrackers.itemId(),
        #                                onHandTrackers.inventDimId(),
        #                                availPhysicalAdjustment,
        #                                availOrderedAdjustment,
        #                                this.ttsId());
        #        }
        #    }
        #
        #    WHSNegativeOnHandTrackerCache::flush();
        #}
      ENDSOURCE
      SOURCE #whsDeleteInventReserveDelta
        #/// <summary>
        #/// Deletes corresponded records in <c>WHSInventReserveDelta</c> table.
        #/// </summary>
        #protected void whsDeleteInventReserveDelta()
        #{
        #    WHSInventReserveDelta       inventReserveDelta;
        #
        #    if (inventReserveDeltaExist)
        #    {
        #        delete_from inventReserveDelta
        #            where inventReserveDelta.ttsId == this.ttsId();
        #    }
        #}
      ENDSOURCE
      SOURCE #whsInsertInventReserve
        #/// <summary>
        #/// Inserts new records into the <c>WHSInventReserve</c> related to this inventory transaction.
        #/// </summary>
        #protected void whsInsertInventReserve()
        #{
        #    WHSInventReserve            inventReserve;
        #    WHSInventReserve            inventReserveNew;
        #    WHSInventReserveDelta       inventReserveDelta;
        #    RecordInsertList            insertList;
        #
        #    if (inventReserveDeltaExist)
        #    {
        #        while select ItemId, InventDimId, HierarchyLevel, ParentInventDimId from inventReserveDelta
        #            group by ItemId, InventDimId, HierarchyLevel, ParentInventDimId
        #            where inventReserveDelta.ttsId  == this.ttsId()
        #         notexists join inventReserve
        #            where inventReserve.ItemId      == inventReserveDelta.ItemId    &&
        #                  inventReserve.InventDimId == inventReserveDelta.InventDimId
        #        {
        #            if (!inventReserveDelta.ItemId || !inventReserveDelta.InventDimId)
        #            {
        #                throw error(strFmt("@SYS68912", funcName()));
        #            }
        #
        #            if (!insertList)
        #            {
        #                insertList = new RecordInsertList(tableNum(WHSInventReserve), true, true, true);
        #            }
        #
        #            inventReserveNew.ItemId         = inventReserveDelta.ItemId;
        #            inventReserveNew.InventDimId    = inventReserveDelta.InventDimId;
        #            inventReserveNew.HierarchyLevel  = inventReserveDelta.HierarchyLevel;
        #            inventReserveNew.ParentInventDimId = inventReserveDelta.ParentInventDimId;
        #            insertList.add(inventReserveNew);
        #        }
        #
        #        if (insertList)
        #        {
        #            insertList.insertDatabase();
        #            insertList = null;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #whsLockInventReserve
        #/// <summary>
        #/// Applies (pessimistic) DB lock on the records of <c>WHSInventReserve</c> and <c>WHSInventReserveDelta</c> tables
        #/// related to this inventory transaction.
        #/// </summary>
        #protected void whsLockInventReserve()
        #{
        #    WHSInventReserve            inventReserve;
        #    WHSInventReserveDelta       inventReserveDelta;
        #
        #
        #    if (doOnhandCheck && inventReserveDeltaExist)
        #    {
        #        select pessimisticlock ItemId, InventDimId from inventReserve
        #            join ItemId, InventDimId, ttsId from inventReserveDelta
        #                where inventReserveDelta.ItemId         == inventReserve.ItemId         &&
        #                      inventReserveDelta.InventDimId    == inventReserve.InventDimId    &&
        #                      inventReserveDelta.ttsId          == this.ttsId();
        #    }
        #}
      ENDSOURCE
      SOURCE #whsSqlUpdateInventReserveStr
        #/// <summary>
        #/// Returns string with well-formatted T-SQL statement template for update of <c>WHSInventReserve</c> table
        #/// </summary>
        #/// <returns>
        #/// Container with T-SQL statement.
        #/// </returns>
        #protected str whsSqlUpdateInventReserveStr()
        #{
        #    str                 sqls1;
        #    str                 sqls2;
        #    str                 pct2;
        #    str                 pct3;
        #    str                 pct5;
        #    str                 pct6;
        #    str                 pct8;
        #    str 5               sumPrefix                    = 'SUM_';
        #    str 5               maxPrefix                    = 'MAX_';
        #    str 256             tmpFieldName;
        #
        #    str                 sqls_base                   = 'UPDATE %1 SET %2 FROM (SELECT %3 FROM %4 WHERE %5 GROUP BY %6) AS %7 WHERE %8';
        #    str 256             inventReserveName           = new SysDictTable(tableNum(WHSInventReserve)).name(DbBackend::Sql);  // %1
        #    str 256             inventReserveDeltaName      = new SysDictTable(tableNum(WHSInventReserveDelta)).name(DbBackend::Sql);  // %4 and %7
        #
        #    str 256             tmpFieldNameItemIdDelta      = new SysDictField(tableNum(WHSInventReserveDelta),fieldNum(WHSInventReserveDelta,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #    str 256             tmpFieldNameInventDimIdDelta = new SysDictField(tableNum(WHSInventReserveDelta),fieldNum(WHSInventReserveDelta,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        #
        #    DictFieldGroup      fieldGrp                     = new DictFieldGroup(tableNum(WHSInventReserve), tableFieldgroupStr(WHSInventReserve, DeltaFields));
        #    DictFieldGroup      deltaFieldGrp                = new DictFieldGroup(tableNum(WHSInventReserveDelta), tableFieldgroupStr(WHSInventReserveDelta, DeltaFields));
        #
        #    int                 h;
        #    container           tmpFieldNames;
        #    str 50              sqlFieldTypeNameDataAreaId;
        #    str 50              sqlFieldTypeNameTTSId;
        #    str 50              sqlFieldTypeNamePartition;
        #
        #    #Define.SQLDataAreaIdType('NVARCHAR')
        #    #Define.SQLTTSIdType('BIGINT')
        #    #Define.SQLPartition('BIGINT')
        #
        #    // %2 Begin
        #    // SET WHSInventReserve.ReservPhysical = WHSInventReserve.ReservPhysical + WHSInventReserveDelta.SUM_ReservPhysical, WHSInventReserve.ReservOrdered = WHSInventReserve.ReservOrdered + WHSInventReserveDelta.SUM_ReservPhysical.....
        #    for (h = 1; h <= fieldGrp.numberOfFields(); h++)
        #    {
        #        tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldGrp.field(h)).name(DbBackend::Sql);
        #        if (tmpFieldName) // fields might be disabled by config keys
        #        {
        #            pct2 += pct2 ? ', ' : '';
        #            // Note: field names must be exactly the same on tables WHSInventReserve and WHSInventReserveDelta
        #            pct2 += inventReserveName + '.' + tmpFieldName + ' = ' + inventReserveName + '.' + tmpFieldName + ' + ' + inventReserveDeltaName + '.' + sumPrefix + tmpFieldName;
        #            tmpFieldNames += tmpFieldName;
        #        }
        #    }
        #    // %2 End
        #
        #    // %3 Begin
        #    // SUM(ReservePhysical) AS SUM_ReservPhysical, SUM(ReservOrdered) AS SUM_ReservOrdered, .....
        #    for (h = 1; h <= deltaFieldGrp.numberOfFields(); h++)
        #    {
        #        tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), deltaFieldGrp.field(h)).name(DbBackend::Sql);
        #        if (tmpFieldName) // fields might be disabled by config keys
        #        {
        #            pct3 += 'SUM(' + tmpFieldName + ') AS ' + sumPrefix + conPeek(tmpFieldNames, h) + ', ';
        #        }
        #    }
        #
        #    // InventReserveDelta.ItemId, InventReserveDelta.InventDimId
        #    pct3 += inventReserveDeltaName + '.' + tmpFieldNameItemIdDelta + ', ';
        #    pct3 += inventReserveDeltaName + '.' + tmpFieldNameInventDimIdDelta;
        #    // %3 End
        #
        #    // %5 Begin
        #    //          WHSInventReserveDelta.DataAreaId   = @p2
        #    //    AND   WHSInventReserveDelta.Partition    = @p4
        #    //    AND   WHSInventReserveDelta.TTSId        = @p3
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct5 += inventReserveDeltaName + '.' + tmpFieldName + ' = @p2';
        #    pct5 += ' AND ';
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct5 += inventReserveDeltaName + '.' + tmpFieldName + ' = @p4 AND ';
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, ttsId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct5 += inventReserveDeltaName + '.' + tmpFieldName + ' = ';
        #    pct5 += '@p3';
        #    // %5 End
        #
        #    // %6 Begin
        #    // InventReserveDelta.ItemId, InventReserveDelta.InventDimId
        #    pct6 += inventReserveDeltaName + '.' + tmpFieldNameItemIdDelta + ', ';
        #    pct6 += inventReserveDeltaName + '.' + tmpFieldNameInventDimIdDelta;
        #    // %6 End
        #
        #    // %8 Begin
        #    //          WHSInventReserve.DataAreaId        = @p1
        #    //    AND   WHSInventReserve.Partition         = @p4
        #    //    AND   WHSInventReserve.ItemId            = InventReserveDelta.ItemId
        #    //    AND   WHSInventReserve.InventDimId       = InventReserveDelta.InventDimId
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldNum(WHSInventReserve, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct8 += inventReserveName + '.' + tmpFieldName + ' = ';
        #    pct8 += '@p1' + ' AND ';
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldNum(WHSInventReserve, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct8 += inventReserveName + '.' + tmpFieldName + ' = @p4 AND ';
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldNum(WHSInventReserve, ItemId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct8 += inventReserveName       + '.' + tmpFieldName      + ' = ';
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, ItemId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct8 += inventReserveDeltaName  + '.' + tmpFieldName + ' AND ';
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldNum(WHSInventReserve, InventDimId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct8 += inventReserveName       + '.' + tmpFieldName + ' = ';
        #    tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, InventDimId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        #    pct8 += inventReserveDeltaName  + '.' + tmpFieldNameInventDimIdDelta;
        #    // %8 End
        #
        #    // find SQL field type names
        #    sqlFieldTypeNameDataAreaId = #SQLDataAreaIdType + '(' + int2str(new SysDictField(tableNum(WHSInventReserveDelta),fieldNum(WHSInventReserveDelta, DataAreaId)).stringLen()) + ')';
        #    sqlFieldTypeNameTTSId = #SQLTTSIdType;
        #    sqlFieldTypeNamePartition = #SQLPartition;
        #
        #    // build final str
        #    sqls1 = strFmt(sqls_base, inventReserveName, pct2, pct3, inventReserveDeltaName, pct5, pct6, inventReserveDeltaName, pct8);
        #    sqls2 = 'execute sp_executesql N' + '\'' + sqls1 + '\',N\'@p1 ' + sqlFieldTypeNameDataAreaId +
        #                                                           ', @p2 ' + sqlFieldTypeNameDataAreaId +
        #                                                           ', @p3 ' + sqlFieldTypeNameTTSId +
        #                                                           ', @p4 ' + sqlFieldTypeNamePartition +
        #                                                           '\',@p1=%1, @p2=%2, @p3=\'%3\', @p4=\'%4\'';
        #
        #    return sqls2;
        #}
      ENDSOURCE
      SOURCE #whsSqlUpdateReserveStr
        #/// <summary>
        #/// Returns string with well-formatted T-SQL statement for <c>WHSInventReserve</c> table update
        #/// </summary>
        #/// <returns>
        #/// String with T-SQL statement.
        #/// </returns>
        #protected str whsSqlUpdateReserveStr()
        #{
        #    str         updateReserveStr;
        #
        #    if (!sqlUpdateReserveStr)
        #    {
        #        sqlUpdateReserveStr = this.whsSqlUpdateInventReserveStr();
        #    }
        #
        #    updateReserveStr = strFmt(sqlUpdateReserveStr, curExtensionSum, curExtensionSumDelta, int642str(this.ttsId()), getcurrentpartitionrecid());
        #
        #    return updateReserveStr;
        #}
      ENDSOURCE
      SOURCE #whsUpdateInventReserve
        #/// <summary>
        #/// Executes all generated update statements.
        #/// </summary>
        #protected void whsUpdateInventReserve()
        #{
        #    str                             statement;
        #    SqlStatementExecutePermission   permission;
        #
        #    if (inventReserveDeltaExist)
        #    {
        #        statement = this.whsSqlUpdateReserveStr();
        #        permission = new SqlStatementExecutePermission(statement);
        #        permission.assert();
        #
        #        // BP Deviation documented
        #        new Connection().createStatement().executeUpdate(statement);
        #        permission = null;
        #    }
        #}
      ENDSOURCE
      SOURCE #construct
        #public static server InventUpdateOnhand construct(DataAreaId _dataAreaId)
        #{
        #    return new InventUpdateOnhand(_dataAreaId);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: JOB

; Microsoft Dynamics AX Job: TestInventSumPerf unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #TestInventSumPerf
    #static void TestInventSumPerf(Args _args)
    #{
    #    DEV_InventSumFields::testPerf();
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{27878E12-1AF8-415C-A344-5EC40E540E57}
  ENDPROPERTIES
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : DEV_InventSumFieldsSetup unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #DEV_InventSumFieldsSetup
    Type: 1
    PROPERTIES
      Name                #DEV_InventSumFieldsSetup
      Label               #InventSum fields setup
      HelpText            #InventSum fields setup form
      Object              #DEV_InventSumFieldsSetup
      Origin              #{889DB806-85F6-4D40-B1EF-AE80F8DC4BF1}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: PRN

; Microsoft Dynamics AX Project : DEV_InventSumFields1 unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #DEV_InventSumFields1
  SHARED
  PROPERTIES
    Name                #DEV_InventSumFields1
    Origin              #{31155F32-785A-436D-B806-AFC19A00D475}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Data_Dictionary
      PROPERTIES
        Name                #Data_Dictionary
        ProjectGroupType    #DataDictionary
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Views
        PROPERTIES
          Name                #Views
          ProjectGroupType    #Views
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 103132
          NODETYPE 243
          NAME #InventSumDeltaAggrView
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 103131
          NODETYPE 243
          NAME #InventSumDeltaAggrSumView
        ENDNODE
        ENDGROUP
        
      GROUP #Tables
        PROPERTIES
          Name                #Tables
          ProjectGroupType    #Tables
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 2397
          NODETYPE 204
          NAME #InventSumDelta
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 174
          NODETYPE 204
          NAME #InventSum
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Macros
      PROPERTIES
        Name                #Macros
        ProjectGroupType    #Macros
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 4
        UTILOBJECTID 0
        NODETYPE 218
        NAME #InventDimFieldsFilter
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #DEV_InventSumFieldsSetup
      ENDNODE
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033483
        NODETYPE 329
        NAME #DEV_InventSumFields
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 2182
        NODETYPE 329
        NAME #InventUpdateOnhand
      ENDNODE
      ENDGROUP
      
    GROUP #Jobs
      PROPERTIES
        Name                #Jobs
        ProjectGroupType    #Jobs
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #TestInventSumPerf
      ENDNODE
      ENDGROUP
      
    GROUP #Menu_Items
      PROPERTIES
        Name                #Menu_Items
        ProjectGroupType    #MenuItems
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Display
        PROPERTIES
          Name                #Display
          ProjectGroupType    #Display
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 1
          UTILOBJECTID 0
          NODETYPE 296
          NAME #DEV_InventSumFieldsSetup
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Menus
      PROPERTIES
        Name                #Menus
        ProjectGroupType    #Menus
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
