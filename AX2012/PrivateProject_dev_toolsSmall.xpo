Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; Microsoft Dynamics AX Table : xRefReferences unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #xRefReferences
    EnforceFKRelation 0
    PROPERTIES
      Name                #xRefReferences
      Label               #@SYS24666
      TitleField1         #Reference
      TitleField2         #xRefPathRecId
      Systemtable         #Yes
      ConfigurationKey    #SysDevelopmentMorphX
      SecurityKey         #SysDevelopmentTables
      AOSAuthorization    #CreateReadUpdateDelete
      CacheLookup         #Found
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Main
      PrimaryIndex        #Key
      ClusterIndex        #Key
      CreatedDateTime     #Yes
      DEL_createdTime     #Yes
      CreatedBy           #Yes
      DeveloperDocumentation  #@SYS122912
      EntityRelationshipType  #Relationship
      Origin              #{2C0E0204-0000-1000-7E63-7EB429030777}
      LegacyId            #516
    ENDPROPERTIES
    
    FIELDS
      FIELD #accessLevel
        ENUM
        PROPERTIES
          Name                #accessLevel
          Label               #@SYS68159
          HelpText            #@SYS54227
          Table               #xRefReferences
          Origin              #{5A626309-8F11-4CDD-BB69-CFB025C8CFCF}
          ExtendedDataType    #xRefAccessLevelType
          EnumType            #AccessLevel
        ENDPROPERTIES
        
      FIELD #Column
        INT
        PROPERTIES
          Name                #Column
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #xRefReferences
          Origin              #{345C8CFE-4819-47D3-8F52-887CA32FC94C}
          LegacyId            #4
          ExtendedDataType    #SourceColumnNum
        ENDPROPERTIES
        
      FIELD #line
        INT
        PROPERTIES
          Name                #line
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #xRefReferences
          Origin              #{C5B14780-A716-4FBC-9316-9D2DB62ED6D3}
          LegacyId            #5
          ExtendedDataType    #SourceLineNum
        ENDPROPERTIES
        
      FIELD #Reference
        ENUM
        PROPERTIES
          Name                #Reference
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #xRefReferences
          Origin              #{7BA628E7-CD54-4C42-A3FD-C1A0CB3FB5F3}
          LegacyId            #1
          ExtendedDataType    #xRefReferenceType
          EnumType            #XRefReference
        ENDPROPERTIES
        
      FIELD #referencePathRecId
        INT64
        PROPERTIES
          Name                #referencePathRecId
          AllowEditOnCreate   #No
          Table               #xRefReferences
          Origin              #{F47BAF8A-6F67-4696-9EF4-DBF2AE160BBE}
          LegacyId            #6
          ExtendedDataType    #xRefPathRecId
        ENDPROPERTIES
        
      FIELD #xRefNameRecId
        INT64
        PROPERTIES
          Name                #xRefNameRecId
          AllowEditOnCreate   #No
          Table               #xRefReferences
          Origin              #{222CA043-DB2F-40FB-BB4A-F34BABAD1BD5}
          LegacyId            #3
          ExtendedDataType    #xRefNameRecId
        ENDPROPERTIES
        
      FIELD #xRefPathRecId
        INT64
        PROPERTIES
          Name                #xRefPathRecId
          Mandatory           #Yes
          AllowEditOnCreate   #No
          Table               #xRefReferences
          Origin              #{3E2AB244-ED4B-4454-AD2D-EF266C7725C4}
          LegacyId            #2
          ExtendedDataType    #xRefPathRecId
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #Reference
          #line
          #Column
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AllFields
        PROPERTIES
          Name                #AllFields
          Label               #@SYS6047
        ENDPROPERTIES
        
        GROUPFIELDS
          #Reference
          #xRefPathRecId
          #xRefNameRecId
          #Column
          #line
          #referencePathRecId
          #accessLevel
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Overview
        PROPERTIES
          Name                #Overview
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #Reference
          #path
          #line
          #Column
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #PathIdx
      PROPERTIES
        Name                #PathIdx
        Origin              #{2B070001-0204-1000-5061-746849647800}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #xRefPathRecId
        #line
        #Column
      ENDINDEXFIELDS
      
      #NamePathIds
      PROPERTIES
        Name                #NamePathIds
        Origin              #{2B0B0002-0204-1000-0114-E00562617468}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #xRefNameRecId
        #xRefPathRecId
        #line
        #Column
      ENDINDEXFIELDS
      
      #referencePathRecId
      PROPERTIES
        Name                #referencePathRecId
        Origin              #{2B120003-0204-1000-CCF5-3A8E3100AC4E}
        LegacyId            #3
      ENDPROPERTIES
      
      INDEXFIELDS
        #referencePathRecId
        #xRefPathRecId
        #line
        #Column
      ENDINDEXFIELDS
      
      #Key
      PROPERTIES
        Name                #Key
        AllowDuplicates     #No
        Origin              #{2B030004-0204-1000-4B65-790000000000}
        LegacyId            #4
      ENDPROPERTIES
      
      INDEXFIELDS
        #xRefPathRecId
        #xRefNameRecId
        #Reference
        #line
        #Column
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #referencePathRecId
        PROPERTIES
          Name                #referencePathRecId
          Table               #xRefPaths
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Aggregation
          RelatedTableRole    #xRefPaths
          Role                #xRefPaths_xRefReferences
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #referencePathRecId
            RelatedField        #RecId
            SourceEDT           #xRefPathRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #xRefNames
        PROPERTIES
          Name                #xRefNames
          Table               #xRefNames
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Aggregation
          RelatedTableRole    #xRefNames
          Role                #xRefNames_xRefReferences
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #xRefNameRecId
            RelatedField        #RecId
            SourceEDT           #xRefNameRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #xRefPathsRecId
        PROPERTIES
          Name                #xRefPathsRecId
          Table               #xRefPaths
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Aggregation
          RelatedTableRole    #xRefPaths_1
          Role                #xRefPaths_1_xRefReferences
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #xRefPathRecId
            RelatedField        #RecId
            SourceEDT           #xRefPathRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #kind
        #// BP deviation documented
        #display xRefKindType kind()
        #{
        #    return xRefNames::findRecId(this.xRefNameRecId).Kind;
        #}
      ENDSOURCE
      SOURCE #name
        #// BP deviation documented
        #display xRefName name()
        #{
        #    return xRefNames::findRecId(this.xRefNameRecId).Name;
        #}
      ENDSOURCE
      SOURCE #path
        #// BP deviation documented
        #display xRefPath path()
        #{
        #    return xRefPaths::findRecId(this.xRefPathRecId).Path;
        #}
      ENDSOURCE
      SOURCE #referencePath
        #// BP deviation documented
        #display xRefPath referencePath()
        #{
        #    return xRefPaths::findRecId(this.ReferencePathRecId).Path;
        #}
        #
      ENDSOURCE
      SOURCE #SDSgetSourceLine
        #//BP Deviation documented
        #[SysClientCacheDataMethodAttribute]
        #display SourceLine SDSgetSourceLine()
        #{
        #    SourceLine  res;
        #
        #    TreeNode    node;
        #
        #    ;
        #
        #    if (this.line)
        #    {
        #        node = TreeNode::findNode(this.path());
        #        if (node)
        #        {
        #            res = strLine(node.AOTgetSource(), this.line - 1);
        #            res = strLRTrim(res);
        #        }
        #    }
        #    return res;
        #}
      ENDSOURCE
      SOURCE #SDSinCurrentLayer
        #//BP Deviation documented
        #[SysClientCacheDataMethodAttribute]
        #display NoYesId SDSinCurrentLayer()
        #{
        #    NoYes       ret;
        #
        #    TreeNode    node;
        #
        #    ;
        #
        #    //if (this.line)
        #    //{
        #    node = TreeNode::findNode(this.path());
        #    if (node && node.treeNodeType().isLayerAware())
        #    {
        #        ret = SysTreeNode::isNodeInLayer(node, currentAOLayer());
        #    }
        #    //}
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #typeName
        #// BP deviation documented
        #display xRefName typeName()
        #{
        #    return xRefNames::findRecId(this.xRefNameRecId).TypeName;
        #}
      ENDSOURCE
      SOURCE #find
        #static xRefReferences find(xRefPathRecId    _xRefNameRecId,
        #                           xRefPathRecId    _xRefPathRecId,
        #                           XRefReference    _xRefReference      = XRefReference::Call,
        #                           SourceLineNum    _sourceLineNum      = 0,
        #                           SourceColumnNum  _sourceColumnNum    = 0,
        #                           boolean          _forUpdate          = false)
        #{
        #    xRefReferences xRefReferences;
        #
        #    if (_xRefNameRecId &&
        #        _xRefPathRecId)
        #    {
        #        xRefReferences.selectForUpdate(_forUpdate);
        #
        #        select firstonly xRefReferences
        #            index Key
        #            where xRefReferences.xRefNameRecId == _xRefNameRecId
        #               && xRefReferences.xRefPathRecId == _xRefPathRecId
        #               && xRefReferences.Reference     == _xRefReference
        #               && xRefReferences.Line          == _sourceLineNum
        #               && xRefReferences.Column        == _sourceColumnNum;
        #    }
        #
        #    return xRefReferences;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: CLS

; Microsoft Dynamics AX Class: SysSetupForm unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSetupForm
    PROPERTIES
      Name                #SysSetupForm
      Extends             #Object
      RunOn               #Client
      Origin              #{2D0C19C2-0000-1000-B5DF-784D1D857570}
      LegacyId            #6594
    ENDPROPERTIES
    
    METHODS
      SOURCE #blockPersonalizationReEntry
        #/// <summary>
        #/// Blocks the user from re-entering the personalization form until they close and re-open the form
        #/// that is being personalized.
        #/// </summary>
        #private void blockPersonalizationReEntry()
        #{
        #    Object setupForm;
        #
        #    editFormRun.blockPersonalization(true);
        #
        #    setupForm = sysSetupformRun;
        #    setupForm.showWarningMessage();
        #}
      ENDSOURCE
      SOURCE #canAddToGrid
        #/// <summary>
        #/// Compare two masterObjectSets of formdatasources, if they are the same, return true; Otherwise, false;
        #/// </summary>
        #/// <param name="gridDataSource">
        #/// The data source of a form grid control
        #/// </param>
        #/// <param name="dragDataSource">
        #/// The data source of a bound field
        #/// </param>
        #/// <returns>
        #/// True if the two masterObjectSets of the formdatasources
        #/// </returns>
        #private boolean canAddToGrid(FormDataSource gridDataSource, FormDataSource dragDataSource)
        #{
        #    FormObjectSet gridObjectSet, dragObjectSet;
        #    ;
        #
        #    if(gridDataSource == null || dragDataSource == null)
        #    {
        #        return false;
        #    }
        #
        #    gridObjectSet = gridDataSource.masterObjectSet();
        #    dragObjectSet = dragDataSource.masterObjectSet();
        #    if(gridObjectSet.name() == dragObjectSet.name())
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysSetupForm extends Object
        #{
        #    #ResAppl
        #    #File
        #
        #    FormRun                     editFormRun;
        #    FormRun                     sysSetupFormRun;
        #    FormRun                     fieldFormRun;
        #
        #    FormTreeControl             formControlTree;
        #    FormTreeControl             fieldTree;
        #
        #    TmpSysTableField            tmpSysTableField;
        #
        #    UtilElements                utilElements;
        #
        #    boolean                     lockLayout;
        #
        #    ImageListAppl_Form          imageListAppl_Form;
        #    ImageListAppl_Query         imageListAppl_Query;
        #
        #    Map                         displayMethodsInFormMap;
        #
        #    Map                         tableOccurrenceMap;
        #    Map                         innerJoinedMap;
        #
        #    TreeNodeName                callerName;
        #    TreeNodePath                callerPath;
        #
        #    MenuItemName                menuItemName;
        #    TreeNodePath                menuItemPath;
        #
        #    TreeItemIdx                 dragItemIdx;
        #    TreeItemIdx                 lastParentItemIdx;
        #    TreeItemIdx                 lastItemIdx;
        #
        #    TreeItemIdx                 selectedTreeItemIdx;
        #
        #    #define.methodName('Name')
        #    #define.methodLabel('Label')
        #    #define.methodControlType('Type')
        #    #define.methodHelp('Help')
        #    #define.methodImage('Image')
        #}
        #
      ENDSOURCE
      SOURCE #dataSourceTableOccurrence
        #// AOSRunMode::client
        #private int dataSourceTableOccurrence(DataSourceNumber _dataSourceNumber)
        #{
        #    FormDataSource          formDataSource;
        #    Counter                 dataSourceCount;
        #    Map                     map;
        #    int                     i;
        #    int                     tableOccurrence;
        #
        #    if (!tableOccurrenceMap)
        #    {
        #        tableOccurrenceMap  = new Map(Types::Integer, Types::Integer);
        #        map                 = new Map(Types::Integer, Types::Integer);
        #        dataSourceCount     = editFormRun.dataSourceCount();
        #
        #        for (i = 1; i <= dataSourceCount; i++)
        #        {
        #            formDataSource = editFormRun.dataSource(i);
        #
        #            if (map.exists(formDataSource.table()))
        #            {
        #                tableOccurrence = map.lookup(formDataSource.table());
        #            }
        #            else
        #            {
        #                tableOccurrence = 0;
        #            }
        #            tableOccurrence++;
        #            map.insert(formDataSource.table(), tableOccurrence);
        #
        #            tableOccurrenceMap.insert(i, tableOccurrence);
        #        }
        #    }
        #
        #    if (tableOccurrenceMap.exists(_dataSourceNumber))
        #    {
        #        tableOccurrence = tableOccurrenceMap.lookup(_dataSourceNumber);
        #    }
        #
        #    return tableOccurrence;
        #}
      ENDSOURCE
      SOURCE #design
        #public FormDesign design()
        #{
        #    return editFormRun.design();
        #}
      ENDSOURCE
      SOURCE #designArrange
        #private void designArrange()
        #{
        #    editFormRun.resetSize();
        #    editFormRun.arrange();
        #}
      ENDSOURCE
      SOURCE #designCanAddDataField
        #public boolean designCanAddDataField(DataSourceNumber _dataSourceNumber, fieldId _fieldId)
        #{
        #    return editFormRun.design().canAddDataField(_dataSourceNumber , _fieldId);
        #}
      ENDSOURCE
      SOURCE #designCanContain
        #public boolean designCanContain(FormControl _formControl)
        #{
        #    return editFormRun.design().canContain(_formControl);
        #}
      ENDSOURCE
      SOURCE #designPackUserSetting
        #public container designPackUserSetting()
        #{
        #    return editFormRun.design().packUserSetting();
        #}
      ENDSOURCE
      SOURCE #designUnpackUserSetting
        #public boolean designUnpackUserSetting(container _pack)
        #{
        #    return editFormRun.design().unpackUserSetting(_pack);
        #}
      ENDSOURCE
      SOURCE #determineCallerName
        #public ClassName determineCallerName()
        #{
        #    #aot
        #    Object caller = editFormRun.args().caller();
        #
        #    SrsReportRunController      sdsSrsReportRunController;
        #
        #    if (caller)
        #    {
        #        switch (true)
        #        {
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(SysSetupFormRun)):
        #                callerName   = caller.name();
        #                callerPath   = #formsPath;
        #                break;
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(RunBase)):
        #                callerName   = classId2Name(classidget(caller.runBase()));
        #                callerPath   = #classesPath;
        #                break;
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(DialogRunbase)):
        #                switch (true)
        #                {
        #                    case SysDictClass::isEqualOrSuperclass(classidget(caller.runBase()), classnum(RunbaseReportStd)):
        #                        caller       = caller.runBase();
        #                        callerName   = caller.lastValueElementName();
        #                        callerPath   = #reportsPath;
        #                        break;
        #                    default:
        #                        callerName   = classId2Name(classidget(caller.runBase()));
        #                        callerPath   = #classesPath;
        #                        break;
        #                }
        #                break;
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(ReportRun)):
        #                callerName   = caller.name();
        #                callerPath   = #reportsPath;
        #                break;
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(QueryRun)):
        #                callerName   = caller.name();
        #                callerPath   = #queriesPath;
        #                break;
        #            // define caller for SysOperationDialog fix, trud -->
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(SysOperationDialog)):
        #                caller       = caller.controller();
        #                if (SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(SrsReportRunController)))
        #                {
        #                    sdsSrsReportRunController = caller;
        #                    callerName   = sdsSrsReportRunController.parmReportContract().parmRdpName();
        #                }
        #                else
        #                {
        #                    callerName   = classId2Name(classidget(caller));
        #                }
        #                callerPath   = #classesPath;
        #                break;
        #            // fix <--
        #
        #            default:
        #                callerName   = classId2Name(classidget(caller));
        #                callerPath   = #classesPath;
        #                break;
        #        }
        #
        #        if (callerName)
        #        {
        #            callerPath += #FilePathDelimiter + callerName;
        #        }
        #    }
        #
        #    return callerName;
        #}
      ENDSOURCE
      SOURCE #fieldFormRunClose
        #public void fieldFormRunClose()
        #{
        #    if (fieldFormRun)
        #    {
        #        fieldFormRun.closeCancel();
        #    }
        #}
      ENDSOURCE
      SOURCE #fieldFormRunSetFocus
        #public boolean fieldFormRunSetFocus()
        #{
        #    boolean ret;
        #
        #    if (fieldFormRun)
        #    {
        #        ret = true;
        #        fieldFormRun.setActive();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fieldTreeAddDataSource
        #private TreeItemIdx fieldTreeAddDataSource(DataSourceNumber _dataSourceNo, TreeItemIdx _parentItemIdx)
        #{
        #    FormDataSource  formDataSource;
        #    SysDictTable    sysDictTable;
        #    TreeItemIdx     treeItemIdx;
        #    str             tableOccurrenceText;
        #    LabelType       label;
        #
        #    formDataSource      = editFormRun.dataSource(_dataSourceNo);
        #
        #    sysDictTable        = new SysDictTable(formDataSource.table());
        #    tableOccurrenceText = SysQuery::tableOccurrenceText(this.dataSourceTableOccurrence(_dataSourceNo));
        #
        #    if (tableOccurrenceText)
        #    {
        #        label = strfmt('%1 %2', sysDictTable.getLabelOrName(), tableOccurrenceText);
        #    }
        #    else
        #    {
        #        label = sysDictTable.getLabelOrName();
        #    }
        #    treeItemIdx = SysFormTreeControl::addTreeItem(fieldTree, label, _parentItemIdx, _dataSourceNo, imageListAppl_Query.image(#ImageTable), true);
        #
        #    this.fieldTreeAddFields(treeItemIdx, sysDictTable);
        #
        #    return treeItemIdx;
        #}
        #
      ENDSOURCE
      SOURCE #fieldTreeAddFields
        #// AOSRunMode::client
        #private void fieldTreeAddFields(TreeItemIdx _parentItemIdx, SysDictTable _sysDictTable)
        #{
        #    FormDataSource      formDataSource;
        #    FormDataObject      formDataObject;
        #    DataSourceNumber    dataSourceNumber;
        #    SetIterator         setIterator;
        #    Struct              struct;
        #
        #    dataSourceNumber    = fieldTree.getItem(_parentItemIdx).data();
        #    formDataSource      = editFormRun.dataSource(dataSourceNumber);
        #    tmpSysTableField    = TmpSysTableField::findTableFields(tmpSysTableField, _sysDictTable.id(), formDataSource.query());
        #
        #    while select forupdate tmpSysTableField
        #        index LabelIdx
        #        where !tmpSysTableField.DataSourceNumber
        #           && tmpSysTableField.DictTableId == _sysDictTable.id()
        #    {
        #        tmpSysTableField.DataSourceNumber = dataSourceNumber;
        #        formDataObject                    = formDataSource.object(tmpSysTableField.FieldId);
        #
        #        if (formDataObject)
        #        {
        #            switch (formDataObject.allowAdd())
        #            {
        #                case FormAllowAdd::Restricted:
        #                //By default RecId isn't shown unless explicitly set to yes.
        #                if(tmpSysTableField.ExtendedFieldId == fieldId2Ext(fieldNum(Common, RecId), 1))
        #                {
        #                    break;
        #                }
        #                case FormAllowAdd::Yes:
        #                    SysFormTreeControl::addTreeItem(fieldTree, tmpSysTableField.FieldLabel, _parentItemIdx, tmpSysTableField.ExtendedFieldId, imageListAppl_Query.image(tmpSysTableField.ImageRes));
        #                    break;
        #            }
        #        }
        #        tmpSysTableField.update();
        #    }
        #
        #    // It is not possible to add display methods. at run time
        #    if (displayMethodsInFormMap.exists(formDataSource.id()) && false)
        #    {
        #        setIterator = new SetIterator(displayMethodsInFormMap.lookup(formDataSource.id()));
        #        setIterator.begin();
        #        while(setIterator.more())
        #        {
        #            struct = setIterator.value();
        #            SysFormTreeControl::addTreeItem(fieldTree,
        #                                            struct.value(#methodLabel),
        #                                            _parentItemIdx,
        #                                            struct,
        #                                            struct.value(#methodImage),
        #                                            false,
        #                                            0,
        #                                            SysFormTreeControl::findInsertAfterIdx(fieldTree, _parentItemIdx, struct.value(#methodLabel)));
        #            setIterator.next();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #fieldTreeBeginDrag
        #public boolean fieldTreeBeginDrag(int _x, int _y)
        #{
        #    boolean ret;
        #
        #    [dragItemIdx] = fieldTree.hitTest(_x, _y);
        #
        #    if (dragItemIdx &&
        #        fieldTree.getItem(dragItemIdx) &&
        #        !fieldTree.getItem(dragItemIdx).children())
        #    {
        #        ret = true;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fieldTreeBuild
        #public void fieldTreeBuild()
        #{
        #    DataSourceNumber    dataSourceNo;
        #    FormDataSource      formDataSource;
        #    TreeItemIdx         dropItemIdx;
        #    FormGridControl     formGridControl;
        #    Counter             dataSourceCount     = editFormRun.dataSourceCount();
        #
        #    fieldTree.deleteAll();
        #
        #    fieldTree.setImagelist(imageListAppl_Query.imageList());
        #    fieldTree.setStateImagelist(imageListAppl_Query.imageList());
        #
        #    dropItemIdx = formControlTree.getSelection();
        #    formGridControl = this.getNearestFormGridControl(dropItemIdx);
        #
        #    for (dataSourceNo = 1; dataSourceNo <= dataSourceCount; dataSourceNo++)
        #    {
        #        formDataSource = editFormRun.dataSource(dataSourceNo);
        #
        #        /* If the dropItem is a FormGridControl or it has FormGridControl ancestor,
        #           tables with LinkType of Delayed/Active/Passive should be restricted.
        #        */
        #        if(formGridControl != null && !this.canAddToGrid(formGridControl.dataSourceObject(), formDataSource))
        #        {
        #            continue;
        #        }
        #
        #        if (formDataSource.linkType() != FormLinkType::Passive)
        #        {
        #            this.fieldTreeAddDataSource(dataSourceNo, FormTreeAdd::Root);
        #        }
        #    }
        #
        #    if (dataSourceCount == 1)
        #    {
        #        SysFormTreeControl::expandTree(fieldTree, fieldTree.getRoot());
        #    }
        #}
      ENDSOURCE
      SOURCE #formContolCanContain
        #private boolean formContolCanContain(Object _dropControl, Object _dragControl)
        #{
        #    Object  childControl;
        #    boolean ret;
        #    Set     set;
        #    Counter controlCount;
        #    int     i;
        #
        #    if (!_dropControl)
        #    {
        #        _dropControl = editFormRun.design();
        #    }
        #
        #    if ((classidget(_dropControl) == classnum(FormDesign) || _dropControl.isContainer()) &&
        #        (classidget(_dropControl) != classnum(FormTabControl) ||
        #         classidget(_dragControl) == classnum(FormTabPageControl)))
        #    {
        #        // Grid accept groups, but only in one level (not a group in a group ...)
        #        ret          = true;
        #
        #        if (classidget(_dropControl) == classnum(FormGridControl))
        #        {
        #            if (innerJoinedMap.exists(_dropControl.dataSource()))
        #            {
        #                set = innerJoinedMap.lookup(_dropControl.dataSource());
        #            }
        #            else
        #            {
        #                set = new Set(Types::Integer);
        #            }
        #
        #            if (this.formControlIsDataBound(_dragControl) ||
        #                (classidget(_dragControl) == classnum(FormGroupControl) &&
        #                 _dragControl.dataSource() &&
        #                 _dragControl.dataGroup()))
        #            {
        #                ret = set.in(_dragControl.dataSource());
        #            }
        #            else
        #            {
        #                if (classidget(_dragControl) == classnum(FormGroupControl))
        #                {
        #                    controlCount = _dragControl.controlCount();
        #                    for (i=1; i < controlCount; i++)
        #                    {
        #                        childControl = _dragControl.controlNum(i);
        #
        #                        if (childControl.isContainer()  ||
        #                            !_dropControl.canContain(childControl))
        #                        {
        #                            ret = false;
        #                            break;
        #                        }
        #                        else
        #                        {
        #                            if (this.formControlIsDataBound(childControl))
        #                            {
        #                                if (!set.in(childControl.dataSource()))
        #                                {
        #                                    ret = false;
        #                                    break;
        #                                }
        #                            }
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #
        #        if (ret)
        #        {
        #            ret = _dropControl.canContain(_dragControl);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControl
        #public FormControl formControl(int _formControlId = 0)
        #{
        #    FormControl formControl;
        #
        #    if (_formControlId)
        #    {
        #        formControl = editFormRun.design().control(_formControlId);
        #    }
        #    else
        #    {
        #        formControl = editFormRun.selectedControl();
        #    }
        #    return formControl;
        #}
      ENDSOURCE
      SOURCE #formControlConfigurationKeys
        #public str formControlConfigurationKeys(FormControl _formControl)
        #{
        #    str                     ret;
        #    ListIterator            listIterator;
        #    DictConfigurationKey    dictConfigurationKey;
        #
        #    if (_formControl)
        #    {
        #        listIterator = new ListIterator(_formControl.configurationKeyEx());
        #        listIterator.begin();
        #        while (listIterator.more())
        #        {
        #            dictConfigurationKey = new DictConfigurationKey(listIterator.value());
        #            if (dictConfigurationKey)
        #            {
        #                if (ret)
        #                {
        #                    ret += ', ';
        #                }
        #                ret += dictConfigurationKey.label();
        #            }
        #            listIterator.next();
        #        }
        #    }
        #
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlHasUserAdjustment
        #private boolean formControlHasUserAdjustment(Object _formControl ,boolean _lookDeep = true)
        #{
        #    Object          childFormControl;
        #    Counter         controlCount;
        #    boolean         ret;
        #    int             i;
        #
        #    if (!classidget(_formControl) == classnum(FormDesign) &&
        #        _formControl.userOrgContainer())
        #    {
        #        ret = true;
        #    }
        #
        #    if (!ret)
        #    {
        #        if (_formControl.hasUserSetting())
        #        {
        #            ret = true;
        #        }
        #        else
        #        {
        #            if (_formControl.isContainer() &&
        #                _lookDeep)
        #            {
        #                controlCount = _formControl.controlCount();
        #                for (i=1; i <= controlCount; i++)
        #                {
        #                    childFormControl = _formControl.controlNum(i);
        #
        #                    if (this.formControlHasUserAdjustment(childFormControl, _lookDeep))
        #                    {
        #                        ret = true;
        #                        break;
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlIsDataBound
        #private boolean formControlIsDataBound(Object _formControl)
        #{
        #    FormControlType formControlType = SysFormRun::controlType(classidget(_formControl));
        #    boolean         ret;
        #
        #    if (formControlType == FormControlType::CheckBox ||
        #        formControlType == FormControlType::ComboBox ||
        #        formControlType == FormControlType::ListBox ||
        #        formControlType == FormControlType::RadioButton ||
        #        formControlType == FormControlType::String ||
        #        formControlType == FormControlType::StaticText ||
        #        formControlType == FormControlType::Date ||
        #        formControlType == FormControlType::Integer ||
        #        formControlType == FormControlType::Real ||
        #        formControlType == FormControlType::Time ||
        #        formControlType == FormControlType::Image ||
        #        formControlType == FormControlType::ReferenceGroup ||
        #        formControlType == FormControlType::SegmentedEntry)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlIsNameUsed
        #private boolean formControlIsNameUsed(TreeNodeName _treeNodeName, TreeItemIdx _treeItemIdx = formControlTree.getRoot())
        #{
        #    TreeItemIdx treeItemIdx = _treeItemIdx;
        #    FormControl formControl;
        #    boolean     ret;
        #
        #    while (treeItemIdx && !ret)
        #    {
        #        formControl = this.formControlTreeIdx2Control(treeItemIdx);
        #
        #        if (formControl &&
        #            formControl.name() == _treeNodeName)
        #        {
        #            ret = true;
        #            break;
        #        }
        #        else
        #        {
        #            if (formControlTree.getChild(treeItemIdx))
        #            {
        #                ret = this.formControlIsNameUsed(_treeNodeName, formControlTree.getChild(treeItemIdx));
        #            }
        #        }
        #        treeItemIdx = formControlTree.getNextSibling(treeItemIdx);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlLabel
        #public LabelType formControlLabel(FormControl _formControl, boolean _onlyLabel = false)
        #{
        #    LabelType labelText;
        #
        #    if (_formControl.labelText())
        #    {
        #        labelText = _formControl.labelText();
        #    }
        #    else
        #    {
        #        labelText = _formControl.name();
        #    }
        #
        #    if (!_onlyLabel &&
        #         _formControl.userPromptText())
        #    {
        #        labelText = strfmt('%1 (%2)', _formControl.userPromptText(), labelText);
        #    }
        #
        #    return labelText;
        #}
      ENDSOURCE
      SOURCE #formControlMove
        #private void formControlMove(TreeItemIdx _newItemIdx)
        #{
        #    FormControl     formControl;
        #    Object          parentControl;
        #    Object          inserAfterContol;
        #    Object          oldParentControl;
        #    int             formControlUserOrgContainer;
        #
        #    formControl  = this.formControlTreeIdx2Control(_newItemIdx);
        #
        #    if(!formControl)
        #        return;
        #
        #    // If control was already moved userOrgContainer is different from 0
        #    formControlUserOrgContainer = formControl.userOrgContainer();
        #
        #    if (formControl.containerId())
        #    {
        #        oldParentControl = editFormRun.design().control( formControl.containerId() );
        #        // Do not override a previous original container
        #        if (!formControlUserOrgContainer)
        #            formControlUserOrgContainer = formControl.containerId();
        #    }
        #    else
        #    {
        #        oldParentControl = editFormRun.design();
        #        // Do not override a previous original container
        #        if (!formControlUserOrgContainer)
        #            formControlUserOrgContainer = -1;
        #    }
        #
        #    if (formControlTree.getParent(_newItemIdx))
        #    {
        #        parentControl = this.formControlTreeIdx2Control(formControlTree.getParent(_newItemIdx));
        #    }
        #    else
        #    {
        #        parentControl = editFormRun.design();
        #    }
        #
        #
        #    if (formControlTree.getPrevSibling(_newItemIdx))
        #    {
        #        inserAfterContol = this.formControlTreeIdx2Control(formControlTree.getPrevSibling(_newItemIdx));
        #    }
        #
        #    parentControl.useUserLayout(true);  // useUserLayot should be called before moving controls around
        #    oldParentControl.useUserLayout(true);
        #
        #    if (inserAfterContol)
        #    {
        #         parentControl.moveControl(formControl.id(), inserAfterContol.id());
        #    }
        #    else
        #    {
        #         parentControl.moveControl(formControl.id());
        #    }
        #
        #    // now we need to set the orgContainer
        #    formControl.userOrgContainer(formControlUserOrgContainer);
        #    this.designArrange();
        #
        #    this.blockPersonalizationReEntry();
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeAddControl
        #private TreeItemIdx formControlTreeAddControl(Object _formControl, TreeItemIdx _parentIdx, int _siblingIdx = 0, boolean _userAdd = false)
        #{
        #    ImageRes        imageRes;
        #    TreeItemIdx     treeItemIdx;
        #    TreeItemIdx     insertAfterItemIdx  = _siblingIdx;
        #    ImageRes        stateImage;
        #    LabelType       labelText;
        #    FormTreeItem    formTreeItem;
        #
        #    if (!insertAfterItemIdx)
        #    {
        #        if (_parentIdx && _userAdd)
        #        {
        #            insertAfterItemIdx = FormTreeAdd::First;
        #        }
        #        else
        #        {
        #            insertAfterItemIdx = FormTreeAdd::Last;
        #        }
        #    }
        #
        #    if (_userAdd ||
        #        _formControl.markAsUserAdd())
        #    {
        #        imageRes    = imageListAppl_Form.image(#ImageExpandAll);
        #    }
        #    else
        #    {
        #        imageRes    = imageListAppl_Form.formControlType2Image(SysFormRun::controlType(classidget(_formControl)));
        #    }
        #
        #    // 'labelText' is retrieved from AOT metadata
        #    labelText   = this.formControlLabel(_formControl);
        #
        #    //BP deviation documented
        #    formTreeItem = new FormTreeItem(labelText, imageRes, _formControl.isContainer(), _formControl.id());
        #
        #    if (this.formControlHasUserAdjustment(_formControl, false ))
        #    {
        #        formTreeItem.stateBold(true);
        #    }
        #
        #    treeItemIdx = formControlTree.addItem(_parentIdx, insertAfterItemIdx, formTreeItem);
        #    stateImage  = this.formControlTreeStateImage(_formControl);
        #
        #    this.formControlTreeSetStateImage(treeItemIdx, stateImage);
        #
        #    if (_userAdd &&
        #        _parentIdx)
        #    {
        #        this.formControlTreeSetStateImage(_parentIdx, stateImage);
        #    }
        #
        #
        #    return treeItemIdx;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowDrop
        #public boolean formControlTreeAllowDrop(TreeItemIdx _dragItemIdx, TreeItemIdx _dropItemIdx, boolean _doNotCheckParent = false)
        #{
        #    FormTreeItem    dropItem,
        #                    dragItem;
        #    Object          dropControl,
        #                    dragControl;
        #    boolean         ret;
        #    FormGridControl formGridControl;
        #
        #    dropItem = formControlTree.getItem(_dropItemIdx);
        #    dragItem = formControlTree.getItem(_dragItemIdx);
        #
        #    if (dropItem)
        #    {
        #        dropControl = this.formControlTreeIdx2Control(dropItem.idx());
        #    }
        #
        #    if (dragItem)
        #    {
        #        dragControl = this.formControlTreeIdx2Control(dragItem.idx());
        #    }
        #
        #    //Check if dropControl is a container type such as FormGroupControl in a FormGridControl.
        #    //If it is, check if the dragControl can add into the FormGridControl.
        #    if(dropControl && dragControl)
        #    {
        #        formGridControl = this.getNearestFormGridControl(_dropItemIdx);
        #        if(formGridControl != null)
        #        {
        #            if(!this.canAddToGrid(formGridControl.dataSourceObject(), dragControl.dataSourceObject()))
        #            {
        #                return false;
        #            }
        #        }
        #    }
        #
        #    if (this.formControlTreeAllowUserSetup(_dropItemIdx) == FormAllowUserSetup::Yes)
        #    {
        #        if (dropControl)
        #        {
        #            if (dropControl.isContainer())
        #            {
        #                if (classidget(dropControl) != classnum(FormReferenceGroupControl))
        #                {
        #                    ret = this.formContolCanContain(dropControl, dragControl);
        #                }
        #            }
        #            else
        #            {
        #                if (formControlTree.getParent(_dropItemIdx) &&
        #                    !_doNotCheckParent)
        #                {
        #                    ret = this.formControlTreeAllowDrop(_dragItemIdx, formControlTree.getParent(_dropItemIdx));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            ret = this.designCanContain(dragControl);
        #        }
        #    }
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeAllowLeft
        #public boolean formControlTreeAllowLeft(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         prevItemIdx;
        #    TreeItemIdx         parentItemIdx;
        #    boolean             ret;
        #
        #    if (!lockLayout &&
        #        this.formControlTreeAllowMove(_treeItemIdx))
        #    {
        #        parentItemIdx   = formControlTree.getParent(_treeItemIdx);
        #        if (parentItemIdx)
        #        {
        #            prevItemIdx     = parentItemIdx;
        #            parentItemIdx   = formControlTree.getParent(parentItemIdx);
        #
        #            if (this.formControlTreeAllowDrop(_treeItemIdx, parentItemIdx, true))
        #            {
        #                ret = true;
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowMove
        #public boolean formControlTreeAllowMove(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         parentItemIdx;
        #    boolean             ret;
        #
        #    if (!lockLayout)
        #    {
        #        parentItemIdx = formControlTree.getParent(_treeItemIdx);
        #
        #        if (this.formControlTreeAllowUserMove(parentItemIdx) == FormAllowUserSetup::Yes && !this.formControlTreeNeverAllowUserMove(_treeItemIdx))
        #        {
        #            ret = true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowRemove
        #public boolean formControlTreeAllowRemove(TreeItemIdx _treeItemIdx = 0)
        #{
        #    FormControl     formControl = this.formControlTreeIdx2Control(_treeItemIdx);
        #    boolean         ret;
        #
        #    if (formControl)
        #    {
        #        ret =  formControl.markAsUserAdd();
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowRight
        #public boolean formControlTreeAllowRight(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         parentItemIdx;
        #    boolean             ret;
        #
        #    if (!lockLayout &&
        #        this.formControlTreeAllowMove(_treeItemIdx))
        #    {
        #        parentItemIdx   = formControlTree.getPrevSibling(_treeItemIdx);
        #        if (parentItemIdx &&
        #            this.formControlTreeAllowDrop(_treeItemIdx, parentItemIdx, true))
        #        {
        #            ret = true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowUserMove
        #public FormAllowUserSetup formControlTreeAllowUserMove(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         treeItemIdx = _treeItemIdx;
        #    Object              formControl;
        #    FormAllowUserSetup  formAllowUserSetup = FormAllowUserSetup::Yes;
        #
        #    if (treeItemIdx)
        #    {
        #        formControl = this.formControlTreeIdx2Control(treeItemIdx);
        #    }
        #    else
        #    {
        #        formControl = editFormRun.design();
        #    }
        #
        #    if (formControl)
        #    {
        #        switch (true)
        #        {
        #            case formControl.isUserSetupEnabled(FormAllowUserSetup::Yes):
        #                formAllowUserSetup = FormAllowUserSetup::Yes;
        #                break;
        #            case formControl.isUserSetupEnabled(FormAllowUserSetup::Restricted):
        #                formAllowUserSetup = FormAllowUserSetup::Restricted;
        #                break;
        #            default:
        #                formAllowUserSetup = FormAllowUserSetup::No;
        #                break;
        #        }
        #    }
        #    return formAllowUserSetup;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowUserSetup
        #public FormAllowUserSetup formControlTreeAllowUserSetup(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         treeItemIdx = _treeItemIdx;
        #    Object              formControl;
        #    FormAllowUserSetup  formAllowUserSetup = FormAllowUserSetup::Yes;
        #
        #    if (treeItemIdx)
        #    {
        #        formControl = this.formControlTreeIdx2Control(treeItemIdx);
        #    }
        #    else
        #    {
        #        formControl = editFormRun.design();
        #    }
        #
        #    if (formControl)
        #    {
        #        if (!this.formControlTreeTabWithChangeOverRides(formControl))
        #        {
        #            switch (true)
        #            {
        #                case formControl.isUserSetupEnabled(FormAllowUserSetup::Yes):
        #                    formAllowUserSetup = FormAllowUserSetup::Yes;
        #                    break;
        #                case formControl.isUserSetupEnabled(FormAllowUserSetup::Restricted):
        #                    formAllowUserSetup = FormAllowUserSetup::Restricted;
        #                    break;
        #                default:
        #                    formAllowUserSetup = FormAllowUserSetup::No;
        #                    break;
        #            }
        #        }
        #        else
        #        {
        #            return FormAllowUserSetup::No;
        #        }
        #    }
        #    return formAllowUserSetup;
        #}
      ENDSOURCE
      SOURCE #formControlTreeBeginDrag
        #public boolean formControlTreeBeginDrag()
        #{
        #    boolean ret;
        #
        #    if (this.formControlTreeAllowMove(dragItemIdx))
        #    {
        #        ret = true;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeBuild
        #private void formControlTreeBuild(int _formControlId = 0,TreeItemIdx _parentIdx = 0)
        #{
        #    Counter         controlCount;
        #    int             i;
        #    TreeItemIdx     treeItemIdx;
        #    boolean         hasChildrenUserAdjust;
        #    Object          formControl;
        #    Object          formGroupControl;
        #    Set             set;
        #    Struct          struct;
        #
        #    if (_formControlId)
        #    {
        #        formGroupControl = editFormRun.design().control(_formControlId);
        #    }
        #    else
        #    {
        #        formGroupControl = editFormRun.design();
        #    }
        #
        #    controlCount            = formGroupControl.controlCount();
        #    hasChildrenUserAdjust   = false;
        #
        #    for (i = 1; i <= controlCount; i++)
        #    {
        #        formControl = formGroupControl.controlNum(i);
        #
        #        if (formControl.allowSysSetup())
        #        {
        #            if (this.formControlIsDataBound(formControl))
        #            {
        #                if (formControl.dataSource())
        #                {
        #                    if (!formControl.dataField() && formControl.dataMethod())
        #                    {
        #                        if (!displayMethodsInFormMap.exists(formControl.dataSource()))
        #                        {
        #                            displayMethodsInFormMap.insert(formControl.dataSource(), new Set(Types::Class));
        #                        }
        #
        #                        set = displayMethodsInFormMap.lookup(formControl.dataSource());
        #
        #                        struct = new Struct(Types::String,  #methodName,
        #                                            Types::Enum,    #methodControlType,
        #                                            Types::String,  #methodLabel,
        #                                            Types::String,  #methodHelp,
        #                                            Types::Integer, #methodImage);
        #
        #                        struct.value(#methodName,        formControl.dataMethod());
        #                        struct.value(#methodControlType, SysFormRun::controlType(classidget(formControl)));
        #                        struct.value(#methodHelp,        formControl.helpText());
        #                        struct.value(#methodImage,       imageListAppl_Query.image(#ImageField));
        #
        #                        if (formControl.handle() != classnum(FormStaticTextControl))
        #                        {
        #                            //struct.value(#methodLabel, formControl.label());
        #                            // Start
        #                            struct.value(#methodLabel, formControl.labeltext());
        #                            // Stop
        #                        }
        #
        #                        set.add(struct);
        #                    }
        #                }
        #            }
        #
        #            treeItemIdx = this.formControlTreeAddControl(formControl, _parentIdx);
        #            if (formControl.isContainer())
        #            {
        #                this.formControlTreeBuild(formControl.id(), treeItemIdx);
        #            }
        #            if (this.formControlHasUserAdjustment(formControl, false ))
        #            {
        #                hasChildrenUserAdjust = true;
        #            }
        #
        #            if (editFormRun && editFormRun.selectedControl() && formControl.id() == editFormRun.selectedControl().id())
        #            {
        #                selectedTreeItemIdx = treeItemIdx;
        #            }
        #        }
        #    }
        #
        #    if (hasChildrenUserAdjust)
        #    {
        #        this.formControlTreeUpdateStatus(_parentIdx, true);
        #    }
        #    formControlTree.select(formControlTree.getRoot());
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeControl2Idx
        #public int formControlTreeControl2Idx(int _formControlId, TreeItemIdx _treeItemIdx = formControlTree.getRoot())
        #{
        #    TreeItemIdx     treeItemIdx = _treeItemIdx;
        #    TreeItemIdx     foundItemIdx;
        #    FormTreeItem    formTreeItem;
        #    FormControl     formControl;
        #
        #    while (treeItemIdx &&
        #           !foundItemIdx)
        #    {
        #        formTreeItem    =  formControlTree.getItem(treeItemIdx);
        #
        #        if (formTreeItem)
        #        {
        #            formControl     =  this.formControlTreeIdx2Control(treeItemIdx);
        #            if (_formControlId == formControl.id())
        #            {
        #                foundItemIdx =  treeItemIdx;
        #            }
        #            else
        #            {
        #                if (formTreeItem.children() &&
        #                    formControlTree.getChild(treeItemIdx))
        #                {
        #                    foundItemIdx = this.formControlTreeControl2Idx(_formControlId ,formControlTree.getChild(treeItemIdx));
        #                }
        #            }
        #        }
        #        treeItemIdx = formControlTree.getNextSibling(treeItemIdx);
        #    }
        #
        #    return foundItemIdx;
        #}
      ENDSOURCE
      SOURCE #formControlTreeDragOver
        #public FormDrag formControlTreeDragOver(FormTreeControl _dragSource, int _x, int _y)
        #{
        #    TreeItemIdx treeItemIdx;
        #    TreeItemIdx parentItemIdx;
        #    FormDrag    formDrag        = FormDrag::None;
        #
        #    [treeItemIdx] = formControlTree.hitTest(_x,_y);
        #
        #    if (treeItemIdx &&
        #        !this.formControlTreeNeverAllowUserMove(dragItemIdx) &&
        #        !this.formControlTreeNeverAllowUserAdd(treeItemIdx))
        #    {
        #        if (_dragSource.equal(formControlTree))
        #        {
        #            if (treeItemIdx == dragItemIdx ||
        #                SysFormTreeControl::isParent(_dragSource, treeItemIdx, dragItemIdx))
        #            {
        #                formDrag = FormDrag::None;
        #            }
        #            else
        #            {
        #                if (this.formControlTreeAllowDrop(dragItemIdx, treeItemIdx))
        #                {
        #                    this.formControlTreeDragOverHilite(treeItemIdx);
        #                    formDrag = FormDrag::Move;
        #                }
        #                else
        #                {
        #                    parentItemIdx = formControlTree.getParent(treeItemIdx);
        #                    if (this.formControlTreeAllowDrop(dragItemIdx, parentItemIdx))
        #                    {
        #                        this.formControlTreeDragOverHilite(parentItemIdx, treeItemIdx);
        #                        formDrag = FormDrag::Move;
        #                    }
        #                }
        #            }
        #        }
        #        else
        #        {
        #            if (_dragSource.equal(fieldTree))
        #            {
        #                if (this.formControlTreeUserAllowAdd(treeItemIdx, dragItemIdx))
        #                {
        #                    this.formControlTreeDragOverHilite(treeItemIdx);
        #                    formDrag = FormDrag::Copy;
        #                }
        #                else
        #                {
        #                    parentItemIdx = formControlTree.getParent(treeItemIdx);
        #                    if (this.formControlTreeUserAllowAdd(parentItemIdx, dragItemIdx))
        #                    {
        #                        this.formControlTreeDragOverHilite(parentItemIdx, treeItemIdx);
        #                        formDrag = FormDrag::Copy;
        #                    }
        #                }
        #            }
        #        }
        #    }
        #
        #    if (formDrag == FormDrag::None)
        #    {
        #        this.formControlTreeDragOverHilite();
        #    }
        #
        #    return formDrag;
        #}
      ENDSOURCE
      SOURCE #formControlTreeDragOverHilite
        #public void formControlTreeDragOverHilite(TreeItemIdx _parentItemIdx = 0, TreeItemIdx _treeItemIdx = 0)
        #{
        #    if (_treeItemIdx)
        #    {
        #        lastItemIdx = _treeItemIdx;
        #    }
        #    else
        #    {
        #        lastItemIdx = _parentItemIdx;
        #    }
        #
        #    if (lastItemIdx)
        #    {
        #        formControlTree.setInsertMark(lastItemIdx, true);
        #    }
        #    else
        #    {
        #        if (lastParentItemIdx)
        #        {
        #            formControlTree.setInsertMark(formControlTree.getChild(lastParentItemIdx), false);
        #        }
        #        else
        #        {
        #            formControlTree.setInsertMark(0, false);
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeDrop
        #public void formControlTreeDrop(FormTreeControl _dragSource, TreeItemIdx _dropItemIdx)
        #{
        #    FormTreeItem    formTreeItem;
        #    TreeItemIdx     parentItemIdx;
        #    TreeItemIdx     inserAfterIdx;
        #    boolean         allowDrop;
        #
        #    if (_dropItemIdx &&
        #        !this.formControlTreeNeverAllowUserMove(dragItemIdx) &&
        #        !this.formControlTreeNeverAllowUserAdd(_dropItemIdx))
        #    {
        #        formTreeItem = formControlTree.getItem(_dropItemIdx);
        #
        #        if (formTreeItem)
        #        {
        #            if (_dragSource.equal(formControlTree))
        #            {
        #                if (this.formContolCanContain(this.formControlTreeIdx2Control(_dropItemIdx),
        #                                              this.formControlTreeIdx2Control(dragItemIdx)) &&
        #                    (formTreeItem.stateExpanded() ||
        #                     !formControlTree.getChild(_dropItemIdx)) ||
        #                     !this.formContolCanContain(this.formControlTreeIdx2Control(formControlTree.getParent(_dropItemIdx)),
        #                                                this.formControlTreeIdx2Control(dragItemIdx)))
        #                {
        #                    parentItemIdx = _dropItemIdx;
        #                    inserAfterIdx = FormTreeAdd::First;
        #                }
        #                else
        #                {
        #                    parentItemIdx = formControlTree.getParent(_dropItemIdx);
        #                    inserAfterIdx = _dropItemIdx;
        #                }
        #
        #                if (parentItemIdx != dragItemIdx &&
        #                    !SysFormTreeControl::isParent(_dragSource, parentItemIdx, dragItemIdx))
        #                {
        #                    allowDrop = this.formControlTreeAllowDrop(dragItemIdx, parentItemIdx);
        #                    if (!allowDrop)
        #                    {
        #                        inserAfterIdx = parentItemIdx;
        #                        parentItemIdx = formControlTree.getParent(parentItemIdx);
        #                        allowDrop     = this.formControlTreeAllowDrop(dragItemIdx, parentItemIdx);
        #                    }
        #
        #                    if (allowDrop)
        #                    {
        #                        this.formControlTreeMove(parentItemIdx, dragItemIdx, inserAfterIdx);
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                if (_dragSource.equal(fieldTree))
        #                {
        #                    if (this.formControlTreeUserAllowAdd(parentItemIdx, dragItemIdx))
        #                    {
        #                        this.formControlTreeUserAdd(dragItemIdx, parentItemIdx, inserAfterIdx);
        #                    }
        #                    else
        #                    {
        #                        inserAfterIdx = parentItemIdx;
        #                        parentItemIdx = formControlTree.getParent(parentItemIdx);
        #                        if (this.formControlTreeUserAllowAdd(parentItemIdx, dragItemIdx))
        #                        {
        #                            this.formControlTreeUserAdd(dragItemIdx, parentItemIdx, inserAfterIdx);
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    this.formControlTreeDragOverHilite();
        #}
      ENDSOURCE
      SOURCE #formControlTreeExpand
        #private void formControlTreeExpand()
        #{
        #    if (!selectedTreeItemIdx)
        #        return;
        #
        #    formControlTree.select(selectedTreeItemIdx);
        #    SysFormTreeControl::expandTree(formControlTree, selectedTreeItemIdx, 1);
        #}
      ENDSOURCE
      SOURCE #formControlTreeIdx2Control
        #public FormControl formControlTreeIdx2Control(TreeItemIdx _treeItemIdx)
        #{
        #    FormControl     formControl;
        #    FormTreeItem    formTreeItem;
        #
        #    formTreeItem = formControlTree.getItem(_treeItemIdx);
        #
        #    if (formTreeItem &&
        #        formTreeItem.data())
        #    {
        #        formControl = editFormRun.design().control(formTreeItem.data());
        #    }
        #
        #    return formControl;
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeMouseDown
        #public void formControlTreeMouseDown(int _x, int _y, int _button)
        #{
        #    if (_button == 1)
        #    {
        #        [dragItemIdx] = formControlTree.hitTest(_x, _y);
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeMove
        #private void formControlTreeMove(TreeItemIdx _parentItemIdx, TreeItemIdx _treeItemIdx, TreeItemIdx _insertAfterItemIdx)
        #{
        #    TreeItemIdx treeItemIdx;
        #    Set         set;
        #    SetIterator setIterator;
        #    int         formControlId;
        #    FormControl fcontrol;
        #    Set         itemIdxSet = new Set(Types::Integer);
        #
        #    formControlId   = this.formControlTreeIdx2Control(_treeItemIdx).id();
        #
        #    itemIdxSet.add(_treeItemIdx);
        #    set             = SysFormTreeControl::moveTreeItem(formControlTree,  itemIdxSet, formControlTree, _parentItemIdx, _insertAfterItemIdx);
        #
        #
        #    setIterator     = new SetIterator(set);
        #
        #    setIterator.begin();
        #    while (setIterator.more())
        #    {
        #        treeItemIdx = setIterator.value();
        #
        #        fcontrol = this.formControlTreeIdx2Control(treeItemIdx);
        #        if (fcontrol && fcontrol.id() == formControlId)
        #        {
        #            break;
        #        }
        #        setIterator.next();
        #    }
        #    formControlTree.select(treeItemIdx);
        #    this.formControlMove(treeItemIdx);
        #}
      ENDSOURCE
      SOURCE #formControlTreeMoveLeft
        #public void formControlTreeMoveLeft()
        #{
        #    TreeItemIdx treeItemIdx     = formControlTree.getSelection();
        #    TreeItemIdx prevItemIdx;
        #    TreeItemIdx parentItemIdx;
        #
        #    if (!lockLayout)
        #    {
        #        parentItemIdx   = formControlTree.getParent(treeItemIdx);
        #        if (parentItemIdx)
        #        {
        #            prevItemIdx     = parentItemIdx;
        #            parentItemIdx   = formControlTree.getParent(parentItemIdx);
        #
        #            if (this.formControlTreeAllowDrop(treeItemIdx, parentItemIdx))
        #            {
        #                this.formControlTreeMove(parentItemIdx, treeItemIdx, prevItemIdx);
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeMoveRight
        #public void formControlTreeMoveRight()
        #{
        #    TreeItemIdx treeItemIdx     = formControlTree.getSelection();
        #    TreeItemIdx parentItemIdx;
        #
        #    if (!lockLayout)
        #    {
        #        parentItemIdx   = formControlTree.getPrevSibling(treeItemIdx);
        #        if (this.formControlTreeAllowDrop(treeItemIdx, parentItemIdx))
        #        {
        #            this.formControlTreeMove(parentItemIdx, treeItemIdx, FormTreeAdd::Last);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeMoveVertical
        #public void formControlTreeMoveVertical(boolean _upDown)
        #{
        #    TreeItemIdx     selectionIdx           = formControlTree.getSelection();
        #
        #    if (selectionIdx)
        #    {
        #        SysFormTreeControl::moveVertical(formControlTree, _upDown);
        #        selectionIdx = formControlTree.getSelection();
        #        this.formControlMove(selectionIdx);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeNeverAllowUserAdd
        #/// <summary>
        #/// Determines whether the user cannot add a control to the control that is represented by the
        #/// specified tree index.
        #/// </summary>
        #/// <param name="_controlIdx">
        #/// The tree index of the control.
        #/// </param>
        #/// <returns>
        #/// true if the user can never add a control to the control; otherwise, false.
        #/// </returns>
        #public boolean formControlTreeNeverAllowUserAdd(TreeItemIdx _controlIdx)
        #{
        #    FormControl     dropControl, dropControlParent;
        #    boolean         neverAllowAdd = false;
        #
        #    dropControl = this.formControlTreeIdx2Control(_controlIdx);
        #
        #    if (dropControl)
        #    {
        #        if ((classidget(dropControl) == classnum(FormReferenceGroupControl)) ||
        #            (classidget(dropControl) == classnum(FormActionPaneControl)))
        #        {
        #            neverAllowAdd = true;
        #        }
        #        else
        #        {
        #            dropControlParent = dropControl.parentControl();
        #            if (dropControlParent &&
        #                    ((classidget(dropControlParent) == classnum(FormReferenceGroupControl)) ||
        #                     (classidget(dropControlParent) == classnum(FormActionPaneControl))))
        #            {
        #                neverAllowAdd = true;
        #            }
        #        }
        #    }
        #
        #    return neverAllowAdd;
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeNeverAllowUserMove
        #/// <summary>
        #/// Determines whether the user cannot move the control that is represented by the specified tree index.
        #/// </summary>
        #/// <param name="_controlIdx">
        #/// The tree index of the control.
        #/// </param>
        #/// <returns>
        #/// true if the user can never move the control; otherwise, false.
        #/// </returns>
        #public boolean formControlTreeNeverAllowUserMove(TreeItemIdx _controlIdx)
        #{
        #    FormControl     dropControl, dropControlParent;
        #    boolean         neverAllowAdd = false;
        #
        #    dropControl = this.formControlTreeIdx2Control(_controlIdx);
        #
        #    if (dropControl)
        #    {
        #        dropControlParent = dropControl.parentControl();
        #        if (dropControlParent && classidget(dropControlParent) == classnum(FormReferenceGroupControl))
        #        {
        #            neverAllowAdd = true;
        #        }
        #    }
        #
        #    return neverAllowAdd;
        #}
      ENDSOURCE
      SOURCE #formControlTreeSetStateImage
        #private boolean formControlTreeSetStateImage(TreeItemIdx _treeItemIdx, ImageRes _stateImage)
        #{
        #    FormTreeItem formTreeItem;
        #    boolean      ret;
        #
        #    if (_stateImage)
        #    {
        #        ret = true;
        #    }
        #    formTreeItem = formControlTree.getItem(_treeItemIdx);
        #    formTreeItem.overlayImage(_stateImage);
        #    formControlTree.setItem(formTreeItem);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeStateImage
        #private ImageRes formControlTreeStateImage(Object _formControl)
        #{
        #    TreeItemIdx treeItemIdx;
        #    ImageRes    imageRes;
        #
        #    treeItemIdx = this.formControlTreeControl2Idx(_formControl.id());
        #
        #    switch (this.formControlTreeAllowUserSetup(treeItemIdx))
        #    {
        #        case FormAllowUserSetup::No:
        #            imageRes = #ImageOverlayRedLock;
        #            break;
        #        case FormAllowUserSetup::Restricted:
        #            imageRes = #ImageOverlayYellowLock;
        #            break;
        #        default:
        #            break;
        #    }
        #
        #    if (imageRes)
        #    {
        #        imageRes = imageListAppl_Form.image(imageRes);
        #    }
        #
        #    return imageRes;
        #}
      ENDSOURCE
      SOURCE #formControlTreeTabWithChangeOverRides
        #public boolean formControlTreeTabWithChangeOverRides(formControl _control)
        #{
        #
        #    if (classidget(_control) == classnum(FormTabControl))
        #    {
        #        return this.formTabControlHasChangeOverrides(_control);
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #formControlTreeUpdateStatus
        #public void formControlTreeUpdateStatus(TreeItemIdx _treeItemIdx = formControlTree.getRoot(), boolean _forceAdjustStatus = false)
        #{
        #    boolean         hasAdjustments;
        #    FormTreeItem    formTreeItem    = formControlTree.getItem(_treeItemIdx);
        #    Object          formControl     = this.formControlTreeIdx2Control(_treeItemIdx);
        #    TreeItemIdx     parentIdx;
        #    LabelType       labelText;
        #
        #    if (formTreeItem &&
        #        formControl)
        #    {
        #        hasAdjustments = (_forceAdjustStatus ||
        #                          this.formControlHasUserAdjustment(formControl));
        #
        #        // 'labelText' is retrieved from AOT metadata
        #        labelText      = this.formControlLabel(formControl);
        #
        #        formTreeItem.stateBold(hasAdjustments);
        #
        #        //BP deviation documented
        #        formTreeItem.text(labelText);
        #
        #        formControlTree.setItem(formTreeItem);
        #    }
        #
        #    parentIdx = formControlTree.getParent(_treeItemIdx);
        #    if (parentIdx)
        #    {
        #        this.formControlTreeUpdateStatus(parentIdx, (_forceAdjustStatus || hasAdjustments));
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeUserAdd
        #public FormControl formControlTreeUserAdd(TreeItemIdx _dragItemIdx, TreeItemIdx _parentItemIdx = formControlTree.getSelection(), TreeItemIdx _insertAfterItemIdx = 0)
        #{
        #    Object          newControl,
        #                    insertAfterControl;
        #    FormTreeItem    dragItem;
        #    FormDataSource  formDataSource;
        #    Object          parentControl;
        #    fieldId         fieldId;
        #    TreeItemIdx     insertAfterItemIdx  = _insertAfterItemIdx;
        #    TreeItemIdx     parentItemIdx       = _parentItemIdx;
        #    TreeNodeName    treeNodeName;
        #    Struct          struct;
        #    int             i;
        #
        #    if (!this.formControlTreeUserAllowAdd(parentItemIdx, _dragItemIdx) &&
        #        parentItemIdx)
        #    {
        #        insertAfterItemIdx  = parentItemIdx;
        #        parentItemIdx       = formControlTree.getParent(insertAfterItemIdx);
        #    }
        #
        #    if (this.formControlTreeUserAllowAdd(parentItemIdx, _dragItemIdx))
        #    {
        #        if (formControlTree.getItem(parentItemIdx))
        #        {
        #            parentControl = this.formControlTreeIdx2Control(parentItemIdx);
        #
        #            if (parentControl &&
        #                !parentControl.isContainer())
        #            {
        #                insertAfterItemIdx  = parentItemIdx;
        #                parentItemIdx       = formControlTree.getParent(insertAfterItemIdx);
        #                parentControl       = this.formControlTreeIdx2Control(parentItemIdx);
        #            }
        #        }
        #
        #        if (!parentControl)
        #        {
        #            parentControl = this.design();
        #        }
        #
        #        if (parentControl)
        #        {
        #            parentControl.useUserLayout(true);
        #
        #            if (insertAfterItemIdx)
        #            {
        #                insertAfterControl = this.formControlTreeIdx2Control(insertAfterItemIdx);
        #            }
        #            dragItem        = fieldTree.getItem(_dragItemIdx);
        #
        #            formDataSource  = editFormRun.dataSource(fieldTree.getItem(fieldTree.getParent(_dragItemIdx)).data());
        #
        #            if (typeof(dragItem.data()) == Types::Integer)
        #            {
        #                fieldId         = dragItem.data();
        #                newControl      = parentControl.addDataField(formDataSource.id(), fieldId, insertAfterControl);
        #            }
        #            else
        #            {
        #                if (typeof(dragItem.data()) == Types::Class)
        #                {
        #                    struct          = dragItem.data();
        #                    i               = 0;
        #                    do
        #                    {
        #                        i++;
        #                        treeNodeName    = strfmt('%1_%2_%3', curuserid(), i, struct.value(#methodName));
        #                    }
        #                    while(this.formControlIsNameUsed(treeNodeName));
        #
        #                    newControl = parentControl.addControl(struct.value(#methodControlType), treeNodeName, insertAfterControl);
        #                    newControl.dataSource(formDataSource.id());
        #                    newControl.dataMethod(struct.value(#methodName));
        #                    newControl.label(struct.value(#methodLabel));
        #                    newControl.helpText(struct.value(#methodHelp));
        #                }
        #            }
        #
        #            if (newControl)
        #            {
        #                newControl.markAsUserAdd(true);
        #                this.formControlTreeAddControl(newControl, parentItemIdx, insertAfterItemIdx, true);
        #                formControlTree.expand(parentItemIdx, FormTreeExpand::Expand);
        #
        #                this.blockPersonalizationReEntry();
        #            }
        #        }
        #    }
        #
        #    this.formControlTreeDragOverHilite();
        #
        #    return newControl;
        #}
      ENDSOURCE
      SOURCE #formControlTreeUserAllowAdd
        #private boolean formControlTreeUserAllowAdd(TreeItemIdx _dropItemIdx, TreeItemIdx _dragItemIdx)
        #{
        #    FormTreeItem    dropItem,dragItem;
        #    Object          dropControl;
        #    fieldId         fieldId;
        #    FormDataSource  formDataSource;
        #    FormGridControl formGridControl;
        #    boolean         ret;
        #
        #    dropItem = formControlTree.getItem(_dropItemIdx);
        #    dragItem = fieldTree.getItem(_dragItemIdx);
        #
        #    if (dragItem &&
        #        !dragItem.children() &&
        #        !this.formControlTreeNeverAllowUserAdd(_dropItemIdx) &&
        #        !this.formControlTreeNeverAllowUserMove(_dragItemIdx) &&
        #        this.formControlTreeAllowUserSetup(_dropItemIdx) == FormAllowUserSetup::Yes)
        #    {
        #        switch (typeof(dragItem.data()))
        #        {
        #            case Types::Integer:
        #                fieldId         = dragItem.data();
        #                formDataSource  = editFormRun.dataSource(fieldTree.getItem(fieldTree.getParent(_dragItemIdx)).data());
        #                if (dropItem)
        #                {
        #                    dropControl = this.formControlTreeIdx2Control(dropItem.idx());
        #                }
        #
        #                if (dropControl)
        #                {
        #                    if (dropControl.isContainer())
        #                    {
        #                        if (dropControl.canAddDataField(formDataSource.id(), fieldId) &&
        #                           classidget(dropControl) != classnum(FormReferenceGroupControl))
        #                        {
        #                            ret = true;
        #                        }
        #                        else
        #                        {
        #                            ret = false;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    if (this.designCanAddDataField(formDataSource.id(), fieldId))
        #                    {
        #                        ret = true;
        #                    }
        #                    else
        #                    {
        #                        ret = false;
        #                    }
        #                }
        #                break;
        #            case Types::Class:
        #                formDataSource  = editFormRun.dataSource(fieldTree.getItem(fieldTree.getParent(_dragItemIdx)).data());
        #                if (dropItem)
        #                {
        #                    dropControl = this.formControlTreeIdx2Control(dropItem.idx());
        #                }
        #
        #                if (dropControl)
        #                {
        #                    if (dropControl.isContainer() &&
        #                        classidget(dropControl) != classnum(FormTabControl) &&
        #                        classidget(dropControl) != classnum(FormReferenceGroupControl))
        #                    {
        #                        ret = true;
        #                    }
        #                }
        #                else
        #                {
        #                    ret = true;
        #                }
        #                break;
        #        }
        #    }
        #
        #    if(ret == true)
        #    {
        #
        #        if(dropControl == null)
        #        {
        #            dropControl = this.formControlTreeIdx2Control(_dropItemIdx);
        #        }
        #        formDataSource = editFormRun.dataSource(fieldTree.getItem(fieldTree.getParent(_dragItemIdx)).data());
        #
        #        // If the drop control is a formgrid, we need check if the drag and drop control have the same data source
        #        formGridControl = dropControl as FormGridControl;
        #        if(formGridControl != null)
        #        {
        #            if(!this.canAddToGrid(formGridControl.dataSourceObject(), formDataSource))
        #            {
        #                ret = false;
        #            }
        #        }
        #
        #        //When add a field to a form, we always need check whether the field is in a group by query
        #        if(!this.isDragFieldInGroupBy(formDataSource, fieldId))
        #        {
        #            ret = false;
        #        }
        #    }
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeUserRemove
        #public void formControlTreeUserRemove(TreeItemIdx _treeItemIdx = 0)
        #{
        #    TreeItemIdx     treeItemIdx     = _treeItemIdx;
        #    TreeItemIdx     parentItemIdx;
        #    FormTreeItem    formTreeItem;
        #    Object          formControl;
        #
        #    if (!treeItemIdx)
        #    {
        #        treeItemIdx = formControlTree.getSelection();
        #    }
        #
        #    if (treeItemIdx)
        #    {
        #        formTreeItem = formControlTree.getItem(treeItemIdx);
        #
        #        if (formTreeItem)
        #        {
        #            formControl = this.formControlTreeIdx2Control(formTreeItem.idx());
        #            if (formControl)
        #            {
        #                editFormRun.design().removeControl(formControl.id());
        #                editFormRun.arrange();
        #
        #                parentItemIdx = formControlTree.getParent(formTreeItem.idx());
        #                formControlTree.delete(formTreeItem.idx());
        #
        #                formControl = this.formControlTreeIdx2Control(parentItemIdx);
        #                this.formControlTreeUpdateStatus(parentItemIdx);
        #
        #                this.blockPersonalizationReEntry();
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeVisible
        #public void formControlTreeVisible(boolean _visible)
        #{
        #    FormControl formControl;
        #    TreeItemIdx treeItemIdx = formControlTree.getSelection();
        #
        #    if (treeItemIdx)
        #    {
        #        formControl = this.formControlTreeIdx2Control(treeItemIdx);
        #
        #        editFormRun.resetSize();
        #        formControl.userHide(_visible);
        #
        #        this.formControlTreeUpdateStatus(treeItemIdx);
        #    }
        #}
      ENDSOURCE
      SOURCE #formTabControlHasChangeOverrides
        #private boolean formTabControlHasChangeOverrides(FormTabControl _control)
        #{
        #    if (classidget(_control) == classnum(FormTabControl))
        #    {
        #
        #        if (_control.hasControlPositionOverride())
        #        {
        #            return true;
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #getCallerName
        #public ClassName getCallerName()
        #{
        #    return callerName;
        #}
      ENDSOURCE
      SOURCE #getCallerPath
        #public TreeNodePath getCallerPath()
        #{
        #    return callerPath;
        #}
      ENDSOURCE
      SOURCE #getElementCreatedBy
        #public userId getElementCreatedBy()
        #{
        #    userId userId;
        #    if (utilElements)
        #    {
        #        userId = utilElements.CreatedBy;
        #    }
        #    return userId;
        #}
      ENDSOURCE
      SOURCE #getElementCreatedDateTime
        #public UTCDateTime getElementCreatedDateTime()
        #{
        #    UTCDateTime createdDateTime;
        #    if (utilElements)
        #    {
        #        createdDateTime = utilElements.CreatedDateTime;
        #    }
        #    return createdDateTime;
        #}
      ENDSOURCE
      SOURCE #getElementModifiedBy
        #public userId getElementModifiedBy()
        #{
        #    userId userId;
        #    if (utilElements)
        #    {
        #        userId = utilElements.ModifiedBy;
        #    }
        #    return userId;
        #}
      ENDSOURCE
      SOURCE #getElementModifiedDateTime
        #public UTCDateTime getElementModifiedDateTime()
        #{
        #    UTCDateTime modifiedDateTime;
        #    if (utilElements)
        #    {
        #        modifiedDateTime = utilElements.ModifiedDateTime;
        #    }
        #    return modifiedDateTime;
        #}
      ENDSOURCE
      SOURCE #getFormName
        #public FormName getFormName()
        #{
        #    return editFormRun.name();
        #}
      ENDSOURCE
      SOURCE #getFormRun
        #public FormRun getFormRun()
        #{
        #    return editFormRun;
        #}
      ENDSOURCE
      SOURCE #getMenuItemName
        #public MenuItemName getMenuItemName()
        #{
        #    return menuItemName;
        #}
      ENDSOURCE
      SOURCE #getMenuItemPath
        #public TreeNodePath getMenuItemPath()
        #{
        #    return menuItemPath;
        #}
      ENDSOURCE
      SOURCE #getNearestFormGridControl
        #/// <summary>
        #/// This function is to get the nearest FormGridControl of a drop item.
        #/// It is used when a item is added or dragged into a FormControl container.
        #/// </summary>
        #/// <param name="_dropItemIdx">
        #/// Index of drop item
        #/// </param>
        #/// <returns>
        #/// If the dropItem is a FormGridControl, return the FormGridControl.
        #/// Or if it has a FormGridControl ancestor, return the FormGridControl ancestor,  otherwise return null.
        #/// </returns>
        #
        #private FormGridControl getNearestFormGridControl(TreeItemIdx _dropItemIdx)
        #{
        #    Object              dropControl         = this.formControlTreeIdx2Control(_dropItemIdx);
        #    FormGridControl     formGridControl     = dropControl as FormGridControl;
        #    TreeItemIdx         itemIdx             = _dropItemIdx;
        #    ;
        #
        #    while(formGridControl == null)
        #    {
        #        itemIdx = formControlTree.getParent(itemIdx);
        #        dropControl = this.formControlTreeIdx2Control(itemIdx);
        #
        #        if(dropControl)
        #        {
        #            formGridControl = dropControl as FormGridControl;
        #        }
        #        else
        #        {
        #            //did not find FormGridControl ancestor
        #            return null;
        #        }
        #    }
        #    return formGridControl;
        #}
      ENDSOURCE
      SOURCE #init
        #public void init()
        #{
        #    #aot
        #
        #    Object          caller          = editFormRun.args().caller();
        #
        #    this.innerJoinedMapBuild();
        #
        #    select utilElements where
        #        utilElements.RecordType == UtilElementType::Form &&
        #        utilElements.Name       == editFormRun.name();
        #
        #    formControlTree.setImagelist(imageListAppl_Form.imageList());
        #
        #    this.DetermineCallerName();
        #
        #    menuItemName    = editFormRun.args().menuItemName();
        #
        #    if (menuItemName)
        #    {
        #        menuItemPath = #MenuItemsPath + #FilePathDelimiter + enum2str(editFormRun.args().menuItemType()) + #AOTDelimiter + menuItemName;
        #    }
        #
        #    formControlTree.deleteAll();
        #    this.formControlTreeBuild();
        #    this.formControlTreeExpand();
        #}
        #
      ENDSOURCE
      SOURCE #innerJoinedMapBuild
        #private void innerJoinedMapBuild()
        #{
        #    FormDataSource      formDataSource;
        #    DataSourceNumber    dataSourceNo;
        #    Counter             dataSourceCount     = editFormRun.dataSourceCount();
        #    Set                 set;
        #
        #    innerJoinedMap = new Map(Types::Integer, Types::Class);
        #
        #    for (dataSourceNo = 1; dataSourceNo <= dataSourceCount; dataSourceNo++)
        #    {
        #        formDataSource = editFormRun.dataSource(dataSourceNo);
        #
        #        if (!innerJoinedMap.exists(formDataSource.id()))
        #        {
        #            set =  new Set(Types::Integer);
        #            set.add(formDataSource.id());
        #
        #            innerJoinedMap.insert(formDataSource.id(), set);
        #        }
        #        set = innerJoinedMap.lookup(formDataSource.id());
        #
        #        if (formDataSource.joinSource() &&
        #            formDataSource.linkType() == FormLinkType::InnerJoin)
        #        {
        #            set.add(formDataSource.joinSource());
        #
        #            if (!innerJoinedMap.exists(formDataSource.joinSource()))
        #            {
        #                set =  new Set(Types::Integer);
        #                set.add(formDataSource.id());
        #
        #                innerJoinedMap.insert(formDataSource.joinSource(), set);
        #            }
        #            set = innerJoinedMap.lookup(formDataSource.joinSource());
        #            set.add(formDataSource.id());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #isDragFieldInGroupBy
        #/// <summary>
        #/// Determine whether the field is in a group by query data source
        #/// </summary>
        #/// <param name="dragDataSource">
        #/// The data source that needs do check
        #/// </param>
        #/// <param name="dragExtendFieldId">
        #/// The extend id of the field that needs do check
        #/// </param>
        #/// <returns>
        #/// True if the query data source doesn't contain group by or the field is in the group by list;
        #/// False if the field is not in the group by list
        #/// </returns>
        #private boolean isDragFieldInGroupBy(FormDataSource dragDataSource, FieldId dragExtendFieldId)
        #{
        #    Query query;
        #    int groupByFieldCount;
        #    int groupByFieldIndex;
        #    QueryGroupByField queryGroupByField;
        #    QueryBuildFieldList qbfl;
        #    int fieldIndex;
        #    SelectionField selectionField;
        #    ;
        #
        #    if(dragDataSource == null)
        #    {
        #        return false;
        #    }
        #
        #    query = dragDataSource.query();
        #    if(query ==null)
        #    {
        #        return false;
        #    }
        #
        #    groupByFieldCount = query.groupByFieldCount();
        #    if(groupByFieldCount == 0)
        #    {
        #        return true;
        #    }
        #
        #    for(groupByFieldIndex = 1; groupByFieldIndex <= groupByFieldCount; groupByFieldIndex++)
        #    {
        #        queryGroupByField = query.groupByField(groupByFieldIndex);
        #        if(queryGroupByField.dataSource().table() == dragDataSource.table())
        #        {
        #            // Check if the field is in group by field list
        #            if(queryGroupByField.fieldID() == fieldExt2Id(dragExtendFieldId))
        #            {
        #                return true;
        #            }
        #
        #            // check if the field is in aggregate field list
        #            qbfl = query.dataSourceTable(dragDataSource.table()).fields();
        #            for(fieldIndex = 1; fieldIndex <= qbfl.fieldCount(); fieldIndex++)
        #            {
        #                selectionField = qbfl.fieldKind(fieldIndex);
        #                if(qbfl.field(fieldIndex) == fieldExt2Id(dragExtendFieldId)
        #                && (selectionField == SelectionField::Avg || selectionField == SelectionField::Max
        #                   || selectionField == SelectionField::Min|| selectionField == SelectionField::Sum || selectionField == SelectionField::Count)
        #                  )
        #                {
        #                    return true;
        #                }
        #            }
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(FormRun _editFormRun, FormRun _sysSetupformRun)
        #{
        #    super();
        #
        #    editFormRun = _editformRun;
        #    sysSetupformRun = _sysSetupformRun;
        #
        #    displayMethodsInFormMap     = new Map(Types::Integer, Types::Class);
        #
        #    imageListAppl_Form          = new ImageListAppl_Form();
        #    imageListAppl_Query         = new ImageListAppl_Query();
        #}
      ENDSOURCE
      SOURCE #parmFieldForm
        #public void parmFieldForm(FormRun _formRun)
        #{
        #    fieldFormRun = _formRun;
        #}
      ENDSOURCE
      SOURCE #parmFieldTree
        #public void parmFieldTree(FormTreeControl _formTreeControl)
        #{
        #    fieldTree = _formTreeControl;
        #}
      ENDSOURCE
      SOURCE #parmFormControlTree
        #public void parmFormControlTree(FormTreeControl _formTreeControl)
        #{
        #    formControlTree = _formTreeControl;
        #}
      ENDSOURCE
      SOURCE #parmLockLayout
        #public void parmLockLayout(boolean _lockLayout)
        #{
        #    lockLayout = _lockLayout;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: EditorScripts unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #EditorScripts
    PROPERTIES
      Name                #EditorScripts
      RunOn               #Client
      Origin              #{2D0D0984-0000-1000-4BE1-54DC59156563}
      LegacyId            #2436
    ENDPROPERTIES
    
    METHODS
      SOURCE #addIns_OpenNewWindow
        #public void addIns_OpenNewWindow(Editor e)
        #{
        #    TreeNode treeNode = TreeNode::findNode(e.path());
        #    ;
        #    treeNode = TreeNode::findNode(xUtilElements::getNodePathRough(xUtilElements::parentElement(xUtilElements::findTreeNode(treeNode))));
        #    if (treeNode)
        #        treeNode.AOTnewWindow();
        #}
      ENDSOURCE
      SOURCE #addIns_OpenNewWindowSelected
        ##TreeNodeSysNodeType
        ##TokenTypes
        ##AOT
        #void addIns_OpenNewWindowSelected(Editor e)
        #{
        #    TreeNode            treeNode;
        #    TreeNode            treeNodeNew;
        #    str                 fieldName;
        #    DictField           df;
        #    xRefTmpReferences   tmpxRefReferences;
        #    int   selStartCol = e.selectionStartCol(), selStartLine = e.selectionStartLine();
        #
        #    ;
        #    fieldName = substr(e.currentLine(), e.selectionStartCol(), e.selectionEndCol() - e.selectionStartCol());
        #
        #    treeNode = TreeNode::findNode(e.path());
        #
        #    treeNode.AOTmakeXref(1);
        #    tmpxRefReferences = xRefCreate::makeTmp(appl.lastxRef());
        #
        #    xppScanner::populateXRefTmpReferenceWithSymbols(tmpxRefReferences,treeNode.AOTgetSource());//,[#SymbolClassSYMBOL]);
        #
        #    tmpxRefReferences.clear();
        #    select tmpxRefReferences
        #        where tmpxRefReferences.Column   == selStartCol
        #        &&  tmpxRefReferences.line       == selStartLine;
        #
        #    switch (tmpxRefReferences.Kind)
        #    {
        #        case xRefKind::Table:
        #            treeNodeNew = TreeNode::findNode(#TablesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name) );
        #            if (! treeNodeNew)
        #            {
        #                treeNodeNew = TreeNode::findNode(#ViewsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name) );
        #            }
        #            break;
        #        case xRefKind::TableField:
        #            df = new DictField(tmpxRefReferences.parentId,  fieldname2id(tmpxRefReferences.parentId, tmpxRefReferences.name));
        #            if (df.baseType() == Types::Enum)
        #            {
        #                treeNodeNew = TreeNode::findNode(#BaseEnumsPath + #AOTDelimiter + enumid2name(df.enumId()));
        #            }
        #            else
        #            {
        #                treeNodeNew = TreeNode::findNode(#ExtendedDataTypesPath + #AOTDelimiter + extendedTypeId2name(df.typeId()) );
        #            }
        #            break;
        #        case xRefKind::Class:
        #            treeNodeNew = TreeNode::findNode(#ClassesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Enum:
        #            treeNodeNew = TreeNode::findNode(#BaseEnumsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::ExtendedType:
        #            treeNodeNew = TreeNode::findNode(#ExtendedDataTypesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Form:
        #            treeNodeNew = TreeNode::findNode(#FormsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Report:
        #            treeNodeNew = TreeNode::findNode(#ReportsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Map:
        #            treeNodeNew = TreeNode::findNode(#TableMapsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #
        #    }
        #    if (treeNodeNew)
        #    {
        #        treeNodeNew.AOTnewWindow();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class EditorScripts
        #{
        #    int     sdsindentLevel;//trud
        #    Source  sdssource;
        #}
      ENDSOURCE
      SOURCE #comments_Addtrud
        #void comments_Addtrud(Editor _e)
        #{
        #    int         startLine = _e.selectionStartLine();
        #    int         endLine   = _e.selectionEndLine();
        #    str         spaces;
        #
        #    str         modifCode;
        #    int         pos, curPos;
        #
        #    container   c;
        #
        #    str  projId, projDescription, projName;
        #
        #
        #    void insertLine(int _line, str _mess)
        #
        #    {
        #        _e.gotoLine(_line);
        #        _e.gotoCol(1);
        #        _e.insertLines('\r\n');
        #        _e.gotoLine(_line);
        #        _e.gotoCol(1);
        #        _e.insertLines(_mess);
        #
        #    }
        #    ;
        #
        #    //info("ok");
        #
        #    c = DEVCommentsTool::getCurrent();
        #
        #    projId             = conpeek(c, 1);
        #    projDescription    = conpeek(c, 2);
        #    projName           = conpeek(c, 3);
        #
        #    modifCode = strFmt('%1, %2',  projId, projDescription);
        #
        #
        #    modifCode = '//' + (modifCode ? (modifCode + ', ') : '') +
        #            //curuserid()
        #            'dtrunin'
        #            + ', ' + date2str(today(), 123, 2, 2, 2, 2, 4, DateFlags::FormatAll);
        #
        #    if (_e.markMode() == MarkMode::NoMark ||
        #      (_e.selectionEndCol() == _e.selectionStartCol() &&
        #       _e.selectionEndLine() == _e.selectionStartLine() &&
        #       _e.selectionEndCol() != 1  ))
        #    {
        #        startLine = _e.currentLineNo() + 1;
        #        endLine   = startLine;
        #
        #        _e.unmark();
        #        curPos = _e.columnNo();
        #        _e.insertString( (pos ? '' : '') + modifCode);
        #        _e.gotoCol( curPos + 1);
        #
        #
        #    }
        #    else
        #    {
        #        if (endLine > startLine && _e.selectionEndCol() == 1)
        #            endLine --;
        #        _e.unmark();
        #        _e.gotoLine(startLine);
        #        _e.gotoCol(1);
        #        spaces = strRep(' ', strLen(_e.currentLine()) - strLen(strLTrim(_e.currentLine())));
        #        insertLine(startLine, spaces + modifCode + ' -->');
        #        insertLine(endLine + 2, spaces + modifCode + ' <--');
        #        _e.gotoLine(startLine);
        #        _e.gotoCol(strlen(spaces) + 1);
        #    }
        #
        #    DEVCommentsTool::add2Project(_e.path(), projName);
        #
        #
        #}
        #
      ENDSOURCE
      SOURCE #comments_InsertBPDeviationTag
        #// Changed on 21 Apr 2010 at 10:37:52 by Rayso
        #public void comments_InsertBPDeviationTag(Editor _editor)
        #{
        #    ;
        #
        #    _editor.unmark();
        #    _editor.insertLines('//BP Deviation Documented');
        #}
      ENDSOURCE
      SOURCE #comments_OpenCommentSetup
        #void comments_OpenCommentSetup(Editor _e)
        #{
        #    ;
        #    DEVCommentsTool::openCommentSetup();
        #
        #
        #}
      ENDSOURCE
      SOURCE #comments_OpenCurProject
        #void comments_OpenCurProject(Editor _e)
        #{
        #    ;
        #    DEVCommentsTool::openCurProject();
        #
        #
        #}
      ENDSOURCE
      SOURCE #dev_simpleLineNoSemicolum
        #private void dev_simpleLineNoSemicolum(str _simpleStr)
        #{
        #    ;
        #    sdssource += strRep(' ',sdsindentLevel) + _simpleStr + '\n';
        #}
      ENDSOURCE
      SOURCE #documentation_HeaderTemplate
        #//AOSRunmode::Client
        #public void documentation_HeaderTemplate(Editor _editor)
        #{
        #    #TokenTypes
        #    #AOT
        #    #SysBPCheck
        #    #SysCompilerOutput
        #
        #    #define.startLine(2)
        #    #define.startColumn(5)
        #    #define.maxDialogString(800)
        #
        #    str source;
        #    str text;
        #    MemberFunction memberFunction = TreeNode::findNode(_editor.path());
        #    TreeNode parent = TreeNode::findNode(SysTreeNode::pathParent(_editor.path()));
        #    SysDictMethod sysDictMethod;
        #    int i;
        #    int symbol;
        #    SysScannerClass scanner;
        #    TreeNode exceptionNode;
        #    TreeNode exceptionValueNode;
        #    xRefTmpReferences tmpxRefReferences;       // the source, as the xRef sees it
        #    DictClass dictClass;
        #    ListEnumerator listEnum;
        #    str existingDoc;
        #
        #str formatXML(XML _xml)
        #{
        #    _xml = strReplace(_xml, '>', '>\n');
        #    _xml = strReplace(_xml, '<', '\n<');
        #
        #    _xml = strReplace(_xml, '\n<c>\n', '<c>');
        #    _xml = strReplace(_xml, '\n</c>\n', '</c>');
        #    _xml = strReplace(_xml, '\n\n', '\n');
        #
        #    return '\n'+_xml+'\n';
        #}
        #
        #    if (parent)
        #    {
        #        // Save to get latest source.
        #        parent.AOTsave();
        #
        #        source = memberFunction.AOTgetSource();
        #
        #        if (!strLen(source))
        #            return;
        #
        #        // Mark the memberfunction as dirty
        #        memberFunction.AOTsetSource(source);
        #    }
        #
        #    sysDictMethod = SysDictMethod::newMemberFunction(memberFunction);
        #
        #    if (sysDictMethod.compiledOk())
        #    {
        #        if (sysDictMethod.xmlDocumentationCanBeAutomated())
        #        {
        #            //
        #            // Truncate to max length
        #            //
        #            existingDoc = formatXml(sysDictMethod.xmlDocumentationAutomated());
        #            if (strLen(existingDoc) > #maxDialogString)
        #            {
        #                existingDoc = subStr(existingDoc, 1, #maxDialogString)+'\n...\n';
        #            }
        #
        #            if (Box::yesNo(strFmt("@SYS107202", existingDoc+'\n')+"@SYS107204", DialogButton::No, "@SYS107109") == DialogButton::No)
        #            {
        #                return;
        #            }
        #        }
        #        existingDoc = sysDictMethod.xmlDocumentationInherited();
        #
        #        if (existingDoc &&
        #            Box::yesNo(strFmt("@SYS327437", '\n'+existingDoc+'\n')+"@SYS107204", DialogButton::No, "@SYS107109") == DialogButton::No)
        #        {
        #            return;
        #        }
        #
        #        scanner = new SysScannerClass(memberFunction);
        #        appl.updatexRefSet(true);
        #        memberFunction.aoTmakeXref(1);
        #        tmpxRefReferences = xRefCreate::makeTmp(appl.lastxRef(), memberFunction.treeNodePath());
        #        appl.updatexRefSet(false);
        #
        #        //
        #        // Insert summary
        #        //
        #        text = '/// <summary>\n/// \n/// </summary>\n';
        #
        #        //
        #        // Insert parameters
        #        //
        #        for (i=1; i<=sysDictMethod.parameterCnt(); i++)
        #        {
        #            if (!sysDictMethod.parameterName(i))
        #            {
        #                // BP Deviation documented
        #                throw error("@SYS107108", '', SysInfoAction_Formrun::newFormnameControlnameDesc(formStr(SysUserSetup), identifierStr(DebuggerPopupCombo), "@SYS321"));
        #            }
        #            text += strFmt('/// <param name="%1">\n/// \n/// </param>\n', sysDictMethod.parameterName(i));
        #        }
        #
        #        //
        #        // Insert returns
        #        //
        #        if (sysDictMethod.returnType() != Types::void &&
        #            sysDictMethod.name() != #MethodNameClassDeclaration)
        #        {
        #            text += '/// <returns>\n/// \n/// </returns>\n';
        #        }
        #
        #        //
        #        // Insert remarks
        #        //
        #        text += '/// <remarks>\n/// \n/// </remarks>\n';
        #
        #        //
        #        // Insert exceptions
        #        //
        #        if (scanner.symbolExists(#Throw_sym))
        #        {
        #            exceptionNode  = TreeNode::findNode(#SystemEnumsPath+'\\'+enumStr(Exception));
        #            scanner.firstSymbol();
        #            symbol = scanner.nextSymbol();
        #            while (symbol)
        #            {
        #                while (symbol && symbol != #Throw_sym)
        #                {
        #                    symbol = scanner.nextSymbol();
        #                }
        #                if (symbol)
        #                {
        #                    symbol = scanner.nextSymbol();
        #                    if (scanner.string() == enumStr(Exception))
        #                    {
        #                        scanner.nextSymbol();
        #                        scanner.nextSymbol();
        #                    }
        #                    //
        #                    // Get right casing
        #                    //
        #                    exceptionValueNode = exceptionNode.AOTfindChild(scanner.string());
        #                    if (exceptionValueNode)
        #                    {
        #                        text += strFmt('/// <exception cref="Exception::%1">\n/// \n/// </exception>\n', exceptionValueNode.treeNodeName());
        #                    }
        #                }
        #            }
        #        }
        #
        #        //
        #        // Insert permission
        #        //
        #        dictClass = new DictClass(classNum(CodeAccessPermission));
        #        listEnum = dictClass.extendedBy().getEnumerator();
        #        while (listEnum.moveNext())
        #        {
        #            while select tmpxRefReferences
        #                where tmpxRefReferences.ParentId == listEnum.current()
        #                  && tmpxRefReferences.Name == methodStr(CodeAccessPermission, demand)
        #                  && tmpxRefReferences.Kind == xRefKind::ClassInstanceMethod
        #            {
        #                text += strFmt('/// <permission cref="%1">\n/// \n/// </permission>\n', classId2Name(listEnum.current()));
        #
        #                //
        #                // Only add each permission class once
        #                //
        #                break;
        #            }
        #        }
        #
        #        _editor.unmark();
        #        _editor.gotoLine(1);
        #        _editor.gotoCol(1);
        #        _editor.insertLines(text);
        #        _editor.gotoLine(#startLine);
        #        _editor.gotoCol(#startColumn);
        #    }
        #    else
        #    {
        #        throw error(strFmt("@SYS97041", 1, memberFunction.treeNodePath()));
        #    }
        #}
      ENDSOURCE
      SOURCE #getApplicableScripts
        #//
        #// System entry point
        #//
        #public container getApplicableScripts(Editor _editor)
        #{
        #    TreeNode aotNode = EditorScripts::getApplObjectNode(_editor);
        #    DictClass dictClass = new DictClass(classNum(EditorScripts));
        #    DictMethod dictMethod;
        #    int i;
        #    container scripts;
        #
        #    //
        #    // Insert menu items
        #    //
        #    for (i = 1; i <= dictClass.objectMethodCnt(); i++)
        #    {
        #        dictMethod = dictClass.objectMethodObject(i);
        #        if (this.isApplicableMethod(dictMethod, aotNode))
        #        {
        #            scripts += dictMethod.name();
        #        }
        #    }
        #
        #    return scripts;
        #}
      ENDSOURCE
      SOURCE #isApplicableMethod
        #//
        #// Use this method to control what scripts are shown on the scripts popup menu in the editor
        #//
        #protected boolean isApplicableMethod(DictMethod _dictMethod, TreeNode _aotNode)
        #{
        #    #TreenodeSysNodeType
        #    //
        #    // Only one parameter of type Editor
        #    // Must be public
        #    // Must return void
        #    //
        #    if (_dictMethod.parameterCnt() != 1 ||
        #        _dictMethod.parameterType(1) != Types::Class ||
        #        _dictMethod.parameterId(1) != classNum(Editor) ||
        #        _dictMethod.accessSpecifier() != AccessSpecifier::public ||
        #        _dictMethod.returnType() != Types::void)
        #    {
        #        return false;
        #    }
        #
        #    switch (_dictMethod.name())
        #    {
        #        //
        #        // Editor scripts that does not apply to Macros
        #        //
        #        case methodStr(EditorScripts, template_database_whileSelect):
        #        case methodStr(EditorScripts, template_flow_do):
        #        case methodStr(EditorScripts, template_flow_if):
        #        case methodStr(EditorScripts, template_flow_ifElse):
        #        case methodStr(EditorScripts, template_flow_else):
        #        case methodStr(EditorScripts, template_flow_switch):
        #        case methodStr(EditorScripts, template_flow_try):
        #        case methodStr(EditorScripts, template_flow_for):
        #        case methodStr(EditorScripts, template_flow_while):
        #            if (_aotNode &&
        #                _aotNode.treeNodeType().id() != #NT_MCRCODE)
        #            {
        #                return true;
        #            }
        #            return false;
        #
        #        //
        #        // Editor scripts that does not apply to Macros and Jobs
        #        //
        #        case methodStr(EditorScripts, template_method_construct):
        #        case methodStr(EditorScripts, template_method_edit):
        #        case methodStr(EditorScripts, template_method_editWithClass):
        #        case methodStr(EditorScripts, template_method_main):
        #        case methodStr(EditorScripts, template_method_parm):
        #        case methodStr(EditorScripts, documentation_HeaderTemplate):
        #            if (_aotNode &&
        #                _aotNode.treeNodeType().id() != #NT_MCRCODE &&
        #                _aotNode.treeNodeType().id() != #NT_XALCODE)
        #            {
        #                return true;
        #            }
        #            return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #last_classHeader
        #void last_classHeader(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.classHeader();
        #    ;
        #    editor.insertLines(template);
        #}
      ENDSOURCE
      SOURCE #last_comment
        #void last_comment(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.comment();
        #    ;
        #    editor.insertLines(template);
        #}
      ENDSOURCE
      SOURCE #last_functionHeader
        #void last_functionHeader(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.functionHeader();
        #    ;
        #    editor.insertLines(template);
        #}
        #
      ENDSOURCE
      SOURCE #sendTo_file
        #public void sendTo_file(Editor  e)
        #{
        #    Filename filename;
        #    TextIo io;
        #    int i = strFind(e.path(), '\\', strLen(e.path()), -strLen(e.path()));
        #    str defaultName = subStr(e.path(), i+1, strLen(e.path()));
        #    ;
        #    filename = WinAPI::getSaveFileName(0, ['Text','*.txt'], '', "@SYS56237", 'txt', defaultName );
        #    if (filename)
        #    {
        #        // BP deviation documented
        #        io = new TextIo(filename, 'W', 65001); // Write the file in UTF8
        #        io.write(EditorScripts::getSelectedText(e));
        #    }
        #}
      ENDSOURCE
      SOURCE #sendTo_mailRecipient
        #public void sendTo_mailRecipient(Editor e)
        #{
        #    SysINetMail mail = new SysINetMail();
        #    mail.sendMail('',e.path(),EditorScripts::getSelectedText(e),true);
        #}
      ENDSOURCE
      SOURCE #tableBrowser
        #void tableBrowser(Editor _e)
        #{
        #    str                 fieldName;
        #    ;
        #
        #    fieldName = substr(_e.currentLine(), _e.selectionStartCol(), _e.selectionEndCol() - _e.selectionStartCol());
        #
        #    new SysTableBrowser().run(tablename2id(fieldName));
        #}
      ENDSOURCE
      SOURCE #template_database_whileSelect
        #public void template_database_whileSelect(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.whileSelect());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+15);
        #
        #}
      ENDSOURCE
      SOURCE #template_flow_do
        #public void template_flow_do(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.doWhile());
        #
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_else
        #public void template_flow_else(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #    Source template = xppSource.elseBlock();
        #
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+3);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_for
        #public void template_flow_for(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.for());
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+6);
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_if
        #public void template_flow_if(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #    Source template = xppSource.if();
        #
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_ifElse
        #public void template_flow_ifElse(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.ifElse());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_switch
        #public void template_flow_switch(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.switch());
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+9);
        #
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_try
        #public void template_flow_try(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.tryCatch());
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_while
        #public void template_flow_while(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.while());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+8);
        #}
        #
      ENDSOURCE
      SOURCE #template_method_construct
        #public void template_method_construct(Editor editor)
        #{
        #    xppSource       xppSource         = new xppSource();
        #    Dialog          dialog;
        #    DialogField     dlgClassTypeName;
        #    Source          template;
        #    str             path = editor.path();
        #    TreeNode        treeNode = path ? TreeNode::findNode(path) : null;
        #    ClassName       className;
        #    #TreeNodeSysNodeType
        #
        #    if (treeNode)
        #    {
        #        treeNode = treeNode.AOTparent();
        #        if (treeNode && treeNode.treeNodeType().id() == #NT_CLASS)
        #        {
        #            className = treeNode.treeNodeName();
        #        }
        #    }
        #
        #    if (!className)
        #    {
        #        dialog = new Dialog("@SYS73363");
        #        dlgClassTypeName = dialog.addField(extendedTypeStr(ClassName));
        #        if (!dialog.run())
        #        {
        #            return;
        #        }
        #        className = dlgClassTypeName.value();
        #    }
        #
        #    if (className)
        #    {
        #        template = xppSource.constructMethod(className);
        #
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_edit
        #public void template_method_edit(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource();
        #    Dialog          dialog          = new Dialog("@SYS69534");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(ExtendedDataTypeName));
        #    DialogField     dlgTablename    = dialog.addField(extendedTypeStr(TableName));
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(SysElementName),"@SYS62312","@SYS62313");
        #    Source          template;
        #;
        #    if (dialog.run())
        #    {
        #        template = xppSource.editMethod(dlgExtTypeName.value(),dlgTablename.value(),dlgName.value());
        #
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_editWithClass
        #public void template_method_editWithClass(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource(4);
        #    Dialog          dialog          = new Dialog("@SYS63066");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(ExtendedDataTypeName));
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(SysElementName),"@SYS62312","@SYS63067");
        #    DialogField     dlgClassname    = dialog.addField(extendedTypeStr(ClassName),"@SYS24724","@SYS63068");
        #    DialogField     dlgMethod       = dialog.addField(extendedTypeStr(SysElementName),"@SYS26958","@SYS63070");
        #    Source          template;
        #;
        #    if (dialog.run())
        #    {
        #        template = xppSource.editMethodWithClass(dlgExtTypeName.value(),dlgName.value(),dlgClassname.value(),dlgMethod.value());
        #
        #        editor.insertLines(template);
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #template_method_exists
        ##DictField
        #void template_method_exists(Editor _e)
        #{
        #    DictTable dt;
        #    DictIndex di;
        #    DictField df;
        #    Dialog dialog;
        #    DialogField dialogField;
        #
        #    int i;
        #    int longestTypeLength;
        #    int longestNameLength;
        #    FieldId fieldId;
        #    str mandatoryFields;
        #
        #    str methodText;
        #    str indent;
        #    //TextBuffer tb;
        #    str             path = _e.path();
        #    TreeNode        treeNode = path ? TreeNode::findNode(path) : null;
        #
        #    str strTypeOf(DictField _df, int _padTo = 0)
        #    {
        #        str res;
        #        if(df.typeId())
        #            res = new DictType(df.typeId()).name();
        #        else if(df.enumId())
        #            res = new DictEnum(df.enumId()).name();
        #        else
        #            res = '?UNKNOWN?';
        #        if(_padTo)
        #        {
        #            res += strrep(' ', _padTo - strlen(res));
        #        }
        #        return res;
        #    }
        #
        #    str prettyName(str _name)
        #    {
        #        return strlwr(substr(_name,1,1)) + substr(_name, 2, strlen(_name)-1);
        #    }
        #    ;
        #    dialog = new Dialog();
        #    dialog.caption('Table name');
        #    dialogField = dialog.addField(extendedTypeStr(TableName));
        #    if (treeNode)
        #    {
        #        treeNode = treeNode.AOTparent();
        #        if(treeNode)
        #        {
        #            treeNode = treeNode.AOTparent();
        #        }
        #
        #        dialogField.value(treeNode.treeNodeName());
        #    }
        #
        #    if(! dialog.run())
        #    {
        #        return;
        #    }
        #
        #    dt = new DictTable(tablename2id(dialogField.value()));
        #    if(!dt)
        #        throw error('Table name is incorrect');
        #
        #    di = new DictIndex(dt.id(), dt.primaryIndex());
        #
        #    dialog = new Dialog();
        #    dialog.caption('Index name');
        #    dialogField = dialog.addFieldValue(extendedTypeStr(IndexName), di ?  di.name() : '');
        #    if(! dialog.run())
        #    {
        #        return;
        #    }
        #
        #    di = new DictIndex(dt.id() , dt.indexName2Id(dialogField.value()));
        #    if(! di)
        #        throw error('Incorrect index');
        #
        #    methodText = strfmt('public static boolean exist(',  dt.name());
        #    indent     = strrep(' ', strlen(methodText));
        #
        #
        #    // find longest type name
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        df = new DictField(dt.id(), di.field(i));
        #        longestTypeLength = max(longestTypeLength, strlen(strTypeOf(df)));
        #        longestNameLength = max(longestNameLength, strlen(df.name()));
        #    }
        #
        #
        #    // build args and mandatory fields list
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        fieldId = di.field(i);
        #        df = new DictField(dt.id(), fieldId);
        #        if(df.flags() & #DBF_MANDATORY == #DBF_MANDATORY
        #         || di.name() == 'RecId')
        #        {
        #            if(mandatoryFields)
        #            {
        #                mandatoryFields += ' && ';
        #            }
        #            mandatoryFields += '_' + prettyName(df.name());
        #        }
        #
        #        if(i != 1)
        #        {
        #            methodText += strfmt(',\n%1', indent);
        #        }
        #
        #        methodText += strfmt('%1 _%2', strTypeOf(df, longestTypeLength), prettyName(df.name()));
        #    }
        #
        #    //build method header
        #    methodText += strfmt(')\n{\n', indent, strrep(' ', 1+longestTypeLength - strlen('boolean')));
        #    indent = '    ';
        #    methodText += indent + 'return';
        #
        #    //check for mandatory fields
        #    if(mandatoryFields)
        #    {
        #        methodText += ' ' + mandatoryFields + '\n    '+indent+'&& ';
        #        indent += '        ';
        #    }
        #
        #    //build select query
        #    methodText += '(select firstonly RecId from ' + dt.name() + '\n';
        #    methodText += indent + '    where ';
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        df = new DictField(dt.id(), di.field(i));
        #        if(i != 1)
        #        {
        #            methodText += '\n' + indent + '       && ';
        #        }
        #        methodText += dt.name() + '.' + df.name() + strrep(' ', longestNameLength - strlen(df.name())) + ' == _' + prettyName(df.name());
        #    }
        #    methodText += ').RecId != 0;\n';
        #
        #    methodText += '}';
        #    _e.insertLines(methodText);
        #
        #}
      ENDSOURCE
      SOURCE #template_method_find
        ##DictField
        #void template_method_find(Editor _e)
        #{
        #    DictTable       dt;
        #    DictIndex       di;
        #    DictField       df;
        #    Dialog          dialog;
        #    DialogField     dialogField;
        #
        #    int             i;
        #    int             longestTypeLength = strlen('boolean'); //for forupdate
        #    int             longestNameLength;
        #    FieldId         fieldId;
        #    str             mandatoryFields;
        #
        #    str             methodText;
        #    str             indent;
        #    str             varName;
        #    //TextBuffer      tb;
        #    str             path = _e.path();
        #    TreeNode        treeNode = path ? TreeNode::findNode(path) : null;
        #
        #    str strTypeOf(DictField _df, int _padTo = 0)
        #    {
        #        str res;
        #        if(df.typeId())
        #            res = new DictType(df.typeId()).name();
        #        else if(df.enumId())
        #            res = new DictEnum(df.enumId()).name();
        #        else
        #            res = '?UNKNOWN?';
        #        if(_padTo)
        #        {
        #            res += strrep(' ', _padTo - strlen(res));
        #        }
        #        return res;
        #    }
        #
        #    str prettyName(str _name)
        #    {
        #        return strlwr(substr(_name,1,1)) + substr(_name, 2, strlen(_name)-1);
        #    }
        #    ;
        #    dialog = new Dialog();
        #    dialog.caption('table name');
        #
        #    dialogField = dialog.addField(extendedTypeStr(TableName));
        #    if (treeNode)
        #    {
        #        treeNode = treeNode.AOTparent();
        #        if(treeNode)
        #        {
        #            treeNode = treeNode.AOTparent();
        #        }
        #
        #        dialogField.value(treeNode.treeNodeName());
        #    }
        #
        #    if(! dialog.run())
        #    {
        #        return;
        #    }
        #
        #    dt = new DictTable(tablename2id(dialogField.value()));
        #
        #    if(!dt)
        #        throw error('Table name is incorrect');
        #
        #    di = new DictIndex(dt.id(), dt.primaryIndex());
        #
        #    dialog = new Dialog();
        #    dialog.caption('Index name');
        #    dialogField = dialog.addFieldValue(extendedTypeStr(IndexName), di ?  di.name() : '');
        #    if(! dialog.run())
        #    {
        #        return;
        #    }
        #
        #    di = new DictIndex(dt.id() , dt.indexName2Id(dialogField.value()));
        #    if(! di)
        #        throw error('Incorrect index');
        #
        #    methodText = strfmt('public static %1 find(',  dt.name());
        #    indent     = strrep(' ', strlen(methodText));
        #    varName    = prettyName(dt.name());
        #
        #
        #    // find longest type name
        #    longestTypeLength = strlen('boolean');
        #    //longestNameLength = strlen('_forUpdate');
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        df = new DictField(dt.id(), di.field(i));
        #        longestTypeLength = max(longestTypeLength, strlen(strTypeOf(df)));
        #        longestNameLength = max(longestNameLength, strlen(df.name()));
        #    }
        #
        #
        #    // build args and mandatory fields list
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        fieldId = di.field(i);
        #        df = new DictField(dt.id(), fieldId);
        #        if(df.flags() & #DBF_MANDATORY == #DBF_MANDATORY
        #         || di.name() == 'RecId')
        #        {
        #            if(mandatoryFields)
        #            {
        #                mandatoryFields += ' && ';
        #            }
        #            mandatoryFields += '_' + prettyName(df.name());
        #        }
        #
        #        if(i != 1)
        #        {
        #            methodText += strfmt(',\n%1', indent);
        #        }
        #
        #        methodText += strfmt('%1 _%2', strTypeOf(df, longestTypeLength), prettyName(df.name()));
        #    }
        #
        #    //build method header
        #    methodText += strfmt(',\n%1boolean%2_forUpdate = false)\n{\n', indent, strrep(' ', 1+longestTypeLength - strlen('boolean')));
        #    indent = '    ';
        #    methodText += indent + dt.name() + ' ' + varName + ';\n';
        #    methodText += indent + '\n';
        #
        #    //check for mandatory fields
        #    if(mandatoryFields)
        #    {
        #        methodText += indent + 'if (' + mandatoryFields + ')\n';
        #        methodText += indent + '{\n';
        #        indent += '    ';
        #    }
        #
        #    //selectForUpdate
        #    methodText += indent + varName+'.selectForUpdate(_forUpdate);\n\n';
        #
        #    //build select query
        #    methodText += indent + 'select firstonly ' + varname + '\n';
        #    methodText += indent + '    where ';
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        df = new DictField(dt.id(), di.field(i));
        #        if(i != 1)
        #        {
        #            methodText += '\n' + indent + '       && ';
        #        }
        #        methodText += varName + '.' + df.name() + strrep(' ', longestNameLength - strlen(df.name())) + ' == _' + prettyName(df.name());
        #    }
        #    methodText += ';\n';
        #
        #    //footer
        #    if(mandatoryFields)
        #    {
        #        indent = substr(indent, 1, strlen(indent) - 4);
        #        methodText += indent + '}\n';
        #    }
        #    methodText += '\n';
        #    methodText += indent + 'return '+varName+';\n';
        #
        #    methodText += '}';
        #    _e.insertLines(methodText);
        #}
      ENDSOURCE
      SOURCE #template_method_findRecId
        #public void template_method_findRecId(Editor _e)
        #{
        #
        #    Source      templateSource;
        #    DEVCommentsTool  commentsTool = new DEVCommentsTool();
        #    ;
        #    templateSource = commentsTool.getFindRecIdSource(_e.path());
        #
        #    _e.insertLines(templateSource);
        #
        #    //DEVCommentsTool::add2Project(_e.path(), projName, false);
        #}
      ENDSOURCE
      SOURCE #template_method_main
        #public void template_method_main(Editor editor)
        #{
        #    xppSource       xppSource = new xppSource(editor.columnNo());
        #    Source          template;
        #    int             currentLine = editor.currentLineNo();
        #    int             currentCol = editor.columnNo();
        #
        #    template = xppSource.mainMethod();
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
      ENDSOURCE
      SOURCE #template_method_parm
        #public void template_method_parm(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource();
        #    Dialog          dialog          = new Dialog("@SYS62311");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(SysXppType),'','',false /* ignoreEDTConstraints */);
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(NotesLine),"@SYS62312","@SYS62313");
        #    Source          template;
        #
        #    extendedDataTypeName    typeName;
        #    SysElementName          name;
        #    container               con;
        #
        #    if (dialog.run())
        #    {
        #        if (dlgExtTypeName.value())
        #        {
        #            template = xppSource.parmMethod(dlgExtTypeName.value(),dlgName.value());
        #        }
        #        else
        #        {
        #            con = str2con_RU(dlgName.value(), ' ', true);
        #            typeName = conPeek(con, 1);
        #            name = conPeek(con, 2);
        #            if (subStr(name, strLen(name), 1) == ';')
        #            {
        #                name = subStr(name, 1, strLen(name) - 1);
        #            }
        #
        #            template = xppSource.parmMethod(typeName, name);
        #        }
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_test
        #/// <summary>
        #/// Editor script for test methods
        #/// </summary>
        #/// <param name="editor">
        #/// The <c>Editor</c> class to insert the test method to.
        #/// </param>
        #public void template_method_test(Editor editor)
        #{
        #    xppSource       xppSource = new xppSource();
        #    Source          template;
        #
        #    template = @'[SysTestCheckInTestAttribute]
        #public void test()
        #{
        #    // Arrange
        #
        #    // Act
        #
        #    // Assert
        #
        #}';
        #    editor.insertLines(template);
        #
        #    editor.gotoLine(2);
        #    editor.gotoCol(17);
        #}
        #
      ENDSOURCE
      SOURCE #template_processDS
        #void template_processDS(Editor editor)
        #{
        #    Dialog          dialog          = new Dialog('Process DS');
        #    DialogField     dlgDSName       = dialog.addField(extendedtypestr(SysElementName), 'DS Name');
        #    DialogField     dlgVarName      = dialog.addField(extendedtypestr(SysElementName), "@SYS11906");
        #
        #    Source dev_processDS(str _dsName, str _varName)
        #    {
        #
        #        ;
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('for(%1 = %2.getFirst(true) ? %2.getFirst(true) : %2.cursor();', _varName, _dsName));
        #        this.dev_simpleLineNoSemicolum(strFmt('    %1.RecId;', _varName));
        #        this.dev_simpleLineNoSemicolum(strFmt('    %1 = %2.getNext())', _varName, _dsName));
        #        this.dev_simpleLineNoSemicolum('{');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum('}');
        #
        #        return sdssource;
        #
        #    }
        #;
        #    sdssource = '';
        #    sdsindentLevel = editor.columnNo() ;
        #    if (dialog.run())
        #    {
        #        editor.gotoCol(1);
        #        editor.insertLines(dev_processDS(dlgDSName.value(),dlgVarName.value()));
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #template_SelectForUpdate
        #void template_SelectForUpdate(Editor editor)
        #{
        #    Dialog          dialog          = new Dialog('select for update');
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedtypestr(TableName));
        #    DialogField     dlgName         = dialog.addField(extendedtypestr(SysElementName),"@SYS62312","@SYS62313");
        #
        #    Source dev_selectForUpdate(str _typeName, str _varName)
        #    {
        #
        #        ;
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('%1   %2', _typeName, _varName));
        #
        #        this.dev_simpleLineNoSemicolum(';');
        #
        #        this.dev_simpleLineNoSemicolum('ttsbegin;');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('while select forupdate %1', _varName));
        #
        #        this.dev_simpleLineNoSemicolum('{');
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('    %1.update();', _varName));
        #        this.dev_simpleLineNoSemicolum('}');
        #
        #        this.dev_simpleLineNoSemicolum('ttscommit;');
        #
        #        return sdssource;
        #    }
        #
        #    ;
        #    sdssource = '';
        #    sdsindentLevel = editor.columnNo() ;
        #
        #    if (dialog.run())
        #    {
        #        editor.gotoCol(1);
        #        editor.insertLines(dev_selectForUpdate(dlgExtTypeName.value(),dlgName.value()));
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #template_SelectQuery
        #void template_SelectQuery(Editor editor)
        #{
        #    Dialog          dialog          = new Dialog('select query');
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedtypestr(TableName));
        #    DialogField     dlgName         = dialog.addField(extendedtypestr(SysElementName),"@SYS62312","@SYS62313");
        #
        #    Source dev_selectQuery(str _typeName, str _varName)
        #    {
        #
        #        ;
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('Query                query = new Query();'));
        #        this.dev_simpleLineNoSemicolum(strFmt('QueryBuildDataSource qBDS;'));
        #        this.dev_simpleLineNoSemicolum(strFmt('QueryRun             queryRun;'));
        #        this.dev_simpleLineNoSemicolum(strFmt('%1%3 %2;', _typeName, _varName, strrep(' ', strlen('QueryBuildDataSource') - strlen(_typeName))));
        #
        #        this.dev_simpleLineNoSemicolum(';');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('qBDS     = query.addDataSource(tablenum(%1));', _typeName));
        #        this.dev_simpleLineNoSemicolum(strFmt('queryRun = new QueryRun(query);'));
        #
        #        this.dev_simpleLineNoSemicolum('');
        #        this.dev_simpleLineNoSemicolum('while (queryRun.next())');
        #        this.dev_simpleLineNoSemicolum('{');
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('    %1 = queryRun.get(tablenum(%2));', _varName, _typeName));
        #        this.dev_simpleLineNoSemicolum('}');
        #
        #        return sdssource;
        #    }
        #
        #    ;
        #    sdssource = '';
        #    sdsindentLevel = editor.columnNo() ;
        #    if (dialog.run())
        #    {
        #        editor.gotoCol(1);
        #        editor.insertLines(dev_selectQuery(dlgExtTypeName.value(),dlgName.value()));
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #template_switch
        #void template_switch(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #
        #    Dialog          dialog              = new Dialog('Switch');
        #    DialogField     dlgEnumName         = dialog.addField(extendedtypestr(SysElementName), 'Enum Name');
        #    DialogField     dlgEnumVarName      = dialog.addField(extendedtypestr(SysElementName), 'Enum variable');
        #
        #Source switchS(Source _condition = '',
        #              identifierName _enumName = '') //TRUD
        #{
        #    DictEnum    dictEnum;
        #    int         i;
        #    ;
        #    //indentLevel = 1;
        #
        #    this.dev_simpleLineNoSemicolum(strFmt('switch (%1)',_condition));
        #
        #    this.dev_simpleLineNoSemicolum('{');
        #    sdsindentLevel += 4;
        #
        #    if (_enumName)
        #    {
        #        dictEnum = new DictEnum(enumName2Id(_enumName));
        #        for (i = 0; i < dictEnum.values(); i++)
        #        {
        #            this.dev_simpleLineNoSemicolum(strFmt('case %1::%2:', _enumName, dictEnum.index2Symbol(i)));
        #
        #            this.dev_simpleLineNoSemicolum('');
        #
        #            this.dev_simpleLineNoSemicolum('    break;');
        #
        #        }
        #
        #    }
        #    else
        #    {
        #        this.dev_simpleLineNoSemicolum('case :');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum('    break;');
        #
        #        this.dev_simpleLineNoSemicolum('case :');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum('    break;');
        #    }
        #
        #    this.dev_simpleLineNoSemicolum('default :');
        #
        #    this.dev_simpleLineNoSemicolum('    throw error(Error::wrongUseOfFunction(funcName()));');
        #    sdsindentLevel -= 4;
        #    this.dev_simpleLineNoSemicolum('}');
        #
        #
        #    return sdssource;
        #}
        #
        #    ;
        #    sdssource = '';
        #    sdsindentLevel = editor.columnNo() ;
        #
        #    if (dialog.run())
        #    {
        #        editor.gotoCol(1);
        #        editor.insertLines(switchs(dlgEnumVarName.value(), dlgEnumName.value()));
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #template_throw
        #void template_throw(Editor e)
        #{
        #    e.insertString('throw error(strFmt(""));');
        #}
      ENDSOURCE
      SOURCE #transformSelection
        #private void transformSelection(Editor _editor, IdentifierName _transformation)
        #{
        #    str line;
        #    int i;
        #    int startLine = _editor.selectionStartLine();
        #    int endLine   = _editor.selectionEndLine();
        #    int startCol  = _editor.selectionStartCol(); //points at the first selected char
        #    int endCol    = _editor.selectionEndCol()-1; //points at the last selected char
        #    MarkMode markMode = _editor.markMode();
        #    #define.maxLineLength(300)
        #
        #str transform(str data)
        #{
        #    switch (_transformation)
        #    {
        #        case identifierStr('strlwr'):
        #            return strLwr(data);
        #
        #        case identifierStr('strupr'):
        #            return strUpr(data);
        #    }
        #    return data;
        #}
        #
        #void transformLine(int lineNo, int start, int end)
        #{
        #    _editor.gotoCol(0);
        #    _editor.gotoLine(lineNo);
        #    line = _editor.currentLine();
        #    line = subStr(line, 1, start-1) +
        #           transform(subStr(line, start, end-start+1)) +
        #           subStr(line, end+1, #maxLineLength);
        #
        #    _editor.deleteLines(1);
        #    _editor.insertLines(line+'\n');
        #    return;
        #}
        #;
        #    _editor.unmark();
        #
        #    switch (markMode)
        #    {
        #        case MarkMode::LineMark:
        #            _editor.gotoCol(1);
        #            for (i=startLine; i<=endLine; i++)
        #            {
        #                transformLine(i, 1, #maxLineLength);
        #            }
        #            break;
        #
        #        case MarkMode::ColMark:
        #            for (i=startLine; i<=endLine; i++)
        #            {
        #                transformLine(i, startCol, endCol);
        #            }
        #            break;
        #
        #        case MarkMode::AreaMark:
        #            if (startLine == endLine)
        #            {
        #                transformLine(startLine, startCol, endCol);
        #            }
        #            else
        #            {
        #                //convert first line
        #                transformLine(startLine, startCol, #maxLineLength);
        #
        #                //convert full lines
        #                for (i=startLine+1; i<endLine; i++)
        #                {
        #                    transformLine(i, 1, #maxLineLength);
        #                }
        #
        #                //convert last line
        #                transformLine(endLine, 1, endCol);
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #getApplObjectNode
        #protected static TreeNode getApplObjectNode(Editor _editor)
        #{
        #    TreeNode aotNode = TreeNode::findNode(_editor.path());
        #    return SysTreeNode::getRootElement(aotNode);
        #}
      ENDSOURCE
      SOURCE #getSelectedText
        #public static str getSelectedText(Editor e)
        #{
        #    int i;
        #    str text;
        #    str line;
        #    int startLine = e.selectionStartLine()+1;
        #    int endLine   = e.selectionEndLine()+1;
        #    int startCol  = e.selectionStartCol();
        #    int endCol    = e.selectionEndCol();
        #
        #    if (startLine == endLine && startCol == endCol)
        #    {
        #        e.firstLine();
        #        while (e.moreLines())
        #        {
        #            text += e.getLine()+'\r\n';
        #            e.nextLine();
        #        }
        #    }
        #    else
        #    {
        #        e.firstSelectedLine();
        #        for (i = startLine; i <= endLine; i++)
        #        {
        #            line = e.getLine();
        #            if (i == startLine && i == endLine)
        #            {
        #                line = subStr(line, startcol, endCol-startCol);
        #            }
        #            else
        #            if (i == endLine)
        #            {
        #                line = subStr(line, 1, endCol-1);
        #            }
        #            else
        #            if (i == startLine)
        #            {
        #                line = strRep(' ', startCol-1)+subStr(line, startCol, strLen(line));
        #            }
        #
        #            text += line + '\r\n';
        #            e.nextSelectedLine();
        #        }
        #    }
        #    return text;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVCommentsTool unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVCommentsTool
    PROPERTIES
      Name                #DEVCommentsTool
      Origin              #{DCC59E9E-8355-4354-935B-F2E3822E891F}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//trud - comments tool
        #public class DEVCommentsTool
        #{
        #}
      ENDSOURCE
      SOURCE #forEach
        #str forEach(Map map, boolean _keyOnly = false, str _divider = ", ", str _keyPrefix = " _", str _keySuffix = "", boolean _repeatKeyAfterSuffix = false)
        #{
        #    MapIterator mapIterator = new MapIterator(map);
        #    boolean     firstField  = true;
        #    str         result;
        #
        #    while (mapIterator.more())
        #    {
        #
        #        result     += (firstField ? "" : _divider) +
        #                      (_keyOnly ? "" : any2str(mapIterator.value()) ) +
        #                      _keyPrefix +
        #                      (_repeatKeyAfterSuffix ? any2str(mapIterator.key()) : this.getVarName(mapIterator.key()) )+
        #                      _keySuffix +
        #                      (_repeatKeyAfterSuffix ? this.getVarName(mapIterator.key()) : "");
        #
        #        firstField  = false;
        #        mapIterator.next();
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #getFindRecIdSource
        #str getFindRecIdSource(str _path)
        #{
        #    treeNode        treeNode;
        #    str             res;
        #    str             tableName;
        #    Map             mapTypes = new Map(Types::String, Types::String);
        #    ;
        #    treeNode = TreeNode::findNode(_path);
        #    treeNode = SysTreeNode::getRootElement(treeNode);
        #    tableName = treeNode.AOTname();
        #
        #    mapTypes.insert('RecId', 'RecId');
        #
        #    res = this.getFindTemplate(tableName, mapTypes, 'findRecId');
        #
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #getFindTemplate
        #str getFindTemplate(str _tableName, Map _indexMap, str _methodName)
        #{
        #    str source;
        #    str tableNameVar = this.getVarName(_tableName);
        #    ;
        #    source  = 'static ' + _tableName + ' ' + _methodName + '(' + this.forEach(_indexMap) + ', boolean _forupdate = false)\n';
        #    source += '{\n';
        #    source += '    ' + _tableName + ' ' + tableNameVar + ';\n';
        #    source += '    ;\n';
        #    source += '    if (' + this.forEach(_indexMap, true, ' || ') + ')\n';
        #    source += '    {\n';
        #    source += '        ' + tableNameVar + '.selectForUpdate(_forupdate);\n';
        #    source += '        select ' + tableNameVar + ' where \n' + strrep(' ', 12) +
        #                                  this.forEach(_indexMap, true, ' &&\n' + strrep(' ', 12), tableNameVar + '.' ,' == _', true) + ';\n';
        #    source += '    }\n';
        #    source += '    return ' + tableNameVar + ';\n';
        #    source += '}\n';
        #
        #    return source;
        #}
      ENDSOURCE
      SOURCE #getVarName
        #str getVarName(str _name)
        #{
        #    str res;
        #    ;
        #    res = strLwr(subStr(_name, 1, 1)) + subStr(_name, 2, strLen(_name));
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #runSysContextMenu
        #void runSysContextMenu(SysContextMenu _sysContextMenu)
        #{
        #    TreeNode contextNode = _sysContextMenu.first();
        #    TreeNode checkNode;
        #    str  projName;
        #    ;
        #
        #    projName           = conpeek(DEVCommentsTool::getCurrent(), 3);
        #
        #    if (! projName)
        #    {
        #        return;
        #    }
        #
        #    while (contextNode)
        #    {
        #        checkNode = TreeNode::findNode(contextNode.treeNodePath()); // find the same node, on the server
        #        if (!checkNode)
        #        {
        #            checkNode = contextNode;   // in few situations, we can't find the node, so use the original
        #        }
        #        setPrefix(checkNode.treeNodePath());
        #
        #        DEVCommentsTool::add2Project(checkNode.treeNodePath(), projName);
        #
        #        contextNode = _sysContextMenu.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #add2Project
        #static void add2Project(str _path, str _projectName, boolean _doGrouping = true)
        #{
        #    UtilIdElements  uu;
        #    //SysTreeNode     sysTreeNode;
        #    treeNode        treeNode;
        #    boolean         projectNodeFound;
        #    int             i;
        #    UserInfo        userInfo;
        #
        #
        #
        #    boolean elementExistInProject(ProjectNode       _projectNode2,
        #                                  UtilElementType   _elementType,
        #                                  Name              _elementName)
        #    {
        #       // boolean                     projectNodeFound;
        #
        #
        #        projectNodeFound = DEVCommentsTool::checkForProject(_projectNode2.getRunNode().AOTiterator(), _elementType, _elementName);
        #        return projectNodeFound;
        #    }
        #
        #    void add2ProjectNode(UtilElementType   _elementType,
        #                         Name              _elementName)
        #    {
        #        SysProjectFilterRunBase     sysProjectFilterRunBase;
        #        ProjectNode                 projectNode;
        #        ;
        #        projectNode = infolog.projectRootNode();
        #        projectNode = projectNode.AOTfirstChild();  //Private projects
        #        projectNode = projectNode.AOTnextSibling(); //Shared projects
        #
        #        projectNode = projectNode.AOTfindChild(_projectName);
        #        if(projectNode)
        #        {
        #            projectNode = projectNode.getRunNode();
        #            if(!elementExistInProject(projectNode,_ElementType,_ElementName))
        #            {
        #                SysProjectFilterRunBase = new SysProjectFilterRunBase();
        #                SysProjectFilterRunBase.parmProjectNode(ProjectNode);
        #                SysProjectFilterRunBase.grouping((! _doGrouping) ? SysProjectGrouping::None : SysProjectGrouping::AOT);
        #
        #                switch (_ElementName)
        #                {
        #                    case classstr(Info):
        #                    case classstr(Session):
        #                    case classstr(Application):
        #                    case classstr(Company):
        #                    case classstr(Site):
        #                    case classstr(ClassFactory):
        #                    case classstr(Global):
        #                    case classstr(VersionControl):
        #                        SysProjectFilterRunBase.doUtilElements(xUtilElements::find(UtilElementType::ClassInstanceMethod,'ClassDeclaration', Global::className2Id(_ElementName)));
        #                    default:
        #                        SysProjectFilterRunBase.doUtilElements(xUtilElements::find(_ElementType, _ElementName));
        #                        break;
        #                }
        #
        #                SysProjectFilterRunBase.doUtilElements(xUtilElements::find(_ElementType,_ElementName));
        #                SysProjectFilterRunBase.write();
        #                projectNode.AOTsave();
        #            }
        #        }
        #        else
        #        {
        #            warning(strFmt('Project %1 not found', _projectName));
        #        }
        #
        #    }
        #
        #
        #    UtilIdElements findTreeNode(TreeNode _treeNode)
        #    {
        #        UtilIdElements utilElements;
        #        UtilIdElements utilElementsFromNode;
        #        TreeNode     utilNode = _treeNode;
        #
        #        while (utilNode && !utilNode.utilIdElement().name)
        #        {
        #            utilNode = utilNode.AOTparent();
        #            utilElementsFromNode = utilNode.utilIdElement();
        #        }
        #
        #        if (utilNode)
        #        {
        #            utilElementsFromNode = utilNode.utilIdElement();
        #
        #            select firstonly utilElements
        #                where utilElements.Name         == utilElementsFromNode.Name         &&
        #                      utilElements.Id           == utilElementsFromNode.Id           &&
        #                      utilElements.RecordType   == utilElementsFromNode.RecordType   &&
        #                      utilElements.ParentId     == utilElementsFromNode.ParentId     &&
        #                      utilElements.UtilLevel    == utilElementsFromNode.UtilLevel;
        #
        #            return utilElements;
        #        }
        #
        #        return null;
        #    }
        #
        #
        #    if (_projectName)
        #    {
        #
        #        treeNode = TreeNode::findNode(_path);
        #        if (! treeNode)
        #        {
        #            for (i = strLen(_path); i > 5; i--)
        #            {
        #                if (subStr(_path, i , 1) == @'\')
        #                {
        #                    _path = subStr(_path, 1, i - 1);
        #                    treeNode = TreeNode::findNode(_path);
        #                    break;
        #                }
        #            }
        #        }
        #        treeNode = SysTreeNode::getRootElement(treeNode);
        #        uu = findTreeNode(treeNode);
        #
        #        add2ProjectNode(uu.recordType, uu.name);
        #        select userInfo
        #            where userInfo.id == curUserId();
        #        if (userInfo.startupProject != _projectName)
        #        {
        #            if (Box::yesNo(strFmt('Set current project to %1?', _projectName), DialogButton::Yes) == DialogButton::Yes)
        #            {
        #                ttsBegin;
        #                select forUpdate userInfo
        #                    where userInfo.id == curUserId();
        #                userInfo.startupProject = _projectName;
        #                userInfo.update();
        #                ttsCommit;
        #            }
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #checkForProject
        #static boolean checkForProject(TreeNodeIterator   _treeNodeIterator,
        #                        UtilElementType    _elementType,
        #                        Name               _elementName)
        #{
        #    ProjectNode             //projectNode,
        #                    projectNodeLocal;
        #    //TreeNodeIterator        TreeNodeIterator;
        #    //UtilElements            UE;
        #    boolean                 projectNodeFound;
        #
        #
        #
        #    projectNodeLocal = _TreeNodeIterator.next();
        #    while(projectNodeLocal && !projectNodeFound)
        #    {
        #        if(!(projectNodeLocal.treeNodeType().isUtilElement() && projectNodeLocal.utilIdElement().name))//applObjectType())
        #            projectNodeFound = DEVCommentsTool::checkForProject(projectNodeLocal.AOTiterator(), _elementType, _elementName);
        #        else
        #        {
        #            if(projectNodeLocal.utilIdElement().recordType == _elementType && //applObjectType()    == _elementType &&
        #                projectNodeLocal.treeNodeName()      == _elementName)
        #                projectNodeFound = true;
        #        }
        #        projectNodeLocal = _TreeNodeIterator.next();
        #    }
        #    return projectNodeFound;
        #}
      ENDSOURCE
      SOURCE #getCurrent
        #static container getCurrent(boolean _isTmp = false)
        #{
        #    container c;
        #    ;
        #
        #    //c = ['DEV-345', 'PO Address from WH for Handheld Orders', 'DEV345_POAddressFromWH'];
        #    c = ['DEV-505', 'Clean out CRM Log file', 'DEV505_ClearCRMLog'];
        #
        #
        #    return c;
        #}
      ENDSOURCE
      SOURCE #isSuperUser
        #static boolean isSuperUser()
        #{
        #    //add users for comment tool here
        #    return (curuserid() == 'Eclipse'
        #        //||  curuserid() == 'Admin'
        #         );
        #}
      ENDSOURCE
      SOURCE #main
        #static void main(Args args)
        #{
        #    DEVCommentsTool     commentsTool = new DEVCommentsTool();
        #
        #    if (SysContextMenu::startedFrom(args))
        #    {
        #        commentsTool.runSysContextMenu(args.parmObject());
        #    }
        #}
      ENDSOURCE
      SOURCE #openCommentSetup
        #static void openCommentSetup()
        #{
        #    ;
        #    SysUtil::editPathLogicalPos(@'\Classes\DEVCommentsTool\getCurrent',1000,8);
        #}
      ENDSOURCE
      SOURCE #openCurProject
        #static void openCurProject()
        #{
        #    str                         projName;
        #    ProjectNode                 projectNode;
        #    ;
        #
        #    projName           = conpeek(DEVCommentsTool::getCurrent(), 3);
        #
        #    if (! projName)
        #    {
        #        return;
        #    }
        #
        #    projectNode = infolog.projectRootNode();
        #    projectNode = projectNode.AOTfirstChild();  //Private projects
        #    projectNode = projectNode.AOTnextSibling(); //Shared projects
        #
        #    projectNode = projectNode.AOTfindChild(projName);
        #
        #    if(projectNode)
        #    {
        #        projectNode = projectNode.getRunNode();
        #        projectNode.AOTnewWindow();
        #    }
        #
        #
        #}
      ENDSOURCE
      SOURCE #processCheckInForm
        #static void processCheckInForm(FormRun  _sysVersionControlCheckIn)
        #{
        #    FormStringControl           fsc;
        #    str                         projName;
        #    ;
        #
        #    if (DEVCommentsTool::isSuperUser())
        #    {
        #        projName           = conpeek(DEVCommentsTool::getCurrent(), 3);
        #
        #        fsc = _sysVersionControlCheckIn.design().controlName('Comment');
        #        if (fsc && fsc.visible())
        #        {
        #            fsc.text(projName);
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #processSaveTaskForm
        #static void processSaveTaskForm(FormRun  _sysVersionControlCheckIn)
        #{
        #    FormStringControl           fsc;
        #    str                         projName;
        #    ;
        #
        #    if (DEVCommentsTool::isSuperUser())
        #    {
        #        projName           = conpeek(DEVCommentsTool::getCurrent(), 1);
        #
        #        fsc = _sysVersionControlCheckIn.design().controlName('TaskNameEdit');
        #        if (fsc && fsc.visible())
        #        {
        #            fsc.text(strFmt('%1Testing', projName));
        #        }
        #    }
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysContextMenu unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysContextMenu
    PROPERTIES
      Name                #SysContextMenu
      RunOn               #Client
      Origin              #{2D0E03C8-0000-1000-FB09-5DBF82A26477}
      LegacyId            #968
    ENDPROPERTIES
    
    METHODS
      SOURCE #buildMenu
        #/// <summary>
        #///    Builds a pop-up menu for the specified windows handle.
        #/// </summary>
        #/// <param name="windowHdl">
        #///    The windows handle that should contain the context menu.
        #/// </param>
        #/// <param name="_parent">
        #///    The parent pop-up menu, which should contain the menu; optional.
        #/// </param>
        #/// <param name="_itemsPerColumn">
        #///    An integer value that specifies how many items per column; optional.
        #/// </param>
        #/// <param name="_maxColumns">
        #///    An integer value that specifies maximum columns; optional.
        #/// </param>
        #/// <returns>
        #///    A new instance of the <c>PopupMenu</c> class.
        #/// </returns>
        #public PopupMenu buildMenu(int windowHdl, PopupMenu _parent = null, int _itemsPerColumn = maxInt(), int _maxColumns = #defaultMaxCoulmns)
        #{
        #    TreeNode  treeNode;
        #    PopupMenu parent, submenu;
        #    ;
        #
        #    treeNode = TreeNode::findNode(#MenusPath+'\\'+menuStr(sysContextMenu));
        #
        #    if (_parent)
        #    {
        #        parent = _parent;
        #        submenu = new PopupMenu(windowHdl, parent);
        #    }
        #    else
        #    {
        #        parent = new PopupMenu(windowHdl);
        #        submenu = parent;
        #    }
        #    return this.buildSubMenu(treeNode, windowHdl, parent, submenu, _itemsPerColumn, _maxColumns);
        #}
      ENDSOURCE
      SOURCE #buildSubMenu
        #/// <summary>
        #///    Builds a pop-up menu for the specified tree node and windows handle.
        #/// </summary>
        #/// <param name="_treeNode">
        #///    The specified tree node which the pop-up menu is build from.
        #/// </param>
        #/// <param name="windowHdl">
        #///    The specified windows handle.
        #/// </param>
        #/// <param name="parent">
        #///    The parent pop-up menu, which should contain the menu.
        #/// </param>
        #/// <param name="popupMenu">
        #///    The specified popup menu which should contain the sub menu.
        #/// </param>
        #/// <param name="_itemsPerColumn">
        #///    An integer value that specifies how many items per column; optional.
        #/// </param>
        #/// <param name="_maxColumns">
        #///    An integer value that specifies maximum columns; optional.
        #/// </param>
        #/// <returns>
        #///    A new instance of <c>PopupMenu</c> class.
        #/// </returns>
        #public PopupMenu buildSubMenu(TreeNode  _treeNode,
        #                              int       windowHdl,
        #                              PopupMenu parent,
        #                              PopupMenu popupMenu,
        #                              int       _itemsPerColumn = maxInt(),
        #                              int       _maxColumns = #defaultMaxCoulmns)
        #{
        #    #AOT
        #    #define.menuBreakLength     (3)
        #
        #    TreeNode        treeNode = _treeNode.AOTfirstChild();
        #    MenuItem        menuItem;
        #    MenuReference   menuReference;
        #    PopupMenu       subPopupMenu;
        #    TreeNodePath    path;
        #    int             menuCounter;
        #    ;
        #
        #    if (!popupMenu)
        #        popupMenu = new PopupMenu(windowHdl, parent, _itemsPerColumn, _maxColumns );
        #
        #    if (this.selectionCount())
        #    {
        #        while (treeNode)
        #        {
        #            if (subStr(treeNode.treeNodeName(), 1, #menuBreakLength) == '---')
        #                popupMenu.insertBreak();
        #            else
        #            {
        #                switch (treeNode.handle())
        #                {
        #                    case classNum(Menu):
        #                        subPopupMenu = this.buildSubMenu(treeNode, windowHdl, parent, null, _itemsPerColumn, _maxColumns);
        #                        if (subPopupMenu.hits())
        #                            popupMenu.insertPopupMenu(treeNode.treeNodeName(), subPopupMenu);
        #                        break;
        #                    case classNum(MenuReference):
        #                        menuReference = treeNode;
        #                        subPopupMenu = this.buildSubMenu(TreeNode::findNode(#MenusPath).AOTfindChild(menuReference.menuName()),
        #                                                         windowHdl, parent, null, _itemsPerColumn, _maxColumns);
        #                        if (subPopupMenu.hits())
        #                            popupMenu.insertPopupMenu(treeNode.treeNodeName(), subPopupMenu);
        #                        break;
        #                    default :
        #                        menuItem = treeNode;
        #                        infolog.mayReloadMenu(false);
        #                        if (this.verifyItem(menuItem.menuItemName(), menuItem.menuItemType()) == 1)
        #                        {
        #                            menuCounter = popupMenu.insertItem(treeNode.treeNodeName());
        #                            path = treeNode.treeNodePath();
        #                            menuPaths[menuCounter] = path;
        #                        }
        #                        infolog.mayReloadMenu(true);
        #                }
        #            }
        #            treeNode = treeNode.AOTnextSibling();
        #        }
        #    }
        #    return popupMenu;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysContextMenu</c> class provides an interface to the context menu.
        #/// </summary>
        #/// <remarks>
        #///    This class is abstract.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #abstract public class SysContextMenu
        #{
        #    #AOT
        #    #TreeNodeSysNodeType
        #
        #    #define.defaultMaxCoulmns   (3)
        #    #define.elementTypeSelected (256)
        #
        #    TreeNodePath    menuPaths[];
        #    UtilElementType _firstType;
        #    boolean         aUtilElementTypeSeleced[#elementTypeSelected];
        #    boolean         anyUtilElementTypeSeleced;
        #    TreeNode        firstApplObjectNode;
        #    TreeNode        firstUtilNode;
        #    TreeNode        firstNode;
        #    int             oldMask;
        #
        #    boolean         xRefNamesExistTreeNodeTested;
        #    boolean         xRefNamesExistTreeNode;
        #    boolean         allowEdit;
        #}
      ENDSOURCE
      SOURCE #first
        #/// <summary>
        #///    Retrieves the first tree node object.
        #/// </summary>
        #/// <returns>
        #///    The first tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract TreeNode first()
        #{
        #}
      ENDSOURCE
      SOURCE #getFirstNode
        #/// <summary>
        #///    Retrieves the first tree node, but does not affect the current position.
        #/// </summary>
        #/// <returns>
        #///    The first tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method always returns the first tree node object. But this method does not affect the current
        #///    position. Therefore the fetching action of the <c>next</c> method is not disturbed. This method
        #///    offers better performance than a call to the <c>first</c> method followed by repositioning.
        #/// </remarks>
        #public TreeNode getFirstNode()
        #{
        #    return firstNode;
        #}
        #
        #
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    TreeNode utilNode;
        #    TreeNode treeNode;
        #    TreeNode applObjectNode;
        #
        #    treeNode = this.first();
        #
        #    if (treeNode && treeNode.treeNodeType().isUtilElement())
        #    {
        #        this.setFirstType(treeNode.utilElement().RecordType);
        #    }
        #
        #    while (treeNode)
        #    {
        #        if (!anyUtilElementTypeSeleced) // check if at least one appl object type has been selected, somewhere down the tree
        #        {
        #            applObjectNode = treeNode;
        #            while (applObjectNode.AOTparent()  &&
        #                   !applObjectNode.treeNodeType().isUtilElement())
        #            {
        #                applObjectNode = applObjectNode.AOTparent();
        #            }
        #
        #            if (applObjectNode.treeNodeType().isUtilElement() &&
        #                applObjectNode.utilElement().RecordType != UtilElementType::SharedProject &&
        #                applObjectNode.utilElement().RecordType != UtilElementType::PrivateProject)
        #            {
        #                utilNode = applObjectNode;
        #                applObjectNode = SysTreeNode::getRootElement(applObjectNode);
        #
        #                if (applObjectNode &&
        #                    applObjectNode.treeNodeType().isUtilElement() &&
        #                    applObjectNode.utilElement().RecordType != UtilElementType::SharedProject &&
        #                    applObjectNode.utilElement().RecordType != UtilElementType::PrivateProject)
        #                {
        #                    anyUtilElementTypeSeleced = true;
        #                }
        #            }
        #        }
        #
        #        if (!firstNode && treeNode)
        #        {
        #            firstNode = treeNode;
        #            firstUtilNode = utilNode;
        #            firstApplObjectNode = applObjectNode;
        #            if (firstNode.treeNodeType().isLayerAware())
        #            {
        #                oldMask = firstNode.applObjectOldLayerMask();
        #            }
        #        }
        #
        #        allowEdit = versioncontrol.allowEdit(firstApplObjectNode);
        #
        #        if (treeNode.treeNodeType().id() == #NT_DBTABLE) // condition could be extended to other types that should be look'ed for
        #        {
        #            aUtilElementTypeSeleced[treeNode.utilElement().RecordType + 1] = true;
        #            break;
        #        }
        #        treeNode = this.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #next
        #/// <summary>
        #///    Retrieves the next tree node object.
        #/// </summary>
        #/// <returns>
        #///    The next tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract TreeNode next()
        #{
        #}
      ENDSOURCE
      SOURCE #runMenu
        #/// <summary>
        #///    Runs the specified context menu.
        #/// </summary>
        #/// <param name="popupMenuChoice">
        #///    The item to select in the context menu.
        #/// </param>
        #/// <param name="_sysContextMenu">
        #///    The context menu to run.
        #/// </param>
        #/// <param name="_caller">
        #///    An object that is used to set the caller of the command; optional.
        #/// </param>
        #/// <param name="_record">
        #///    A buffer to a record; optional.
        #/// </param>
        #/// <returns>
        #///    true, if the menu function is run; otherwise false.
        #/// </returns>
        #/// <remarks>
        #///    false is returned if the specified <paramref name="popupMenuChoice" /> is less than one, or it is
        #///    not in the menu.
        #/// </remarks>
        #public boolean runMenu(int popupMenuChoice, SysContextMenu _sysContextMenu, Object _caller = this, Common _record = null)
        #{
        #    MenuItem     menuItem;
        #    MenuFunction menuFunction;
        #    Args         args = new Args();
        #
        #    if (popupMenuChoice < 1 || !menuPaths[popupMenuChoice])
        #        return false;
        #
        #    menuItem = TreeNode::findNode(menuPaths[popupMenuChoice]);
        #    menuFunction = new MenuFunction(menuItem.menuItemName(), menuItem.menuItemType());
        #
        #    args.parmObject(_sysContextMenu);
        #    args.caller(_caller);
        #    args.record(_record);
        #
        #    menuFunction.run(args);
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #selectionCount
        #/// <summary>
        #///    Retrieves the number of items selected in the context menu.
        #/// </summary>
        #/// <returns>
        #///    The count of selected items in the context menu.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract int selectionCount()
        #{
        #}
      ENDSOURCE
      SOURCE #setFirstType
        #/// <summary>
        #///    Sets the first <c>UtilElementType</c> value in the context menu.
        #/// </summary>
        #/// <param name="t">
        #///    The <c>UtilElementType</c> value to set as first.
        #/// </param>
        #public void setFirstType(UtilElementType t)
        #{
        #;
        #    _firstType = t;
        #}
      ENDSOURCE
      SOURCE #verifyDatasource
        #/// <summary>
        #///    Verifies that the first node in the context menu is among the set of the valid types.
        #/// </summary>
        #/// <returns>
        #///    1 if the first node is among the valid node types; otherwise 0.
        #/// </returns>
        #/// <remarks>
        #///    This method verifies that the first node in the context menu is one of the following types:
        #///    <list type="bullet">
        #///       <item>
        #///          <description>Form data source</description>
        #///       </item>
        #///       <item>
        #///          <description>Query data source</description>
        #///       </item>
        #///       <item>
        #///          <description>System table</description>
        #///       </item>
        #///       <item>
        #///          <description>Table collection</description>
        #///       </item>
        #///    </list>
        #/// </remarks>
        #protected int verifyDatasource()
        #{
        #    #TreeNodeSysNodeType
        #
        #    if ( firstNode.treeNodeType().id() == #SysNodeTypeFormDatasource ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeQueryDatasource ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeSystemTable ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeTableCollection)
        #    {
        #        return 1;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #verifyItem
        #/// <summary>
        #///    Verifies that the command can be displayed in the context menu.
        #/// </summary>
        #/// <param name="menuItemName">
        #///    The name of the command.
        #/// </param>
        #/// <param name="menuItemType">
        #///    The type of the command.
        #/// </param>
        #/// <returns>
        #///    1 if the command can be displayed; otherwise 0.
        #/// </returns>
        #public int verifyItem(identifierName menuItemName, MenuItemType menuItemType)
        #{
        #    #resAppl
        #    #define.pathProjects('<\\\\Projects\\\\')
        #    #define.pathMethods('\\\\Methods>')
        #
        #    boolean         docNode;
        #    UtilEntryLevel  utilEntryLevel;
        #    ClassNode       classNode;
        #    TreeNode        parentNode;
        #    SysTestable     testable;
        #    ListEnumerator  listEnumerator;
        #    int firstNodeTypeId;
        #
        #    if (!firstNode ||
        #        !this.selectionCount())
        #    {
        #        return 0;
        #    }
        #
        #    if (strStartsWith(firstNode.treeNodePath(), #SystemDocPath))
        #    {
        #        docNode = true;
        #    }
        #
        #    firstNodeTypeId = firstNode.treeNodeType().id();
        #
        #    switch (menuItemType)
        #    {
        #
        #        case MenuItemType::Display:
        #            switch (menuItemName)
        #            {
        #                                 // Security Debug Tool:
        #                // Only show SecObjectsInRole on role nodes under /security/roles
        #                //
        #                case menuitemDisplayStr(SysSecObjectsInRole):
        #                    if ( this.selectionCount() == 1 )
        #                    {
        #                        if (
        #                         _firstType == UtilElementType::SecRole
        #                         ||
        #                         _firstType == UtilElementType::SecDuty
        #                         ||
        #                         _firstType == UtilElementType::SecPrivilege
        #                         ||
        #                         _firstType == UtilElementType::ActionTool
        #                         ||
        #                         _firstType == UtilElementType::DisplayTool
        #                         ||
        #                         _firstType == UtilElementType::OutputTool
        #                         ||
        #                         _firstType == UtilElementType::WebUrlItem
        #                         ||
        #                         _firstType == UtilElementType::WebActionItem
        #                         ||
        #                         _firstType == UtilElementType::WebManagedContentItem
        #                         ||
        #                         firstNodeTypeId == #NT_OPERATION
        #                         )
        #                        {
        #                            return 1;
        #                        }
        #                    }
        #                    return 0;
        #                //
        #                // Security Debug Tool:
        #                // Only show SecObjectsAnalyze on role nodes under
        #                //
        #                case menuitemDisplayStr(SysSecObjectsAnalyze):
        #                    if ( this.selectionCount() == 1 )
        #                    {
        #                        if (
        #                         _firstType == UtilElementType::ActionTool
        #                         ||
        #                         _firstType == UtilElementType::DisplayTool
        #                         ||
        #                         _firstType == UtilElementType::OutputTool
        #                         ||
        #                         _firstType == UtilElementType::Form
        #                         ||
        #                         _firstType == UtilElementType::WebUrlItem
        #                         ||
        #                         _firstType == UtilElementType::WebActionItem
        #                         ||
        #                         _firstType == UtilElementType::WebManagedContentItem
        #                         ||
        #                         _firstType == UtilElementType::SecDuty
        #                         ||
        #                         _firstType == UtilElementType::SecPrivilege
        #                         ||
        #                         _firstType == UtilElementType::Table
        #                         ||
        #                         _firstType == UtilElementType::InfoPart
        #                         ||
        #                         _firstType == UtilElementType::Report
        #                         ||
        #                         _firstType == UtilElementType::WebControl
        #                         ||
        #                         _firstType == UtilElementType::SecCodePermission
        #                         ||
        #                         firstNodeTypeId == #NT_DBVIEW
        #                         ||
        #                         firstNodeTypeId == #NT_OPERATION
        #                         ||
        #                         firstNodeTypeId == #NT_SSRSREPORTDESIGN
        #                        )
        #                        {
        #                            return 1;
        #                        }
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Xref Analyzer' menu item when the Analyzer form is present
        #                //
        #
        #                case menuitemDisplayStr(SysSecAnalysisAddIn):
        #                    if (this.selectionCount() == 1 &&
        #                        TreeNode::findNode(@'\Forms\SysSecAnalysis') != null)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Metadata Analyzer' menu item when the Analyzer form is present
        #                //
        #                case menuitemDisplayStr(SysSecAnalysisAddInMetadataAnalyzer):
        #                    if (this.selectionCount() == 1                          &&
        #                        (_firstType==UtilElementType::Form                  ||
        #                         _firstType==UtilElementType::DisplayTool           ||
        #                         _firstType==UtilElementType::OutputTool            ||
        #                         _firstType==UtilElementType::ActionTool            ||
        #                         _firstType==UtilElementType::WebActionItem         ||
        #                         _firstType==UtilElementType::WebUrlItem            ||
        #                         _firstType==UtilElementType::WebDisplayContentItem ||
        #                         _firstType==UtilElementType::WebManagedContentItem ||
        #                         _firstType==UtilElementType::WebOutputContentItem) &&
        #                        TreeNode::findNode(@'\Forms\SysSecAnalysisMetadataAnalyzer') != null)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Reverse Engineer'menu item
        #                // on projects and perspective as we only want to reverse
        #                // engineer project elements
        #                //
        #                case menuitemDisplayStr( SysVisioAddIn ):
        #                    if ( firstNode.handle() == classNum(ProjectNode) &&     // launch from project node
        #                         match(#pathProjects,firstNode.treeNodePath()))
        #                    {
        #                        return 1;
        #                    }
        #
        #                    if (firstNode.treeNodeType().id() == #NT_PERSPECTIVE)    // launch from perspective node
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefReferencesUsedBy):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefNames::existTreeNodeAnyLayer(this.first()))
        #                        // xRefNames::existTreeNode(this.first(),true))     //only show Used By, if there are anything to show
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefReferencesUsing):
        #                    if (this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefPaths::find(SysTreeNode::getPath(this.first())))       // only show Using, if anything are used
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefNames):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefNames::existTreeNode(this.first(),false))       // only show Names, if there are anything to show
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysTypeHierarchyBrowser):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                                //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (SysTypeHierarchy::treenode2Type(firstNode, firstApplObjectNode))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysTableBrowser):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                               //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (!docNode &&
        #                        _firstType==UtilElementType::Table)
        #                    {
        #                        return 1;
        #                    }
        #                    return this.verifyDatasource();
        #
        #                case menuitemDisplayStr(SysTableForm):
        #                    if (aUtilElementTypeSeleced[UtilElementType::Table + 1] &&
        #                        !firstNode.AOTIsOld()                               //Does not work for old nodes
        #                        )
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysDictIndexShowDuplicates):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                               //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (_firstType==UtilElementType::TableIndex)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(AxdWizard):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Query)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardApproval):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowApprovalTasksPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardTask):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowTasksPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardType):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowTypesPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #                case menuitemDisplayStr(SysBPStyleCheckAnalysis):
        #                    if ((this.selectionCount() == 1) && (_firstType == UtilElementType::Form))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #                case menuitemDisplayStr(SysLcsIssueSearchAotItem):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodeType().isRootElement()))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #            }
        #            break;
        #
        #        case MenuItemType::Output:
        #            switch (menuItemName)
        #            {
        #                case menuitemOutputStr( SysXmlDocumentationCreateFile ):
        #                    if ( firstNode.handle() == classNum(ProjectNode) &&     // Only launch from project node
        #                         match(#pathProjects,firstNode.treeNodePath()))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #            }
        #            break;
        #
        #        case MenuItemType::Action:
        #            switch (menuItemName)
        #            {
        #                case menuitemActionStr(SysUpgradeProjectMarkAsResolved):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Resolved);
        #                case menuitemActionStr(SysUpgradeProjectMarkAsUnresolved):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Unresolved);
        #
        #                case menuitemActionStr(SysUpgradeProjectMarkAsResolvedRecursive):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Resolved);
        #                case menuitemActionStr(SysUpgradeProjectMarkAsUnresolvedRecursi):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Unresolved);
        #
        #                case menuitemActionStr(SysUpgradeDetectConflictsRerun):
        #                    return SysUpgradeDetectConflicts::canDetectConflictsRerun(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleAutoResolve):
        #                    return SysUpgradeConflictCodeRuleAutoResolve::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleRevertResolve):
        #                    return SysUpgradeConflictCodeRuleRevertResolve::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleCompareUpgrade):
        #                    return SysUpgradeConflictCodeRuleCompareUpgrade::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleCompareOrigina):
        #                    return SysUpgradeConflictCodeRuleCompareOrigina::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(xRefUpdate):
        #                    if (!firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysVersionControlCheckOut):
        #                    if (versioncontrol &&
        #                        versioncontrol.parmSysVersionControlSystem() &&
        #                        this.selectionCount() == 1 && firstApplObjectNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        !allowEdit)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysVersionControlUndoCheckOut):
        #                    if (versioncontrol &&
        #                        versioncontrol.parmSysVersionControlSystem() &&
        #                        this.selectionCount() == 1 && firstApplObjectNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        allowEdit)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(xRefUpdateTmpReferences):
        #                    if (!docNode &&
        #                        //this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld())                            //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysSourceReplaceSyntax):
        #                    if (!docNode &&
        #                        firstUtilNode &&
        #                        allowEdit &&
        #                        !firstNode.AOTIsOld())                             //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysImpactAnalysis):
        #                    if (!docNode &&
        #                        firstNode.treeNodeType().isRootElement() &&
        #                        !firstNode.AOTIsOld())                               //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysSourceNameWash):
        #                    if (!docNode &&
        #                        firstUtilNode &&
        #                        allowEdit &&
        #                        !firstNode.AOTIsOld() &&
        #                        (_firstType &&
        #                          (_firstType == UtilElementType::Table                 ||
        #                           _firstType == UtilElementType::TableInstanceMethod   ||
        #                           _firstType == UtilElementType::TableStaticMethod     ||
        #                           _firstType == UtilElementType::Macro                 ||
        #                           _firstType == UtilElementType::Class                 ||
        #                           _firstType == UtilElementType::ClassInstanceMethod   ||
        #                           _firstType == UtilElementType::ClassStaticMethod     ||
        #                           _firstType == UtilElementType::Form                  ||
        #                           _firstType == UtilElementType::Report                ||
        #                           _firstType == UtilElementType::ReportTemplate        ||
        #                           _firstType == UtilElementType::ReportSectionTemplate ||
        #                           _firstType == UtilElementType::Query                 ||
        #                           _firstType == UtilElementType::Job                   ||
        #                           _firstType == UtilElementType::WebForm)))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysBPCheck):
        #                    if  (_firstType &&_firstType == UtilElementType::Job)
        #                    {
        #                        return 0;
        #                    }
        #                    if (firstNode.AOTIsOld())
        #                    {
        #                        return 0;
        #                    }
        #                    if (docNode)
        #                    {
        #                        return 0;
        #                    }
        #                    return 1;
        #
        #                case menuitemActionStr(SysSourceReplaceText):
        #                    if (!docNode &&
        #                        allowEdit &&
        #                        this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld())                            //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysCompare):
        #                    if (_firstType == UtilElementType::PrivateProject       ||
        #                        _firstType == UtilElementType::SharedProject)
        #                    {
        #                        return 0;
        #                    }
        #                    if (this.selectionCount() == 2)
        #                    {
        #                        return 1;
        #                    }
        #                    if (this.selectionCount() == 1)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysCompileForward):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld()      &&                         //Does not work for old nodes
        #                        _firstType==UtilElementType::Class)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysTreenodeCopyToCurrentLayer):
        #                    if (firstNode && firstNode.AOTIsOld() && firstNode.treeNodeType().isRootElement())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysTreeNodeApplObjectOpenNewWindow):
        #                    if (!docNode &&
        #                        anyUtilElementTypeSeleced &&
        #                        !firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysTreeNodeOpenNewWindow),
        #                     menuitemActionStr(SysTreeNodeShowProperties):
        #
        #                    if (docNode ||
        #                        firstNode.treeNodeType().id() == 27 ||    //Project nodes
        #                        firstNode.treeNodeType().id() == 29 ||
        #                        firstNode.treeNodeType().id() == 30 ||
        #                        firstNode.treeNodeType().id() == 31 )
        #                    {
        #                        return 0;
        #                    }
        #                    return 1;                                              //also for old
        #
        #                case menuitemActionStr(SysTreeNodeParentOpenNewWindow):
        #                    if (docNode ||
        #                        firstNode.treeNodeType().id() == 27 ||    //Project nodes
        #                        firstNode.treeNodeType().id() == 29 ||
        #                        firstNode.treeNodeType().id() == 30 ||
        #                        firstNode.treeNodeType().id() == 31 )
        #                    {
        #                        return 0;
        #                    }
        #                    if (!firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                // Open using in window
        #                case menuitemActionStr(SysOpenNewWindowTable):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowTable::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowExtendedType):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowExtendedType::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowEnum):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowEnum::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowSecurityKey):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowSecurityKey::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowConfigurationKey):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowConfigurationKey::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowClass):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowClass::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowForm):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowForm::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowReport):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowReport::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowMenuItem):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowMenuItem::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowFieldGroup):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowFieldGroup::verifyItem(this);
        #
        #                // old layer
        #                case menuitemActionStr(sysOpenOldSys):
        #                case menuitemActionStr(sysOpenOldSyp):
        #                case menuitemActionStr(sysOpenOldGls):
        #                case menuitemActionStr(sysOpenOldGlp):
        #                case menuitemActionStr(sysOpenOldFpk):
        #                case menuitemActionStr(sysOpenOldFpp):
        #                case menuitemActionStr(sysOpenOldSln):
        #                case menuitemActionStr(sysOpenOldSlp):
        #                case menuitemActionStr(sysOpenOldIsv):
        #                case menuitemActionStr(sysOpenOldIsp):
        #                case menuitemActionStr(sysOpenOldVar):
        #                case menuitemActionStr(sysOpenOldVap):
        #                case menuitemActionStr(sysOpenOldCus):
        #                case menuitemActionStr(sysOpenOldCup):
        #                case menuitemActionStr(sysOpenOldUsr):
        #                case menuitemActionStr(sysOpenOldUsp):
        #                    utilEntryLevel = str2enum(utilEntryLevel, subStr(menuItemName, strLen(menuItemName)-2, 3));
        #                    if (this.selectionCount() == 1 &&
        #                        oldMask & (1 << utilEntryLevel))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                // Test jobs
        #                case menuitemActionStr(SysTestToolbarOpen):
        #                    if (this.selectionCount() == 1)
        #                    {
        #                        switch (firstNode.handle())
        #                        {
        #                            case classNum(ProjectNode):
        #                            case classNum(ProjectGroupNode):
        #                                return 1;
        #
        #                            case classNum(ClassNode):
        #                                classNode = firstNode;
        #                                if (classNode &&
        #                                    (SysTestProject::implementsSysTestable(classNode.iD()) ||
        #                                     SysDictClass::isSuperclass(classNode.iD(), classNum(SysTestSuite))))
        #
        #                                {
        #                                    return 1;
        #                                }
        #                                return 0;
        #
        #                            case classNum(MemberFunction):
        #                                parentNode = firstNode.AOTparent();
        #                                if (parentNode &&
        #                                    (parentNode.handle() == classNum(ClassNode) || parentNode is ClassNode) &&
        #                                    SysTestProject::implementsSysTestable(parentNode.applObjectId()))
        #                                {
        #                                    testable = classfactory.createClass(parentNode.applObjectId(), false) as SysTestable;
        #                                    if (testable)
        #                                    {
        #                                        listEnumerator = testable.testMethods().getEnumerator();
        #                                        while (listEnumerator.moveNext())
        #                                        {
        #                                            if (listEnumerator.current() == firstNode.treeNodeName())
        #                                                return 1;
        #                                        }
        #                                    }
        #                                }
        #                                return 0;
        #                        }
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(AxdGenerateAxdQuery):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Form     ||
        #                       _firstType == UtilElementType::Report   ||
        #                       _firstType == UtilElementType::WebForm )
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(AifRegisterService):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Service)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysXppILIncrementalBuild):
        #                case menuitemActionStr(SysXppILFullBuild):
        #                    // enable for AOT root node only
        #                    return firstNode.treeNodeType().id() == 1;
        #                case menuitemActionStr(SysSecSecurityApply):
        #                    return SysSecHelper::showApplyChangesContextMenu(firstNode);
        #            }
        #    }
        #//    infolog.mayReloadMenu(true);
        #
        #    if (firstNode.AOTIsOld())
        #        return 0;
        #    return 1;
        #}
        #
      ENDSOURCE
      SOURCE #startedFrom
        #/// <summary>
        #///    Appends a <c>SysContextMenu</c> object to the input <paramref name="_menuFunctionArgs" />
        #///    parameter, unless one is already present.
        #/// </summary>
        #/// <param name="_menuFunctionArgs">
        #///    An instance of the <c>Args</c> class.
        #/// </param>
        #/// <returns>
        #///    true, if the context menu is started from a <c>SysContextMenu</c> (or a descendant class);
        #///    otherwise false.
        #/// </returns>
        #/// <remarks>
        #///    This method inquires whether the input _<paramref name="menuFunctionArgs" /> has an argument named
        #///    <c>parmObject</c>.
        #///    If it does have a <c>parmObject</c>, true is returned if the object referenced
        #///    by <c>parmObject</c> is of type <c>SysContextMenu</c> (or a descendant class).
        #///    If it does not have
        #///    a <c>parmObject</c>, this method appends <c>parmObject</c> with a <c>SysContextMenu</c> object, and
        #///    true is returned.
        #/// </remarks>
        #public static boolean startedFrom(Args _menuFunctionArgs)
        #{
        #    SysContextMenu sysContextMenu;
        #    classId cid1, cid2;
        #
        #    if (!_menuFunctionArgs)
        #        return false;
        #
        #    if (_menuFunctionArgs.parmObject())
        #    {
        #        cid1 = classIdGet(_menuFunctionArgs.parmObject());
        #        cid2 = classIdGet(sysContextMenu);
        #
        #        if (SysDictClass::isEqualOrSuperclass(cid1,cid2))
        #            return true;
        #    }
        #
        #    if (match('sysContextMenu>',_menuFunctionArgs.parm()))
        #    {
        #        sysContextMenu = new SysContextMenuAOT();
        #        _menuFunctionArgs.parmObject(sysContextMenu);
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #xRefReferencesUsedByTypedTree
  PROPERTIES
    Name                #xRefReferencesUsedByTypedTree
    Origin              #{74487556-6372-4ED8-9CF1-7264FAAFEB74}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #/*
      #    A tree control shows the other methods the method override or are overridden by, explicit as implicit.
      #    User can navigate this tree to see other potential calls to the method.
      #*/
      #final class FormRun extends ObjectRun
      #{
      #    TreeNode  treeNode;
      #
      #    SysFormSplitter_X formSplitter;
      #    SysTypeHierarchy  hierarchy;
      #}
    ENDSOURCE
    SOURCE #init
      #/*
      #    This form shows where the supplied type oriented application object are used; who it is "Used by"
      #    The supplied application object can be
      #    * a treeNode
      #    * an external xRefNames buffer
      #    * an external xRefPaths buffer
      #    * an external UtilElements buffer
      #*/
      #void init()
      #{
      #    QueryBuildDataSource xRefReferencesQueryBuildDataSource;
      #    xRefPaths            elementArgsXRefPaths;
      #
      #    startLengthyOperation();
      #
      #    if (SysContextMenu::startedFrom(element.args()))   // started from SysContextMenu
      #    {
      #        if (element.args().dataset() != tablenum(xRefPaths) &&
      #            element.args().dataset() != tablenum(xRefNames))
      #        {
      #            treeNode = element.args().parmObject().first();
      #            element.args().record(xRefPaths::find(treeNode.treeNodePath()));
      #        }
      #    }
      #    else    // started with a button (or from a menu!)
      #    if (element.args().dataset() == tablenum(UtilElements))
      #    {
      #        treeNode = xUtilElements::getNodeInTree(element.args().record());
      #        element.args().record(xRefPaths::find(treeNode.treeNodePath()));
      #    }
      #
      #    super();
      #
      #    formSplitter = new SysFormSplitter_X(split, treeGroup);
      #    element.lock();
      #
      #    // if started with a xRefPaths, then relate to the referencePathRecId
      #    if (element.args().dataset() == tablenum(xRefPaths))
      #    {
      #        xRefReferencesQueryBuildDataSource = xRefReferences_ds.query().dataSourceNo(1); // Name(tablestr(xRefReferences)
      #        xRefReferencesQueryBuildDataSource.clearDynalinks();
      #        xRefReferencesQueryBuildDataSource.addDynalink(fieldnum(xRefReferences,ReferencePathRecId),
      #                                                  element.args().record(),
      #                                                  fieldnum(xRefPaths,RecId));
      #
      #        nameButton.enabled(true);
      #        if (!treeNode)
      #        {
      #            elementArgsXRefPaths = element.args().record();
      #            treeNode = elementArgsXRefPaths.treeNode();
      #        }
      #    }
      #    if (element.args().dataset() == tablenum(xRefNames))
      #    {
      #        nameButton.enabled(false);
      #    }
      #
      #    // if it is a type based entry show the variable name declared for the types
      #    if (treeNode && SysTreeNode::isType(treeNode))
      #    {
      #        xRefNames_nameGrid.visible(true);
      #    }
      #    else
      #    {
      #        xRefNames_nameGrid.visible(false);
      #    }
      #
      #    element.resetSize();
      #    element.unLock();
      #}
    ENDSOURCE
    SOURCE #run
      #void run()
      #{
      #    #TreeNodeSysNodeType
      #
      #    if (treeNode &&
      #        ((treeNode.treeNodeType().isUtilElement() && treeNode.utilElement().RecordType == UtilElementType::ClassInstanceMethod) ||
      #         (treeNode.TreeNodeType().id() == #NT_KERNELDOCFUNCTIONNODE && !strContains(treeNode.AOTtoolTip(), 'static '))))     //  instance system class method
      #    {
      #        tree.linesAtRoot(true);
      #        hierarchy = SysTypeHierarchy::newFormTreeControl(tree);
      #        infolog.globalCache().set(formstr(xRefReferencesUsedByTypedTree), 0, new ObjectIdent(this));
      #        hierarchy.onItemCreated += eventHandler(xRefUpdate::setIcon);
      #        this.setupSimpleChart();
      #    }
      #    else
      #    {   //Hides application heirarchy tree when node is not of correct type to display tree for.
      #        treeGroup.width(0);
      #        split.enabled(false);
      #    }
      #
      #    super();
      #}
    ENDSOURCE
    SOURCE #setIcon
      #void setIcon(FormTreeItem _item)
      #{
      #    SysTypeHierarchyProvider provider = SysTypeHierarchyProviderGeneric::newName(_item.text());
      #    SysDictClass dictClass = provider as SysDictClass;
      #    xRefNames    xRefNamesCaller;
      #    xRefReferences xRefReferencesCaller;
      #    int image;
      #    #resource
      #
      #    if (dictClass)
      #    {
      #        select firstonly TypeName, Name, Kind, RecId from xRefNamesCaller
      #            where xRefNamesCaller.TypeName == dictClass.name() &&
      #                  xRefNamesCaller.Name     == treeNode.treeNodeName() &&
      #                  xRefNamesCaller.Kind     == xRefKind::ClassInstanceMethod
      #        join xRefNameRecId, Reference from xRefReferencesCaller
      #            where xRefReferencesCaller.xRefNameRecId == xRefNamesCaller.RecId &&
      #                  xRefReferencesCaller.Reference == XRefReference::Call;
      #    }
      #
      #    if (xRefNamesCaller)
      #    {
      #        image = dictClass && TreeNode::findNode(dictClass.path()+'\\'+treeNode.treeNodeName()) ?
      #                #RES_NODE_INHSYS_OK :
      #                #RES_NODE_INHSYS_NULL;
      #
      #    }
      #    else
      #    {
      #        image = dictClass && TreeNode::findNode(dictClass.path()+'\\'+treeNode.treeNodeName()) ?
      #                #RES_NODE_TRIGGER_NOTEMPTY :
      #                #RES_NODE_TRIGGER_EMPTY;
      #    }
      #
      #
      #    if (image)
      #    {
      #        _item.image(hierarchy.parmImageList().image(image));
      #        _item.selectedImage(_item.image());
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #setupSimpleChart
      #void setupSimpleChart()
      #{
      #    //We only get here for class methods. The parent is always the class
      #    TreeNode applObjectTreeNode = treeNode.AOTparent();
      #
      #    if (applObjectTreeNode)
      #    {
      #        hierarchy.populateFromTreenode(applObjectTreeNode);
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #XRefReferences
          Table               #xRefReferences
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #xRefPaths
          Table               #xRefPaths
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #XRefReferences
          LinkType            #InnerJoin
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #xRefNames
          Table               #xRefNames
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #XRefReferences
          LinkType            #InnerJoin
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
    xRefPaths XRefReferences
    xRefNames XRefReferences
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS27530
      WindowResize        #Dynamic
      WindowType          #Workspace
      SetCompany          #No
      DataSource          #XRefReferences
      ArrangeWhen         #Auto
      HideIfEmpty         #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1879048190
          HierarchyParent     #ThisCalled
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1252698792
          HierarchyParent     #ThisCalled
          DataSource          #XRefReferences
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDblClick
            #public int mouseDblClick(int _x, int _y, int _button, boolean _Ctrl, boolean _Shift)
            #{
            #    int ret = super(_x, _y, _button, _ctrl, _shift);
            #    ;
            #    editButton.clicked();
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #NameRegister
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #715827882
          FrameType           #None
          FramePosition       #Center
          DataSource          #XRefReferences
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #References
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          FrameType           #None
          Columns             #3
          Columnspace         #0
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Split
          AutoDeclaration     #Yes
          Width               #4
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #References
          FrameType           #None
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    return formSplitter.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return formSplitter.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    return formSplitter.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ThisCalled
          Width               #Column width
          Height              #Column height
          ElementPosition     #1879048190
          HierarchyParent     #References
          FrameType           #None
          DataSource          #XRefReferences
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TreeGroup
          AutoDeclaration     #Yes
          Width               #200
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #References
          FrameType           #None
          Caption             #@SYS26859
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #MorphXtools
          HelpText            #@SYS68574
          ElementPosition     #1879048190
          HierarchyParent     #ButtonGroup
          Text                #@SYS28637
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysContextMenu toolsMenu;
            #    PopupMenu popupMenu;
            #    int x,y;
            #
            #    toolsMenu = new SysContextMenuxRefReferences(xRefReferences);
            #
            #    popupMenu = toolsMenu.buildMenu(this.hWnd());
            #    [x,y] = WinAPI::clientToScreen(this.hWnd(),this.widthValue(),0);
            #    toolsMenu.runMenu(popupMenu.draw(x,y),toolsMenu,element,xRefReferences);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #dummy
          HelpText            #@SYS28637
          ElementPosition     #1073741823
          HierarchyParent     #MorphXtools
          Text                #@SYS68574
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #EditButton
          AutoDeclaration     #Yes
          HelpText            #@SYS1300
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          Text                #@SYS16569
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    xRefReferences xRefReferencesEdit;
            #
            #    for (xRefReferencesEdit = getFirstSelection(xRefReferences_ds);
            #         xRefReferencesEdit;
            #         xRefReferencesEdit = xRefReferences_ds.getNext())
            #    {
            #        SysUtil::editPathLogicalPos(xRefReferencesEdit.path(),xRefReferencesEdit.Line,xRefReferencesEdit.Column);
            #    }
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SDSinCurrentLayer
          ElementPosition     #2102744403
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          Label               #inCurrentLayer
          DataSource          #XRefReferences
          DataMethod          #SDSinCurrentLayer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #xRefNames_kind
          Skip                #Yes
          ElementPosition     #1073741823
          HierarchyParent     #NameRegister
          LabelPosition       #Above
          DataSource          #xRefNames
          DataField           #kind
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #xRefReferences_Reference
          ElementPosition     #1073741823
          HierarchyParent     #Grid
          DataSource          #XRefReferences
          DataField           #Reference
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #XRefReferences_Column
          ElementPosition     #2013265918
          HierarchyParent     #Grid
          DataSource          #XRefReferences
          DataField           #Column
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #XRefReferences_Line
          ElementPosition     #1879048190
          HierarchyParent     #Grid
          DataSource          #XRefReferences
          DataField           #line
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #NameButton
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          MenuItemName        #XRefNames
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #TreeLabel
          VerticalSpacing     #0
          ElementPosition     #1073741823
          HierarchyParent     #TreeGroup
          Text                #@SYS26859
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CIT_getSourceLine
          AllowEdit           #No
          ElementPosition     #2125114024
          HierarchyParent     #Grid
          DataSource          #XRefReferences
          DataMethod          #SDSgetSourceLine
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDblClick
            #//CIT000, DEV-CIT-0002, Утилиты разработки, 30.09.2009, kirp
            #int mouseDblClick(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret = super(x, y, button, ctrl, shift);
            #    ;
            #    editButton.clicked();
            #    return ret;
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #xRefNames_name
          Skip                #Yes
          ElementPosition     #1610612734
          HierarchyParent     #NameRegister
          LabelPosition       #Above
          DataSource          #xRefNames
          DataField           #name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #xRefNames_nameGrid
          AutoDeclaration     #Yes
          ElementPosition     #2080374782
          HierarchyParent     #Grid
          DataSource          #xRefNames
          DataField           #name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #xRefNames_typeName
          Skip                #Yes
          ElementPosition     #1879048190
          HierarchyParent     #NameRegister
          LabelPosition       #Above
          DataSource          #xRefNames
          DataField           #typeName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #xRefPaths_Path
          ElementPosition     #1610612734
          HierarchyParent     #Grid
          DataSource          #xRefPaths
          DataField           #Path
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDblClick
            #int mouseDblClick(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret = super(x, y, button, ctrl, shift);
            #
            #    editButton.clicked();
            #    return ret;
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #Tree
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS67740
          ElementPosition     #1610612734
          HierarchyParent     #TreeGroup
          LinesAtRoot         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #expanding
            #public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
            #{
            #    if (_action==FormTreeExpand::Expand)
            #    {
            #        hierarchy.treeExpanding(_idx);
            #    }
            #    return false;
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
            #{
            #    xRefPaths xRefPathsNew;
            #    xRefNames xRefNamesNew;
            #    QueryBuildDataSource xRefReferencesQueryBuildDataSource;
            #
            #    super(_oldItem, _newItem, _how);
            #
            #    xRefNamesNew = xRefNames::find(xRefKind::ClassInstanceMethod, tree.getItem(tree.getSelection()).text(), treeNode.treeNodeName());
            #
            #    if (!xRefPathsNew)
            #        xRefPathsNew.RecId = -1;    // no relations are to be shown (just hope none records have recid = -1!)
            #
            #    xRefReferencesQueryBuildDataSource = xRefReferences_q.dataSourceNo(1);
            #    xRefReferencesQueryBuildDataSource.clearDynalinks();
            #    xRefReferencesQueryBuildDataSource.addDynalink(fieldnum(xRefReferences,xRefNameRecId),
            #                                                       xRefNamesNew,
            #                                                       fieldnum(xRefNames,RecId));
            #
            #    xRefReferences_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: MNU

; Microsoft Dynamics AX Menu : SysContextMenu unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #SysContextMenu
    PROPERTIES
      Name                #SysContextMenu
      Label               #@SYS28637
      SecurityKey         #SysDevelopment
      Origin              #{100E0000-0000-1000-FB09-5DBF82A26477}
    ENDPROPERTIES
    
    MENUITEM
      PROPERTIES
        Name                #Add to project
        MenuItemType        #Action
        MenuItemName        #DEVCommentsTool
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare new
        MenuItemType        #Action
        MenuItemName        #DEVsysCompareNew
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare old
        MenuItemType        #Action
        MenuItemName        #DEVsysCompareOld
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare existing code to proposed fix
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleCompareUpgrade
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Auto-resolve source code rule conflict
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleAutoResolve
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare altered code to original code
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleCompareOrigina
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Revert auto-resolve source code rule conflict
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleRevertResolve
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as resolved
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsResolved
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as unresolved
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsUnresolved
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as resolved (including subnodes)
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsResolvedRecursive
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as unresolved (including subnodes)
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsUnresolvedRecursi
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Rerun conflict detection
        MenuItemType        #Action
        MenuItemName        #SysUpgradeDetectConflictsRerun
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENU #@SYS24666
      PROPERTIES
        Name                #MenuxRef
        Label               #@SYS24666
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Used by
          MenuItemName        #XRefReferencesUsedBy
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Using (instant view)
          MenuItemType        #Action
          MenuItemName        #xRefUpdateTmpReferences
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Names
          MenuItemName        #XRefNames
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Using
          MenuItemName        #XRefReferencesUsing
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Update
          MenuItemType        #Action
          MenuItemName        #xRefUpdate
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Check model
          MenuItemType        #Action
          MenuItemName        #DEV_checkModel
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENU #@SYS310448
      PROPERTIES
        Name                #SecTools
        Label               #@SYS310448
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #XRef analyzer
          MenuItemName        #syssecanalysisaddIn
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Metadata analyzer
          MenuItemName        #syssecanalysisaddInmetadataAnalyzer
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #View related security roles
          MenuItemName        #SysSecObjectsAnalyze
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #View related security objects
          MenuItemName        #SysSecObjectsInRole
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Apply changes
          MenuItemType        #Action
          MenuItemName        #SysSecSecurityApply
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Table browser
        MenuItemName        #sysTableBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Auto-report
        MenuItemName        #SysTableForm
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Reverse engineer
        MenuItemName        #SysVisioAddIn
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Extract XML documentation
        MenuItemType        #Output
        MenuItemName        #SysXmlDocumentationCreateFile
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Run tests
        MenuItemType        #Action
        MenuItemName        #SysTestToolbarOpen
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Type hierarchy browser
        MenuItemName        #SysTypeHierarchyBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Compare
        MenuItemType        #Action
        MenuItemName        #sysCompare
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compile forward
        MenuItemType        #Action
        MenuItemName        #sysCompileForward
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Impact Analysis
        MenuItemType        #Action
        MenuItemName        #SysImpactAnalysis
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Find and replace
        MenuItemType        #Action
        MenuItemName        #SysSourceReplaceText
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Syntactic renaming
        MenuItemType        #Action
        MenuItemName        #SysSourceReplaceSyntax
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Duplicates
        MenuItemName        #SysDictIndexShowDuplicates
      ENDPROPERTIES
      
    ENDMENUITEM
    MENU #@SYS16245
      PROPERTIES
        Name                #MenuCopy
        Label               #@SYS16245
        NeededAccessLevel   #NoAccess
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Entire path
          MenuItemType        #Action
          MenuItemName        #SysTreeNodePathCopyToClipboard
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Name
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeNameCopyToClipboard
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Copy to current layer
          MenuItemType        #Action
          MenuItemName        #systreenodecopyToCurrentLayer
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Check best practices
        MenuItemType        #Action
        MenuItemName        #SysBPCheck
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Check form style best practices
        MenuItemName        #SysBPStyleCheckAnalysis
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Source code title case update
        MenuItemType        #Action
        MenuItemName        #SysSourceNameWash
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Generate Axd query
        MenuItemType        #Action
        MenuItemName        #AxdGenerateAxdQuery
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #AIF Document Service Wizard
        MenuItemName        #AxdWizard
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Register service
        MenuItemType        #Action
        MenuItemName        #AifRegisterService
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Help properties
        MenuItemName        #HelpTopicID
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Lookup in Issue Search
        MenuItemName        #SysLcsIssueSearchAotItem
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENU #@SYS53405
      PROPERTIES
        Name                #SysContextMenuOpenNewWindow
        Label               #@SYS53405
        SetCompany          #Yes
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Open application object window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeApplObjectOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open parent in window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeParentOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open new window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@SYS57839
        PROPERTIES
          Name                #MenuOpenOldLayer
          Label               #@SYS57839
          NeededAccessLevel   #NoAccess
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #usp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldUsp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #usr
            MenuItemType        #Action
            MenuItemName        #SysOpenOldUsr
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #cup
            MenuItemType        #Action
            MenuItemName        #SysOpenOldCup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #cus
            MenuItemType        #Action
            MenuItemName        #SysOpenOldCus
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #vap
            MenuItemType        #Action
            MenuItemName        #SysOpenOldVap
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #var
            MenuItemType        #Action
            MenuItemName        #SysOpenOldVar
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #isp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldIsp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #isv
            MenuItemType        #Action
            MenuItemName        #SysOpenOldIsv
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #slp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSlp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #sln
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSln
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #fpp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldFpp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #fpk
            MenuItemType        #Action
            MenuItemName        #SysOpenOldFpk
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #glp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldGlp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #gls
            MenuItemType        #Action
            MenuItemName        #SysOpenOldGls
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #syp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSyp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #sys
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSys
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENUITEM
        PROPERTIES
          Name                #Open used table
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowTable
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used table field group
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowFieldGroup
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used Extended Data Type
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowExtendedType
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used Enum
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowEnum
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used class
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowClass
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used form
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowForm
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used report
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowReport
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used menu item
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowMenuItem
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Properties
        MenuItemType        #Action
        MenuItemName        #SysTreeNodeShowProperties
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Full CIL generation from X++
        MenuItemType        #Action
        MenuItemName        #SysXppILFullBuild
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Incremental CIL generation from X++
        MenuItemType        #Action
        MenuItemName        #SysXppILIncrementalBuild
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Approval wizard...
        MenuItemName        #WorkflowAOTWizardApproval
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Task wizard...
        MenuItemName        #WorkflowAOTWizardTask
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Workflow type wizard...
        MenuItemName        #WorkflowAOTWizardType
      ENDPROPERTIES
      
    ENDMENUITEM
  ENDMENU
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : DEVCommentsTool unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #DEVCommentsTool
    Type: 3
    PROPERTIES
      Name                #DEVCommentsTool
      Label               #Add to project
      ObjectType          #Class
      Object              #DEVCommentsTool
      ViewUserLicense     #Functional
      MaintainUserLicense #Functional
      Origin              #{936693D1-AAC5-4931-8547-6FFF6C95D446}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: PRN

; Microsoft Dynamics AX Project : dev_toolsSmall unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #dev_toolsSmall
  PRIVATE
  PROPERTIES
    Name                #dev_toolsSmall
    Origin              #{E77B9027-7994-4082-B3DB-1F94EC5F94DE}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Tables
      PROPERTIES
        Name                #Tables
        ProjectGroupType    #Tables
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 516
        NODETYPE 204
        NAME #xRefReferences
      ENDNODE
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 6594
        NODETYPE 329
        NAME #SysSetupForm
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 2436
        NODETYPE 329
        NAME #EditorScripts
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033474
        NODETYPE 329
        NAME #DEVCommentsTool
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 968
        NODETYPE 329
        NAME #SysContextMenu
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #xRefReferencesUsedByTypedTree
      ENDNODE
      ENDGROUP
      
    GROUP #Menus
      PROPERTIES
        Name                #Menus
        ProjectGroupType    #Menus
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 16
        UTILOBJECTID 0
        NODETYPE 205
        NAME #SysContextMenu
      ENDNODE
      ENDGROUP
      
    GROUP #Menu_Items
      PROPERTIES
        Name                #Menu_Items
        ProjectGroupType    #MenuItems
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Display
        PROPERTIES
          Name                #Display
          ProjectGroupType    #Display
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        ENDGROUP
        
      GROUP #Action
        PROPERTIES
          Name                #Action
          ProjectGroupType    #Action
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #DEVCommentsTool
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
