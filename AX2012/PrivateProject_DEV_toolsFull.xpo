Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; Microsoft Dynamics AX Table : DEVDebugInfo unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #DEVDebugInfo
    EnforceFKRelation 0
    PROPERTIES
      Name                #DEVDebugInfo
      Label               #@SYS40348
      SaveDataPerCompany  #No
      PrimaryIndex        #SessionLoginDateTimeIdx
      ClusterIndex        #SessionLoginDateTimeIdx
      CreatedDateTime     #Yes
      CreatedBy           #Yes
      CreatedTransactionId #Yes
      Origin              #{D0E8ED8C-E888-46F0-BBE3-AC4E78385766}
      LegacyId            #51153
    ENDPROPERTIES
    
    FIELDS
      FIELD #BatchCaption
        STRING
        PROPERTIES
          Name                #BatchCaption
          Label               #@SYS106675
          HelpText            #@SYS107274
          Table               #DEVDebugInfo
          Origin              #{5A4B6950-7B40-4744-9A09-08068A386A22}
          LegacyId            #50005
          ExtendedDataType    #BatchCaption
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #BatchJobCaption
        STRING
        PROPERTIES
          Name                #BatchJobCaption
          Label               #@SYS114518
          HelpText            #@SYS107273
          Table               #DEVDebugInfo
          Origin              #{9AA5F2E2-66CB-4F59-84ED-73FA9402AE06}
          LegacyId            #50006
          ExtendedDataType    #BatchCaption
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #BatchJobRefRecId
        INT64
        PROPERTIES
          Name                #BatchJobRefRecId
          Table               #DEVDebugInfo
          Origin              #{E86E3F6C-BC5D-4FB6-A68D-0C3515D7C229}
          LegacyId            #50004
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #BatchRefRecId
        INT64
        PROPERTIES
          Name                #BatchRefRecId
          Table               #DEVDebugInfo
          Origin              #{DC44E732-87F1-450F-AF42-358E2DBA1544}
          LegacyId            #50003
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #Callstack
        STRING
        PROPERTIES
          Name                #Callstack
          Table               #DEVDebugInfo
          Origin              #{1100D540-6D29-4576-9B9F-88CA5EBE8F73}
          LegacyId            #50007
          ExtendedDataType    #SysTraceCallstack
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #CompanyId
        STRING
        PROPERTIES
          Name                #CompanyId
          Table               #DEVDebugInfo
          Origin              #{56E6AD29-0AD5-4BAB-A7EB-11C517D6F0A4}
          LegacyId            #50009
          ExtendedDataType    #CompanyId
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #Description
        STRING
        PROPERTIES
          Name                #Description
          Table               #DEVDebugInfo
          Origin              #{169DB3AD-D1A4-43FC-9417-6EB3008192D4}
          LegacyId            #50008
          StringSize          #300
        ENDPROPERTIES
        
      FIELD #SessionId
        INT
        PROPERTIES
          Name                #SessionId
          Table               #DEVDebugInfo
          Origin              #{CDC54800-239D-44AB-931F-82D58C2C96BF}
          LegacyId            #50001
          ExtendedDataType    #SessionId
        ENDPROPERTIES
        
      FIELD #SessionLoginDateTime
        DATETIME
        PROPERTIES
          Name                #SessionLoginDateTime
          Table               #DEVDebugInfo
          Origin              #{BECF9872-A930-4DE5-8EBD-7319CE894329}
          LegacyId            #50002
          ExtendedDataType    #SessionLoginDateTime
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #SessionLoginDateTimeIdx
      PROPERTIES
        Name                #SessionLoginDateTimeIdx
        AllowDuplicates     #No
        Origin              #{34B8E715-B4E2-4AE0-AB2A-5F9CC7DC6B12}
        LegacyId            #50001
      ENDPROPERTIES
      
      INDEXFIELDS
        #SessionLoginDateTime
        #SessionId
        #RecId
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #Batch
        PROPERTIES
          Name                #Batch
          Table               #Batch
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BatchRefRecId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BatchJob
        PROPERTIES
          Name                #BatchJob
          Table               #BatchJob
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BatchJobRefRecId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #callStack
        #static str callStack()
        #{
        #    str         result  = "========= call stack =============";
        #    container   c       = xSession::xppCallStack();
        #    int         i;
        #    ;
        #    if (xSession::isCLRSession())
        #    {
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #        result += '\r\n' + CLRInterop::getAnyTypeForObject(new System.Diagnostics.StackTrace(1, true).ToString());
        #    }
        #    else
        #    {
        #        for( i = 1; i <= conLen(c); i++ )
        #        {
        #            result += '\r\n' + strfmt( '%1', conPeek(c, i) );
        #        }
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #callStack2infolog
        ##define.PathPrefixLen       (4)
        ##localmacro.ClientPrefix    '(C)' #endmacro
        ##localmacro.ServerPrefix    '(S)' #endmacro
        ##localmacro.RegexPatternFmt '^\\s*\\S+\\s+\%1\\.\%2.+\%1\\.(\%3\\.\%4|\%5\\.(\%6|\%7|\%8))\\(.+?\\n(.*)' #endmacro
        ##define.RegexResultStr      ('$3')
        ##define.DotNetAppNamespace  ('Dynamics.Ax.Application')
        #public static void callStack2infolog(str _prefix = "@SYS65092", Counter _skipLevels = 0)
        #{
        #    System.Text.RegularExpressions.MatchCollection  matches;
        #    System.Text.RegularExpressions.Match            oneMatch;
        #    System.Diagnostics.StackTrace                   stackTrace;
        #    container                                       stack;
        #    TreeNodePath                                    correctPath;
        #    TreeNodePath                                    stackPath;
        #    Counter                                         n;
        #    str                                             regexPattern;
        #    str                                             clrStack;
        #    int                                             skipLevels = max(0, _skipLevels);
        #    int                                             line;
        #    ;
        #    setPrefix(_prefix);
        #    if (xSession::isCLRSession())
        #    {
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #        stackTrace = new System.Diagnostics.StackTrace(true);
        #        clrStack = stackTrace.ToString();
        #        stackTrace = null;
        #        regexPattern = strFmt(  #RegexPatternFmt,
        #                                strReplace(#DotNetAppNamespace, '.', '\\.'),
        #                                strReplace(funcName(), '::', '\\.'),
        #                                classStr(Info),
        #                                methodStr(Info, Add),
        #                                classStr(Global),
        #                                staticMethodStr(Global, error),
        #                                staticMethodStr(Global, warning),
        #                                staticMethodStr(Global, info)
        #                             );
        #        matches = System.Text.RegularExpressions.Regex::Matches(clrStack, regexPattern, System.Text.RegularExpressions.RegexOptions::Singleline);
        #        n = matches.get_Count();
        #        if (n > 0)
        #        {
        #            oneMatch = matches.get_Item(0);
        #            clrStack = oneMatch.Result(#RegexResultStr);
        #            oneMatch = null;
        #        }
        #        matches = null;
        #        CodeAccessPermission::revertAssert();
        #        info(clrStack);
        #    }
        #    else
        #    {
        #        stack = xSession::xppCallStack();
        #        for (n = 3 + skipLevels * 2; n <= conLen(stack); n += 2)
        #        {
        #            stackPath   = conPeek(stack,n);
        #            line        = conPeek(stack,n+1);
        #            correctPath = stackPath;
        #            if (line)
        #            {
        #                if (    substr(stackPath, 1, #PathPrefixLen) == #ClientPrefix
        #                    ||  substr(stackPath, 1, #PathPrefixLen) == #ServerPrefix
        #                   )
        #                {
        #                    correctPath = substr(stackPath, #PathPrefixLen + 1, maxint());
        #                }
        #                info(strFmt('%1 %2', stackPath, line),'', SysInfoAction_Editor::newLineColumn(correctPath, line));
        #            }
        #            else
        #            {
        #                info(strFmt('%1', stackPath));
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #logEvent
        #static void logEvent(str _description = '', Batch _batch = null)
        #{
        #    DEVDebugInfo   debugInfo;
        #    xSession        session     = new xSession();
        #    UserConnection  connection  = new UserConnection();
        #    ;
        #    debugInfo.setConnection(connection);
        #
        #    debugInfo.clear();
        #    debugInfo.initValue();
        #
        #    debugInfo.Description           = _description;
        #    debugInfo.Callstack             = DEVDebugInfo::callStack();
        #    debugInfo.BatchRefRecId         = _batch.RecId;
        #    debugInfo.BatchCaption          = _batch.Caption;
        #    debugInfo.BatchJobRefRecId      = _batch.BatchJobId;
        #    //debugInfo.BatchJobCaption       = BatchJob::kar_findRecId(_batch.BatchJobId).Caption;
        #    debugInfo.CompanyId             = curExt();
        #    debugInfo.SessionId             = session.sessionId();
        #    debugInfo.SessionLoginDateTime  = session.loginDateTime();
        #
        #    debugInfo.insert();
        #}
      ENDSOURCE
      SOURCE #logEvent_Closing
        #static void logEvent_Closing(str _description = '', Batch _batch = null)
        #{
        #    ;
        #    DEVDebugInfo::logEvent(_description, _batch);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : DEVRunBaseBuilderVars unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #DEVRunBaseBuilderVars
    EnforceFKRelation 0
    PROPERTIES
      Name                #DEVRunBaseBuilderVars
      Label               #Class variables
      TitleField1         #Name
      TitleField2         #Type
      SaveDataPerCompany  #No
      PrimaryIndex        #NameIdx
      ClusterIndex        #NameIdx
      ModifiedDateTime    #Yes
      ModifiedBy          #Yes
      CreatedDateTime     #Yes
      CreatedBy           #Yes
      Origin              #{AECFE25A-E253-48AE-8772-260C74A71AD0}
      LegacyId            #50045
    ENDPROPERTIES
    
    FIELDS
      FIELD #ContractGroupLabel2
        STRING
        PROPERTIES
          Name                #ContractGroupLabel2
          Label               #Contract Group Label
          Table               #DEVRunBaseBuilderVars
          Origin              #{572E9A1A-3D6F-4C9F-83E0-FB702B2ACE76}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #ContractGroupName2
        STRING
        PROPERTIES
          Name                #ContractGroupName2
          Label               #Contract Group Name
          Table               #DEVRunBaseBuilderVars
          Origin              #{916430F9-DD0A-42B6-8217-A7F12ECEC52B}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #DlgName
        STRING
        PROPERTIES
          Name                #DlgName
          Label               #Dialog variable name
          HelpText            #DialogField variable name, e.g. dlgStartDate.
          Table               #DEVRunBaseBuilderVars
          Origin              #{5BCCBDED-56A8-4CEC-92E4-1B79233A4F98}
          LegacyId            #50004
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #IsExternalTable
        ENUM
        PROPERTIES
          Name                #IsExternalTable
          Label               #Is external table
          Table               #DEVRunBaseBuilderVars
          Origin              #{79D5A804-8036-4E4C-BFC0-5453F6F936A5}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Label
        STRING
        PROPERTIES
          Name                #Label
          Table               #DEVRunBaseBuilderVars
          Origin              #{2B239394-E704-443B-984C-2ECAA14BD7BA}
          LegacyId            #50006
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #LabelHelp
        STRING
        PROPERTIES
          Name                #LabelHelp
          Table               #DEVRunBaseBuilderVars
          Origin              #{A0854E90-CABF-499E-8026-360EF7B3FD15}
          LegacyId            #50007
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #LineNum
        REAL
        PROPERTIES
          Name                #LineNum
          Table               #DEVRunBaseBuilderVars
          Origin              #{A0A8A087-C1DC-40F7-B63C-3EC9E9AE36C8}
          LegacyId            #50009
          ExtendedDataType    #LineNum
        ENDPROPERTIES
        
      FIELD #Mandatory
        ENUM
        PROPERTIES
          Name                #Mandatory
          HelpText            #Mandatory variable.
          Table               #DEVRunBaseBuilderVars
          Origin              #{35E63049-DBEE-421A-B648-F6B210661FB2}
          LegacyId            #50003
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Name
        STRING
        PROPERTIES
          Name                #Name
          Label               #Variable name
          Table               #DEVRunBaseBuilderVars
          Origin              #{D273A500-9B9D-4CD8-916D-7548BFE90E40}
          LegacyId            #50001
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #OverwriteLabels
        ENUM
        PROPERTIES
          Name                #OverwriteLabels
          Table               #DEVRunBaseBuilderVars
          Origin              #{6C84CC54-CEEA-4FD1-9BCA-8DC9107100A2}
          LegacyId            #50008
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ParmName
        STRING
        PROPERTIES
          Name                #ParmName
          Label               #Parm method name
          HelpText            #Parm method name, e.g. parmStartDate
          Table               #DEVRunBaseBuilderVars
          Origin              #{81D5C8AE-FB0E-40A9-83A9-3C39E088A895}
          LegacyId            #50005
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #Type
        STRING
        PROPERTIES
          Name                #Type
          Label               #Variable type
          Table               #DEVRunBaseBuilderVars
          Origin              #{5EF837C5-A0AE-4B83-8675-F249235FF7F7}
          LegacyId            #50002
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AdditionalProperties
        PROPERTIES
          Name                #AdditionalProperties
          Label               #@SYS23466
        ENDPROPERTIES
        
        GROUPFIELDS
          #IsExternalTable
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #NameIdx
      PROPERTIES
        Name                #NameIdx
        AllowDuplicates     #No
        Origin              #{4D26442A-55A7-47BA-8766-869BB5C30311}
        LegacyId            #50001
      ENDPROPERTIES
      
      INDEXFIELDS
        #Name
      ENDINDEXFIELDS
      
      #LineNumIdx
      PROPERTIES
        Name                #LineNumIdx
        Origin              #{4D9BF0C5-32C4-4E6A-B0C5-58437841B51D}
        LegacyId            #50002
      ENDPROPERTIES
      
      INDEXFIELDS
        #LineNum
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #insert
        #public void insert()
        #{
        #    ;
        #    super();
        #}
      ENDSOURCE
      SOURCE #modifiedField
        #public void modifiedField(fieldId _fieldId)
        #{
        #    ;
        #    super(_fieldId);
        #
        #    switch (_fieldId)
        #    {
        #        case fieldnum(DEVRunBaseBuilderVars, Type):
        #            this.Name = strupr(substr(this.Name, 1, 1)) + substr(this.Name, 2, strlen(this.Name));
        #            this.rebuildVarNames();
        #            this.rebuildLabels();
        #            break;
        #
        #        case fieldnum(DEVRunBaseBuilderVars, Name):
        #            this.rebuildVarNames();
        #            this.rebuildLabels();
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #moveDown
        #DEVRunBaseBuilderVars moveDown(DEVRunBaseBuilderVars _builderVars)
        #{
        #    DEVRunBaseBuilderVars          after;
        #    DEVRunBaseBuilderVars          cur;
        #    LineNum                        num;
        #    ;
        #
        #    //after.setTmpData(_builderVars);
        #    //cur.setTmpData(_builderVars);
        #
        #    ttsbegin;
        #
        #    select forupdate after
        #      order by LineNum
        #      where after.LineNum > this.LineNum;
        #
        #    if (after && this && after.LineNum > this.LineNum)
        #    {
        #        cur.selectForUpdate();
        #        select firstOnly forUpdate cur
        #          where cur.RecId == this.RecId;
        #
        #        num                 = this.LineNum;
        #        cur.LineNum         = after.LineNum;
        #
        #        after.LineNum   = num + (after.LineNum - num) / 2;
        #
        #        after.update();
        #        cur.update();
        #    }
        #
        #    ttscommit;
        #
        #    return cur;
        #}
      ENDSOURCE
      SOURCE #moveUp
        #DEVRunBaseBuilderVars moveUp(DEVRunBaseBuilderVars _builderVars)
        #{
        #    DEVRunBaseBuilderVars      before;
        #    DEVRunBaseBuilderVars      save;
        #    LineNum                    num;
        #    ;
        #
        #    //before.setTmpData(_builderVars);
        #
        #    ttsbegin;
        #
        #    select forupdate before
        #      order by LineNum desc
        #      where before.LineNum < this.LineNum;
        #
        #    if (before && this && before.LineNum < this.LineNum)
        #    {
        #        num             = this.LineNum;
        #        this.LineNum    = before.LineNum;
        #
        #        before.LineNum  = before.LineNum + (num - before.LineNum) / 2;
        #        before.update();
        #
        #        this.update();
        #        save = this.data();
        #    }
        #
        #    ttscommit;
        #
        #    return save;
        #}
      ENDSOURCE
      SOURCE #rebuildLabels
        #void rebuildLabels()
        #{
        #    str         strlabel, strLabelHelp;
        #    DictType    dictType;
        #    DictEnum    dictEnum;
        #    Dictionary  dict = new Dictionary();
        #    ;
        #
        #    if (dict.typeName2Id(this.Type))
        #    {
        #        dictType = new DictType(dict.typeName2Id(this.Type));
        #
        #        if (dictType)
        #        {
        #            this.Label       = dictType.label();
        #            this.LabelHelp   = dictType.help(true);
        #        }
        #    }
        #    else if (dict.enumName2Id(this.Type))
        #    {
        #        dictEnum = new dictEnum(dict.enumName2Id(this.Type));
        #
        #        if (dictEnum)
        #        {
        #            this.Label       = dictEnum.label();
        #            this.LabelHelp   = dictEnum.help(true);
        #        }
        #    }
        #
        #
        #}
      ENDSOURCE
      SOURCE #rebuildVarNames
        #void rebuildVarNames()
        #{
        #    SysElementName  parmName, dlgName;
        #    ;
        #
        #    this.DlgName     = "dlg"     + strupr(substr(this.Name, 1, 1)) + substr(this.Name, 2, strlen(this.Name));
        #    this.ParmName    = "parm"    + strupr(substr(this.Name, 1, 1)) + substr(this.Name, 2, strlen(this.Name));
        #}
      ENDSOURCE
      SOURCE #lookupAOTQuery
        #static void lookupAOTQuery(FormStringControl _control)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(UtilElements), _control);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbds = query.addDataSource(tablenum(UtilElements));
        #    QueryBuildRange         qbr = qbds.addRange(fieldnum(UtilElements, RecordType));
        #    ;
        #
        #    qbr.value(queryValue(UtilElementType::Query));
        #
        #    sysTableLookup.addLookupfield(fieldnum(UtilElements, Name));
        #    sysTableLookup.addLookupfield(fieldnum(UtilElements, RecordType));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupVarTypes
        #static void lookupVarTypes(FormStringControl _control)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(UtilElements), _control);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbds = query.addDataSource(tablenum(UtilElements));
        #    QueryBuildRange         qbr;
        #    ;
        #
        #    qbr = qbds.addRange(fieldnum(UtilElements, RecordType));
        #    qbr.value(queryValue(UtilElementType::ExtendedType));
        #
        #    qbr = qbds.addRange(fieldnum(UtilElements, RecordType));
        #    qbr.value(queryValue(UtilElementType::Enum));
        #
        #    sysTableLookup.addLookupfield(fieldnum(UtilElements, Name));
        #    sysTableLookup.addLookupfield(fieldnum(UtilElements, RecordType));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : DEVTableBuilderVars unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #DEVTableBuilderVars
    EnforceFKRelation 0
    PROPERTIES
      Name                #DEVTableBuilderVars
      Label               #Class variables
      TitleField1         #Name
      TitleField2         #Type
      SaveDataPerCompany  #No
      PrimaryIndex        #NameIdx
      ClusterIndex        #NameIdx
      ModifiedDateTime    #Yes
      ModifiedBy          #Yes
      CreatedDateTime     #Yes
      CreatedBy           #Yes
      DeveloperDocumentation  #This table holds the class variables
      Origin              #{850112E1-6BD2-4D1E-8800-6DA7231A7033}
    ENDPROPERTIES
    
    FIELDS
      FIELD #ContractGroupLabel2
        STRING
        PROPERTIES
          Name                #ContractGroupLabel2
          Label               #Contract Group Label
          Table               #DEVTableBuilderVars
          Origin              #{F9AC130F-B264-4888-91BB-337C04D88FDA}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #ContractGroupName2
        STRING
        PROPERTIES
          Name                #ContractGroupName2
          Label               #Contract Group Name
          Table               #DEVTableBuilderVars
          Origin              #{5602EDB4-0D9D-40BB-8057-9574A3A39729}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #DlgName
        STRING
        PROPERTIES
          Name                #DlgName
          Label               #Dialog variable name
          HelpText            #DialogField variable name, e.g. dlgStartDate.
          Table               #DEVTableBuilderVars
          Origin              #{FC978905-9A0F-4056-B406-CA936D69655A}
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #IsExternalTable
        ENUM
        PROPERTIES
          Name                #IsExternalTable
          Label               #Is external table
          Table               #DEVTableBuilderVars
          Origin              #{45AEA89A-E838-4C95-B383-616E6F8D0303}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #IsPrimary
        ENUM
        PROPERTIES
          Name                #IsPrimary
          Label               #Primary
          HelpText            #Primary key
          Table               #DEVTableBuilderVars
          Origin              #{31E77579-23E4-4928-B37A-1DC80EDDF68F}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Label
        STRING
        PROPERTIES
          Name                #Label
          Table               #DEVTableBuilderVars
          Origin              #{DE857AAA-C311-41C9-B5FA-DB3E70AF084A}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #LabelHelp
        STRING
        PROPERTIES
          Name                #LabelHelp
          Label               #Help
          Table               #DEVTableBuilderVars
          Origin              #{89EDC6E9-9466-402F-BA08-EEE95BDA4BEC}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #LineNum
        REAL
        PROPERTIES
          Name                #LineNum
          Table               #DEVTableBuilderVars
          Origin              #{B60D9889-A3A4-4196-BB57-78EA27943818}
          ExtendedDataType    #LineNum
        ENDPROPERTIES
        
      FIELD #Mandatory
        ENUM
        PROPERTIES
          Name                #Mandatory
          HelpText            #Mandatory variable.
          Table               #DEVTableBuilderVars
          Origin              #{6133C49F-56B3-4AF4-AFA0-8B503C8DCD16}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Name
        STRING
        PROPERTIES
          Name                #Name
          Label               #Field name
          Table               #DEVTableBuilderVars
          Origin              #{F6F9C05D-E4B0-48F6-B62D-2AD51580A3A4}
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #OverwriteLabels
        ENUM
        PROPERTIES
          Name                #OverwriteLabels
          Table               #DEVTableBuilderVars
          Origin              #{BF55393F-EE52-4A4C-8FDB-8857BAB754B3}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ParmName
        STRING
        PROPERTIES
          Name                #ParmName
          Label               #Parm method name
          HelpText            #Parm method name, e.g. parmStartDate
          Table               #DEVTableBuilderVars
          Origin              #{EE7557A8-D00F-4F13-8399-6F21F3F685A9}
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #Type
        STRING
        PROPERTIES
          Name                #Type
          Label               #Field type
          Table               #DEVTableBuilderVars
          Origin              #{79D96CC6-FAA2-42EA-ADFD-4753F904133F}
          ExtendedDataType    #SysElementName
          StringSize          #40
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AdditionalProperties
        PROPERTIES
          Name                #AdditionalProperties
          Label               #@SYS23466
        ENDPROPERTIES
        
        GROUPFIELDS
          #IsExternalTable
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #GridGroup
        PROPERTIES
          Name                #GridGroup
        ENDPROPERTIES
        
        GROUPFIELDS
          #Type
          #Name
          #IsPrimary
          #Mandatory
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PropertiesGroup
        PROPERTIES
          Name                #PropertiesGroup
        ENDPROPERTIES
        
        GROUPFIELDS
          #Label
          #LabelHelp
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #NameIdx
      PROPERTIES
        Name                #NameIdx
        AllowDuplicates     #No
        Origin              #{D2AC1F71-1D9B-45B3-85DE-0A90C809EF1D}
      ENDPROPERTIES
      
      INDEXFIELDS
        #Name
      ENDINDEXFIELDS
      
      #LineNumIdx
      PROPERTIES
        Name                #LineNumIdx
        Origin              #{FED98B83-EA61-433B-B4B5-72F459AC6894}
      ENDPROPERTIES
      
      INDEXFIELDS
        #LineNum
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #insert
        #public void insert()
        #{
        #    ;
        #    super();
        #}
      ENDSOURCE
      SOURCE #modifiedField
        #public void modifiedField(fieldId _fieldId)
        #{
        #    ;
        #    super(_fieldId);
        #
        #    switch (_fieldId)
        #    {
        #        case fieldnum(DEVTableBuilderVars, Type):
        #            this.Name = strupr(substr(this.Name, 1, 1)) + substr(this.Name, 2, strlen(this.Name));
        #          //  this.rebuildVarNames();
        #          //  this.rebuildLabels();
        #            break;
        #
        #        case fieldnum(DEVTableBuilderVars, Name):
        #           // this.rebuildVarNames();
        #           // this.rebuildLabels();
        #            break;
        #        case fieldnum(DEVTableBuilderVars, IsPrimary):
        #            if (this.IsPrimary)
        #            {
        #                this.Mandatory = true;
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #moveDown
        #DEVTableBuilderVars moveDown(DEVTableBuilderVars _builderVars)
        #{
        #    DEVTableBuilderVars          after;
        #    DEVTableBuilderVars          cur;
        #    LineNum                        num;
        #    ;
        #
        #    //after.setTmpData(_builderVars);
        #    //cur.setTmpData(_builderVars);
        #
        #    ttsbegin;
        #
        #    select forupdate after
        #      order by LineNum
        #      where after.LineNum > this.LineNum;
        #
        #    if (after && this && after.LineNum > this.LineNum)
        #    {
        #        cur.selectForUpdate();
        #        select firstOnly forUpdate cur
        #          where cur.RecId == this.RecId;
        #
        #        num                 = this.LineNum;
        #        cur.LineNum         = after.LineNum;
        #
        #        after.LineNum   = num + (after.LineNum - num) / 2;
        #
        #        after.update();
        #        cur.update();
        #    }
        #
        #    ttscommit;
        #
        #    return cur;
        #}
      ENDSOURCE
      SOURCE #moveUp
        #DEVTableBuilderVars moveUp(DEVTableBuilderVars _builderVars)
        #{
        #    DEVTableBuilderVars      before;
        #    DEVTableBuilderVars      save;
        #    LineNum                    num;
        #    ;
        #
        #    //before.setTmpData(_builderVars);
        #
        #    ttsbegin;
        #
        #    select forupdate before
        #      order by LineNum desc
        #      where before.LineNum < this.LineNum;
        #
        #    if (before && this && before.LineNum < this.LineNum)
        #    {
        #        num             = this.LineNum;
        #        this.LineNum    = before.LineNum;
        #
        #        before.LineNum  = before.LineNum + (num - before.LineNum) / 2;
        #        before.update();
        #
        #        this.update();
        #        save = this.data();
        #    }
        #
        #    ttscommit;
        #
        #    return save;
        #}
      ENDSOURCE
      SOURCE #rebuildLabels
        #void rebuildLabels()
        #{
        #    str         strlabel, strLabelHelp;
        #    DictType    dictType;
        #    DictEnum    dictEnum;
        #    Dictionary  dict = new Dictionary();
        #    ;
        #
        #    if (dict.typeName2Id(this.Type))
        #    {
        #        dictType = new DictType(dict.typeName2Id(this.Type));
        #
        #        if (dictType)
        #        {
        #            this.Label       = dictType.label();
        #            this.LabelHelp   = dictType.help(true);
        #        }
        #    }
        #    else if (dict.enumName2Id(this.Type))
        #    {
        #        dictEnum = new dictEnum(dict.enumName2Id(this.Type));
        #
        #        if (dictEnum)
        #        {
        #            this.Label       = dictEnum.label();
        #            this.LabelHelp   = dictEnum.help(true);
        #        }
        #    }
        #
        #
        #}
      ENDSOURCE
      SOURCE #rebuildVarNames
        #void rebuildVarNames()
        #{
        #    SysElementName  parmName, dlgName;
        #    ;
        #
        #    this.DlgName     = "dlg"     + strupr(substr(this.Name, 1, 1)) + substr(this.Name, 2, strlen(this.Name));
        #    this.ParmName    = "parm"    + strupr(substr(this.Name, 1, 1)) + substr(this.Name, 2, strlen(this.Name));
        #}
      ENDSOURCE
      SOURCE #lookupAOTQuery
        #static void lookupAOTQuery(FormStringControl _control)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(UtilElements), _control);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbds = query.addDataSource(tablenum(UtilElements));
        #    QueryBuildRange         qbr = qbds.addRange(fieldnum(UtilElements, RecordType));
        #    ;
        #
        #    qbr.value(queryValue(UtilElementType::Query));
        #
        #    sysTableLookup.addLookupfield(fieldnum(UtilElements, Name));
        #    sysTableLookup.addLookupfield(fieldnum(UtilElements, RecordType));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupVarTypes
        #static void lookupVarTypes(FormStringControl _control)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(UtilElements), _control);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbds = query.addDataSource(tablenum(UtilElements));
        #    QueryBuildRange         qbr;
        #    ;
        #
        #    qbr = qbds.addRange(fieldnum(UtilElements, RecordType));
        #    qbr.value(queryValue(UtilElementType::ExtendedType));
        #
        #    qbr = qbds.addRange(fieldnum(UtilElements, RecordType));
        #    qbr.value(queryValue(UtilElementType::Enum));
        #
        #    sysTableLookup.addLookupfield(fieldnum(UtilElements, Name));
        #    sysTableLookup.addLookupfield(fieldnum(UtilElements, RecordType));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : DEVLabelsCreateInfo unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #DEVLabelsCreateInfo
    EnforceFKRelation 1
    PROPERTIES
      Name                #DEVLabelsCreateInfo
      Label               #Labels Create Info
      TitleField1         #PropertyName
      TitleField2         #LabelActionType
      CreateRecIdIndex    #Yes
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      DeveloperDocumentation  #This table holds the labels create info
      Origin              #{ED5D62B3-DE3D-462B-BDE4-FE6EACFC5DB5}
    ENDPROPERTIES
    
    FIELDS
      FIELD #Column
        INT
        PROPERTIES
          Name                #Column
          Label               #@SYS5771
          Table               #DEVLabelsCreateInfo
          Origin              #{DE6F1E04-3930-4BB3-9990-98BC4571A2FB}
          ExtendedDataType    #PositiveNumber
        ENDPROPERTIES
        
      FIELD #ElementPath
        STRING
        PROPERTIES
          Name                #ElementPath
          Label               #Element Path
          Table               #DEVLabelsCreateInfo
          Origin              #{571D768E-B611-43BA-AC5B-8C3367E4A418}
          ExtendedDataType    #TreeNodePath
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #IsProcessed
        ENUM
        PROPERTIES
          Name                #IsProcessed
          Label               #Is Processed
          Table               #DEVLabelsCreateInfo
          Origin              #{C3BDB034-85D2-427E-ADEC-C96A1F1E4746}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #LabelActionType
        ENUM
        PROPERTIES
          Name                #LabelActionType
          Table               #DEVLabelsCreateInfo
          Origin              #{F417F2B3-79D0-47F1-A6E2-76BE9615A3AE}
          EnumType            #DEVLabelActionType
        ENDPROPERTIES
        
      FIELD #Line
        INT
        PROPERTIES
          Name                #Line
          Label               #@SYS70473
          Table               #DEVLabelsCreateInfo
          Origin              #{86053801-26B9-4305-B8C7-E1782D15CE2B}
          ExtendedDataType    #PositiveNumber
        ENDPROPERTIES
        
      FIELD #NewLabel
        STRING
        PROPERTIES
          Name                #NewLabel
          Label               #New Label
          Table               #DEVLabelsCreateInfo
          Origin              #{5BCAD941-8642-41A3-B804-AF68AE26D10C}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #NewLabelValue
        STRING
        PROPERTIES
          Name                #NewLabelValue
          Label               #New Label Value
          Table               #DEVLabelsCreateInfo
          Origin              #{02E4B060-F6AB-46A7-8EEE-6DF490A2CB81}
          ExtendedDataType    #NotesLine
          StringSize          #254
        ENDPROPERTIES
        
      FIELD #PropertyName
        STRING
        PROPERTIES
          Name                #PropertyName
          Label               #Property Name
          Table               #DEVLabelsCreateInfo
          Origin              #{F5EA4C0B-A9CE-4611-845F-EA31F02419E1}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #SpacesOnEnd
        INT
        PROPERTIES
          Name                #SpacesOnEnd
          Label               #Spaces On End
          Table               #DEVLabelsCreateInfo
          Origin              #{403FEC7F-0183-42AE-806A-68BBD9401B82}
          ExtendedDataType    #PositiveNumber
        ENDPROPERTIES
        
      FIELD #TextValue
        STRING
        PROPERTIES
          Name                #TextValue
          Label               #Text Value
          Table               #DEVLabelsCreateInfo
          Origin              #{89854B9D-CBFB-4930-B594-36D24837A119}
          ExtendedDataType    #NotesLine
          StringSize          #254
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #Column
          #ElementPath
          #IsProcessed
          #LabelActionType
          #Line
          #NewLabel
          #NewLabelValue
          #PropertyName
          #SpacesOnEnd
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #GridGroup
        PROPERTIES
          Name                #GridGroup
        ENDPROPERTIES
        
        GROUPFIELDS
          #IsProcessed
          #ElementPath
          #PropertyName
          #Line
          #Column
          #LabelActionType
          #TextValue
          #NewLabel
          #NewLabelValue
          #SpacesOnEnd
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #TextValueIdx
      PROPERTIES
        Name                #TextValueIdx
        Origin              #{50FD71C7-A338-4298-BBB9-2A2F694CFB22}
      ENDPROPERTIES
      
      INDEXFIELDS
        #TextValue
      ENDINDEXFIELDS
      
      #UniqIdx
      PROPERTIES
        Name                #UniqIdx
        AllowDuplicates     #No
        Origin              #{F9DD7CAE-C7BC-4B87-A99F-296E2187F2A6}
      ENDPROPERTIES
      
      INDEXFIELDS
        #ElementPath
        #PropertyName
        #Line
        #Column
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #insert
        #public void insert()
        #{
        #    ;
        #    this.SpacesOnEnd = strLen(this.TextValue) - strLen(strRTrim(this.TextValue));
        #    super();
        #}
      ENDSOURCE
      SOURCE #setLabelInSource
        #void setLabelInSource()
        #{
        #    TreeNode    treeNode;
        #    str         source;
        #    int         newPos;
        #
        #    int getPosInSource(str  _source, int _row, int _column)
        #    {
        #        int pos;
        #        int line;
        #        int i;
        #        str posText;
        #        ;
        #        for (i = 1; i <= _row - 1; i++)
        #        {
        #            pos = strFind(_source, '\n', pos + 1, maxInt());
        #            if (! pos)
        #            {
        #                break;
        #            }
        #        }
        #        if (! pos && _row != 1)
        #        {
        #            throw error(strFmt("Position not found. Path %1, Row %2, Col %3", this.ElementPath, _row, _column));
        #        }
        #
        #        pos = pos + _column;
        #
        #        posText = subStr(_source, pos, strLen(this.TextValue));
        #        if (posText != this.TextValue)
        #        {
        #            throw error(strFmt("Text is not equal. Path %1, Row %2, Col %3, Source text %4, Expected %5",
        #                                this.ElementPath, _row, _column, posText, this.TextValue));
        #        }
        #
        #        return pos;
        #    }
        #    ;
        #
        #    treeNode = TreeNode::findNode(this.ElementPath);
        #
        #    source = treeNode.AOTgetSource();
        #    newPos = getPosInSource(source, this.Line, this.Column);
        #
        #    source = strDel(source, newPos, strLen(this.TextValue));
        #    source = strIns(source, this.NewLabel, newPos);
        #    info(source);
        #
        #}
      ENDSOURCE
      SOURCE #setDevDocumentation
        #static void setDevDocumentation()
        #{
        #    UtilElements        utilElements;
        #    UtilElements        utilElementsEx;
        #    TreeNode            treeNode;
        #    str                 s;
        #    Label   l = new Label();
        #    ;
        #    setPrefix('dev doc');
        #    //info(l.extractString('@ROS77'));
        #    //return;
        #    while select utilElements
        #        where utilElements.utilLevel == UtilEntryLevel::isv &&
        #              utilElements.recordType == UtilElementType::Table
        #    notexists join utilElementsEx
        #        where utilElementsEx.recordType == utilElements.recordType &&
        #              utilElementsEx.name       == utilElements.name &&
        #              utilElementsEx.utilLevel < UtilEntryLevel::isv
        #    {
        #        try
        #        {
        #        setPrefix(utilElements.name);
        #        //info(utilElements.name);
        #        treeNode     = TreeNode::findNode('\\data dictionary\\tables\\'+utilElements.name);
        #        if (treeNode && treeNode.AOTgetProperty('Label') && ! treeNode.AOTgetProperty('DeveloperDocumentation'))
        #        {
        #            s = strFmt('This table holds the %1', strLwr(l.extractString(treeNode.AOTgetProperty('Label'))));
        #            treeNode.AOTsetProperty('DeveloperDocumentation', s);
        #            treeNode.AOTsave();
        #            info(s);
        #            //return;
        #        }
        #        }
        #        catch
        #        {
        #            exceptionTextFallThrough();
        #        }
        #    }
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : DEVMultiBatchTaskTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #DEVMultiBatchTaskTable
    EnforceFKRelation 1
    PROPERTIES
      Name                #DEVMultiBatchTaskTable
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      ModifiedDateTime    #Yes
      ModifiedBy          #Yes
      CreatedDateTime     #Yes
      CreatedBy           #Yes
      Origin              #{2736D3A4-13B7-435B-8ACE-1DD293C25D2D}
    ENDPROPERTIES
    
    FIELDS
      FIELD #GroupNum
        INT
        PROPERTIES
          Name                #GroupNum
          Table               #DEVMultiBatchTaskTable
          Origin              #{C0F76E47-6A29-4CE7-A7C8-0EC78EFB42EC}
          ExtendedDataType    #PositiveNumber
        ENDPROPERTIES
        
      FIELD #GroupTaskId
        STRING
        PROPERTIES
          Name                #GroupTaskId
          Table               #DEVMultiBatchTaskTable
          Origin              #{974967A1-FAB8-4A11-901B-1FB983B28D4C}
          ExtendedDataType    #NotesLine
          StringSize          #254
        ENDPROPERTIES
        
      FIELD #IsProcessed
        ENUM
        PROPERTIES
          Name                #IsProcessed
          Table               #DEVMultiBatchTaskTable
          Origin              #{6296984C-9F9C-4199-A17D-1F1755D9643D}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RefRecId
        INT64
        PROPERTIES
          Name                #RefRecId
          Table               #DEVMultiBatchTaskTable
          Origin              #{030631CB-46BB-40FB-BFED-E49D086303A6}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #TaskId
        STRING
        PROPERTIES
          Name                #TaskId
          Table               #DEVMultiBatchTaskTable
          Origin              #{01856E1E-2E69-48D0-9E11-0E7518DC1A78}
          ExtendedDataType    #NotesLine
          StringSize          #254
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #TaskIdIdx
      PROPERTIES
        Name                #TaskIdIdx
        Origin              #{944D89DE-2EEB-4D44-BFBB-897C5C74F9C6}
      ENDPROPERTIES
      
      INDEXFIELDS
        #TaskId
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysSecEntryPointTmp unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysSecEntryPointTmp
    EnforceFKRelation 1
    PROPERTIES
      Name                #SysSecEntryPointTmp
      Label               #@SDT1
      TableType           #InMemory
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      DeveloperDocumentation  #This table holds the security development tool temp data
      Origin              #{A5D98382-37E7-4E7F-9EF7-CCF5A8C48099}
    ENDPROPERTIES
    
    FIELDS
      FIELD #AccessRight
        ENUM
        PROPERTIES
          Name                #AccessRight
          Label               #@SYS338612
          HelpText            #@SYS338613
          Table               #SysSecEntryPointTmp
          Origin              #{BF78D9D4-D133-4FA4-8A2D-35A654546E61}
          EnumType            #AccessRight
        ENDPROPERTIES
        
      FIELD #EffectiveUserLicense
        ENUM
        PROPERTIES
          Name                #EffectiveUserLicense
          Label               #@SDT2
          HelpText            #@SDT3
          Table               #SysSecEntryPointTmp
          Origin              #{AD50BAD1-46B1-4FCE-A62F-602E7377128C}
          EnumType            #UserLicenseType
        ENDPROPERTIES
        
      FIELD #EPTraceIsPostBack
        ENUM
        PROPERTIES
          Name                #EPTraceIsPostBack
          Label               #@SDT4
          HelpText            #@SDT5
          Table               #SysSecEntryPointTmp
          Origin              #{6A25F953-5DCA-4763-A282-FA2D523565BC}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #EPTraceModuleName
        STRING
        PROPERTIES
          Name                #EPTraceModuleName
          Label               #@SDT6
          HelpText            #@SDT7
          Table               #SysSecEntryPointTmp
          Origin              #{4BED41DE-9ED3-4168-BF71-844A5A2658DD}
          ExtendedDataType    #Str1260
          StringSize          #1260
        ENDPROPERTIES
        
      FIELD #EPTracePageName
        STRING
        PROPERTIES
          Name                #EPTracePageName
          Label               #@SDT8
          HelpText            #@SDT9
          Table               #SysSecEntryPointTmp
          Origin              #{58DF83CD-C67A-4CFC-802A-1173294A500E}
          ExtendedDataType    #IdentifierName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #EPTraceSessionId
        INT
        PROPERTIES
          Name                #EPTraceSessionId
          Label               #@SDT10
          HelpText            #@SDT11
          Table               #SysSecEntryPointTmp
          Origin              #{6E1C2765-908C-4F93-9FED-556890786C2E}
          ExtendedDataType    #SessionId
        ENDPROPERTIES
        
      FIELD #EPTraceUserName
        STRING
        PROPERTIES
          Name                #EPTraceUserName
          Label               #@SDT12
          HelpText            #@SDT13
          Table               #SysSecEntryPointTmp
          Origin              #{E3EB0EE3-0268-4304-B904-5E06876173A3}
          ExtendedDataType    #Str1260
          StringSize          #1260
        ENDPROPERTIES
        
      FIELD #MaintainUserLicense
        ENUM
        PROPERTIES
          Name                #MaintainUserLicense
          Label               #@SDT14
          HelpText            #@SDT15
          Table               #SysSecEntryPointTmp
          Origin              #{D04BDD6C-4E66-45DC-9764-E3A48B30416F}
          EnumType            #UserLicenseType
        ENDPROPERTIES
        
      FIELD #NewAccessRight
        ENUM
        PROPERTIES
          Name                #NewAccessRight
          Label               #@SDT16
          HelpText            #@SDT17
          Table               #SysSecEntryPointTmp
          Origin              #{65D4F909-7264-4D24-AF06-5D351E548097}
          EnumType            #AccessRight
        ENDPROPERTIES
        
      FIELD #ObjectAOTChildName
        STRING
        PROPERTIES
          Name                #ObjectAOTChildName
          Label               #@SYS338630
          HelpText            #@SYS338631
          Table               #SysSecEntryPointTmp
          Origin              #{84BC5E89-9552-45EE-969A-2CF52E19AD24}
          ExtendedDataType    #IdentifierName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #ObjectAOTDisplayName
        STRING
        PROPERTIES
          Name                #ObjectAOTDisplayName
          Table               #SysSecEntryPointTmp
          Origin              #{5E6DA975-E343-4E8E-AC9D-200744C93413}
          ExtendedDataType    #SysSecObjectAOTDisplayName
          StringSize          #81
        ENDPROPERTIES
        
      FIELD #ObjectAOTLayer
        ENUM
        PROPERTIES
          Name                #ObjectAOTLayer
          Label               #@SYS342472
          HelpText            #@SYS26367
          Table               #SysSecEntryPointTmp
          Origin              #{7CC9015E-E2C6-400B-889C-77F86C25F89E}
          EnumType            #UtilEntryLevel
        ENDPROPERTIES
        
      FIELD #ObjectAOTModel
        STRING
        PROPERTIES
          Name                #ObjectAOTModel
          Table               #SysSecEntryPointTmp
          Origin              #{733DAB1B-093D-4EE2-8AC5-70981A1A03AA}
          ExtendedDataType    #ModelDisplayName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #ObjectAOTName
        STRING
        PROPERTIES
          Name                #ObjectAOTName
          Label               #@SDT18
          HelpText            #@SDT19
          Table               #SysSecEntryPointTmp
          Origin              #{5B1DA45E-3E27-46E0-A99D-90DD3A182983}
          ExtendedDataType    #IdentifierName
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #ObjectDescription
        STRING
        PROPERTIES
          Name                #ObjectDescription
          Label               #@SDT20
          Table               #SysSecEntryPointTmp
          Origin              #{7CF59953-2133-4247-A9B6-1F9E47F06524}
          ExtendedDataType    #LabelType
          StringSize          #1999
        ENDPROPERTIES
        
      FIELD #ObjectID
        INT64
        PROPERTIES
          Name                #ObjectID
          Label               #@SYS338606
          Visible             #No
          Table               #SysSecEntryPointTmp
          Origin              #{471119DE-05A1-40EC-BEC8-BBE5B7832B9E}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #ObjectKey
        STRING
        PROPERTIES
          Name                #ObjectKey
          Visible             #No
          Table               #SysSecEntryPointTmp
          Origin              #{F4B2429B-175B-46D0-983D-EBEB129EC995}
          ExtendedDataType    #SysSecEntryPointKey
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #ObjectLabel
        STRING
        PROPERTIES
          Name                #ObjectLabel
          Table               #SysSecEntryPointTmp
          Origin              #{E8526236-7715-48E6-BBE0-2F0BBEF9A4B8}
          ExtendedDataType    #LabelType
          StringSize          #1999
        ENDPROPERTIES
        
      FIELD #ObjectType
        ENUM
        PROPERTIES
          Name                #ObjectType
          Label               #@SYS338628
          HelpText            #@SYS338629
          Table               #SysSecEntryPointTmp
          Origin              #{5E64BAC1-AE5E-43A7-AC78-FF7D7DCA2912}
          EnumType            #SecurableType
        ENDPROPERTIES
        
      FIELD #OldAccessRight
        ENUM
        PROPERTIES
          Name                #OldAccessRight
          Label               #@SDT21
          HelpText            #@SDT22
          Table               #SysSecEntryPointTmp
          Origin              #{C13E8665-950B-4B06-8E19-B67FF1FEF0D7}
          EnumType            #AccessRight
        ENDPROPERTIES
        
      FIELD #Recorded
        ENUM
        PROPERTIES
          Name                #Recorded
          Label               #@SDT23
          HelpText            #@SDT24
          Table               #SysSecEntryPointTmp
          Origin              #{27C3FE0D-1A34-4131-A6FC-E5BF0EEE811A}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #SystemUserRight
        ENUM
        PROPERTIES
          Name                #SystemUserRight
          Label               #@SDT25
          HelpText            #@SDT26
          Table               #SysSecEntryPointTmp
          Origin              #{EDC92341-EAB2-4C65-BBC6-CA078E9BD911}
          EnumType            #AccessRight
        ENDPROPERTIES
        
      FIELD #UserLicenseApplies
        ENUM
        PROPERTIES
          Name                #UserLicenseApplies
          Label               #@SDT27
          HelpText            #@SDT28
          Table               #SysSecEntryPointTmp
          Origin              #{0D1E33F0-BC86-4FEE-915B-F429AB9B0FDA}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ViewUserLicense
        ENUM
        PROPERTIES
          Name                #ViewUserLicense
          Label               #@SDT29
          HelpText            #@SDT30
          Table               #SysSecEntryPointTmp
          Origin              #{2BF98D15-AC69-4F70-9EA3-AD16AB26FD4A}
          EnumType            #UserLicenseType
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #EntryPointManager
        PROPERTIES
          Name                #EntryPointManager
          Label               #@SDT31
        ENDPROPERTIES
        
        GROUPFIELDS
          #Recorded
          #ObjectType
          #ObjectAOTDisplayName
          #AccessRight
          #OldAccessRight
          #SystemUserRight
          #ObjectLabel
          #UserLicenseApplies
          #EffectiveUserLicense
          #ObjectAOTLayer
          #ObjectAOTModel
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EPTrace
        PROPERTIES
          Name                #EPTrace
          Label               #@SDT32
        ENDPROPERTIES
        
        GROUPFIELDS
          #EPTraceUserName
          #EPTraceSessionId
          #EPTraceModuleName
          #EPTracePageName
          #EPTraceIsPostBack
          #ObjectType
          #ObjectAOTName
          #AccessRight
          #SystemUserRight
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReferenceObject
        PROPERTIES
          Name                #ReferenceObject
          Label               #@SDT33
        ENDPROPERTIES
        
        GROUPFIELDS
          #ObjectLabel
          #ObjectAOTName
          #AccessRight
          #ObjectDescription
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SetEntryPointRights
        PROPERTIES
          Name                #SetEntryPointRights
          Label               #@SDT34
        ENDPROPERTIES
        
        GROUPFIELDS
          #ObjectType
          #ObjectAOTDisplayName
          #NewAccessRight
          #AccessRight
          #SystemUserRight
          #ObjectLabel
          #UserLicenseApplies
          #ViewUserLicense
          #MaintainUserLicense
          #ObjectAOTLayer
          #ObjectAOTModel
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ObjectKeyIdx
      PROPERTIES
        Name                #ObjectKeyIdx
        AllowDuplicates     #No
        Origin              #{396393DE-36AD-42D0-9E19-EF74AA90DCCA}
      ENDPROPERTIES
      
      INDEXFIELDS
        #ObjectKey
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysSecOrganizationsTmp unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysSecOrganizationsTmp
    EnforceFKRelation 1
    PROPERTIES
      Name                #SysSecOrganizationsTmp
      Label               #@SDT37
      TableType           #InMemory
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      DeveloperDocumentation  #This table holds the organization assignment
      Origin              #{D766549E-F86F-436A-93A7-6770F2C05DE6}
    ENDPROPERTIES
    
    FIELDS
      FIELD #OMHierarchyType
        INT64
        PROPERTIES
          Name                #OMHierarchyType
          Table               #SysSecOrganizationsTmp
          Origin              #{E416CF9A-2C5F-4F8E-961C-5D2E925B7854}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #OMInternalOrganization
        INT64
        PROPERTIES
          Name                #OMInternalOrganization
          Label               #@SYS130613
          Table               #SysSecOrganizationsTmp
          Origin              #{F98F0C08-CF2F-4523-9A39-FCA2AED25F1A}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoSummary
        PROPERTIES
          Name                #AutoSummary
        ENDPROPERTIES
        
        GROUPFIELDS
          #OMInternalOrganization
          #OMHierarchyType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #OMInternalOrganization
          #OMHierarchyType
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #OMInternalOrganizationIdx
      PROPERTIES
        Name                #OMInternalOrganizationIdx
        Origin              #{D29E3288-BE07-4CB4-83B0-C8977F93403C}
      ENDPROPERTIES
      
      INDEXFIELDS
        #OMInternalOrganization
        #OMHierarchyType
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #OMHierarchyType
        PROPERTIES
          Name                #OMHierarchyType
          Table               #OMHierarchyType
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OMHierarchyType
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OrganizationAssignment
        PROPERTIES
          Name                #OrganizationAssignment
          Table               #OMInternalOrganization
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #InternalOrganization
          Role                #UserRoleOrganization
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OMInternalOrganization
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysSecRecordedEntryPoint unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysSecRecordedEntryPoint
    EnforceFKRelation 1
    PROPERTIES
      Name                #SysSecRecordedEntryPoint
      Label               #@SDT35
      TitleField1         #User
      TitleField2         #SecurableObject
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      DeveloperDocumentation  #@SDT36
      Origin              #{319E9680-83E7-40CF-B8CF-21486EF24B6A}
    ENDPROPERTIES
    
    FIELDS
      FIELD #SecurableObject
        INT64
        PROPERTIES
          Name                #SecurableObject
          Visible             #No
          Table               #SysSecRecordedEntryPoint
          Origin              #{0C16634B-6DE8-41ED-BBC0-4E64F79B83F7}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #SessionId
        INT
        PROPERTIES
          Name                #SessionId
          Visible             #No
          Table               #SysSecRecordedEntryPoint
          Origin              #{D64B822E-D047-4E79-8AC1-6678655BF2E6}
          ExtendedDataType    #SessionId
        ENDPROPERTIES
        
      FIELD #User
        STRING
        PROPERTIES
          Name                #User
          Visible             #No
          Table               #SysSecRecordedEntryPoint
          IgnoreEDTRelation   #Yes
          Origin              #{63F1D7E5-BAB6-4CC2-9F1C-745940AB6309}
          ExtendedDataType    #SysUserId
          StringSize          #8
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #SecurableObject
          #User
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #SecurableObjectIdx
      PROPERTIES
        Name                #SecurableObjectIdx
        Origin              #{DB5EAD83-C58C-4D45-93B0-6936110C9FB5}
      ENDPROPERTIES
      
      INDEXFIELDS
        #SecurableObject
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #SecurableObject
        PROPERTIES
          Name                #SecurableObject
          Table               #SecurableObject
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SecurableObject
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlMorphXRevisionTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlMorphXRevisionTable
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlMorphXRevisionTable
      Systemtable         #Yes
      SecurityKey         #SysDevelopmentTables
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Transaction
      PrimaryIndex        #ItemPathVersionIdx
      ClusterIndex        #ItemPathVersionIdx
      CreatedDateTime     #Yes
      CreatedBy           #Yes
      DeveloperDocumentation  #@SYS123447
      Origin              #{2C2409EF-0000-1000-4EAD-7FD17B921D7C}
      LegacyId            #2543
    ENDPROPERTIES
    
    FIELDS
      FIELD #Action
        STRING
        PROPERTIES
          Name                #Action
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{6EBFE732-8AAF-4F08-83A7-5C79E13672EA}
          LegacyId            #6
          ExtendedDataType    #SysVersionControlActionText
          StringSize          #200
        ENDPROPERTIES
        
      FIELD #Comment
        STRING
        PROPERTIES
          Name                #Comment
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{796F1BB7-C4E9-43A2-BADD-F0B57330B3AE}
          LegacyId            #5
          ExtendedDataType    #SysVersionControlItemComment
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #ItemPath
        STRING
        PROPERTIES
          Name                #ItemPath
          Mandatory           #Yes
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{9FC44834-3131-4A17-8306-669026845C5C}
          LegacyId            #1
          ExtendedDataType    #SysVersionControlItemPath
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #RevisionData
        QUEUE
        PROPERTIES
          Name                #RevisionData
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{A8706604-D358-43FF-855F-3FABE483E120}
          LegacyId            #7
          ExtendedDataType    #Blobdata
        ENDPROPERTIES
        
      FIELD #Version
        INT
        PROPERTIES
          Name                #Version
          Mandatory           #Yes
          Table               #SysVersionControlMorphXRevisionTable
          Origin              #{B999F33A-19BE-4150-9629-358C7220D7D2}
          LegacyId            #4
          ExtendedDataType    #SysVersionControlItemVersion
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #Version
          #Comment
          #Action
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ItemPathVersionIdx
      PROPERTIES
        Name                #ItemPathVersionIdx
        AllowDuplicates     #No
        Origin              #{2B120001-09EF-1000-E72C-4A1A063213FA}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemPath
        #Version
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #SysVersionControlMorphXItemTable
        PROPERTIES
          Name                #SysVersionControlMorphXItemTable
          Table               #SysVersionControlMorphXItemTable
          EntityRelationshipRole  #@SYS123446
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Composition
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemPath
            RelatedField        #ItemPath
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #createItem
        #/// <summary>
        #///    Creates a <c>SysVersionControlTmpItem</c> record from this revision.
        #/// </summary>
        #/// <returns>
        #///    The new <c>SysVersionControlTmpItem</c> record.
        #/// </returns>
        #public SysVersionControlTmpItem createItem()
        #{
        #    #file
        #    SysVersionControlTmpItem item;
        #    SysVersionControlItemPath itemPath;
        #    SysVersionControllable controllable;
        #
        #    itemPath = SysVersionControlMorphXLockTable::internalFilenameToItemPath(this.ItemPath);
        #
        #    controllable = SysTreeNodeVirtualDeleted::newTreeNodePath(itemPath);
        #
        #    Debug::assert(controllable != null);
        #
        #    item.InternalFilename = strReplace(this.ItemPath+controllable.fileExtension(), '\\', '/');
        #    item.Version = this.Version;
        #    item.ItemPath = itemPath;
        #    if (hasGUI())
        #    {
        #        item.ImageRes = new ImageListAppl_Aot().image(SysVersionControlSystem::path2Image(item.ItemPath));
        #    }
        #    item.ActionText = this.Action;
        #    item.Comment = this.Comment;
        #    item.User = this.CreatedBy;
        #    item.vcsDate = DateTimeUtil::date(this.CreatedDateTime);
        #    item.vcsTime = DateTimeUtil::time(this.CreatedDateTime);
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #writeToFile
        #/// <summary>
        #///    Writes the revision data to a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of the file to write the data to.
        #/// </param>
        #/// <remarks>
        #///    The file is created on the client tier.
        #///    If a file already exists with the given file name, it is
        #///    overwritten.
        #/// </remarks>
        #public void writeToFile(Filename _filename)
        #{
        #    if (this.RevisionData)
        #    {
        #        SysVersionControlMorphXRevisionTable::writeToFileClient(_filename, this.RevisionData);
        #    }
        #    else
        #    {
        #        throw error("@SYS136800");
        #    }
        #}
      ENDSOURCE
      SOURCE #create
        #/// <summary>
        #///    Creates a revision record.
        #/// </summary>
        #/// <param name="_itemPath">
        #///    The path of the item for this revision.
        #/// </param>
        #/// <param name="_action">
        #///    The action performed on the item in this revision.
        #/// </param>
        #/// <param name="_comment">
        #///    The description of this revision.
        #/// </param>
        #/// <param name="_filename">
        #///    The file name with the revision data; optional.
        #/// </param>
        #/// <returns>
        #///    The new record.
        #/// </returns>
        #public server static SysVersionControlMorphXRevisionTable create(
        #    SysVersionControlItemPath _itemPath,
        #    SysVersionControlActionText _action,
        #    SysVersionControlItemComment _comment,
        #    Filename _filename = '')
        #{
        #    SysVersionControlMorphXRevisionTable revision;
        #
        #    //
        #    // Set descriptors
        #    //
        #    ttsbegin;
        #    revision.clear();
        #    revision.ItemPath = _itemPath;
        #    revision.Action = _action;
        #    revision.Comment = _comment;
        #
        #    //
        #    // Load file and clean up
        #    //
        #    if (_filename)
        #    {
        #        revision.RevisionData = SysVersionControlMorphXRevisionTable::readFromFile(_filename);
        #    }
        #    //
        #    // Set version number
        #    //
        #
        #    revision.Version = SysVersionControlMorphXRevisionTable::latestVersionNumber(_itemPath) + 1;
        #    revision.insert();
        #    ttscommit;
        #
        #    return revision;
        #}
      ENDSOURCE
      SOURCE #find
        #public static SysVersionControlMorphXRevisionTable find(
        #    SysVersionControlItemPath _itemPath,
        #    SysVersionControlItemVersion _version,
        #    boolean _forupdate = false)
        #{
        #    SysVersionControlMorphXRevisionTable revision;
        #
        #    if (_forupdate)
        #    {
        #        revision.selectForUpdate(true);
        #    }
        #
        #    select firstonly revision
        #        where revision.ItemPath == _itemPath &&
        #              revision.Version == _version;
        #
        #    return revision;
        #}
      ENDSOURCE
      SOURCE #getContainerHistory
        #/// <summary>
        #/// Gets the history records for the container node.
        #/// </summary>
        #/// <param name="_container">
        #/// The instance of the container node.
        #/// </param>
        #/// <param name="_vcsItemPath">
        #/// The path to the container node in the version control system.
        #/// </param>
        #/// <param name="_internalFileName">
        #/// The internal file name of the container
        #/// </param>
        #/// <returns>
        #/// The history records for the container node.
        #/// </returns>
        #public static SysVersionControlTmpItem getContainerHistory(SysTreeNodeContainer _container, SysVersionControlItemPath _vcsItemPath, Filename _internalFileName)
        #{
        #    int history;
        #    SysVersionControlMorphXRevisionTable revision;
        #    SysVersionControlMorphXRevisionTable revisionComment;
        #    SysVersionControlTmpItem item;
        #    SysVersionControllable controllable;
        #    str containerPath;
        #    SysVersionControlItemPath searchPattern;
        #
        #    controllable = _container as SysVersionControllable;
        #    Debug::assert(controllable != null);
        #
        #    containerPath = controllable.versionControlItemPath();
        #
        #    // The search pattern will look for all items under the container path
        #    searchPattern =  strReplace(_vcsItemPath, @"\", @"\\") + @"\\*";
        #
        #    while select CreatedDateTime, CreatedBy from revision
        #        group by CreatedDateTime, CreatedBy
        #        where revision.ItemPath like searchPattern
        #    {
        #        // Because in X++ we cannot group by comment we need to query for it separately.
        #        select firstonly comment from revisionComment
        #            where revisionComment.CreatedDateTime == revision.CreatedDateTime;
        #
        #        history++;
        #
        #        item.clear();
        #        item.InternalFilename = _internalFileName;
        #        item.Version = history;
        #        item.ItemPath = containerPath;
        #        if (hasGUI())
        #        {
        #            item.ImageRes = new ImageListAppl_Aot().image(SysVersionControlSystem::path2Image(controllable.versionControlItemPath()));
        #        }
        #
        #        item.ActionText = "";
        #        item.Comment = revisionComment.Comment;
        #        item.User = revision.CreatedBy;
        #        item.vcsDate = DateTimeUtil::date(revision.CreatedDateTime);
        #        item.vcsTime = DateTimeUtil::time(revision.CreatedDateTime);
        #        item.insert();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #latestVersionNumber
        #/// <summary>
        #/// Returns the version number of the latest revision.
        #/// </summary>
        #/// <param name="_itemPath">
        #/// The path of the item requested.
        #/// </param>
        #/// <returns>
        #/// The version number.
        #/// </returns>
        #static server public SysVersionControlItemVersion latestVersionNumber(SysVersionControlItemPath _itemPath)
        #{
        #    return (select maxof(Version) from sysVersionControlMorphXRevisionTable
        #            where sysVersionControlMorphXRevisionTable.ItemPath == _itemPath).Version;
        #}
      ENDSOURCE
      SOURCE #readFromFile
        #/// <summary>
        #///    Reads the revision data from a file on the client tier.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of the file to read.
        #/// </param>
        #/// <returns>
        #///    The revision data from the file.
        #/// </returns>
        #private static client container readFromFile(Filename _filename)
        #{
        #    BinData binData = new BinData();
        #;
        #    binData.loadFile(_filename);
        #    WinAPI::deleteFile(_filename);
        #    return binData.getData();
        #}
      ENDSOURCE
      SOURCE #writeToFileClient
        #/// <summary>
        #///    Writes the revision data to a file on the client tier.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of the file to which to write.
        #/// </param>
        #/// <param name="_revisionData">
        #///    The revision data to write to the file.
        #/// </param>
        #private static client void writeToFileClient(Filename _filename, container _revisionData)
        #{
        #    BinData binData = new BinData();
        #;
        #    binData.setData(_revisionData);
        #    binData.saveFile(_filename);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : xRefReferences unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #xRefReferences
    EnforceFKRelation 0
    PROPERTIES
      Name                #xRefReferences
      Label               #@SYS24666
      TitleField1         #Reference
      TitleField2         #xRefPathRecId
      Systemtable         #Yes
      ConfigurationKey    #SysDevelopmentMorphX
      SecurityKey         #SysDevelopmentTables
      AOSAuthorization    #CreateReadUpdateDelete
      CacheLookup         #Found
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Main
      PrimaryIndex        #Key
      ClusterIndex        #Key
      CreatedDateTime     #Yes
      DEL_createdTime     #Yes
      CreatedBy           #Yes
      DeveloperDocumentation  #@SYS122912
      EntityRelationshipType  #Relationship
      Origin              #{2C0E0204-0000-1000-7E63-7EB429030777}
      LegacyId            #516
    ENDPROPERTIES
    
    FIELDS
      FIELD #accessLevel
        ENUM
        PROPERTIES
          Name                #accessLevel
          Label               #@SYS68159
          HelpText            #@SYS54227
          Table               #xRefReferences
          Origin              #{5A626309-8F11-4CDD-BB69-CFB025C8CFCF}
          ExtendedDataType    #xRefAccessLevelType
          EnumType            #AccessLevel
        ENDPROPERTIES
        
      FIELD #Column
        INT
        PROPERTIES
          Name                #Column
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #xRefReferences
          Origin              #{345C8CFE-4819-47D3-8F52-887CA32FC94C}
          LegacyId            #4
          ExtendedDataType    #SourceColumnNum
        ENDPROPERTIES
        
      FIELD #line
        INT
        PROPERTIES
          Name                #line
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #xRefReferences
          Origin              #{C5B14780-A716-4FBC-9316-9D2DB62ED6D3}
          LegacyId            #5
          ExtendedDataType    #SourceLineNum
        ENDPROPERTIES
        
      FIELD #Reference
        ENUM
        PROPERTIES
          Name                #Reference
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #xRefReferences
          Origin              #{7BA628E7-CD54-4C42-A3FD-C1A0CB3FB5F3}
          LegacyId            #1
          ExtendedDataType    #xRefReferenceType
          EnumType            #XRefReference
        ENDPROPERTIES
        
      FIELD #referencePathRecId
        INT64
        PROPERTIES
          Name                #referencePathRecId
          AllowEditOnCreate   #No
          Table               #xRefReferences
          Origin              #{F47BAF8A-6F67-4696-9EF4-DBF2AE160BBE}
          LegacyId            #6
          ExtendedDataType    #xRefPathRecId
        ENDPROPERTIES
        
      FIELD #xRefNameRecId
        INT64
        PROPERTIES
          Name                #xRefNameRecId
          AllowEditOnCreate   #No
          Table               #xRefReferences
          Origin              #{222CA043-DB2F-40FB-BB4A-F34BABAD1BD5}
          LegacyId            #3
          ExtendedDataType    #xRefNameRecId
        ENDPROPERTIES
        
      FIELD #xRefPathRecId
        INT64
        PROPERTIES
          Name                #xRefPathRecId
          Mandatory           #Yes
          AllowEditOnCreate   #No
          Table               #xRefReferences
          Origin              #{3E2AB244-ED4B-4454-AD2D-EF266C7725C4}
          LegacyId            #2
          ExtendedDataType    #xRefPathRecId
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #Reference
          #line
          #Column
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AllFields
        PROPERTIES
          Name                #AllFields
          Label               #@SYS6047
        ENDPROPERTIES
        
        GROUPFIELDS
          #Reference
          #xRefPathRecId
          #xRefNameRecId
          #Column
          #line
          #referencePathRecId
          #accessLevel
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Overview
        PROPERTIES
          Name                #Overview
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #Reference
          #path
          #line
          #Column
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #PathIdx
      PROPERTIES
        Name                #PathIdx
        Origin              #{2B070001-0204-1000-5061-746849647800}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #xRefPathRecId
        #line
        #Column
      ENDINDEXFIELDS
      
      #NamePathIds
      PROPERTIES
        Name                #NamePathIds
        Origin              #{2B0B0002-0204-1000-0114-E00562617468}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #xRefNameRecId
        #xRefPathRecId
        #line
        #Column
      ENDINDEXFIELDS
      
      #referencePathRecId
      PROPERTIES
        Name                #referencePathRecId
        Origin              #{2B120003-0204-1000-CCF5-3A8E3100AC4E}
        LegacyId            #3
      ENDPROPERTIES
      
      INDEXFIELDS
        #referencePathRecId
        #xRefPathRecId
        #line
        #Column
      ENDINDEXFIELDS
      
      #Key
      PROPERTIES
        Name                #Key
        AllowDuplicates     #No
        Origin              #{2B030004-0204-1000-4B65-790000000000}
        LegacyId            #4
      ENDPROPERTIES
      
      INDEXFIELDS
        #xRefPathRecId
        #xRefNameRecId
        #Reference
        #line
        #Column
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #referencePathRecId
        PROPERTIES
          Name                #referencePathRecId
          Table               #xRefPaths
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Aggregation
          RelatedTableRole    #xRefPaths
          Role                #xRefPaths_xRefReferences
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #referencePathRecId
            RelatedField        #RecId
            SourceEDT           #xRefPathRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #xRefNames
        PROPERTIES
          Name                #xRefNames
          Table               #xRefNames
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Aggregation
          RelatedTableRole    #xRefNames
          Role                #xRefNames_xRefReferences
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #xRefNameRecId
            RelatedField        #RecId
            SourceEDT           #xRefNameRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #xRefPathsRecId
        PROPERTIES
          Name                #xRefPathsRecId
          Table               #xRefPaths
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Aggregation
          RelatedTableRole    #xRefPaths_1
          Role                #xRefPaths_1_xRefReferences
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #xRefPathRecId
            RelatedField        #RecId
            SourceEDT           #xRefPathRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #kind
        #// BP deviation documented
        #display xRefKindType kind()
        #{
        #    return xRefNames::findRecId(this.xRefNameRecId).Kind;
        #}
      ENDSOURCE
      SOURCE #name
        #// BP deviation documented
        #display xRefName name()
        #{
        #    return xRefNames::findRecId(this.xRefNameRecId).Name;
        #}
      ENDSOURCE
      SOURCE #path
        #// BP deviation documented
        #display xRefPath path()
        #{
        #    return xRefPaths::findRecId(this.xRefPathRecId).Path;
        #}
      ENDSOURCE
      SOURCE #referencePath
        #// BP deviation documented
        #display xRefPath referencePath()
        #{
        #    return xRefPaths::findRecId(this.ReferencePathRecId).Path;
        #}
        #
      ENDSOURCE
      SOURCE #SDSgetSourceLine
        #//BP Deviation documented
        #[SysClientCacheDataMethodAttribute]
        #display SourceLine SDSgetSourceLine()
        #{
        #    SourceLine  res;
        #
        #    TreeNode    node;
        #
        #    ;
        #
        #    if (this.line)
        #    {
        #        node = TreeNode::findNode(this.path());
        #        if (node)
        #        {
        #            res = strLine(node.AOTgetSource(), this.line - 1);
        #            res = strLRTrim(res);
        #        }
        #    }
        #    return res;
        #}
      ENDSOURCE
      SOURCE #SDSinCurrentLayer
        #//BP Deviation documented
        #[SysClientCacheDataMethodAttribute]
        #display NoYesId SDSinCurrentLayer()
        #{
        #    NoYes       ret;
        #
        #    TreeNode    node;
        #
        #    ;
        #
        #    //if (this.line)
        #    //{
        #    node = TreeNode::findNode(this.path());
        #    if (node && node.treeNodeType().isLayerAware())
        #    {
        #        ret = SysTreeNode::isNodeInLayer(node, currentAOLayer());
        #    }
        #    //}
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #typeName
        #// BP deviation documented
        #display xRefName typeName()
        #{
        #    return xRefNames::findRecId(this.xRefNameRecId).TypeName;
        #}
      ENDSOURCE
      SOURCE #find
        #static xRefReferences find(xRefPathRecId    _xRefNameRecId,
        #                           xRefPathRecId    _xRefPathRecId,
        #                           XRefReference    _xRefReference      = XRefReference::Call,
        #                           SourceLineNum    _sourceLineNum      = 0,
        #                           SourceColumnNum  _sourceColumnNum    = 0,
        #                           boolean          _forUpdate          = false)
        #{
        #    xRefReferences xRefReferences;
        #
        #    if (_xRefNameRecId &&
        #        _xRefPathRecId)
        #    {
        #        xRefReferences.selectForUpdate(_forUpdate);
        #
        #        select firstonly xRefReferences
        #            index Key
        #            where xRefReferences.xRefNameRecId == _xRefNameRecId
        #               && xRefReferences.xRefPathRecId == _xRefPathRecId
        #               && xRefReferences.Reference     == _xRefReference
        #               && xRefReferences.Line          == _sourceLineNum
        #               && xRefReferences.Column        == _sourceColumnNum;
        #    }
        #
        #    return xRefReferences;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: UTS

; Microsoft Dynamics AX String: SysSecEntryPointKey unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #SysSecEntryPointKey
  STRING
    PROPERTIES
      Name                #SysSecEntryPointKey
      Label               #@SDT38
      HelpText            #@SDT39
      Origin              #{60F857DF-0334-4FC8-9906-83E470BB7794}
      StringSize          #100
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTS

; Microsoft Dynamics AX String: SysSecObjectAOTDisplayName unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #SysSecObjectAOTDisplayName
  STRING
    PROPERTIES
      Name                #SysSecObjectAOTDisplayName
      Label               #@SDT40
      HelpText            #@SDT41
      Origin              #{7A7F7642-9A5D-4C0A-B7E6-18186698E920}
      StringSize          #81
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: DBE

; Microsoft Dynamics AX Enumtype : DEVConversionErrorMessage unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #DEVConversionErrorMessage
    PROPERTIES
      Name                #DEVConversionErrorMessage
      UseEnumValue        #Yes
      Origin              #{4FDA7497-753E-4038-8D11-1FA71C18A540}
    ENDPROPERTIES
    
    TYPEELEMENTS
      #Warning
      PROPERTIES
        Name                #Warning
        Label               #Warning
        EnumValue           #0
      ENDPROPERTIES
      
      #Error
      PROPERTIES
        Name                #Error
        Label               #Error
        EnumValue           #1
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: DBE

; Microsoft Dynamics AX Enumtype : DEVSysDSRefreshAction unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #DEVSysDSRefreshAction
    PROPERTIES
      Name                #DEVSysDSRefreshAction
      UseEnumValue        #Yes
      Origin              #{7002A47A-47E1-46F9-9338-56DA96F20983}
    ENDPROPERTIES
    
    TYPEELEMENTS
      #RereadRefresh
      PROPERTIES
        Name                #RereadRefresh
        Label               #RereadRefresh
        EnumValue           #0
      ENDPROPERTIES
      
      #Research
      PROPERTIES
        Name                #Research
        Label               #Research
        EnumValue           #1
      ENDPROPERTIES
      
      #ExecuteQuery
      PROPERTIES
        Name                #ExecuteQuery
        Label               #ExecuteQuery
        EnumValue           #2
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: DBE

; Microsoft Dynamics AX Enumtype : DEVLabelActionType unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #DEVLabelActionType
    PROPERTIES
      Name                #DEVLabelActionType
      Label               #Label action
      UseEnumValue        #Yes
      Origin              #{D31E4FC7-1181-46A2-8B89-553D2CE0F7DC}
    ENDPROPERTIES
    
    TYPEELEMENTS
      #Skip
      PROPERTIES
        Name                #Skip
        Label               #Skip
        EnumValue           #0
      ENDPROPERTIES
      
      #CreateNewLabel
      PROPERTIES
        Name                #CreateNewLabel
        Label               #Create New Label
        EnumValue           #1
      ENDPROPERTIES
      
      #UseExisting
      PROPERTIES
        Name                #UseExisting
        Label               #Use Existing
        EnumValue           #2
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: DBE

; Microsoft Dynamics AX Enumtype : SysSecDevelopmentType unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #SysSecDevelopmentType
    PROPERTIES
      Name                #SysSecDevelopmentType
      Label               #@SDT42
      Help                #@SDT43
      UseEnumValue        #Yes
      Origin              #{5B6CA25E-023C-4600-A209-1D2A6974A984}
    ENDPROPERTIES
    
    TYPEELEMENTS
      #Role
      PROPERTIES
        Name                #Role
        Label               #@SYS301892
        EnumValue           #0
      ENDPROPERTIES
      
      #Duty
      PROPERTIES
        Name                #Duty
        Label               #@SYS342601
        EnumValue           #1
      ENDPROPERTIES
      
      #Privilege
      PROPERTIES
        Name                #Privilege
        Label               #@SYS342600
        EnumValue           #2
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: MCR

; Microsoft Dynamics AX Macro: SysSecEntryPointManager unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysSecEntryPointManager
    ##define.SecGeneratedRoleAOTNamePrefix('SysSecDevToolRole')
    #
    ##define.SecEntryPoint('SecEntryPoint')
    ##define.SecEntryPointFormKey('SecEntryPointForm')
    ##define.FormRunHookKey('SecEntryPointFormRunHook')
    ##define.AssignOMOwnerKey('SecEntryPointAssignOM')
    ##define.AssignOMKey('SecEntryPointAssignOM')
    ##define.EntryPointRecorderKey('SecEntryPointRecorder')
    #
    ##define.SkipDefaultFormRunHookOnLoadFormKey('SecEntryPointFormRunHookOnLoadForm')
    ##define.DisableSysAdminUserSetting('SecEntryPointDisableSysAdminRole')
    ##define.ClientRecorderClassName('SysSecurityRecorder_1CC4B7A84D53')
    ##define.OpenInWorkspaceKey('SecEntryPointWorksSpaceExecute')
    #
    ##define.EntryPointObjectKeyDisplayMenuItem('d')
    ##define.EntryPointObjectKeyOutputMenuItem('o')
    ##define.EntryPointObjectKeyActionMenuItem('a')
    ##define.EntryPointObjectKeyWebURLItem('wu')
    ##define.EntryPointObjectKeyWebActionItem('wa')
    ##define.EntryPointObjectKeyWebContentItem('wc')
    ##define.EntryPointObjectKeyServiceOperation('s')
    #
    ##define.RecordingFileXmlRoot('EntryPoints')
    ##Define.RecordingFileXmlElement('EntryPoint')
    ##Define.RecordingFileXmlElementTypeAttribute('Type')
    ##Define.RecordingFileXmlElementAOTNameAttribute('AOTName')
    ##Define.RecordingFileXmlElementOperationAttribute('Operation')
  ENDSOURCE
  PROPERTIES
    Origin              #{518A3F99-465B-4EC3-9A45-1AE00BB896A6}
  ENDPROPERTIES
  

***Element: CLS

; Microsoft Dynamics AX Class: Application unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Application
    PROPERTIES
      Name                #Application
      Extends             #xApplication
      RunOn               #Server
      Origin              #{2D0BF001-0000-1000-542F-0F4B7A636174}
      LegacyId            #61441
    ENDPROPERTIES
    
    METHODS
      SOURCE #budgetControlProcessor
        #/// <summary>
        #///   Gets the <c>BudgetControlProcessor</c> class instance.
        #/// </summary>
        #/// <returns>
        #///   The <c>BudgetControlProcessor</c> class instance.
        #/// </returns>
        #public BudgetControlProcessor budgetControlProcessor()
        #{
        #    if (!budgetControlProcessor)
        #    {
        #        budgetControlProcessor = BudgetControlProcessor::construct();
        #    }
        #
        #    return budgetControlProcessor;
        #}
        #
      ENDSOURCE
      SOURCE #canDeleteCompany
        #public boolean canDeleteCompany(SelectableDataArea dataareaId)
        #{
        #    DocuRef             docuRef;
        #    DocuValue           docuValue;
        #    SysUserProfiles     sysUserProfiles;
        #    EventCompanyRule    eventCompanyRule;
        #    UserInfo            userInfo;
        #
        #    // SYP Modifications - SP2 - Begin
        #    // correcting error HQ-230-50-8JHc
        #    VirtualDataAreaList virtualDataAreaList;
        #    SysRecordLevelSecurity sysRecordLevelSecurity;
        #    // SYP Modifications - SP2 - ENd
        #
        #    BatchJob batchJob;
        #    Batch batch;
        #    BatchJobHistory batchJobHistory;
        #    BatchHistory batchHistory;
        #
        #    select firstonly RecId from batchJob where batchJob.Company ==dataareaId;
        #
        #    if (batchJob)
        #    return false;
        #
        #    select firstonly RecId from batch where batch.Company == dataareaId;
        #
        #    if (batch)
        #    return false;
        #
        #    select firstonly RecId from batchJobHistory where batchJobHistory.Company == dataareaId;
        #
        #    if (batchJobHistory)
        #    return false;
        #
        #    select firstonly RecId from batchHistory where batchHistory.Company == dataareaId;
        #
        #    if (batchHistory)
        #    return false;
        #
        #    if (!super(dataareaId))
        #    {
        #        return false;
        #    }
        #
        #    select docuRef
        #        where docuRef.RefCompanyId == dataareaId;
        #
        #    if (docuRef)
        #    return false;
        #
        #    select docuValue
        #        notexists join docuRef where docuRef.ValueRecId == docuValue.RecId;
        #
        #    if (docuValue)
        #    return false;
        #
        #    select virtualDataAreaList
        #        where virtualDataAreaList.Id == dataareaId;
        #
        #    if (virtualDataAreaList)
        #    return false;
        #
        #    select sysRecordLevelSecurity
        #        where sysRecordLevelSecurity.CompanyId == dataareaId;
        #
        #    if (sysRecordLevelSecurity)
        #    return false;
        #
        #
        #    select sysUserProfiles
        #        where sysUserProfiles.Company == dataareaId;
        #
        #    if (sysUserProfiles)
        #    return false;
        #
        #    select eventCompanyRule
        #        where eventCompanyRule.CompanyId == dataareaId;
        #
        #    if (eventCompanyRule)
        #    return false;
        #
        #    select firstonly RecId from userInfo where userInfo.Company ==dataareaId;
        #
        #    if (userInfo)
        #    return false;
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #canDoWMSLocationConstraintChecks
        #/// <summary>
        #///    Retrieves a Boolean value that determines whether constraint checks on <c>WMSLocation</c> locations
        #///    should be performed.
        #/// </summary>
        #/// <returns>
        #///    true if the checks can be done; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    This is done for performance reasons to avoid overhead for customers that does not have the
        #///    <c>WMSBasic</c> configurationr key enabled.
        #/// </remarks>
        #private boolean canDoWMSLocationConstraintChecks()
        #{
        #    return isConfigurationkeyEnabled(configurationKeyNum(WMSBasic));
        #}
      ENDSOURCE
      SOURCE #canUpdatexRef
        #/// <summary>
        #///   check whether cross reference can be updated.
        #/// </summary>
        #/// <returns>
        #///   return boolean specifying the result.
        #/// </returns>
        #boolean canUpdatexRef()
        #{
        #    // update db as we are running in updating xref
        #    if (!updatexRefDisable)
        #        return true;
        #
        #    // no update as we are running in updating xref for instance view
        #    return false;
        #}
      ENDSOURCE
      SOURCE #charMax
        #char charMax()
        #{
        #    SysSortOrder sysSortOrder;
        #
        #    if (xSession::isCLRSession() && charMax=="")
        #    {
        #        ttsbegin;
        #        select firstonly forupdate sysSortOrder
        #            order by Char desc;
        #        ttscommit;
        #
        #        if (sysSortOrder)
        #        {
        #            charMax = sysSortOrder.Char;
        #        }
        #    }
        #
        #    return charMax;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class Application extends xApplication
        #{
        #    char                            charMax;
        #
        #    SysCodeProfiler                 sysCodeProfiler;
        #    xRef                            lastxRef;
        #    boolean                         updatexRefDisable;      // Update of xRef in database. Can be temporarely canceled
        #
        #    // Handling of startupcommands
        #    SysStartupCmd                   sysStartupCmd;
        #
        #    // Multipurpose cache used e.g. for imagelists and Forms security setup
        #    SysGlobalCache                  globalCache;
        #
        #    // Handle for Inventory Multi Transaction System
        #    InventUpdateOnhandGlobal        inventUpdateOnhandGlobal;
        #
        #    // Handle for caching mechanism for Number Sequences
        #    NumberSeqNumCache               numberSeqNumCache;
        #
        #    // Transactional scope caching
        #    boolean                         transactionalScopeCacheExists;
        #
        #    // Handle for numbersequence system
        #    NumberSeqGlobal                 numberSeqGlobal;
        #
        #    // Handle for transaction log update control
        #    TransactionlogUpdateTTSControl  transactionlogUpdateTTSControl;
        #
        #    ReleaseUpdateTmpVersionInfo releaseUpdateTmpVersionInfo;
        #
        #    // Handle for cost transactions
        #    InventCostUpdateGlobal          inventCostUpdateGlobal;
        #
        #    // Handle for resource scheduling logger
        #    WrkCtrSchedulerLogger           resourceSchedulerLogger;
        #
        #    // Handle for WMSLocationChecks
        #    WMSLocationConstraintCheckerGlobal wmsLocationConstraintCheckerGlobal;
        #
        #    // Handle for budget control processor
        #    BudgetControlProcessor budgetControlProcessor;
        #
        #    // Track whether setDefaultCompany has been called at least once
        #    boolean setDefaultCompanyCalled;
        #
        #    // Wraps the systemSequence.suspendRecIds(...) functionallity.
        #    SysRecIdSequence sysRecIdSequence;
        #
        #    // Allow code using RunAs to transition to IL to use interpreter instead
        #    boolean executeBusinessOperationsWithCLR;
        #    boolean executeOperationsWithCLRInitialized;
        #    #define.PropertyString("Property")
        #
        #    LedgerPostingProcessor ledgerPostingProcessor;
        #
        #    // Handle for source document processing
        #    SourceDocumentProcessContext   sourceDocumentProcessContext;
        #}
      ENDSOURCE
      SOURCE #clearTransactionalScopeCache
        #private void clearTransactionalScopeCache()
        #{
        #    this.globalCache().clear(classStr(SysTransactionScopeCache));
        #
        #    transactionalScopeCacheExists = false;
        #}
      ENDSOURCE
      SOURCE #closingDown
        #void closingDown()  //called when Axapta is shutting down. The process can not be stopped
        #{
        #    SysUserLog userLog;
        #    Session session = new Session();
        #    #OccRetryCount
        #
        #    if (!Session::isServer())
        #    {
        #        SysUtilElementsLog::persistRegisteredUsages();
        #
        #        DimensionMRUProvider::saveInstance();
        #
        #        ttsbegin;
        #        select firstonly forupdate userLog
        #            where userLog.UserId      == curUserId() &&
        #                 userLog.CreatedDateTime == session.loginDateTime();
        #        try
        #        {
        #            if (userLog)
        #            {
        #                userLog.LogoutDateTime = DateTimeUtil::utcNow();
        #                userLog.TerminatedOk = true;
        #                userLog.update();
        #            }
        #        }
        #        catch (Exception::UpdateConflict)
        #        {
        #            if (xSession::currentRetryCount() >= #RetryNum)
        #            {
        #                throw Exception::UpdateConflictNotRecovered;
        #            }
        #            else
        #            {
        #                userLog.reread();
        #                retry;
        #            }
        #        }
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #createEventCUD
        #private void createEventCUD(
        #    Common          bufferCur,
        #    EventLogType    logType,
        #    container       changedFields   = conNull(),
        #    Common          bufferOrig      = null
        #    )
        #{
        #    EventCUD    eventCUD;
        #    List        list;
        #    SysDictTable dictTable;
        #    VirtualDataAreaList virtualDataAreaList;
        #
        #    dictTable = new SysDictTable(bufferCur.TableId);
        #
        #    if (dictTable.dataPrCompany() && bufferCur.DataAreaId == curext() &&
        #        !EventCompanyRule::hasCompanyRules(curext()))
        #    {
        #        return;
        #    }
        #
        #    ttsbegin;
        #
        #    //construct the cud record
        #    eventCUD.CudTableId = bufferCur.TableId;
        #    eventCUD.CudRecId   = bufferCur.RecId;
        #    eventCUD.Event      = logType;
        #    eventCUD.Status     = BatchStatus::Hold;
        #    eventCUD.CudTableId     = bufferCur.TableId;
        #    eventCUD.CudRecId       = bufferCur.RecId;
        #    if (dictTable.instanceRelationType() != 0)
        #    {
        #        eventCUD.CudInstanceRelationType = bufferCur.getFieldValue(fieldId2name(dictTable.id(), dictTable.instanceRelationType()));
        #    }
        #
        #    eventCUD.Event          = logType;
        #    eventCUD.Status         = BatchStatus::Hold;
        #    eventCUD.DataPerCompany = dictTable.dataPrCompany();
        #
        #    // CUD records now write the bufferOrig differently, so it will
        #    // have to be unpacked differently.
        #    eventCUD.CudRecordVersion = 2;
        #
        #    if (conLen(changedFields) > 0)
        #    {
        #        eventCUD.LogMap::setData(bufferCur, bufferOrig, changedFields);
        #    }
        #    else if (logType == EventLogType::Insert)
        #    {
        #        eventCUD.LogMap::setData(bufferCur);
        #    }
        #
        #    list                = SysDictTable::getUniqueIndexFields(bufferCur.TableId);
        #    if (list)
        #    {
        #        eventCUD.keyFieldList(list.pack());
        #        eventCUD.keyFieldData(SysDictTable::mapFieldIds2Values(list,bufferCur).pack());
        #    }
        #    if (bufferOrig)
        #    {
        #        eventCUD.PreviousRecord = buf2Con(bufferOrig);
        #    }
        #
        #    //if it's a shared table, create a CUD record for each company
        #    if (!dictTable.dataPrCompany())
        #    {
        #        eventCUD.CompanyId = '';
        #        eventCUD.insert();
        #    }
        #    else
        #    {
        #        if (bufferCur.DataAreaId == curext())
        #        {
        #             eventCUD.CompanyId = curext();
        #             eventCUD.insert();
        #        }
        #        else
        #        {
        #            // for each company being part of the virtual company generate a CUD record
        #            while select Id from virtualDataAreaList
        #                where virtualDataAreaList.VirtualDataArea == bufferCur.DataAreaId
        #            {
        #                if (EventCompanyRule::hasCompanyRules(virtualDataAreaList.Id))
        #                {
        #                    eventCUD.CompanyId = virtualDataAreaList.Id;
        #                    eventCUD.insert();
        #                }
        #            }
        #        }
        #    }
        #
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #dbSynchronize
        #///   <summary />
        #///    <param name="p1" />
        #///    <returns />
        #///
        #/// <remarks>
        #///    This API has a built-in authorization check that is invoked at run time. An exception is thrown if calls to this method are made by users who do not have access to the <see cref="Development Security
        #///    Key (SysDevelopment)" />
        #/// </remarks>
        #public boolean dbSynchronize(
        #    TableId         tableId                 = 0,   // 0 = all tables, non-zero is a valid table handle
        #    boolean         syncAsNeeded            = true,  // true = objects touched in the AOT, false = unconditional synchronize
        #    boolean         continueOnError         = true,
        #    boolean         showProgress            = true,  // true = report all problems, but throw only after all tables are synchronized, false = stop synchronize after first error/problem
        #    container       checkSyncTables         = conNull(), // [0] all tables or [x, y, z, ...] for 1 or more tables
        #    boolean         createAllIndexes        = true,
        #    boolean         useLockForSingleTable   = true)
        #{
        #    boolean ok;
        #    ReqReaderWriterLock reqReaderWriterLock = ReqReaderWriterLock::construct();
        #    str lockName = 'AXSYNC' + (tableId == 0 ? 'TABLES' : ('TABLEID' + int2str(tableId)));
        #    SqlSyncPending      sqlSyncPending;
        #
        #    setPrefix("@SYS22807");
        #    //trud developer tool, 25.05.2004 -->
        #    if (! tableId && DEVCommentsTool::isSuperUser() && isRunningMode() )
        #    {
        #        sqlSyncPending = new SqlSyncPending();
        #
        #        if (SQLSyncPending.databaseTouched())
        #        {
        #            if (Box::okCancel('Sync database?', DialogButton::Cancel) == DialogButton::Cancel)
        #            {
        #                SQLSyncPending.databaseTouched(false);
        #                return false;
        #            }
        #
        #        }
        #    }
        #    //trud developer tool, 25.05.2004 <--
        #
        #    // Use a database-level lock (name defined above, based on which table we're attempting to synchronize)
        #    // This prevents multiple synchronizations from happening in parallel, which can be an issue if you're
        #    // trying to start up multiple AOS instances at the same time.
        #    // We release the lock at the bottom of this method.
        #    reqReaderWriterLock.enterUpdateLock(lockName);
        #
        #    ok = super(tableId, syncAsNeeded, continueOnError, showProgress, checkSyncTables, createAllIndexes, useLockForSingleTable);
        #
        #    if (ok)
        #    {
        #        if (this.isRunningMode())
        #        {
        #            SysApplicationSetup::saveApplicationVersion(SysApplicationSetupMode::Synhronize);
        #
        #            // flush the AIF Caches.
        #            AifUtil::flushAifCaches();
        #        }
        #
        #        if (syncAsNeeded == false &&
        #            isConfigurationkeyEnabled(configurationKeyNum(ShipCarrier)) &&
        #            (tableId == 0 || tableId == tableNum(ShipCarrierStaging)) &&
        #            ShipCarrierStaging::isPhysicallyExistingInDB())
        #        {
        #            ShipCarrierStaging::createDBTrigger();
        #        }
        #
        #        if (syncAsNeeded == false &&
        #            isConfigurationkeyEnabled(configurationKeyNum(ShipCarrier)) &&
        #            (tableId == 0 || (tableId == tableNum(ShipCarrierStaging) ||
        #                              tableId == tableNum(ShipCarrierShippingRequest) ||
        #                              tableId == tableNum(ShipCarrierCODPackage) ||
        #                              tableId == tableNum(ShipCarrierSQLRoleUser))) &&
        #             ShipCarrierStaging::isPhysicallyExistingInDB() &&
        #             ShipCarrierSQLRoleUser::isPhysicallyExistingInDB() &&
        #             ShipCarrierCODPackage::isPhysicallyExistingInDB())
        #        {
        #            // super() call above will have validated security;
        #            // so running the createDBSToredProcedure unchecked.
        #            unchecked(Uncheck::TableSecurityPermission)
        #            {
        #                ShipCarrierSQLRoleUser::createDBStoredProcedure();
        #            }
        #        }
        #
        #        if (syncAsNeeded == false
        #            && isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS))
        #            && (tableId == 0 || tableId == tableNum(WHSInventReserve) || tableId == tableNum(InventDim))
        #            && InventDim::isPhysicallyExistingInDB()
        #            && WHSInventReserve::isPhysicallyExistingInDB())
        #        {
        #            WHSOnHandSPHelper::syncDBStoredProcedures();
        #        }
        #
        #        if (syncAsNeeded == false
        #            && (tableId == 0 || (tableId == tableNum(InventTrans) ||
        #                                 tableId == tableNum(SystemSequences) ||
        #                                 tableId == tableNum(InventClosingNonFinancialInventTrans) ||
        #                                 tableId == tableNum(InventTransOriginTransfer) ||
        #                                 tableId == tableNum(InventDim) ||
        #                                 tableId == tableNum(InventTransOrigin)))
        #            && isPhysicallyExistingInDB(tableNum(InventTransOriginTransfer))
        #            && isPhysicallyExistingInDB(tableNum(InventClosingNonFinancialInventTrans))
        #            && isPhysicallyExistingInDB(tableNum(InventTrans))
        #            && isPhysicallyExistingInDB(tableNum(InventDim))
        #            && isPhysicallyExistingInDB(tableNum(InventTransOrigin)))
        #        {
        #            InventCostPreCloseNonFinTransferHelper::syncDBStoredProcedure();
        #        }
        #
        #        // Create AIF Change Tracking stored procedures
        #        if (syncAsNeeded == false &&
        #            (tableId == 0 || (tableId == tableNum(AifSqlCdcEnabledTables))) &&
        #             AifSqlCdcEnabledTables::isPhysicallyExistingInDB())
        #        {
        #            new AifChangeTrackingPermission().assert();
        #            AifChangeTrackingConfiguration::initialize();
        #        }
        #
        #
        #        if (syncAsNeeded == false &&
        #            tableId == 0 &&
        #            !SysCheckList_Upgrade::isUpgrade())
        #        {
        #            SysSetupInstaller::loadAllData(true);
        #        }
        #    }
        #
        #    reqReaderWriterLock.exit(lockName);
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #deleteCompany
        #public void deleteCompany(SelectableDataArea dataareaId, boolean fDeleteCompanyInfo = true)
        #{
        #    DocuRef             docuRef;
        #    DocuValue           docuValue;
        #    SysUserProfiles     sysUserProfiles;
        #    CompanyInfo         companyInfo;
        #    EventCompanyRule    eventCompanyRule;
        #
        #    SysLastValue        sysLastValue;
        #
        #    // SYP Modifications - SP2 - Begin
        #    // correcting error HQ-230-50-8JHc
        #    VirtualDataAreaList virtualDataAreaList;
        #    SysRecordLevelSecurity sysRecordLevelSecurity;
        #    // SYP Modifications - SP2 - ENd
        #
        #    BatchJob batchJob;
        #    Batch batch;
        #    BatchJobHistory batchJobHistory;
        #    BatchHistory batchHistory;
        #
        #    ttsbegin;
        #    //Delete data in batch framework related tables
        #    delete_from batchJob where batchJob.Company == dataareaId
        #        notexists join batch where batch.BatchJobId == batchJob.RecId
        #        && batch.Company != dataareaId;
        #
        #    delete_from batchJobHistory where batchJobHistory.Company == dataareaId
        #        notexists join batchHistory where batchHistory.BatchJobHistoryId == batchJobHistory.RecId
        #        && batchHistory.Company != dataareaId;
        #
        #    //find if there's still data in batch tables, if this is the case then it's a cross company job
        #    //and admin needs to manually go and delete them.
        #    select firstonly RecId from batchJob where batchJob.Company ==dataareaId;
        #    select firstonly RecId from batch where batch.Company == dataareaId;
        #    select firstonly RecId from batchJobHistory where batchJobHistory.Company == dataareaId;
        #    select firstonly RecId from batchHistory where batchHistory.Company == dataareaId;
        #    if (batchJob.RecId || batch.RecId || batchJobHistory.RecId || batchHistory.RecId)
        #    {
        #        throw error("@SYS121668");
        #    }
        #
        #    ttscommit;
        #
        #    super(dataareaId);
        #
        #    // Delete all docuRef records relating to the deleted company
        #    ttsbegin;
        #
        #    docuRef.skipDeleteMethod(true);
        #    docuRef.skipDeleteActions(true);
        #    docuRef.skipDatabaseLog(true);
        #
        #    delete_from docuRef
        #        where docuRef.RefCompanyId == dataareaId;
        #
        #    // Delete all docuValue rows which are not referenced anymore
        #    docuValue.skipDeleteActions(true);
        #    docuValue.skipDeleteMethod(true);
        #    docuValue.skipDatabaseLog(true);
        #    delete_from docuValue
        #        notexists join docuRef where docuRef.ValueRecId == docuValue.RecId;
        #
        #    // Delete SysLastValue relating to the deleted company
        #
        #    delete_from sysLastValue
        #        where sysLastValue.Company == dataareaId;
        #
        #    // SYP Modifications - SP2 - Begin
        #    // correcting error HQ-230-50-8JHc
        #
        #    // delete company information from VirtualDataAreaList
        #    delete_from virtualDataAreaList
        #        where virtualDataAreaList.Id == dataareaId;
        #
        #    // delete company information from SysRecordLevelSecurity
        #    delete_from sysRecordLevelSecurity
        #        where sysRecordLevelSecurity.CompanyId == dataareaId;
        #
        #    // SYP Modifications - SP2 - End
        #
        #    //Delete user profile associations related to the deleted company
        #    delete_from sysUserProfiles
        #        where sysUserProfiles.Company == dataareaId;
        #
        #    if (fDeleteCompanyInfo)
        #    {
        #        //Delete Company information form CompanyInfo
        #        //Set based operation for SC/sc tables uses row by row and skip method only works on set based
        #        //So calling doDelete() instead
        #        new SkipAOSValidationPermission().assert();
        #        companyInfo.skipAosValidation(true);
        #
        #        while select forupdate companyInfo
        #            where companyInfo.DataArea == dataareaId
        #        {
        #            companyInfo.doDelete();
        #        }
        #        CodeAccessPermission::revertAssert();
        #    }
        #    delete_from eventCompanyRule
        #        where eventCompanyRule.CompanyId == dataareaId;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #eventDelete
        #/// <summary>
        #///    Serves as a callback that is called by the kernel when a record in a table is deleted, provided
        #///    that the kernel has been set up to monitor records in that table.
        #/// </summary>
        #/// <param name="_recordDeleted">
        #///    The deleted record.
        #/// </param>
        #/// <remarks>
        #///    A developer can set up the kernel to call back on deletes for a given table by inserting a record
        #///    into the <c>DatabaseLog</c> kernel table with all fields set to relevant values, which includes the
        #///    <c>logType</c> field set to the <c>EventDelete</c>.This is very similar to how the <c>logDelete</c>
        #///    is called and set up.The call of this method will be in the transaction in which the record is
        #///    deleted.
        #/// </remarks>
        #public void eventDelete(Common _recordDeleted)
        #{
        #    super(_recordDeleted);
        #
        #    this.createEventCUD(_recordDeleted,EventLogType::Delete, conNull(), _recordDeleted);
        #        // When a record is deleted we see it as the 'original' record.
        #}
      ENDSOURCE
      SOURCE #eventInsert
        #/// <summary>
        #///    Serves as a callback that is called by the kernel when a record in a table is inserted, provided
        #///    that the kernel has been set up to monitor records in that table.
        #/// </summary>
        #/// <param name="_recordInserted">
        #///    The inserted record.
        #/// </param>
        #/// <remarks>
        #///    A developer can set up the kernel to call back on inserts for a given table by inserting a record
        #///    into the DatabaseLog kernel table with all fields set to relevant values, which includes the field
        #///    logType set to EventInsert.This is very similar to how <see cref="M:Application.logInsert" /> is
        #///    called and set up.The call of this method will be in the transaction in which the record is
        #///    inserted.
        #/// </remarks>
        #public void eventInsert(Common _recordInserted)
        #{
        #    super(_recordInserted);
        #
        #    this.createEventCUD(_recordInserted,EventLogType::Insert);
        #}
      ENDSOURCE
      SOURCE #eventRenameKey
        #/// <summary>
        #///    Serves as a callback that is called by the kernel when a primary key is renamed, if the kernel has
        #///    been set up to monitor records in that table.
        #/// </summary>
        #/// <param name="_recordOrig">
        #///    The original record, before the rename.
        #/// </param>
        #/// <param name="_recordUpdated">
        #///    The updated record (after the rename).
        #/// </param>
        #/// <param name="_changedFields">
        #///    A container of all changed fields.
        #/// </param>
        #/// <remarks>
        #///    A developer can set up the kernel to call back on primary key renames for a given table by
        #///    inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which
        #///    includes setting the logType field to EventRenameKey.This resembles how <c>logRenameKey</c> is
        #///    called and set up.The call of this method will be in the transaction in which the primary key is
        #///    renamed.
        #/// </remarks>
        #public void eventRenameKey(Common _recordOrig, Common _recordUpdated, container _changedFields)
        #{
        #    super(_recordOrig, _recordUpdated, _changedFields);
        #
        #    this.createEventCUD(_recordUpdated,EventLogType::RenameKey,_changedFields,_recordOrig);
        #}
      ENDSOURCE
      SOURCE #eventUpdate
        #/// <summary>
        #///    Serves as a callback that is called by the kernel when a record in a table is updated, provided
        #///    that the kernel has been set up to monitor records in that table.
        #/// </summary>
        #/// <param name="_recordOrig">
        #///    The original record, before the update.
        #/// </param>
        #/// <param name="_recordUpdated">
        #///    The updated record.
        #/// </param>
        #/// <param name="_changedFields">
        #///    A container of all changed fields.
        #/// </param>
        #/// <remarks>
        #///    A developer can set up the kernel to call back on updates for a given table by inserting a record
        #///    into the DatabaseLog kernel table with all fields set to relevant values, which includes the field
        #///    logType set to EventUpdate. It is possible to set up that the kernel should call back whenever a
        #///    record is updated or when a specific field is updated.This is very similar to how <c>logUpdate</c>
        #///    is called and set up.The call of this method will be in the transaction in which the record is
        #///    updated.
        #/// </remarks>
        #public void eventUpdate(Common _recordOrig, Common _recordUpdated, container _changedFields)
        #{
        #    super(_recordOrig, _recordUpdated, _changedFields);
        #
        #    this.createEventCUD(_recordUpdated,EventLogType::Update,_changedFields,_recordOrig);
        #}
      ENDSOURCE
      SOURCE #getApplTables
        #List getApplTables()
        #{
        #    #define.DEL_BATCH                   (13)
        #    #define.DEL_BATCHGROUP              (14)
        #    #define.DEL_SYSUPGRADETIMEZONE      (2815)
        #    #define.DEL_SYSUPGRADEBASETIMEZONE  (1796)
        #    #define.DEL_COMPANYDOMAINLIST       (65509)
        #
        #    List applTables = new List(Types::Integer);
        #
        #    void addTable(TableId _tableId)
        #    {
        #        applTables.addEnd(_tableId);
        #    }
        #
        #    //NOTE:
        #    //If you are adding pre-existing ( < 4.01 ) tables
        #    //to be synchronized at startup
        #    //and if the tables have CREATEDDATETIME/MODIFIEDDATETIME fields
        #    //you need to add the table to
        #    //ReleaseUpdateDb41_Basic::updateTimeZoneSystemTablesToBeUpgraded
        #    //If you do not add your table in this method
        #    //then the system date time fields will not be upgraded
        #    addTable(tableNum(SysSetupLog)); //must be called first since dbSynchronize calls findEx on sysSetupLog...
        #    addTable(tableNum(SysSetupCompanyLog));
        #    addTable(tableNum(SysRecordTemplateTable));
        #    addTable(tableNum(SysRecordTemplateSystemTable));
        #    addTable(tableNum(SysTraceTable));
        #    addTable(tableNum(SysTraceTableSQL));
        #    addTable(tableNum(SysTraceTableSQLExecPlan));
        #    addTable(tableNum(SysTraceTableSQLTabRef));
        #    addTable(tableNum(SysUserLog));
        #    addTable(tableNum(SysUserLogRoleSettings));
        #    addTable(tableNum(SysUserInfo));
        #    addTable(tableNum(SysUtilElementsLog));
        #    addTable(tableNum(SysInetCSS));
        #    addTable(tableNum(SysInetThemeTable));
        #    addTable(tableNum(SysImageTable));
        #    addTable(tableNum(SysPersonalization));
        #    addTable(tableNum(LanguageTable));
        #
        #    // sync SysSignatureSetup table
        #    addTable(tableNum(SysSignatureSetup));
        #
        #    addTable(tableNum(SysDataBaseLog));
        #    addTable(tableNum(SysExceptionTable));
        #
        #    //Sync Batch needed tables
        #    addTable(#DEL_BATCH);
        #    addTable(#DEL_BATCHGROUP);
        #    addTable(tableNum(BatchJob));
        #    addTable(tableNum(BatchConstraints));
        #    addTable(tableNum(Batch));
        #    addTable(tableNum(BatchGroup));
        #    addTable(tableNum(SysServerConfig));
        #    addTable(tableNum(SysClusterConfig));
        #    addTable(tableNum(BatchServerConfig));
        #    addTable(tableNum(BatchJobAlerts));
        #    addTable(tableNum(BatchServerGroup));
        #    addTable(tableNum(BatchJobHistory));
        #    addTable(tableNum(BatchHistory));
        #    addTable(tableNum(BatchConstraintsHistory));
        #    addTable(tableNum(BatchGlobal));
        #    //End of batch needed tables
        #
        #    // X++ IL
        #    addTable(tableNum(SysCompileILTable));
        #
        #    // EP Server State tables
        #    addTable(tableNum(EPWebSiteParameters));
        #    addTable(tableNum(EPGlobalParameters));
        #
        #    addTable(tableNum(SysBCProxyUserAccount));
        #
        #    // SRS Server table needed for setup
        #    addTable(tableNum(SRSServers));
        #
        #    // BIAnalysisServer table needed during setup
        #    addTable(tableNum(BIAnalysisServer));
        #
        #    //Project Server Integration Table needed during setup
        #    addTable(tableNum(SyncParameters));
        #
        #    // Services tables needed for hosting service groups on first AOS start.
        #    addTable(tableNum(AifWebsites));    // Needed for "web services on IIS" setup component.
        #    addTable(tableNum(AifAction));
        #    addTable(tableNum(AifAdapter));
        #    addTable(tableNum(AifChannel));
        #    addTable(tableNum(AifDocumentField));
        #    addTable(tableNum(AifDocumentSchemaTable));
        #    addTable(tableNum(AifGlobalSettings));
        #    addTable(tableNum(AifInboundPort));
        #    addTable(tableNum(AifPort));
        #    addTable(tableNum(AifPortActionPolicy));
        #    addTable(tableNum(AifPortDocument));
        #    addTable(tableNum(AifRuntimeCache));
        #    addTable(tableNum(AifSchemaStore));
        #    addTable(tableNum(AifService));
        #    addTable(tableNum(AifWcfConfiguration));
        #    addTable(tableNum(AifAppShareFile));
        #    // End of service needed tables
        #
        #
        #    // sync currency table since it is cached and can't risk a pre-cache of the data before the sync happens
        #    addTable(tableNum(Currency));
        #
        #    // sync SQM needed tables
        #    addTable(tableNum(SysSQMSettings));
        #
        #    // sync progress table
        #    addTable(tableNum(SysProgress));
        #
        #    // Best Practice parameters
        #    addTable(tableNum(SysBPParameters));
        #
        #    // sync license compare needed tables
        #    addTable(tableNum(SysRemoveFields));
        #    addTable(tableNum(SysRemoveTables));
        #    addTable(tableNum(SysRemoveConfig));
        #    addTable(tableNum(SysRemoveLicense));
        #
        #    addTable(tableNum(SysLicenseCodeSort));
        #    addTable(tableNum(DocuParameters));
        #    addTable(tableNum(SysSecurityFormTable));
        #    addTable(tableNum(SysSecurityFormControlTable));
        #    addTable(tableNum(SysEvent));
        #    addTable(tableNum(KMConnectionType));
        #    addTable(tableNum(SalesParmUpdate));
        #    addTable(tableNum(SalesParmSubTable));
        #    addTable(tableNum(PurchParmUpdate));
        #    addTable(tableNum(PurchParmSubTable));
        #    addTable(tableNum(SysVersionControlParameters));
        #    addTable(tableNum(ReleaseUpdateScripts));
        #    addTable(tableNum(ReleaseUpdateScriptDependency));
        #    addTable(tableNum(ReleaseUpdateJobStatus));
        #    addTable(tableNum(ReleaseUpdateScriptsUsedTables));
        #    addTable(tableNum(ReleaseUpdateBulkTableInfo));
        #    addTable(tableNum(ReleaseUpdateSysDeleted));
        #    addTable(tableNum(DocuOpenFile));
        #    addTable(tableNum(TimezoneInfo));
        #    addTable(#DEL_SYSUPGRADETIMEZONE);
        #    addTable(#DEL_SYSUPGRADEBASETIMEZONE);
        #
        #    addTable(tableNum(WorkflowWorkItemDelegationParameters));
        #    addTable(tableNum(WorkflowWorkItemCommentTable));
        #
        #    //These tables are used for code upgrade
        #    addTable(tableNum(SysUpgradeTreeNodeConflictInfo));
        #    addTable(tableNum(SysUpgradeParameters));
        #    addTable(tableNum(SysUpgradeOverriddenEstimates));
        #
        #    // source to target tables
        #
        #    addTable(tableNum(ReleaseUpdateBulkCopyParameters));
        #    addTable(tableNum(ReleaseUpdateBulkFlags));
        #
        #    addTable(tableNum(ReleaseUpdateBulkCopyTable));
        #    addTable(tableNum(ReleaseUpdateBulkCopyField));
        #    addTable(tableNum(DEL_SysSetupLog));
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        #    {
        #        addTable(tableNum(DEL_RBOSetupLog));
        #    }
        #
        #    addTable(tableNum(ReleaseUpdateTransformTable));
        #    addTable(tableNum(DEL_ReleaseUpdateTransformTable));
        #    addTable(tableNum(ReleaseUpdateTransformSourceField));
        #    addTable(tableNum(ReleaseUpdateTransformTargetField));
        #    addTable(tableNum(ReleaseUpdateBulkCopyTableExceptions));
        #    addTable(tableNum(ReleaseUpdateDiscoveryStatus));
        #
        #    addTable(tableNum(DEL_ReleaseUpdateDictionaries));
        #
        #    //Bug 104614 & 109049
        #    addTable(tableNum(ReleaseUpdateTableRelationType));
        #    addTable(tableNum(ReleaseUpdateBulkCopyFieldOptions));
        #    //End Bug
        #
        #    addTable(tableNum(DEL_SqlDictionary));
        #    addTable(tableNum(DEL_SystemSequences));
        #    addTable(tableNum(DEL_SysLastValue));
        #
        #    addTable(tableNum(ReleaseUpdateBulkCopyLog));
        #
        #    addTable(tableNum(ReleaseUpdateSpecialTableMapping));
        #    addTable(tableNum(ReleaseUpdateSpecialFieldMapping));
        #
        #    addTable(tableNum(ReleaseUpdateBulkRefRecIdPatch));
        #    addTable(tableNum(ReleaseUpdateExtendedDataTypes));
        #    addTable(tableNum(ReleaseUpdateDataAreaOffsets));
        #    addTable(tableNum(ReleaseUpdateConfiguration));
        #
        #    addTable(tableNum(DataArea));
        #    addTable(tableNum(VirtualDataAreaList));
        #    addTable(#DEL_COMPANYDOMAINLIST);
        #    addTable(tableNum(ReleaseUpdateConfigKey));
        #
        #    addTable(tableNum(NumberSequenceDatatype));
        #    addTable(tableNum(NumberSequenceDatatypeParameterType));
        #
        #    addTable(tableNum(SysXppAssembly));
        #
        #    addTable(tableNum(SecurityRoleAllTasksView));
        #    // Security view used by Search setup
        #    addTable(tableNum(SecurityFieldsDeniedAccesssSomeRoleView));
        #
        #    addTable(tableNum(ReleaseUpdateLog));
        #    addTable(tableNum(ReleaseUpdateDynamicDependency));
        #    addTable(tableNum(ReleaseUpdateScriptsHistory));
        #    addTable(tableNum(ReleaseUpdateMinorScripts));
        #    addTable(tableNum(ReleaseUpdateValidation));
        #
        #    // Add Company related tables.
        #    addTable(tableNum(DirPartyTable));
        #    addTable(tableNum(DirOrganizationBase));
        #    addTable(tableNum(OMInternalOrganization));
        #    addTable(tableNum(CompanyInfo));
        #
        #    addTable(tableNum(DEL_DataArea));
        #    addTable(tableNum(DEL_ReleaseUpdatePartitions));
        #    addTable(tableNum(DEL_ReleaseUpdatePartitionsMapping));
        #
        #    // Tables needed for Analysis Services project generation at build time
        #    if (isConfigurationkeyEnabled(configurationKeyNum(ReportingServices)))
        #    {
        #        addTable(tableNum(BIAnalysisServicesDatabase));
        #        addTable(tableNum(BIConfiguration));
        #        addTable(tableNum(BIDateDimension));
        #        addTable(tableNum(BIDateDimensionTranslations));
        #        addTable(tableNum(BIDateDimensionValue));
        #        addTable(tableNum(BIDateGregorian));
        #        addTable(tableNum(BIDateHierarchy));
        #        addTable(tableNum(BIPerspectives));
        #        addTable(tableNum(SRSAnalysisEnums));
        #        addTable(tableNum(SRSModelEntityCache));
        #        addTable(tableNum(SRSModelFieldCache));
        #        addTable(tableNum(SRSModelForeignKeyCache));
        #        addTable(tableNum(SRSModelIndexCache));
        #        addTable(tableNum(SRSModelPerspectiveCache));
        #        addTable(tableNum(SRSModelPerspectiveEntityCache));
        #        addTable(tableNum(SRSModelPerspectiveFieldCache));
        #        addTable(tableNum(SRSModelPerspectiveForeignKeyCache));
        #        addTable(tableNum(SRSModelPerspectiveRoleCache));
        #        addTable(tableNum(SRSModelRoleCache));
        #        addTable(tableNum(SRSModelRoleGroupsCache));
        #    }
        #
        #    addTable(tableNum(SysSetupPartitionLog));
        #    addTable(tableNum(DirPartyLocation));
        #    addTable(tableNum(SysClientPerf));
        #    addTable(tableNum(SysPersonalization));
        #    addTable(tableNum(NumberSequenceTable));
        #    addTable(tableNum(NumberSequenceList));
        #    addTable(tableNum(LogisticsLocation));
        #    addTable(tableNum(LogisticsPostalAddress));
        #    addTable(tableNum(LogisticsAddressCountryRegion));
        #    addTable(tableNum(DirPersonUser));
        #    addTable(tableNum(DocuRef));
        #
        #    // Company images tables
        #    addTable(tableNum(CompanyImage));
        #    addTable(tableNum(ECPPresentation));
        #    addTable(tableNum(EcoResProductImage));
        #
        #    addTable(tableName2id(tableStr(SysAxComponentVersionHistory)));
        #
        #    // Exchange Server or Outlook user setup.
        #    addTable(tableName2id(tableStr(OutlookUserSetup)));
        #
        #    return applTables;
        #}
      ENDSOURCE
      SOURCE #getFromVersion
        #sysReleasedVersion getFromVersion()
        #{
        #    #SysCheckList
        #    sysReleasedVersion fromVersion;
        #    int fromMajor, fromMinor, fromBuild, fromDotBuild;
        #    int toMajor, toMinor, toBuild, toDotBuild;
        #
        #    [ toMajor, toMinor, toBuild, toDotBuild ] = ReleaseUpdateTmpVersionInfo::sysBuildNo2container(ApplicationVersion::applBuildNo());
        #
        #    // Find the biggest sysReleasedVersion this application has been upgraded or setup to
        #
        #    select firstonly releaseUpdateTmpVersionInfo
        #        order by Major desc, Minor desc, Build desc, DotBuild  desc // find the biggest one first
        #        where (releaseUpdateTmpVersionInfo.Name == classStr(SysCheckList_Upgrade) || releaseUpdateTmpVersionInfo.Name == classStr(SysCheckList_Setup))
        #        &&    releaseUpdateTmpVersionInfo.Description == #CheckListFinished;
        #
        #    if (releaseUpdateTmpVersionInfo)
        #    {
        #        [ fromMajor, fromMinor, fromBuild, fromDotBuild ] = [ releaseUpdateTmpVersionInfo.Major, releaseUpdateTmpVersionInfo.Minor, releaseUpdateTmpVersionInfo.Build, releaseUpdateTmpVersionInfo.DotBuild ];
        #
        #        // Check for 'down-grading'
        #        if (ReleaseUpdateTmpVersionInfo::compareMMBD(fromMajor, fromMinor, fromBuild,fromDotBuild, toMajor, toMinor, toBuild, toDotBuild) >0 )
        #        {
        #            warning(strFmt("@SYS100689",
        #                fromMajor, fromMinor, fromBuild,fromDotBuild,
        #                toMajor, toMinor, toBuild, toDotBuild));
        #        }
        #    }
        #
        #    fromVersion = this.majorMinorEtc2sysReleasedVersion(fromMajor, fromMinor, fromBuild, fromDotBuild, false /* = don't round up */ );
        #
        #    return fromVersion;
        #}
      ENDSOURCE
      SOURCE #getSameNameDifferentIdFields
        #public str getSameNameDifferentIdFields()
        #{
        #    // This method is called when the kernel has detected that a field a sameName/differentIds problem
        #
        #    UtilIdElements utilIdElementsHigh; // e.g. USr
        #    UtilIdElements utilIdElementsLow;  // e.g. SYS, SYP, ...
        #    str errorMessage;
        #    str errorMessages;
        #    UtilEntryLevel layer = Global::currentAOLayer();
        #
        #    if (layer == UtilEntryLevel::sys)
        #    {
        #        return '';
        #    }
        #
        #    // for each field in e.g. USr
        #    while select ParentId, Name, Id, UtilLevel from utilIdElementsHigh
        #        where   utilIdElementsHigh.UtilLevel  == layer &&
        #                utilIdElementsHigh.RecordType == UtilElementType::TableField
        #    {
        #        // find a field in another lower layer with the same name but different Id
        #        while select Id, UtilLevel from utilIdElementsLow
        #            where   utilIdElementsLow.UtilLevel < layer &&
        #                    utilIdElementsLow.RecordType == UtilElementType::TableField &&
        #                    utilIdElementsLow.ParentId   == utilIdElementsHigh.ParentId && // same table
        #                    utilIdElementsLow.Name       == utilIdElementsHigh.Name     && // same field name
        #                    utilIdElementsLow.Id         != utilIdElementsHigh.Id          // different IDs
        #
        #        {
        #            // The message below is not localized because it will be written in the event log
        #            errorMessage = strFmt('Field %1.%2 has ID %3 in the %4 layer and ID %5 in the %6 layer. ',
        #                tableId2name(utilIdElementsHigh.ParentId),
        #                utilIdElementsHigh.Name,
        #                utilIdElementsHigh.Id,
        #                utilIdElementsHigh.UtilLevel,
        #                utilIdElementsLow.Id,
        #                utilIdElementsLow.UtilLevel);
        #
        #            error(errorMessage);
        #
        #            errorMessages += errorMessage;
        #        }
        #    }
        #
        #    return errorMessages;
        #}
      ENDSOURCE
      SOURCE #getToVersion
        #sysReleasedVersion getToVersion()
        #{
        #    sysReleasedVersion toVersion;
        #    int myMajor, myMinor, myBuild, myDotBuild;
        #
        #
        #    // e.g. if 4.01 (4.0 refresh) is 4.0.2500.11, 4.1 build is 4.1.1501.8
        #    // then,
        #    //      from 4.0.2500.10, derive  sysReleasedVersion::v401 (unreleased builds of 4.01)
        #    //      from 4.0.2500.11, derive  sysReleasedVersion::v401 (RTM of major SYS release 4.01)
        #    //      from 4.0.2500.12, derive  sysReleasedVersion::v41  (hotfix for 4.01)
        #    //      from 4.0.2560.5, derive  sysReleasedVersion::v41 (service pack for 4.01)
        #    //      from 4.1.1200.0, derive  sysReleasedVersion::v41 (unreleased builds of 4.1)
        #    //      from 4.1.1501.8, derive  sysReleasedVersion::v41 (RTM of major SYS release 4.1)
        #    //
        #    // Note: roundUP==TRUe
        #    // To handle data upgrade scripts hotfix and service pack situations.  Hotfixes and service packs are rolled
        #    // forward to the next SYS release, so the upgrade scripts are plugged in to the upgrade script
        #    // classes ReleaseUpdateDBXX_YYY. Therefore mapping the actual application build number to the next SysReleasedVersion
        #    // post the actual application build number.
        #    //
        #    //          |                                       |
        #    //          |                     x                 |
        #    //         Version 4.01          4.0 hotfix         Version 4.1
        #    //
        #
        #    [ myMajor, myMinor, myBuild, myDotBuild ] = ReleaseUpdateTmpVersionInfo::sysBuildNo2container(ApplicationVersion::applBuildNo());
        #
        #    toVersion = this.majorMinorEtc2sysReleasedVersion(myMajor, myMinor, myBuild, myDotBuild, true /* do round up */);
        #
        #    return toVersion;
        #}
      ENDSOURCE
      SOURCE #getWMSLocationConstraintCheckerGlobal
        #/// <summary>
        #///    Retrieves an instance of the <c>WMSLocationConstraintCheckerGlobal</c> class.
        #/// </summary>
        #/// <returns>
        #///    An instance of the <c>WMSLocationConstraintCheckerGlobal</c> class.
        #/// </returns>
        #/// <remarks>
        #///    If the <c>WMSLocationConstraintCheckerGlobal</c> class has not been initialized a new instance will
        #///    be created.
        #/// </remarks>
        #public WMSLocationConstraintCheckerGlobal getWMSLocationConstraintCheckerGlobal()
        #{
        #    // Only one instance per session
        #    if (!wmsLocationConstraintCheckerGlobal)
        #    {
        #        wmsLocationConstraintCheckerGlobal = WMSLocationConstraintCheckerGlobal::construct();
        #    }
        #
        #    return wmsLocationConstraintCheckerGlobal;
        #}
      ENDSOURCE
      SOURCE #globalCache
        #SysGlobalCache globalCache()
        #{
        #    if (!globalCache)
        #    {
        #        globalCache = SysGlobalCache::construct();
        #    }
        #
        #    return globalCache;
        #}
      ENDSOURCE
      SOURCE #initBaseData
        #void initBaseData()
        #{
        #    // Use this method to initialize data that should be present in the database at startup
        #    SysInetCSS::initBaseData();
        #    SysInetThemeTable::initBaseData();
        #}
      ENDSOURCE
      SOURCE #initializeBusinessOperationExecProperty
        #/// <summary>
        #/// Initialize the operation execution property from the database
        #/// </summary>
        #/// <remarks>
        #/// The property is only initialized once from the database.
        #/// </remarks>
        #private void initializeBusinessOperationExecProperty()
        #{
        #    // These macros are also defined in the SysUserSetup form
        #    #LOCALMACRO.FLAG_ExecBusinessOpsWithInterpreter (1 << 10) #ENDMACRO
        #    #LOCALMACRO.PARM_ExecBusinessOpsWithInterpreter ((UserInfo.DebugInfo & #FLAG_ExecBusinessOpsWithInterpreter) >> 10) #ENDMACRO
        #
        #    UserInfo userInfo;
        #    if (!executeOperationsWithCLRInitialized)
        #    {
        #        select firstOnly1 GeneralInfo from userInfo where userInfo.Id == curUserId();
        #        if (userInfo)
        #        {
        #            // If the bit is not set it means execute with CLR
        #            executeBusinessOperationsWithCLR = !#PARM_ExecBusinessOpsWithInterpreter;
        #        }
        #        else
        #        {
        #            executeBusinessOperationsWithCLR = true;
        #        }
        #        executeOperationsWithCLRInitialized = true;
        #    }
        #}
      ENDSOURCE
      SOURCE #insertXReferences
        #/// <summary>
        #///   Insert the xref into database.
        #/// </summary>
        #void insertxReferences()
        #{
        #    if (this.canUpdatexRef())
        #    {
        #        xRefCreate::insertxReferences(true);
        #    }
        #}
      ENDSOURCE
      SOURCE #inventCostUpdateGlobal
        #/// <summary>
        #///    Returns an instance of the <c>inventCostUpdateGlobal</c> class.
        #/// </summary>
        #/// <returns>
        #///    Returns an instance of the <c>inventCostUpdateGlobal</c> class.
        #/// </returns>
        #/// <remarks>
        #///    If the <c>inventCOstUpdateGlobal</c> class has not been initiated, a new instance will be created
        #///    by calling the <c>inventCostUpdateGlobal::construct</c> method.
        #/// </remarks>
        #
        #public InventCostUpdateGlobal inventCostUpdateGlobal()
        #{
        #    // Only one instance per session
        #    // different dataareaIds will be handeled inside the inventCostUpdateGlobal class
        #    if (!inventCostUpdateGlobal)
        #    {
        #        inventCostUpdateGlobal = InventCostUpdateGlobal::construct();
        #    }
        #
        #    return inventCostUpdateGlobal;
        #}
      ENDSOURCE
      SOURCE #inventUpdateOnhandGlobal
        #InventUpdateOnhandGlobal inventUpdateOnhandGlobal()
        #{
        #    if (!inventUpdateOnhandGlobal)
        #    {
        #        inventUpdateOnhandGlobal = InventUpdateOnhandGlobal::construct();
        #    }
        #    return inventUpdateOnhandGlobal;
        #}
      ENDSOURCE
      SOURCE #isRunningMode
        #boolean isRunningMode()
        #{
        #    if (SysCheckList_Setup::isSetupMode(this.isConfigMode()))
        #    {
        #        // Setup_checklist is running, so we are not in running mode
        #        return false;
        #    }
        #
        #    if (SysCheckList_Upgrade::isUpgradeMode() && SysCheckList_Upgrade::isUpgrade())
        #    {
        #        // Upgrade_checklist is running, so we are not in running mode
        #        return false;
        #    }
        #
        #    if (SysCheckList_SetupPartition::isSetupMode(this.isConfigMode()))
        #    {
        #        // SetupPartition_checklist is running, so we are not in running mode
        #        return false;
        #    }
        #
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #lastTransactionIdCreated
        #CreatedTransactionId  lastTransactionIdCreated(CreatedTransactionId  _lastTransactionId = 0)
        #{
        #    if (prmisDefault(_lastTransactionId))
        #    {
        #        return this.globalCache().get(funcName(), curext(), 0);
        #    }
        #
        #    this.globalCache().set(funcName(), curext(), _lastTransactionId);
        #    return _lastTransactionId;
        #}
      ENDSOURCE
      SOURCE #lastxRef
        #/// <summary>
        #///   Returns the last xref.
        #/// </summary>
        #/// <param name="_lastxRef">
        #///    class instance contaning xref information.
        #/// </param>
        #/// <returns>
        #///   The <c>xref</c> class instance.
        #/// </returns>
        #xRef lastxRef(xRef _lastxRef = lastxRef)
        #{
        #    lastxRef = _lastxRef;
        #    return lastxRef;
        #}
      ENDSOURCE
      SOURCE #ledgerPostingProcessor
        #/// <summary>
        #/// Gets the <c>LedgerPostingProcessor</c> object.
        #/// </summary>
        #/// <returns>
        #/// The <c>LedgerPostingProcessor</c> object.
        #/// </returns>
        #public LedgerPostingProcessor ledgerPostingProcessor()
        #{
        #    if (ledgerPostingProcessor == null)
        #    {
        #        ledgerPostingProcessor = LedgerPostingProcessor::construct();
        #    }
        #
        #    return ledgerPostingProcessor;
        #}
        #
      ENDSOURCE
      SOURCE #logDelete
        #void logDelete(Common recordDeleted)
        #{
        #    SysDataBaseLog sysDataBaseLog;
        #    boolean        traceEnabled;
        #
        #    super(recordDeleted);
        #
        #    traceEnabled = appl.company().logAlways(DatabaseLogType::Delete);
        #
        #    if (traceEnabled == NoYes::Yes)
        #    {
        #        // Trace the deleted record for future cleanup
        #        SysTestRecordCleanUp::traceRowDelete(recordDeleted);
        #    }
        #    else
        #    {
        #        // Assert the permission to insert into SysDatabaseLog table
        #        new SysDatabaseLogPermission().assert();
        #
        #        if (!new DictTable(recordDeleted.TableId).dataPrCompany())
        #        {
        #            changecompany('dat')
        #            {
        #                sysDataBaseLog.LogType  = DatabaseLogType::Delete;
        #                sysDataBaseLog.Table    = recordDeleted.TableId;
        #                sysDataBaseLog.LogRecId = recordDeleted.RecId;
        #                sysDataBaseLog.LogMap::setData(recordDeleted);
        #                sysDataBaseLog.setDescription(recordDeleted);
        #                sysDataBaseLog.insert();
        #            }
        #        }
        #        else
        #        {
        #            sysDataBaseLog.LogType  = DatabaseLogType::Delete;
        #            sysDataBaseLog.Table    = recordDeleted.TableId;
        #            sysDataBaseLog.LogRecId = recordDeleted.RecId;
        #            sysDataBaseLog.LogMap::setData(recordDeleted);
        #            sysDataBaseLog.setDescription(recordDeleted);
        #            sysDataBaseLog.insert();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #logInsert
        #void logInsert(Common recordInserted)
        #{
        #    SysDataBaseLog          sysDataBaseLog;
        #    boolean                 traceEnabled;
        #
        #    super(recordInserted);
        #
        #    // Check if I have been called from the Unit test framework
        #    traceEnabled = appl.company().logAlways(DatabaseLogType::Insert);
        #
        #    if (traceEnabled == NoYes::Yes)
        #    {
        #        // Tracing has been switched on during a unit test
        #        // Trace the created record
        #        SysTestRecordCleanUp::traceRow(recordInserted);
        #    }
        #    else
        #    {
        #        // Assert the permission to insert into SysDatabaseLog table
        #        new SysDatabaseLogPermission().assert();
        #
        #        if (!new DictTable(recordInserted.TableId).dataPrCompany())
        #        {
        #            changecompany('dat')
        #            {
        #                sysDataBaseLog.LogType  = DatabaseLogType::Insert;
        #                sysDataBaseLog.Table    = recordInserted.TableId;
        #                sysDataBaseLog.LogRecId = recordInserted.RecId;
        #                sysDataBaseLog.LogMap::setData(recordInserted);
        #                sysDataBaseLog.setDescription(recordInserted);
        #                sysDataBaseLog.insert();
        #            }
        #        }
        #        else
        #        {
        #            sysDataBaseLog.LogType  = DatabaseLogType::Insert;
        #            sysDataBaseLog.Table    = recordInserted.TableId;
        #            sysDataBaseLog.LogRecId = recordInserted.RecId;
        #            sysDataBaseLog.LogMap::setData(recordInserted);
        #            sysDataBaseLog.setDescription(recordInserted);
        #            sysDataBaseLog.insert();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #logRenameKey
        #void logRenameKey(Common recordOrig, Common recordUpdated, container changedFields)
        #{
        #    SysDataBaseLog sysDataBaseLog;
        #
        #    super(recordOrig, recordUpdated, changedFields);
        #
        #    // Assert the permission to insert into SysDatabaseLog table
        #    new SysDatabaseLogPermission().assert();
        #
        #    if (!new DictTable(recordUpdated.TableId).dataPrCompany())
        #    {
        #        changecompany('dat')
        #        {
        #            sysDataBaseLog.LogType  = DatabaseLogType::RenameKey;
        #            sysDataBaseLog.Table    = recordUpdated.TableId;
        #            sysDataBaseLog.LogRecId = recordUpdated.RecId;
        #            sysDataBaseLog.LogMap::setData(recordUpdated, recordOrig, changedFields);
        #            sysDataBaseLog.setDescription(recordUpdated);
        #            sysDataBaseLog.insert();
        #        }
        #    }
        #    else
        #    {
        #        sysDataBaseLog.LogType  = DatabaseLogType::RenameKey;
        #        sysDataBaseLog.Table    = recordUpdated.TableId;
        #        sysDataBaseLog.LogRecId = recordUpdated.RecId;
        #        sysDataBaseLog.LogMap::setData(recordUpdated, recordOrig, changedFields);
        #        sysDataBaseLog.setDescription(recordUpdated);
        #        sysDataBaseLog.insert();
        #    }
        #}
      ENDSOURCE
      SOURCE #logUpdate
        #void logUpdate(Common recordOrig, Common recordUpdated, container changedFields)
        #{
        #    SysDataBaseLog sysDataBaseLog;
        #    boolean        traceEnabled;
        #
        #    super(recordOrig, recordUpdated, changedFields);
        #
        #    traceEnabled = appl.company().logAlways(DatabaseLogType::Update);
        #
        #    if (traceEnabled == NoYes::Yes)
        #    {
        #        // Trace the deleted record for future cleanup
        #        SysTestRecordCleanUp::traceRowUpdate(recordOrig);
        #    }
        #    else
        #    {
        #        // Assert the permission to insert into SysDatabaseLog table
        #        new SysDatabaseLogPermission().assert();
        #
        #        if (!new DictTable(recordUpdated.TableId).dataPrCompany())
        #        {
        #            changecompany('dat')
        #            {
        #                sysDataBaseLog.LogType  = DatabaseLogType::Update;
        #                sysDataBaseLog.Table    = recordUpdated.TableId;
        #                sysDataBaseLog.LogRecId = recordUpdated.RecId;
        #                sysDataBaseLog.LogMap::setData(recordUpdated, recordOrig, changedFields);
        #                sysDataBaseLog.setDescription(recordUpdated);
        #                sysDataBaseLog.insert();
        #            }
        #        }
        #        else
        #        {
        #            sysDataBaseLog.LogType  = DatabaseLogType::Update;
        #            sysDataBaseLog.Table    = recordUpdated.TableId;
        #            sysDataBaseLog.LogRecId = recordUpdated.RecId;
        #            sysDataBaseLog.LogMap::setData(recordUpdated, recordOrig, changedFields);
        #            sysDataBaseLog.setDescription(recordUpdated);
        #            sysDataBaseLog.insert();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #majorMinorEtc2sysReleasedVersion
        #sysReleasedVersion majorMinorEtc2sysReleasedVersion(int myMajor, int myMinor, int myBuild, int myDotBuild, boolean roundUp)
        #{
        #    // is instance method because it uses releaseUpdateVersionInfo, member variable on Application
        #    str myDescription;
        #    DictEnum dictEnum = new DictEnum(enumNum(sysReleasedVersion));
        #    sysReleasedVersion sysReleasedVersion;
        #    int res;
        #
        #
        #    if (roundUp)
        #    {
        #        // if 4.0 RTM has 4.0.1659.12, then
        #        //    4.0.1659.11 -> v40
        #        //    4.0.1659.12 -> v40
        #        //    4.0.1659.13 -> v401
        #
        #        while select * from releaseUpdateTmpVersionInfo
        #            order by Major, Minor, Build, DotBuild
        #            where releaseUpdateTmpVersionInfo.Name == enumStr(sysReleasedVersion)
        #        {
        #            res = ReleaseUpdateTmpVersionInfo::compareMMBD(releaseUpdateTmpVersionInfo.Major, releaseUpdateTmpVersionInfo.Minor, releaseUpdateTmpVersionInfo.Build, releaseUpdateTmpVersionInfo.DotBuild, myMajor, myMinor, myBuild, myDotBuild);
        #
        #            if (res >= 0)
        #            {
        #                myDescription = releaseUpdateTmpVersionInfo.Description;
        #                break;
        #            }
        #        }
        #
        #    }
        #    else
        #    {
        #        // if 4.0 RTM has 4.0.1659.12, then
        #        //    4.0.1659.11 -> v39
        #        //    4.0.1659.12 -> v40
        #        //    4.0.1659.13 -> v40
        #
        #        while select * from releaseUpdateTmpVersionInfo
        #            order by Major desc, Minor desc, Build desc, DotBuild desc// start with biggest one
        #            where releaseUpdateTmpVersionInfo.Name == enumStr(sysReleasedVersion)
        #        {
        #            res = ReleaseUpdateTmpVersionInfo::compareMMBD(releaseUpdateTmpVersionInfo.Major, releaseUpdateTmpVersionInfo.Minor, releaseUpdateTmpVersionInfo.Build, releaseUpdateTmpVersionInfo.DotBuild, myMajor, myMinor, myBuild, myDotBuild);
        #
        #            if (res <= 0)
        #            {
        #                myDescription = releaseUpdateTmpVersionInfo.Description;
        #                break;
        #            }
        #        }
        #    }
        #
        #    if (myDescription)
        #    {
        #        sysReleasedVersion = dictEnum.name2Value(myDescription);
        #    }
        #
        #    return sysReleasedVersion;
        #}
      ENDSOURCE
      SOURCE #new
        #void new()
        #{
        #    Session session = new Session();
        #    DictTable dictTableComponentVersionHistory;
        #
        #    super();
        #
        #    //Just the main server session should synchronize
        #    if (session.clientKind() == ClientType::Server && session.sessionId() == 1)
        #    {
        #        this.syncApplTables();  //needed to sync neccessary application tables
        #
        #        // Synchronize the X++ IL assembly
        #        SysCompileIL::synchronizeAssembly();
        #
        #        // Use reflection to avoid errors when this code is executed before it's compiled
        #        dictTableComponentVersionHistory = new DictTable(tableName2id(tableStr(SysAxComponentVersionHistory)));
        #        if (dictTableComponentVersionHistory != null)
        #        {
        #            new ExecutePermission().assert();
        #            dictTableComponentVersionHistory.callStatic(tableStaticMethodStr(SysAxComponentVersionHistory, recordAosVersion));
        #            CodeAccessPermission::revertAssert();
        #        }
        #    }
        #
        #    transactionlogUpdateTTSControl = TransactionlogUpdateTTSControl::construct();
        #
        #    executeBusinessOperationsWithCLR = true;
        #    executeOperationsWithCLRInitialized = false;
        #}
      ENDSOURCE
      SOURCE #numberSeqGlobal
        #NumberSeqGlobal numberSeqGlobal()
        #{
        #    if (!numberSeqGlobal)
        #    {
        #        numberSeqGlobal = NumberSeqGlobal::construct();
        #    }
        #    return numberSeqGlobal;
        #}
      ENDSOURCE
      SOURCE #onTtsNotifyAbort
        #delegate void onTtsNotifyAbort()
        #{
        #
        #}
        #
      ENDSOURCE
      SOURCE #onTtsNotifyCommit
        #delegate void onTtsNotifyCommit()
        #{
        #}
      ENDSOURCE
      SOURCE #onTtsNotifyPostBegin
        #delegate void onTtsNotifyPostBegin()
        #{
        #}
      ENDSOURCE
      SOURCE #onTtsNotifyPreCommit
        #delegate void onTtsNotifyPreCommit()
        #{
        #
        #}
        #
      ENDSOURCE
      SOURCE #parmExecuteBusinessOperationsWithCLR
        #public boolean parmExecuteBusinessOperationsWithCLR(boolean _executeBusinessOperationsWithCLR = executeBusinessOperationsWithCLR)
        #{
        #    if (prmisDefault(_executeBusinessOperationsWithCLR))
        #    {
        #        // Property is initialized once from the database
        #        this.initializeBusinessOperationExecProperty();
        #    }
        #    else
        #    {
        #        executeBusinessOperationsWithCLR = _executeBusinessOperationsWithCLR;
        #    }
        #
        #    return executeBusinessOperationsWithCLR;
        #}
      ENDSOURCE
      SOURCE #parmTransactionalScopeCacheExists
        #public boolean parmTransactionalScopeCacheExists(boolean _transactionalScopeCacheExists = transactionalScopeCacheExists)
        #{
        #    transactionalScopeCacheExists = _transactionalScopeCacheExists;
        #    return transactionalScopeCacheExists;
        #}
      ENDSOURCE
      SOURCE #partitionKey
        #/// <summary>
        #/// Gets the current partition key
        #/// </summary>
        #/// <returns>
        #/// partition key from getcurrentpartition
        #/// </returns>
        #
        #public str partitionKey()
        #{
        #
        #    return getcurrentpartition();
        #}
      ENDSOURCE
      SOURCE #reIndexNative
        ##admin
        #void reIndexNative()
        #{
        #    UserInfo userInfo;
        #    xCompany xCompany;
        #
        #    if (isNative())
        #    {
        #        select userInfo where
        #            userInfo.Id == #adminUser;
        #
        #        if (!userInfo)
        #        {
        #            xCompany = this.company();
        #            xCompany.reindex();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #resourceSchedulerLogger
        #/// <summary>
        #///    Retrieves the instance of the global scheduler logger.
        #/// </summary>
        #/// <returns>
        #///    An instance of the <c>WrkCtrSchedulerLogger</c> class.
        #/// </returns>
        #public WrkCtrSchedulerLogger resourceSchedulerLogger()
        #{
        #    if (!resourceSchedulerLogger)
        #    {
        #        resourceSchedulerLogger = WrkCtrSchedulerLogger::construct();
        #    }
        #
        #    return resourceSchedulerLogger;
        #}
      ENDSOURCE
      SOURCE #servicesStartup
        #void servicesStartup()
        #{
        #    #Aif
        #    Session session = new Session();
        #
        #    AifAppShareManager::synchronize();
        #
        #    //Just the main server session should auto-deploy.  Otherwise every deploy will execute this.
        #    if (session.clientKind() == ClientType::Server && session.sessionId() == 1)
        #    {
        #        AifServiceGenerationManager::generateAutoDeployedServiceGroups();
        #    }
        #}
      ENDSOURCE
      SOURCE #setCharMax
        #void setCharMax()
        #{
        #    #OCCRetryCount
        #    SysSortOrder sysSortOrder;
        #    Integer asciiValueRef, i;
        #
        #    RecordInsertList    sysSortOrderList = new RecordInsertList(tableNum(SysSortOrder), true);
        #
        #    try
        #    {
        #        ttsbegin;
        #        select firstonly forupdate sysSortOrder
        #            order by Char desc;
        #        ttscommit;
        #
        #        if (sysSortOrder)
        #        {
        #            charMax = sysSortOrder.Char;
        #        }
        #        else
        #        {
        #            ttsbegin;
        #            for ( i = 0; i <= 65535; i++ )
        #            {
        #                sysSortOrder.Char = num2char(i);
        #                if (sysSortOrder.Char)
        #                {
        #                    sysSortOrder.AsciiValue = i;
        #                    sysSortOrderList.add(sysSortOrder);
        #                }
        #            }
        #
        #            if (sysSortOrderList.usageCount() > 0)
        #            {
        #                sysSortOrderList.insertDatabase();
        #            }
        #
        #            select firstonly sysSortOrder
        #                order by Char desc;
        #
        #            charMax       = sysSortOrder.Char;
        #            asciiValueRef = sysSortOrder.AsciiValue;
        #
        #            delete_from sysSortOrder
        #                where sysSortOrder.AsciiValue != asciiValueRef;
        #
        #            ttscommit;
        #        }
        #    }
        #    catch (Exception::Error)
        #    {
        #        if (infologLine() > 0)
        #            infolog.clear(infologLine()-1);
        #        retry;
        #    }
        #    catch (Exception::Deadlock)
        #    {
        #        if (infologLine() > 0)
        #            infolog.clear(infologLine()-1);
        #        retry;
        #    }
        #    catch (Exception::UpdateConflict)
        #    {
        #        if (appl.ttsLevel() == 0)
        #        {
        #            if (xSession::currentRetryCount() >= #RetryNum)
        #            {
        #                throw Exception::UpdateConflictNotRecovered;
        #            }
        #            else
        #            {
        #                if (infologLine() > 0)
        #                    infolog.clear(infologLine()-1);
        #                retry;
        #            }
        #        }
        #        else
        #        {
        #            throw Exception::UpdateConflict;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setDefaultCompany
        #boolean setDefaultCompany(SelectableDataArea _selectableDataArea, boolean dialog = true)
        #{
        #    SelectableDataArea thisCompany = curext();
        #    UserInfo userInfo;
        #    boolean ret;
        #    Currency currency;
        #    SysGlobalCache cache;
        #
        #    if (setDefaultCompanyCalled && thisCompany == _selectableDataArea)
        #    {
        #        return true;
        #    }
        #
        #    ret = super(_selectableDataArea);
        #    if(!ret)
        #    {
        #        return false;
        #    }
        #
        #    cache = appl.globalCache();
        #
        #    if (infolog && infolog.docu())
        #    {
        #        infolog.docu().updateFromParameters();
        #        infolog.docu().emptyTablesEnableMap();
        #    }
        #
        #    if (infolog)
        #    {
        #        infolog.nationalCurrencyPrefix('');
        #        infolog.nationalCurrencyPostfix('');
        #        infolog.nationalCurrencyFactor(1);
        #
        #        currency = Currency::find(Ledger::accountingCurrency());
        #        if (currency)
        #        {
        #            infolog.isoCurrencyCode(Ledger::accountingCurrency());
        #        }
        #        else
        #        {
        #            infolog.isoCurrencyCode('');
        #        }
        #    }
        #
        #    #define.WarnFlag(0x08)
        #
        #    if (dialog && new Session().clientKind() != ClientType::COMObject)
        #    {
        #        if (thisCompany != _selectableDataArea)
        #        {
        #            if (!cache.get(classStr(Info), identifierStr(Autologoff), false))
        #            {
        #                select userInfo
        #                    where userInfo.Id == curUserId();
        #
        #                if (userInfo && userInfo.GeneralInfo & #warnFlag)
        #                {
        #                    warning(strFmt("@SYS53441", _selectableDataArea));
        #                }
        #            }
        #        }
        #    }
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        #    {
        #        InventDim::findOrCreateBlank();
        #    }
        #
        #    setDefaultCompanyCalled = true;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #sourceDocumentProcessContext
        #/// <summary>
        #/// Gets the <c>SourceDocumentProcessContext</c> object.
        #/// </summary>
        #/// <returns>
        #/// The <c>SourceDocumentProcessContext</c> object.
        #/// </returns>
        #public SourceDocumentProcessContext sourceDocumentProcessContext()
        #{
        #    if (sourceDocumentProcessContext == null)
        #    {
        #        sourceDocumentProcessContext = SourceDocumentProcessContext::construct();
        #    }
        #
        #    return sourceDocumentProcessContext;
        #}
      ENDSOURCE
      SOURCE #startup
        #/*
        #This method shouldn't be overlayered, use the startupPost() method instead !
        #*/
        #void startup(str startupCommand, str buildNumber)      // ax32.exe -startupcmd=xxx
        #{
        #    this.reIndexNative();
        #    SysUserLog::logUserLogin(buildNumber);
        #
        #    if (startupCommand)
        #    {
        #        sysStartupCmd = SysStartupCmd::construct(startupCommand);
        #        if (sysStartupCmd)
        #        {
        #            sysStartupCmd.applInit();
        #        }
        #    }
        #
        #    // Fill out table releaseUpdateVersionInfo with data so fromVersion and toVersion can be computed
        #    // Must be called before isRunningMode()
        #    ReleaseUpdateTmpVersionInfo::fillOutMajorMinorBuildDotBuild(releaseUpdateTmpVersionInfo);
        #
        #    if (this.isRunningMode())
        #    {
        #        if (!SysApplicationSetup::checkDatamodel(SysApplicationSetupMode::initBaseData))
        #        {
        #            SysApplicationSetup::saveApplicationVersion(SysApplicationSetupMode::initBaseData);
        #            this.initBaseData();
        #        }
        #        this.setCharMax();
        #    }
        #    else
        #    {
        #        SysSecurity::reload(false);
        #        xAccessRightsList::reloadToolbar();
        #    }
        #    LanguageTable::checkLanguageTable();
        #
        #    LanguageTable::checkStartUpLanguage();
        #
        #    super(startupCommand, buildNumber);
        #
        #    this.startupPost();
        #
        #    if (startupCommand && sysStartupCmd)
        #    {
        #        sysStartupCmd.applRun();
        #    }
        #    //Is system is not in table per hierarchy mode and this is not major or minor upgrade then give warning
        #    if(!xApplication::IsTablePerHierarchyMode())
        #    {
        #        if(this.isRunningMode() && !(isSystemAdministrator() && (SysModelStore::isInstallMode() || SysCheckList_Update::isUpgradeMode())))
        #        {
        #             warning("@SYS4001048");
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #startupPost
        #// No SYS code must exist in this method
        #// If you need the startup command, look in the class SysStartupCmd
        #void startupPost()
        #{
        #    // <GTH>
        #    #isoCountryRegionCodes
        #
        #    if (hasGUI()
        #        && isRunningMode()
        #        && !SysModelStore::isInstallMode()
        #        && SysCountryRegionCode::isLegalEntityInCountryRegion([#ISOTH])
        #        && isConfigurationkeyEnabled(configurationKeyNum(TaxThailandGovCertification)))
        #    {
        #        TaxThaiGovCertificationHelper::promptSysAboutForm(false);
        #    }
        #    // </GTH>
        #
        #    this.startupRetailEssentials();
        #}
      ENDSOURCE
      SOURCE #startupRetailEssentials
        #/// <summary>
        #///  This method is itended to check the configuration key (RetailNonSMB).
        #///  if it is not enabled then nothing to do (means Retail Essential mode is enabled ) otherwise
        #///  it will check the registry key "IsRetailEssentialsModeEnabled"
        #///  if it is set to 1  then it will enable the SMB mode
        #///  by disabling the RetailNonSMB configuration key
        #/// </summary>
        #void startupRetailEssentials()
        #{
        #    #WinAPI
        #    str                 regPath;
        #    int                 regKey;
        #    container           regValRetailEssentialsEnabled;
        #
        #    // Attempt to configure Retail Essentials
        #    if (!this.isRunningMode() && isConfigurationkeyEnabled(configurationKeyNum(RetailNonSMB)))
        #    {
        #        // get registry path for Retail Essentials key
        #        regPath = #AXTRACE_KEYROOT + #RELEASE_VERSION_BASE_REGKEY + '\\Setup\\Components\\Retail';
        #
        #        // Get regsitry key handle
        #        regKey = WinAPI::regOpenKey(#HKEY_LOCAL_MACHINE, regPath, #KEY_READ);
        #
        #        if (regKey)
        #        {
        #            // Get registry value
        #            regValRetailEssentialsEnabled = WinAPI::regGetValue(regKey, 'IsRetailEssentialsModeEnabled');
        #
        #            // If Key contains value 'true', Enable SMB Mode
        #            if (conLen(regValRetailEssentialsEnabled) && (conPeek(regValRetailEssentialsEnabled, 1) == '1'))
        #            {
        #                // Disable Retail configuration keys
        #                RetailSMB::UpdateConfigurationKeys(false);
        #
        #                // Set user documentation set to OnLine for Retail Essentials
        #                RetailSMB::UpdateHelpDocumentSet();
        #            }
        #        }
        #
        #        // Close registry key handle
        #        WinAPI::regCloseKey(regKey);
        #    }
        #}
      ENDSOURCE
      SOURCE #syncApplTables
        #void syncApplTables(boolean _force = false)
        #{
        #    List            applTables = this.getApplTables();
        #    ListEnumerator  enumerator = applTables.getEnumerator();
        #    ConfigurationKeySet keySet      = new ConfigurationKeySet();
        #
        #    void syncTable(TableId tableId)
        #    {
        #        this.dbSynchronize(tableId, false, true, false);
        #    }
        #
        #    while (enumerator.moveNext())
        #    {
        #        syncTable(enumerator.current());
        #    }
        #}
      ENDSOURCE
      SOURCE #sysCodeProfilerBegin
        #void sysCodeProfilerBegin(str _description)
        #{
        #    sysCodeProfiler =  SysCodeProfiler::construct(true, _description);
        #
        #    if (!sysCodeProfiler)
        #    {
        #        return;
        #    }
        #
        #    sysCodeProfiler.parmdoCalcSum(false);
        #    sysCodeProfiler.beginProfile();
        #}
      ENDSOURCE
      SOURCE #sysCodeProfilerEnd
        #void sysCodeProfilerEnd()
        #{
        #    sysCodeProfiler.endProfile(false);
        #}
      ENDSOURCE
      SOURCE #sysCodeProfilerFlush
        #void sysCodeProfilerFlush()
        #{
        #    sysCodeProfiler.flushAndCalc();
        #}
      ENDSOURCE
      SOURCE #sysRecIdSequence
        #/// <summary>
        #///     Instantiates the <c>TradeRecIdSequence</c> class following the singleton pattern.
        #/// </summary>
        #/// <returns>
        #///     An instance of the <c>TradeRecIdSequence</c> class
        #/// </returns>
        #public SysRecIdSequence sysRecIdSequence()
        #{
        #    if(!sysRecIdSequence)
        #    {
        #        sysRecIdSequence = SysRecIdSequence::construct();
        #    }
        #
        #    return sysRecIdSequence;
        #}
      ENDSOURCE
      SOURCE #sysReleasedVersion2majorMinorEtc
        #container sysReleasedVersion2majorMinorEtc(sysReleasedVersion _sysReleasedVersion)
        #{
        #    // is instance method because it uses releaseUpdateVersionInfo, member variable on Application
        #    DictEnum dictEnum = new DictEnum(enumNum(sysReleasedVersion));
        #
        #    select firstonly releaseUpdateTmpVersionInfo
        #        order by Major, Minor, Build, DotBuild
        #        where   releaseUpdateTmpVersionInfo.Name == enumStr(sysReleasedVersion) &&
        #                releaseUpdateTmpVersionInfo.Description == dictEnum.value2Name(_sysReleasedVersion);
        #
        #    if (releaseUpdateTmpVersionInfo)
        #    {
        #        return [releaseUpdateTmpVersionInfo.Major, releaseUpdateTmpVersionInfo.Minor, releaseUpdateTmpVersionInfo.Build, releaseUpdateTmpVersionInfo.DotBuild];
        #    }
        #
        #    return conNull();
        #}
      ENDSOURCE
      SOURCE #sysTrace
        #public void sysTrace(SysTraceType _traceType, container _traceInfo)
        #{
        #    int containerLayoutVersion;
        #    SysTraceTable sysTraceTable;
        #    container tableNames;
        #    container tableIds;
        #    container traceInfoCopy;
        #    anytype tableNameId;
        #    int i;
        #    #SysTrace
        #
        #    if (!SysTrace::sysTraceEnabled())
        #    {
        #        return;
        #    }
        #
        #    if (_traceType == SysTraceType::CSTrace)
        #    {
        #        sysTraceTable.TraceType = _traceType;
        #        sysTraceTable.TraceTime = conPeek(_traceInfo,2);
        #        tableIds = conPeek(_traceInfo,#SYS_TRACE_SQL_TABLES);
        #        if (tableIds && conLen(tableIds)>0)
        #        {
        #            for (i=1; i<=conLen(tableIds); i++)
        #            {
        #                tableNameId = conPeek(tableIds, i);
        #                if (typeOf(tableNameId) == Types::String)
        #                {
        #                    tableNames += tableNameId;
        #                }
        #                else
        #                {
        #                    tableNames += tableId2name(tableNameId);
        #                }
        #            }
        #            traceInfoCopy=conDel(_traceInfo,#SYS_TRACE_SQL_TABLES,2);
        #            traceInfoCopy=conIns(traceInfoCopy,#SYS_TRACE_SQL_TABLES,tableNames);
        #            traceInfoCopy=conIns(traceInfoCopy,#SYS_TRACE_SQL_EXECUTION_TIME,conPeek(_traceInfo,#SYS_TRACE_SQL_EXECUTION_TIME));
        #            sysTraceTable.TraceContainer = traceInfoCopy;
        #        }
        #        else
        #        {
        #            sysTraceTable.TraceContainer = _traceInfo;
        #        }
        #        sysTraceTable.insert();
        #        return;
        #    }
        #
        #    containerLayoutVersion = conPeek(_traceInfo,#SYS_TRACE_SQL_LAYOUT_VERSION);
        #
        #    if ( conLen(_traceInfo) < #SYS_TRACE_SQL_LAYOUT_VERSION || containerLayoutVersion > #TRACE_CONTAINER_LAYOUT_VERSION )
        #    {
        #        info(strFmt("@SYS65329" + ' ' + "@SYS65330", containerLayoutVersion, #TRACE_CONTAINER_LAYOUT_VERSION));
        #        return;
        #    }
        #
        #    super(_traceType, _traceInfo);
        #
        #    switch (_traceType)
        #    {
        #        case SysTraceType::DBTrace:  // to come
        #            break;
        #        case SysTraceType::SqlTrace:
        #            SysTraceSql::newSysTraceSql(_traceInfo).output();
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #transactionlogUpdateTTSControl
        #TransactionlogUpdateTTSControl transactionlogUpdateTTSControl()
        #{
        #    return transactionlogUpdateTTSControl;
        #}
      ENDSOURCE
      SOURCE #ttsNotifyAbort
        #void ttsNotifyAbort()
        #{
        #    this.onTtsNotifyAbort();
        #
        #    if (budgetControlProcessor)
        #    {
        #        budgetControlProcessor.ttsNotifyAbort();
        #    }
        #
        #    if (ledgerPostingProcessor != null)
        #    {
        #        ledgerPostingProcessor.ttsNotifyAbort();
        #    }
        #
        #    this.inventUpdateOnhandGlobal().ttsNotifyAbort();
        #
        #    // This runs numbersequence cleanup and it needs to complete regardless of user privilidges.
        #    // This method always runs on the server, so we run unchecked only from there.
        #    unchecked(Uncheck::TableSecurityPermission)
        #    {
        #        this.numberSeqGlobal().ttsNotifyAbort();
        #    }
        #
        #    transactionlogUpdateTTSControl.ttsNotifyAbort();
        #
        #    // Trigger for invent cost transactions
        #    this.inventCostUpdateGlobal().ttsNotifyAbort();
        #
        #    //only delegate calls if needed to limit overhead as much as possible
        #    if (this.canDoWMSLocationConstraintChecks())
        #    {
        #        this.getWMSLocationConstraintCheckerGlobal().ttsNotifyAbort();
        #    }
        #
        #    // Flush transaction specific cache
        #    if (transactionalScopeCacheExists)
        #    {
        #        this.clearTransactionalScopeCache();
        #    }
        #
        #    // Removes suspension of recId allocation invoked by calling appl.SysRecIdSequence().suspendRecIds() .
        #    if (sysRecIdSequence)
        #    {
        #        this.sysRecIdSequence().removeAllRecIdSuspensions();
        #        sysRecIdSequence = null;
        #    }
        #
        #    if(sourceDocumentProcessContext)
        #    {
        #        sourceDocumentProcessContext = null;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #ttsNotifyBegin
        #void ttsNotifyBegin()
        #{
        #    // Removes suspension of recId allocation invoked by calling appl.SysRecIdSequence().suspendRecIds() .
        #    if (sysRecIdSequence)
        #    {
        #        this.sysRecIdSequence().removeAllRecIdSuspensions();
        #        sysRecIdSequence = null;
        #    }
        #
        #    // This runs numbersequence cleanup and it needs to complete regardless of user privilidges.
        #    // This method always runs on the server, so we run unchecked only from there.
        #    unchecked(Uncheck::TableSecurityPermission)
        #    {
        #        this.numberSeqGlobal().ttsNotifyBegin();
        #    }
        #}
      ENDSOURCE
      SOURCE #ttsNotifyCommit
        #void ttsNotifyCommit()
        #{
        #    this.onTtsNotifyCommit();
        #
        #    if (budgetControlProcessor)
        #    {
        #        budgetControlProcessor.ttsNotifyCommit();
        #    }
        #
        #    if (ledgerPostingProcessor != null)
        #    {
        #        ledgerPostingProcessor.ttsNotifyCommit();
        #    }
        #
        #    // This runs numbersequence cleanup and it needs to complete regardless of user privilidges.
        #    // This method always runs on the server, so we run unchecked only from there.
        #    unchecked(Uncheck::TableSecurityPermission)
        #    {
        #        this.numberSeqGlobal().ttsNotifyCommit();
        #    }
        #
        #    transactionlogUpdateTTSControl.ttsNotifyCommit();
        #
        #    // Flush transaction specific cache
        #    if (transactionalScopeCacheExists)
        #    {
        #        this.clearTransactionalScopeCache();
        #    }
        #}
      ENDSOURCE
      SOURCE #ttsNotifyPostBegin
        #public void ttsNotifyPostBegin()
        #{
        #    super();
        #
        #    this.onTtsNotifyPostBegin();
        #    if (budgetControlProcessor)
        #    {
        #        budgetControlProcessor.ttsNotifyPostBegin();
        #    }
        #
        #    if (ledgerPostingProcessor != null)
        #    {
        #        ledgerPostingProcessor.ttsNotifyPostBegin();
        #    }
        #
        #    this.inventUpdateOnhandGlobal().ttsNotifyPostBegin();
        #
        #    // Trigger for invent cost transactions
        #    this.inventCostUpdateGlobal().ttsNotifyPostBegin();
        #
        #    //only delegate calls if needed to limit overhead as much as possible
        #    if (this.canDoWMSLocationConstraintChecks())
        #    {
        #        this.getWMSLocationConstraintCheckerGlobal().ttsNotifyPostBegin();
        #    }
        #}
      ENDSOURCE
      SOURCE #ttsNotifyPreCommit
        #public void ttsNotifyPreCommit()
        #{
        #    super();
        #
        #    this.onTtsNotifyPreCommit();
        #
        #    if (budgetControlProcessor)
        #    {
        #        budgetControlProcessor.ttsNotifyPreCommit();
        #    }
        #
        #    if (ledgerPostingProcessor != null)
        #    {
        #        ledgerPostingProcessor.ttsNotifyPreCommit();
        #    }
        #
        #    // Trigger for invent cost transactions
        #    this.inventCostUpdateGlobal().ttsNotifyPreCommit();
        #
        #    this.inventUpdateOnhandGlobal().ttsNotifyPreCommit();
        #
        #    //only delegate calls if needed to limit overhead as much as possible
        #    if (this.canDoWMSLocationConstraintChecks())
        #    {
        #        this.getWMSLocationConstraintCheckerGlobal().ttsNotifyPreCommit();
        #    }
        #
        #    // Checks that all suspension of recId allocation invoked by calling appl.SysRecIdSequence().suspendRecIds() have been removed.
        #    if (sysRecIdSequence)
        #    {
        #        if (!this.sysRecIdSequence().areAllRecIdSuspensionsRemoved())
        #        {
        #            throw error("@SYS344764");
        #        }
        #        sysRecidSequence = null;
        #    }
        #}
      ENDSOURCE
      SOURCE #updateSourceVersionInfo
        #void updateSourceVersionInfo()
        #{
        #    ReleaseUpdateTmpVersionInfo::updateMajorMinorBuildDotBuild(releaseUpdateTmpVersionInfo);
        #}
      ENDSOURCE
      SOURCE #updatexRefSet
        #/// <summary>
        #/// Disables and enables update of the cross reference.
        #/// </summary>
        #/// <param name="disable">
        #/// Disables the cross reference if true. Otherwise it is enabled.
        #/// </param>
        #void updatexRefSet(boolean disable)
        #{
        #    updatexRefDisable = disable;
        #}
      ENDSOURCE
      SOURCE #updateXrefTreeNode
        #/// <summary>
        #///    Updates the cross reference information for the following node types: \Web\Web Files\List
        #///    Definitions, \Web\Web Files\Static Files, \Web\Web Files\Page Definitions, \Web\Web Files\Web
        #///    Controls, \SSRS Reports\Reports\ReportDesign, \Visual Studio Projects\ProjectX, \Visual Studio
        #///    Projects\ProjectX\Project Output\Assembly File,
        #/// </summary>
        #/// <param name="_treeNode">
        #///    The tree node for which to update the cross references.
        #/// </param>
        #/// <remarks>
        #///    This method is invoked by the framework whenever any of the described node types is compiled or
        #///    updated for cross reference.
        #/// </remarks>
        #void updateXrefTreeNode(TreeNode _treeNode)
        #{
        #    #TreeNodeSysNodeType
        #
        #    if (_treeNode)
        #    {
        #        try
        #        {
        #            switch (_treeNode.TreeNodeType().id())
        #            {
        #                case #NT_WEBPAGEDEF: // for \Web\Web Files\Page Definitions
        #                case #NT_WEBSTATICFILE: // for \Web\Web Files\Static Files
        #                case #NT_WEBCONTROL: // for \Web\Web Files\Web Controls
        #                case #NT_WEBLISTDEF: // for \Web\Web Files\List Definitions
        #                    xrefWeb::updateXref(_treeNode);
        #                    break;
        #                case #NT_SSRSREPORTDESIGN: // for \SSRS Reports\Reports\ReportDesign
        #                    xrefSSRSReport::updateReportDesignXref(_treeNode);
        #                    break;
        #                case #NT_SSRSREPORT: // for \SSRS Reports\Reports\Report
        #                    xrefSSRSReport::updateReportConceptNodeXref(_treeNode);
        #                    break;
        #                case #NT_REFERENCE:
        #                    xRefAssemblyReferences::updateXref(_treeNode);   // for \References\
        #                    break;
        #                case #NT_VSPROJECT: // for \Visual Studio Projects\ProjectX
        #                    xrefVisualStudioProject::updateXref(_treeNode);
        #                    break;
        #                case #NT_VSPROJECTFILE: // for \Visual Studio Projects\ProjectX\Project Output\Assembly File
        #                    xrefVisualStudioProject::updateAssemblyXref(_treeNode);
        #                    break;
        #            }
        #        }
        #        catch
        #        {
        #            error(strfmt("@SYS320348",_treeNode.AOTname()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #xref
        #/// <summary>
        #///   This method is called by AX kernel to inform the Aot path and xref information corresponding to it.
        #/// </summary>
        #/// <param name="_path">
        #///    The tree node for which to update the cross references.
        #/// </param>
        #/// <param name="_xRef">
        #///    class instance contaning xref information.
        #/// </param>
        #void xref(str _path, xRef _xRef)
        #{
        #    Map xRefCompileMap;
        #    Map xRefProperyMap;
        #    str className;
        #
        #
        #    lastxRef = _xRef;
        #
        #    if (this.canUpdatexRef())
        #    {
        #        xRefCreate::xRefUpdate(_path);
        #    }
        #    else
        #    {
        #        // if xref information is from compiler add it to xRefCompilerMap else into xRefProperyMap
        #        if(XRefMode::COMPILE == _xRef.mode())
        #        {
        #            xRefCompileMap = appl.globalCache().get(classstr(xRefUpdateTmpReferences), '', null);
        #            if(xRefCompileMap != null)
        #            {
        #                xRefCompileMap.insert(_path, _xRef);
        #            }
        #        }
        #        else
        #        {
        #            if(XRefMode::PROPERTY == _xRef.mode())
        #            {
        #                className = classstr(xRefUpdateTmpReferences);
        #                className = strins(className,#PropertyString,strlen(classname)+1);
        #                xRefProperyMap = appl.globalCache().get(className, '', null);
        #                if(xRefProperyMap != null)
        #                {
        #                    xRefProperyMap.insert(_path, _xRef);
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #getCurrencyCode
        #/// <summary>
        #///    Retrieves the currency code of the ledger if the application is in running mode.
        #/// </summary>
        #/// <returns>
        #///    The ledger currency code if the application is in running mode; otherwise, an empty string.
        #/// </returns>
        #public static str getCurrencyCode()
        #{
        #    Application app = new Application();
        #
        #    if (app.isRunningMode() && infolog && !SysModelStore::isInstallMode() && !SysCheckList_Update::isUpgradeMode())
        #    {
        #        return Ledger::accountingCurrency(CompanyInfo::find(false,0,true).RecId);
        #    }
        #    else
        #    {
        #        return '';
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
    EVENTS
      EVENT #onTtsNotifyAbort
      ENDEVENT
      EVENT #onTtsNotifyCommit
      ENDEVENT
      EVENT #onTtsNotifyPostBegin
      ENDEVENT
      EVENT #onTtsNotifyPreCommit
      ENDEVENT
    ENDEVENTS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEV unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEV
    PROPERTIES
      Name                #DEV
      Origin              #{6C9AC0B9-73DC-49F7-8527-62C81CE675E2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DEV
        #{
        #}
      ENDSOURCE
      SOURCE #buf2Buf
        #static void buf2Buf(Common _dest, Common _source, container _fieldsToExclude = conNull())
        #{
        #    DictTable   dictDest    = new DictTable(_dest.TableId);
        #    DictTable   dictSource  = new DictTable(_source.TableId);
        #    int         i;
        #    int         sourceId;
        #    FieldId     fieldId;
        #    ;
        #
        #    for (i = 1; i <= dictDest.fieldCnt(); i++)
        #    {
        #        fieldId = dictDest.fieldCnt2Id(i);
        #        if (! conFind(_fieldsToExclude, fieldId))
        #        {
        #            if (! dictDest.fieldObject(fieldId).isSystem())
        #            {
        #                sourceId = dictSource.fieldName2Id(dictDest.fieldName(fieldId));
        #                if (sourceId)
        #                {
        #                    _dest.(dictDest.fieldCnt2Id(i)) = _source.(sourceId);
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #buf2BufMerge
        #static void buf2BufMerge(Common _dest, Common _source)
        #{
        #    DictTable   dictDest    = new DictTable(_dest.TableId);
        #    DictTable   dictSource  = new DictTable(_source.TableId);
        #    int         i;
        #    int         sourceId;
        #    ;
        #
        #    for (i = 1; i <= dictDest.fieldCnt(); i++)
        #    {
        #        sourceId = dictSource.fieldName2Id(dictDest.fieldName(dictDest.fieldCnt2Id(i)));
        #        if (sourceId && ! _dest.(dictDest.fieldCnt2Id(i)))
        #        {
        #            _dest.(dictDest.fieldCnt2Id(i)) = _source.(sourceId);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #callStack2infolog
        ##define.PathPrefixLen       (4)
        ##localmacro.ClientPrefix    '(C)' #endmacro
        ##localmacro.ServerPrefix    '(S)' #endmacro
        ##localmacro.RegexPatternFmt '^\\s*\\S+\\s+\%1\\.\%2.+\%1\\.(\%3\\.\%4|\%5\\.(\%6|\%7|\%8))\\(.+?\\n(.*)' #endmacro
        ##define.RegexResultStr      ('$3')
        ##define.DotNetAppNamespace  ('Dynamics.Ax.Application')
        #public static void callStack2infolog(str _prefix = "@SYS65092", Counter _skipLevels = 0)
        #{
        #    System.Text.RegularExpressions.MatchCollection  matches;
        #    System.Text.RegularExpressions.Match            oneMatch;
        #    System.Diagnostics.StackTrace                   stackTrace;
        #    container                                       stack;
        #    TreeNodePath                                    correctPath;
        #    TreeNodePath                                    stackPath;
        #    Counter                                         n;
        #    str                                             regexPattern;
        #    str                                             clrStack;
        #    int                                             skipLevels = max(0, _skipLevels);
        #    int                                             line;
        #    ;
        #    setPrefix(_prefix);
        #    if (xSession::isCLRSession())
        #    {
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #        stackTrace = new System.Diagnostics.StackTrace(true);
        #        clrStack = stackTrace.ToString();
        #        stackTrace = null;
        #        regexPattern = strFmt(  #RegexPatternFmt,
        #                                strReplace(#DotNetAppNamespace, '.', '\\.'),
        #                                strReplace(funcName(), '::', '\\.'),
        #                                classStr(Info),
        #                                methodStr(Info, Add),
        #                                classStr(Global),
        #                                staticMethodStr(Global, error),
        #                                staticMethodStr(Global, warning),
        #                                staticMethodStr(Global, info)
        #                             );
        #        matches = System.Text.RegularExpressions.Regex::Matches(clrStack, regexPattern, System.Text.RegularExpressions.RegexOptions::Singleline);
        #        n = matches.get_Count();
        #        if (n > 0)
        #        {
        #            oneMatch = matches.get_Item(0);
        #            clrStack = oneMatch.Result(#RegexResultStr);
        #            oneMatch = null;
        #        }
        #        matches = null;
        #        CodeAccessPermission::revertAssert();
        #        info(clrStack);
        #    }
        #    else
        #    {
        #        stack = xSession::xppCallStack();
        #        for (n = 3 + skipLevels * 2; n <= conLen(stack); n += 2)
        #        {
        #            stackPath   = conPeek(stack,n);
        #            line        = conPeek(stack,n+1);
        #            correctPath = stackPath;
        #            if (line)
        #            {
        #                if (    substr(stackPath, 1, #PathPrefixLen) == #ClientPrefix
        #                    ||  substr(stackPath, 1, #PathPrefixLen) == #ServerPrefix
        #                   )
        #                {
        #                    correctPath = substr(stackPath, #PathPrefixLen + 1, maxint());
        #                }
        #                info(strFmt('%1 %2', stackPath, line),'', SysInfoAction_Editor::newLineColumn(correctPath, line));
        #            }
        #            else
        #            {
        #                info(strFmt('%1', stackPath));
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #canBeConverted
        #public static client server boolean canBeConverted(
        #    UnitOfMeasureSymbol     _fromUnitOfMeasure,
        #    UnitOfMeasureSymbol     _toUnitOfMeasure,
        #    ItemId                  _ItemId)
        #{
        #    return unitofMeasureConverter::canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(_fromUnitOfMeasure),
        #                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(_toUnitOfMeasure),
        #                                                    InventTable::itemProduct(_itemId));
        #}
      ENDSOURCE
      SOURCE #checkCursorEmpty
        #static void checkCursorEmpty(Common  _common, str _someText = '')
        #{
        #    ;
        #    if (! _common.RecId)
        #    {
        #        if (_someText)
        #        {
        #            error(_someText);
        #        }
        #        throw error(StrFmt("@SYS102242", TableId2Name(_common.TableId)));
        #    }
        #}
      ENDSOURCE
      SOURCE #checkFieldNotEmpty
        #static boolean checkFieldNotEmpty(Common _table, fieldId _fieldId)
        #{
        #    boolean  res = true;
        #    ;
        #    if (! _table.(_fieldId))
        #    {
        #        res = checkFailed(strFmt("@SYS84753", fieldId2pname(_table.TableId, _fieldId)  ));
        #    }
        #
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #cObject
        #static Object cObject(Object  _obj)
        #{
        #    return _obj;
        #}
      ENDSOURCE
      SOURCE #convertQty
        #public static client server real convertQty(
        #    real                    _value,
        #    UnitOfMeasureSymbol     _fromUnitOfMeasure,
        #    UnitOfMeasureSymbol     _toUnitOfMeasure,
        #    ItemId                  _ItemId,
        #    NoYes                   _roundAbsoluteValue = true,
        #    DEVConversionErrorMessage   _errorMessage = DEVConversionErrorMessage::Error
        #    )
        #{
        #    if (_errorMessage == DEVConversionErrorMessage::Warning && ! DEV::canBeConverted(_fromUnitOfMeasure, _toUnitOfMeasure, _itemId) )
        #    {
        #        warning(strFmt(
        #        "@SYS50546",
        #        _fromUnitOfMeasure,
        #        _toUnitOfMeasure));
        #    }
        #    return UnitOfMeasureConverter::convert(_value,
        #                                        UnitOfMeasure:: unitOfMeasureIdBySymbol(_fromUnitOfMeasure),
        #                                        UnitOfMeasure:: unitOfMeasureIdBySymbol(_toUnitOfMeasure),
        #                                        _roundAbsoluteValue, InventTable::itemProduct(_ItemId), _roundAbsoluteValue ,
        #                                        _errorMessage == DEVConversionErrorMessage::Error ? false : true
        #                                        );
        #}
      ENDSOURCE
      SOURCE #copyRanges
        #static void copyRanges(QueryBuildDataSource _qbdsTarget, QueryBuildDataSource _qbdsSource)
        #{
        #    int     idx;
        #    ;
        #
        #    for (idx = 1; idx <= _qbdsSource.rangeCount(); idx++)
        #    {
        #        _qbdsTarget.addRange(_qbdsSource.range(idx).field()).value(_qbdsSource.range(idx).value());
        #    }
        #}
      ENDSOURCE
      SOURCE #countTotalQuick
        #server static Integer countTotalQuick(QueryRun _queryRun)
        #{
        #    container               queryPack = _queryRun.pack();
        #    Query                   countQuery;
        #    QueryRun                countQueryRun;
        #    QueryBuildDataSource    qbds;
        #    QueryBuildFieldList     qbfl;
        #    Common                  common;
        #    Integer                 counter;
        #    Integer                 loops;
        #    int                     i;
        #    ;
        #    countQueryRun   = new QueryRun(queryPack);
        #    countQuery      = countQueryRun.query();
        #    for (i = 1; i <= countQuery.dataSourceCount(); i++)
        #    {
        #        qbds            = countQuery.dataSourceNo(i);
        #        qbds.update(false);
        #        qbds.sortClear();
        #        qbfl = qbds.fields();
        #        qbfl.dynamic(false);
        #        qbfl.clearFieldList();
        #        qbds.addSelectionField(FieldNum(Common,recId),SelectionField::COUNT);
        #    }
        #
        #    countQueryRun   = new QueryRun(countQuery);
        #
        #    while (countQueryRun.next())
        #    {
        #        common  = countQueryRun.get(countQuery.dataSourceNo(1).table());
        #        counter += common.recId;
        #        loops++;
        #    }
        #
        #    return counter;
        #}
      ENDSOURCE
      SOURCE #datasourceRangesAsText
        #static Notes datasourceRangesAsText(QueryBuildDataSource _sourceDS)
        #{
        #    int                     rangeId;
        #    QueryBuildRange         qbr;
        #    str                     ret;
        #    ;
        #
        #    for (rangeId = 1; rangeId <= _sourceDS.rangeCount(); rangeId ++)
        #    {
        #        qbr = _sourceDS.range(rangeId);
        #
        #        if (qbr.value() && qbr.status() != RangeStatus::Hidden)
        #        {
        #            if (ret)
        #            {
        #                ret += '; ';
        #            }
        #            ret += strFmt('%1 = %2', fieldid2pname(_sourceDS.table(), qbr.field()), qbr.value());
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #date2DateTime
        #static client server utcDateTime date2DateTime(TransDate _date, boolean _isEndOfDay = false)
        #{
        #    return DateTimeUtil::newDateTime(_date, _isEndOfDay ? timeMax() : 0, DateTimeUtil::getUserPreferredTimeZone());
        #}
        #
      ENDSOURCE
      SOURCE #dateTime2Date
        #static client server date dateTime2Date(utcDateTime _dateTime)
        #{
        #    return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_dateTime,
        #                                                                DateTimeUtil::getUserPreferredTimeZone()));
        #}
        #
      ENDSOURCE
      SOURCE #dsAllowEditExceptFields
        #static void dsAllowEditExceptFields(FormDataSource _formDataSource, boolean _allowEdit, container _fieldListExclude=connull())
        #{
        #    FormDataObject  fdo;
        #    FormObjectSet   fos;
        #    DictTable       dictTable = new DictTable(_formDataSource.table());
        #    DictField       dictField;
        #    int             fieldCount = dictTable.fieldCnt();
        #    int             i;
        #    int             j;
        #    ;
        #
        #    fos = _formDataSource;
        #
        #    for (i = 1; i <= fieldCount; i++)
        #    {
        #        dictField = new DictField(dictTable.id(), dictTable.fieldCnt2Id(i));
        #        if (! confind(_fieldListExclude, dictField.id())
        #                && ! dictField.isSystem())
        #        {
        #            for (j = 1; j <= dictField.arraySize(); j++)
        #            {
        #                fdo = fos.object(fieldId2ext(dictField.id(), j));
        #                if (! confind(_fieldListExclude, fieldId2ext(dictField.id(), j)))
        #                {
        #                    if (fdo)
        #                    {
        #                        fdo.allowEdit(_allowEdit);
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #dsGetDisabledFields
        #static container dsGetDisabledFields(FormDataSource _formDataSource)
        #{
        #    FormDataObject  fdo;
        #    FormObjectSet   fos;
        #    DictTable       dictTable = new DictTable(_formDataSource.table());
        #    DictField       dictField;
        #    int             fieldCount = dictTable.fieldCnt();
        #    int             i;
        #    container       res;
        #    int             j;
        #    ;
        #
        #    fos = _formDataSource;
        #
        #    for (i = 1; i <= fieldCount; i++)
        #    {
        #        dictField = new DictField(dictTable.id(), dictTable.fieldCnt2Id(i));
        #        if (! dictField.isSystem() && dictField.allowEdit())
        #        {
        #            for (j = 1; j <= dictField.arraySize(); j++)
        #            {
        #                fdo = fos.object(fieldId2ext(dictField.id(), j));
        #                if (! fdo.allowEdit())
        #                {
        #                    res += fieldId2ext(dictField.id(), j);
        #                }
        #            }
        #
        #
        #        }
        #    }
        #    return res;
        #}
      ENDSOURCE
      SOURCE #dsRefresh
        #static void dsRefresh(Common                    _record,
        #                      DEVSysDSRefreshAction    _action,
        #                      NoYes                     _savePosition = NoYes::Yes,
        #                      NoYes                     _forceActive  = NoYes::Yes
        #                      )
        #{
        #    FormDataSource  formDataSource = _record.datasource();
        #    Common          record;
        #    DictTable       dt = new DictTable(_record.TableId);
        #    ;
        #
        #    if (formDataSource)
        #    {
        #        switch (_action)
        #        {
        #            case DEVSysDSRefreshAction::RereadRefresh:
        #                formDataSource.reread();
        #                formDataSource.refresh();
        #                break;
        #            case DEVSysDSRefreshAction::Research:
        #                formDataSource.research(_savePosition);
        #                break;
        #            case DEVSysDSRefreshAction::ExecuteQuery:
        #                if (_savePosition)
        #                {
        #                    record = dt.makeRecord();
        #                    record.data(_record);
        #                }
        #                formDataSource.executeQuery();
        #                if (_savePosition)
        #                {
        #                    formDataSource.findRecord(record);
        #                }
        #                break;
        #        }
        #        if (_forceActive)
        #        {
        #            formDataSource.active();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #execProcServer
        #static server int execProcServer(str _statement)
        #{
        #    Connection  connection = new Connection();
        #    Statement   statement  = connection.createStatement();
        #    Int         error;
        #    ;
        #
        #    new SqlStatementExecutePermission(_statement).assert();
        #    //BP Deviation documented
        #    error = statement.executeUpdate(_statement);
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return error;
        #}
      ENDSOURCE
      SOURCE #findLogElAddressByDirTypeAndDesc
        #static LogisticsElectronicAddress findLogElAddressByDirTypeAndDesc( RefRecId                    _dirPartyRecId,
        #                                                        LogisticsElectronicAddressMethodType _type,
        #                                                        Description                          _description = '')
        #{
        #    LogisticsElectronicAddress      logisticsElectronicAddress;
        #    DirPartyLocation                dirPartyLocation;
        #    ;
        #
        #    select firstOnly logisticsElectronicAddress
        #        where logisticsElectronicAddress.Type == _type &&
        #             (logisticsElectronicAddress.Description == _description ||  ! _description)
        #    //BP Deviation Documented
        #    join dirPartyLocation
        #        order by IsPrimary desc
        #        where dirPartyLocation.Location == logisticsElectronicAddress.Location &&
        #              dirPartyLocation.Party    == _dirPartyRecId;
        #
        #    return logisticsElectronicAddress;
        #
        #}
      ENDSOURCE
      SOURCE #getFormRunFromFormArgs
        #static Object getFormRunFromFormArgs(FormRun  _element, str _formName)
        #{
        #    Object      res;
        #    FormRun     formRun;
        #    ;
        #    if (_element && _element.args() && _element.args().caller() &&
        #        SysDictClass::isEqualOrSuperclass(classidget(_element.args().caller()), classnum(FormRun)))
        #
        #    {
        #        formRun = _element.args().caller();
        #        if (formRun.name() == _formName)
        #        {
        #            res = formRun;
        #        }
        #    }
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #insertRecord
        #static void insertRecord(Common _record)
        #{
        #    if (_record.validateWrite())
        #    {
        #        _record.insert();
        #    }
        #    else
        #    {
        #        throw error(strFmt("@DEV6887", tableId2pname(_record.TableId)));
        #    }
        #}
      ENDSOURCE
      SOURCE #insertRecordCheck
        #static void insertRecordCheck(Common _record)
        #{
        #    if (! _record.validateWrite())
        #    {
        #        throw error(strFmt("@DEV6887", tableId2pname(_record.TableId)));
        #    }
        #}
      ENDSOURCE
      SOURCE #insertToSQLDB
        #static void insertToSQLDB(Common _common)
        #{
        #    /*
        #    Common                                          commonOrig;
        #    System.Data.SqlClient.SqlCommand                sqlCommand;
        #    System.Data.SqlClient.SqlConnection             sqlConnection;
        #    System.Data.SqlClient.SqlParameterCollection    parameterCollection;
        #    System.Data.SqlClient.SqlParameter              sqlParameter;
        #    System.Byte[]                                   bytes;
        #    SysSQLSystemInfo                                SQLSystemInfo = SysSQLSystemInfo::construct();
        #    DictTable                                       dictTable;
        #    int                                             j;
        #    DictField                                       dictField;
        #    str                                             fieldsStr,
        #                                                    valuesStr,
        #                                                    parameterId;
        #    Map                                             valuesMap,
        #                                                    sizeMap;
        #    //AnyTypeValue                                    AnyTypeValue;
        #    System.String                                   sysStr;
        #    container                                       anyTypeValueCon;
        #    MapEnumerator                                   valuesMapEnumerator;
        #    System.IO.MemoryStream                          memStream;
        #    RecId                                           ret;
        #    TreeNode                                        treeNode;
        #    str                                             insertStr;
        #    #AOT
        #    ;
        #
        #    dictTable = new DictTable(_common.TableId);
        #    valuesMap = new Map(Types::Integer, Types::Container);
        #    sizeMap   = new Map(Types::Integer, Types::Integer);
        #
        #    for (j = 1; j <= dictTable.fieldCnt(); j++)
        #    {
        #        dictField = new DictField(_common.TableId, dictTable.fieldCnt2Id(j));
        #
        #        if (!dictField.isSql() || !_common.(dictField.id()))
        #        {
        #            continue;
        #        }
        #
        #        if (dictField)
        #        {
        #            if (dictField.baseType() == Types::String)
        #            {
        #                sizeMap.insert(j, dictField.stringLen());
        #            }
        #
        #            if (fieldsStr)
        #            {
        #                fieldsStr += strFmt(',[%1]', dictField.name(DbBackend::Sql));
        #                valuesStr += strFmt(',@FLD%1', j);
        #            }
        #            else
        #            {
        #                fieldsStr = strFmt('[%1]', dictField.name(DbBackend::Sql));
        #                valuesStr = strFmt('@FLD%1', j);
        #            }
        #
        #            AnyTypeValueCon = [_common.(dictField.id())];
        #
        #            if (dictField.name() == identifierStr(RecId))
        #            {
        #                ret = conPeek(AnyTypeValueCon, 1);
        #            }
        #
        #            valuesMap.insert(j, AnyTypeValueCon);
        #        }
        #    }
        #
        #    sqlConnection = new System.Data.SqlClient.SqlConnection(strFmt("Data Source=%1;Initial Catalog=%2;Integrated Security=True",
        #                                                                   SQLSystemInfo.getLoginServer(),
        #                                                                   SQLSystemInfo.getloginDatabase()));
        #
        #    sqlCommand    = new System.Data.SqlClient.SqlCommand(strFmt('INSERT INTO %1 (%2) VALUES (%3)', dictTable.name(DbBackend::Sql), fieldsStr, valuesStr), sqlConnection);
        #
        #
        #
        #    parameterCollection = sqlCommand.get_Parameters();
        #
        #    valuesMapEnumerator = valuesMap.getEnumerator();
        #
        #    while (valuesMapEnumerator.moveNext())
        #    {
        #        parameterId  = strFmt('@FLD%1', valuesMapEnumerator.currentKey());
        #        AnyTypeValueCon = valuesMapEnumerator.currentValue();
        #
        #        switch (typeOf(conPeek(AnyTypeValueCon, 1)))
        #        {
        #            case Types::Enum    :
        #                sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::Int);
        #                sqlParameter.set_Value(enum2int(conPeek(AnyTypeValueCon, 1)));
        #                break;
        #
        #            case Types::Time    :
        #            case Types::Integer :
        #                sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::Int);
        #                sqlParameter.set_Value(conPeek(AnyTypeValueCon, 1));
        #                break;
        #
        #            case Types::Int64    :
        #                sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::BigInt);
        #                sqlParameter.set_Value(conPeek(AnyTypeValueCon, 1));
        #                break;
        #
        #            case Types::Guid    :
        #                sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::UniqueIdentifier);
        #                sqlParameter.set_Value(conPeek(AnyTypeValueCon, 1));
        #                break;
        #
        #            case Types::Real    :
        #                sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::Real);
        #                sqlParameter.set_Value(conPeek(AnyTypeValueCon, 1));
        #                break;
        #
        #            case Types::Date        :
        #            case Types::UtcDateTime :
        #                sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::DateTime);
        #                sqlParameter.set_Value(conPeek(AnyTypeValueCon, 1));
        #                break;
        #
        #            case Types::String    :
        #                if (sizeMap.exists(valuesMapEnumerator.currentKey()))
        #                {
        #                    sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::NVarChar, sizeMap.lookup(valuesMapEnumerator.currentKey()));
        #                }
        #                else
        #                {
        #                    sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::NVarChar, -1);
        #                }
        #
        #                sqlParameter.set_Value(conPeek(AnyTypeValueCon, 1));
        #                break;
        #
        #            case Types::BLOB :
        #                sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::VarBinary);
        #                memStream = Binary::constructFromContainer(conPeek(AnyTypeValueCon, 1)).getMemoryStream();
        #                bytes = memStream.ToArray();
        #                memStream.Close();
        #                sqlParameter.set_Value(bytes);
        #            case Types::Container :
        #                sqlParameter = parameterCollection.Add(parameterId, System.Data.SqlDbType::VarBinary);
        #                memStream = Binary::constructFromContainer(new ContainerClass(conPeek(AnyTypeValueCon, 1)).toBlob()).getMemoryStream();
        #                bytes = memStream.ToArray();
        #                memStream.Close();
        #                sqlParameter.set_Value(bytes);
        #                break;
        #            default :
        #                sqlParameter = parameterCollection.Add(parameterId, conPeek(AnyTypeValueCon, 1));
        #                break;
        #        }
        #    }
        #
        #    if (memStream)
        #    {
        #        memStream.Dispose();
        #    }
        #
        #    sqlConnection.Open();
        #    insertStr = sqlCommand.get_CommandText();
        #       info(strFmt('%1', insertStr));
        #   // sqlCommand.ExecuteNonQuery();
        #    sqlCommand.Dispose();
        #
        #    sqlConnection.Close();
        #    sqlConnection.Dispose();
        #    */
        #}
      ENDSOURCE
      SOURCE #isQueryHasRecord
        #/*
        #//----------------------------------------------------------------------
        #validateWrite()
        #
        #if (this.DEV_RentConditionJourLineNum &&
        #        ! DEV::isQueryHasRecord(this.alk_lookupRentConditionJourLineNumQuery( this.DEV_RentConditionJourLineNum)))
        #    {
        #        ret = checkFailed(strfmt("incorrect value in field %1",
        #                        fieldid2pname(tablenum(PurchLine),
        #                        fieldnum(PurchLine, ItemId))));
        #    }
        #//----------------------------------------------------------------------
        #Query alk_lookupRentConditionJourLineNumQuery(DEV_RentConditionJourLineNum  _commersionConditionCode = '')
        #{
        #    Query                   query           = new Query();
        #    QueryBuildDataSource    qbds, qbds2;
        #    ;
        #
        #    qbds = query.addDataSource(tablenum(DEV_RentConditionJournalLine));
        #    qbds.addRange(fieldnum(DEV_RentConditionJournalLine, RentConditionJourLineNum)).value(_commersionConditionCode);
        #
        #    qbds.fetchMode(QueryFetchMode::One2One);
        #
        #    qbds = qbds.addDataSource(tablenum(DEV_RentConditionContract));
        #    qbds.relations(true);
        #    qbds.fetchMode(QueryFetchMode::One2One);
        #    qbds.joinMode(JoinMode::ExistsJoin);
        #
        #    qbds2 = qbds.addDataSource(tableNum(DEV_RentConditionJournal));
        #    qbds2.relations(true);
        #    qbds2.fetchMode(QueryFetchMode::One2One);
        #    qbds2.joinMode(JoinMode::InnerJoin);
        #
        #
        #    return query;
        #}
        #//----------------------------------------------------------------------
        #boolean ctm_lookupRentConditionJourLineNum(FormControl _formControl)
        #{
        #    SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tablenum(DEV_RentConditionJournalLine), _formControl);
        #    Query                   query           = this.ctm_lookupRentConditionJourLineNumQuery();
        #    ;
        #
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.ctm_addAutoLookupFields(identifierstr(AutoLookup), fieldnum(DEV_RentConditionJournalLine, RentConditionJourLineNum));
        #    sysTableLookup.performFormLookup();
        #
        #    return true;
        #}
        #//----------------------------------------------------------------------
        #*/
        #
        #static boolean isQueryHasRecord(Query  _q)
        #{
        #    QueryRun    qr = new QueryRun(_q);
        #    boolean     res;
        #    ;
        #    if (qr.next())
        #    {
        #        res = true;
        #    }
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #isUserInRole
        #static boolean isUserInRole(Description  _roleName)
        #{
        #    boolean                 res;
        #    SecurityUserRole        securityUserRole;
        #    SecurityRole            securityRole;
        #    ;
        #    select RecId from securityUserRole
        #        where  securityUserRole.User    == curUserId()
        #        join RecId from securityRole
        #            where  securityRole.RecId == securityUserRole.SecurityRole
        #                && (   securityRole.AotName == _roleName
        #                )    ;
        #    if (securityUserRole.RecId)
        #    {
        #        res = true;
        #    }
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #purchTableConfirm
        #static void  purchTableConfirm(PurchTable  _purchTable)
        #{
        #    PurchFormLetter                 purchFormLetter;
        #    if (_purchTable.RecId &&
        #        _purchTable.DocumentState == VersioningDocumentState::Approved)
        #    {
        #        purchFormLetter = purchFormLetter::construct(DocumentStatus::PurchaseOrder);
        #        purchFormLetter.update(_purchTable,'');
        #    }
        #}
      ENDSOURCE
      SOURCE #qty
        #static Qty qty(Qty  _qty, UnitOfMeasureSymbol  _unit)
        #{
        #    return decRound(_qty, UnitOfMeasure::unitOfMeasureDecimalPrecision(
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unit)));
        #}
      ENDSOURCE
      SOURCE #runButtonWithRecord
        #static void runButtonWithRecord(FormFunctionButtonControl _button, Common _record,
        #                                           Object _obj = null)
        #{
        #    MenuFunction        mf;
        #    Args                argsLocal = new Args();
        #    ;
        #    mf = new MenuFunction(_button.menuItemName(), _button.menuItemType());
        #    argsLocal.caller(_button.owner());
        #    argsLocal.record(_record);
        #    if (_obj)
        #    {
        #        argsLocal.object(_obj);
        #    }
        #    mf.run(argsLocal);
        #}
      ENDSOURCE
      SOURCE #trud_stop
        #static void trud_stop()
        #{
        #    ;
        #
        #}
      ENDSOURCE
      SOURCE #trud_stopHandler
        #static void trud_stopHandler(XppPrePostArgs _args)
        #{
        #    ;
        #
        #    if (
        #    true &&
        #    curuserid() == 'Denis' )
        #    {
        #        switch (Box::yesNoCancel('Yes - continue, No - stop, Cancel - ttsbegin', DialogButton::No))
        #        {
        #            case DialogButton::Yes:
        #
        #                break;
        #            case DialogButton::No:
        #                throw error('trud stop');
        #            case DialogButton::Cancel:
        #                //BP Deviation Documented
        #                ttsbegin;
        #                break;
        #            default :
        #              throw error(Error::wrongUseOfFunction(funcName()));
        #        }
        #
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #validateCondition
        #static boolean validateCondition(anytype _condition, str _message, boolean _isThrowError = false)
        #{
        #    boolean  res = true;
        #    ;
        #
        #    if (! _condition)
        #    {
        #        if (_isThrowError)
        #        {
        #            throw error(_message);
        #        }
        #        else
        #        {
        #            res = checkFailed(_message);
        #        }
        #    }
        #    return res;
        #}
      ENDSOURCE
      SOURCE #validateCursor
        #static void validateCursor(Common  _cursor)
        #{
        #    DictTable   dictSource  = new DictTable(_cursor.TableId);
        #    int         i;
        #    boolean     res = true;
        #    ;
        #
        #    for (i = 1; i <= dictSource.fieldCnt(); i++)
        #    {
        #        res  = _cursor.validateField(dictSource.fieldCnt2Id(i)) && res;
        #    }
        #    res = _cursor.validateWrite() && res;
        #
        #    if (! res)
        #    {
        #        throw error(StrFmt("@DEV4190", dictSource.label()));
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #validateCursorField
        #static boolean validateCursorField(Common _table, fieldId _fieldId, boolean _isThrow = true)
        #{
        #    boolean res = true;
        #    ;
        #    if (! _table.(_fieldId))
        #    {
        #        if (_isThrow)
        #        {
        #            throw error(strFmt("@SYS84753", fieldId2pname(_table.TableId, _fieldId)  ));
        #        }
        #        else
        #        {
        #            res = checkFailed(strFmt("@SYS84753", fieldId2pname(_table.TableId, _fieldId)  ));
        #        }
        #    }
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #validateCursorFieldsOnly
        #static boolean validateCursorFieldsOnly(Common  _cursor)
        #{
        #    DictTable   dictSource  = new DictTable(_cursor.TableId);
        #    int         i;
        #    boolean     res = true;
        #    int         fieldId;
        #    ;
        #
        #    for (i = 1; i <= dictSource.fieldCnt(); i++)
        #    {
        #        fieldId = dictSource.fieldCnt2Id(i);
        #        if (dictSource.fieldObject(fieldId).mandatory() && ! _cursor.(fieldId))
        #        {
        #            res  = _cursor.validateField(fieldId) && res;
        #        }
        #    }
        #
        #    return res;
        #
        #}
      ENDSOURCE
      SOURCE #validateDeleteCheck
        #static void validateDeleteCheck(Common _record)
        #{
        #    if (! _record.validateDelete())
        #    {
        #        throw error(strFmt("@SYS305924", tableId2pname(_record.TableId)));
        #    }
        #}
      ENDSOURCE
      SOURCE #validateWriteRecordCheck
        #static void validateWriteRecordCheck(Common _record)
        #{
        #    if (! _record.validateWrite())
        #    {
        #        throw error(strFmt("@CCM152", tableId2pname(_record.TableId)));
        #    }
        #}
      ENDSOURCE
      SOURCE #w
        #static void w(anytype _i, str _addition = '')
        #{
        #    ;
        #    if (_addition)
        #    {
        #        info(StrFmt('%1, %2', _i, _addition));
        #    }
        #    else
        #    {
        #        info(StrFmt('%1',_i));
        #    }
        #    infolog.viewUpdate();
        #}
      ENDSOURCE
    ENDMETHODS
    EVENTS
      METHOD #trud_stop
        EVENTHANDLERS
          EVENTHANDLER #EventHandler
            PROPERTIES
              CalledWhen          #Post
              Class               #DEV
              Method              #trud_stopHandler
              AOTlink             #\Classes\DEV\trud_stopHandler
            ENDPROPERTIES
            
          ENDEVENTHANDLER
        ENDEVENTHANDLERS
      ENDMETHOD
    ENDEVENTS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVCRMConnectorHelper unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVCRMConnectorHelper
    PROPERTIES
      Name                #DEVCRMConnectorHelper
      Origin              #{98A5A6EA-C630-450E-9133-925D2566801E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DEVCRMConnectorHelper
        #{
        #    //Microsoft.Xrm.Sdk.IOrganizationService       orgService;
        #
        #    /*
        #Microsoft.Xrm.Sdk.Entity findEntityByKey(str _entityName, str _keyField, str _value)
        #{
        #    Microsoft.Xrm.Sdk.Entity                        entityRes;
        #    Microsoft.Xrm.Sdk.Query.QueryExpression         query;
        #    Microsoft.Xrm.Sdk.Query.FilterExpression        filterExpression;
        #    Microsoft.Xrm.Sdk.EntityCollection              entityCollection;
        #    System.Collections.ICollection                  iCollection;
        #    int                                             recordCnt;
        #    System.Collections.ArrayList                    arList;
        #    System.Array c1;
        #    ;
        #    arList = new System.Collections.ArrayList(1);
        #    arList.Add(_value);
        #
        #    query = new Microsoft.Xrm.Sdk.Query.QueryExpression(_entityName);
        #    filterExpression = query.get_Criteria();
        #    filterExpression.AddCondition(_keyField, Microsoft.Xrm.Sdk.Query.ConditionOperator::Equal, arList.ToArray());//_value);
        #
        #    entityCollection = orgService.RetrieveMultiple(query);
        #    iCollection = entityCollection.get_Entities();
        #    recordCnt = iCollection.get_Count();
        #    if (recordCnt > 0)
        #    {
        #        entityRes = entityCollection.get_Item(0);
        #    }
        #
        #    return entityRes;
        #}
        #
        #void setEntityColumnValues( Microsoft.Xrm.Sdk.Entity    _entity,
        #                            Common                      _cursor,
        #                            container       _entityFieldsId,
        #                            Map             _refFieldsMapping)
        #{
        #
        #    Microsoft.Xrm.Sdk.Entity            refEntity;
        #    Microsoft.Xrm.Sdk.OptionSetValue  optionSetValue;
        #
        #    InteropPermission   permission;
        #    int                 i;
        #    int                 columnCnt;
        #
        #    DictTable           dictTable = new DictTable(_cursor.tableId);
        #    DictField           dictField;
        #
        #    int                 tmpInt;
        #    real                tmpReal;
        #    date                tmpDate;
        #    str                 tmpS;
        #    container           c;
        #
        #
        #    FieldId             fieldId;
        #    str                 fieldName;
        #
        #    columnCnt = conLen(_entityFieldsId);
        #
        #    for (i = 1; i <= columnCnt; i++)
        #    {
        #        fieldId   = conPeek(_entityFieldsId, i);
        #        fieldName = fieldId2name(_cursor.TableId, fieldId);
        #        dictField = new DictField(dictTable.id(), fieldId);
        #
        #        if (_refFieldsMapping.exists(fieldId))
        #        {
        #            if (_cursor.(fieldId))
        #            {
        #                c = _refFieldsMapping.lookup(fieldId);
        #                refEntity = this.findEntityByKey(conPeek(c, 1), conPeek(c, 2), _cursor.(fieldId));
        #                if (! refEntity)
        #                {
        #                    throw error(strFmt("Value %1 doesn't exist in %2 table", _cursor.(fieldId), conPeek(c, 1)));
        #                }
        #                _entity.set_Item(fieldName, refEntity.ToEntityReference());
        #            }
        #        }
        #        else
        #        {
        #            switch (dictField.baseType())
        #            {
        #                case Types::String:
        #                    tmpS = _cursor.(fieldId);
        #                    _entity.set_Item(fieldName, tmpS);
        #                    break;
        #                case Types::Real:
        #                    tmpReal = _cursor.(fieldId);
        #                    _entity.set_Item(fieldName, tmpReal);
        #                    break;
        #                case Types::Integer:
        #                    tmpInt = _cursor.(fieldId);
        #                    _entity.set_Item(fieldName, tmpInt);
        #
        #                    break;
        #                case Types::Enum:
        #                    tmpInt = _cursor.(fieldId);
        #                    optionSetValue = new Microsoft.Xrm.Sdk.OptionSetValue(tmpInt);
        #                    _entity.set_Item(fieldName, optionSetValue);
        #                    break;
        #                case Types::Date:
        #                    tmpDate = _cursor.(fieldId);
        #                    _entity.set_Item(fieldName, tmpDate);
        #                    break;
        #                default:
        #                    throw error(strfmt("Field \"%1\". Type \"%2\" is not supported", fieldName, dictField.baseType()));
        #
        #            }
        #        }
        #    }
        #
        #}
        #    */
        #}
      ENDSOURCE
      SOURCE #connect
        #void connect()
        #{
        #    /*
        #    str     connectionString = @"AuthType=Office365;Username=CRMAX1@denisCRM.onmicrosoft.com; Password=Fafa63345;Url=https://deniscrm.crm6.dynamics.com";
        #    Microsoft.Xrm.Tooling.Connector.CrmServiceClient        conn;
        #    InteropPermission permission;
        #    ;
        #    permission = new InteropPermission(InteropKind::ClrInterop);
        #    permission.assert();
        #    try
        #    {
        #
        #        conn = new Microsoft.Xrm.Tooling.Connector.CrmServiceClient(connectionString);
        #
        #        if (conn.get_OrganizationWebProxyClient() != null)
        #        {
        #            orgService = conn.get_OrganizationWebProxyClient() ;
        #        }
        #        else
        #        {
        #            orgService = conn.get_OrganizationServiceProxy();
        #        }
        #
        #        if (! orgService)
        #        {
        #            throw error(strFmt("Failed to connect"));
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processCLRException();
        #        throw  error ("Error reading from CRM");
        #
        #    }
        #    */
        #
        #}
      ENDSOURCE
      SOURCE #createOneEntity
        #guid createOneEntity(Common         _cursor,
        #                    str             _entityName,
        #                    container       _entityFieldsId,
        #                    Map             _refFieldsMapping
        #                    )
        #{
        #
        #
        #    guid                res;
        #    /*
        #    Microsoft.Xrm.Sdk.Entity                    entity;
        #    InteropPermission   permission;
        #    ;
        #
        #    permission = new InteropPermission(InteropKind::ClrInterop);
        #    permission.assert();
        #    try
        #    {
        #        entity = new Microsoft.Xrm.Sdk.Entity(_entityName);
        #
        #        this.setEntityColumnValues(entity, _cursor, _entityFieldsId, _refFieldsMapping);
        #
        #        res = orgService.Create(entity);
        #
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processCLRException();
        #        throw  error ("Error entity creation for CRM");
        #
        #    }
        #    */
        #    return res;
        #}
      ENDSOURCE
      SOURCE #loadEntity2Cursor
        #int loadEntity2Cursor(  Common      _cursor,
        #                        str         _entityName,
        #                        container   _entityFieldsId,
        #                        container   _rangesCon = conNull())
        #{
        #    int                 records;
        #    /*
        #    int                 columnCnt;
        #    int                 i;
        #    str                 fieldName;
        #    DictTable           dictTable = new DictTable(_cursor.tableId);
        #    DictField           dictField;
        #    FieldId             fieldId;
        #    int                 recordCnt;
        #
        #
        #    int               tmpInt;
        #    real              tmpReal;
        #    date              tmpDate;
        #    str               tmpS;
        #    Guid              tmpGuid;
        #    System.DBNull   db;
        #    System.Object   obj;
        #
        #    System.Type         type;
        #    Microsoft.Xrm.Sdk.EntityReference    entityReference;
        #    Microsoft.Xrm.Sdk.OptionSetValue     optionSetValue;
        #    str             refType = 'Microsoft.Xrm.Sdk.EntityReference';
        #    str             curType;
        #    System.String   strSys;
        #
        #    InteropPermission permission;
        #
        #    str fetch2;
        #    Microsoft.Xrm.Sdk.Query.FetchExpression     fetchExpression;
        #    Microsoft.Xrm.Sdk.EntityCollection          entityCollection;
        #    System.Collections.ICollection              iCollection;
        #
        #    Microsoft.Xrm.Sdk.Entity                    entity;
        #    Microsoft.Xrm.Sdk.Query.QueryExpression     query;
        #
        #    Microsoft.Xrm.Sdk.Query.ColumnSet           columnSet;
        #    Microsoft.Xrm.Sdk.Query.FilterExpression    filterExpression;
        #    System.Collections.ArrayList                arList;
        #
        #    void closeObj()
        #    {
        #        //
        #    }
        #    ;
        #    permission = new InteropPermission(InteropKind::ClrInterop);
        #    permission.assert();
        #    try
        #    {
        #        records  = 1;
        #        columnCnt = conLen(_entityFieldsId);
        #
        #        query = new Microsoft.Xrm.Sdk.Query.QueryExpression(_entityName);
        #        columnSet = new Microsoft.Xrm.Sdk.Query.ColumnSet();
        #        for(i = 1; i <= columnCnt; i++)
        #        {
        #            columnSet.AddColumn(fieldId2name(_cursor.TableId, conPeek(_entityFieldsId, i)));
        #        }
        #        query.set_ColumnSet(columnSet);
        #
        #        if (conLen(_rangesCon))
        #        {
        #            filterExpression = query.get_Criteria();
        #            for(i = 1; i <= conLen(_rangesCon); i++)
        #            {
        #
        #                arList = new System.Collections.ArrayList(1);
        #            }
        #        }
        #
        #        entityCollection = orgService.RetrieveMultiple(query);
        #
        #        iCollection = entityCollection.get_Entities();
        #
        #
        #        recordCnt = iCollection.get_Count();
        #
        #
        #        for(records = 0; records < recordCnt; records++)
        #        {
        #            entity = entityCollection.get_Item(records);
        #
        #            _cursor.clear();
        #            _cursor.initValue();
        #
        #            for (i = 1; i <= columnCnt; i++)
        #            {
        #                fieldId   = conPeek(_entityFieldsId, i);
        #                fieldName = fieldId2name(_cursor.TableId, fieldId);
        #
        #
        #                if (fieldId)
        #                {
        #                    if (! entity.Contains(fieldName) )
        #                    {
        #                        continue;
        #                    }
        #                    obj = entity.get_Item(fieldName);
        #                    if (System.Convert::IsDBNull(obj) )
        #                    {
        #                        continue;
        #                    }
        #                    type = obj.GetType();
        #                    curType = type.ToString();
        #                    if (curType == 'Microsoft.Xrm.Sdk.EntityReference')
        #                    {
        #                        entityReference = obj;
        #
        #                        obj =  entityReference.get_Name();
        #                    }
        #                    if (curType == 'Microsoft.Xrm.Sdk.OptionSetValue')
        #                    {
        #                        optionSetValue = obj;
        #
        #                        obj =  optionSetValue.get_Value();
        #                    }
        #
        #                    dictField = new DictField(dictTable.id(), fieldId);
        #                    switch (dictField.baseType())
        #                    {
        #                        case Types::String:
        #                            tmpS = System.Convert::ToString(obj);
        #                            _cursor.(fieldId) = tmpS;
        #                            break;
        #                        case Types::Real:
        #                            tmpReal = System.Convert::ToDouble(obj);
        #                            _cursor.(fieldId) = tmpReal;
        #                            break;
        #                        case Types::Integer:
        #                            tmpInt =  System.Convert::ToInt32(obj);
        #                            _cursor.(fieldId) = tmpInt;
        #
        #                            break;
        #                        case Types::Enum:
        #                            tmpInt =  System.Convert::ToInt32(obj);
        #                            _cursor.(fieldId) = tmpInt;
        #
        #                            break;
        #                        case Types::Date:
        #                            tmpDate = System.Convert::ToDateTime(obj);
        #                            _cursor.(fieldId) = tmpDate;
        #                            break;
        #                        case Types::Guid:
        #                            _cursor.(fieldId) = tmpGuid;
        #                            break;
        #                        default:
        #                            throw error(strfmt("Field \"%1\". Type \"%2\" is not supported", fieldName, dictField.baseType()));
        #
        #                    }
        #                }
        #            }
        #            _cursor.insert();
        #
        #        }
        #        closeObj();
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processCLRException();
        #        closeObj();
        #        throw  error ("Error reading from CRM");
        #
        #    }
        #    catch(Exception::Error)
        #    {
        #        closeObj();
        #        throw  error ("Error reading from CRM");
        #    }
        #    */
        #    return records;
        #}
      ENDSOURCE
      SOURCE #processCLRException
        #void processCLRException()
        #{
        #    str         strError;
        #    CLRObject   exc;
        #    CLRObject   innerExc;
        #    CLRObject   clrExcMessage;
        #
        #
        #    exc = CLRInterop::getLastException();
        #    if( exc )
        #    {
        #        clrExcMessage = exc.get_Message();
        #        innerExc = exc.get_InnerException();
        #
        #        while(innerExc != null)
        #        {
        #                clrExcMessage = innerExc.get_Message();
        #                innerExc = innerExc.get_InnerException();
        #        }
        #
        #        strError = CLRInterop::getAnyTypeForObject( clrExcMessage );
        #        error(strError);
        #    }
        #    //throw error("Unhandled CLR error");
        #}
      ENDSOURCE
      SOURCE #updateEntity
        #void updateEntity(Common          _cursor,
        #                  str             _entityName,
        #                  guid            _keyField,
        #                  container       _entityFieldsId,
        #                  Map             _refFieldsMapping
        #                    )
        #{
        #/*
        #    Microsoft.Xrm.Sdk.Entity                    entity;
        #
        #    InteropPermission                           permission;
        #    Microsoft.Xrm.Sdk.Query.ColumnSet           columnSet;
        #
        #
        #    permission = new InteropPermission(InteropKind::ClrInterop);
        #    permission.assert();
        #    try
        #    {
        #        columnSet = new Microsoft.Xrm.Sdk.Query.ColumnSet();
        #        entity = orgService.Retrieve(_entityName, _keyField, columnSet);
        #
        #        this.setEntityColumnValues(entity, _cursor, _entityFieldsId, _refFieldsMapping);
        #
        #        orgService.Update(entity);
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        this.processCLRException();
        #        throw  error ("Error entity update from CRM");
        #
        #    }
        #*/
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: EditorScripts unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #EditorScripts
    PROPERTIES
      Name                #EditorScripts
      RunOn               #Client
      Origin              #{2D0D0984-0000-1000-4BE1-54DC59156563}
      LegacyId            #2436
    ENDPROPERTIES
    
    METHODS
      SOURCE #addIns_OpenNewWindow
        #public void addIns_OpenNewWindow(Editor e)
        #{
        #    TreeNode treeNode = TreeNode::findNode(e.path());
        #    ;
        #    treeNode = TreeNode::findNode(xUtilElements::getNodePathRough(xUtilElements::parentElement(xUtilElements::findTreeNode(treeNode))));
        #    if (treeNode)
        #        treeNode.AOTnewWindow();
        #}
      ENDSOURCE
      SOURCE #addIns_OpenNewWindowSelected
        ##TreeNodeSysNodeType
        ##TokenTypes
        ##AOT
        #void addIns_OpenNewWindowSelected(Editor e)
        #{
        #    TreeNode            treeNode;
        #    TreeNode            treeNodeNew;
        #    str                 fieldName;
        #    DictField           df;
        #    xRefTmpReferences   tmpxRefReferences;
        #    int   selStartCol = e.selectionStartCol(), selStartLine = e.selectionStartLine();
        #
        #    ;
        #    fieldName = substr(e.currentLine(), e.selectionStartCol(), e.selectionEndCol() - e.selectionStartCol());
        #
        #    treeNode = TreeNode::findNode(e.path());
        #
        #    treeNode.AOTmakeXref(1);
        #    tmpxRefReferences = xRefCreate::makeTmp(appl.lastxRef());
        #
        #    xppScanner::populateXRefTmpReferenceWithSymbols(tmpxRefReferences,treeNode.AOTgetSource());//,[#SymbolClassSYMBOL]);
        #
        #    tmpxRefReferences.clear();
        #    select tmpxRefReferences
        #        where tmpxRefReferences.Column   == selStartCol
        #        &&  tmpxRefReferences.line       == selStartLine;
        #
        #    switch (tmpxRefReferences.Kind)
        #    {
        #        case xRefKind::Table:
        #            treeNodeNew = TreeNode::findNode(#TablesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name) );
        #            if (! treeNodeNew)
        #            {
        #                treeNodeNew = TreeNode::findNode(#ViewsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name) );
        #            }
        #            break;
        #        case xRefKind::TableField:
        #            df = new DictField(tmpxRefReferences.parentId,  fieldname2id(tmpxRefReferences.parentId, tmpxRefReferences.name));
        #            if (df.baseType() == Types::Enum)
        #            {
        #                treeNodeNew = TreeNode::findNode(#BaseEnumsPath + #AOTDelimiter + enumid2name(df.enumId()));
        #            }
        #            else
        #            {
        #                treeNodeNew = TreeNode::findNode(#ExtendedDataTypesPath + #AOTDelimiter + extendedTypeId2name(df.typeId()) );
        #            }
        #            break;
        #        case xRefKind::Class:
        #            treeNodeNew = TreeNode::findNode(#ClassesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Enum:
        #            treeNodeNew = TreeNode::findNode(#BaseEnumsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::ExtendedType:
        #            treeNodeNew = TreeNode::findNode(#ExtendedDataTypesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Form:
        #            treeNodeNew = TreeNode::findNode(#FormsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Report:
        #            treeNodeNew = TreeNode::findNode(#ReportsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Map:
        #            treeNodeNew = TreeNode::findNode(#TableMapsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #
        #    }
        #    if (treeNodeNew)
        #    {
        #        treeNodeNew.AOTnewWindow();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class EditorScripts
        #{
        #    int     sdsindentLevel;//trud
        #    Source  sdssource;
        #}
      ENDSOURCE
      SOURCE #comments_Addtrud
        #void comments_Addtrud(Editor _e)
        #{
        #    int         startLine = _e.selectionStartLine();
        #    int         endLine   = _e.selectionEndLine();
        #    str         spaces;
        #
        #    str         modifCode;
        #    int         pos, curPos;
        #
        #    container   c;
        #
        #    str  projId, projDescription, projName;
        #
        #
        #    void insertLine(int _line, str _mess)
        #
        #    {
        #        _e.gotoLine(_line);
        #        _e.gotoCol(1);
        #        _e.insertLines('\r\n');
        #        _e.gotoLine(_line);
        #        _e.gotoCol(1);
        #        _e.insertLines(_mess);
        #
        #    }
        #    ;
        #
        #    //info("ok");
        #
        #    c = DEVCommentsTool::getCurrent();
        #
        #    projId             = conpeek(c, 1);
        #    projDescription    = conpeek(c, 2);
        #    projName           = conpeek(c, 3);
        #
        #    modifCode = strFmt('%1, %2',  projId, projDescription);
        #
        #
        #    modifCode = '//' + (modifCode ? (modifCode + ', ') : '') +
        #            //curuserid()
        #            'dtrunin'
        #            + ', ' + date2str(today(), 123, 2, 2, 2, 2, 4, DateFlags::FormatAll);
        #
        #    if (_e.markMode() == MarkMode::NoMark ||
        #      (_e.selectionEndCol() == _e.selectionStartCol() &&
        #       _e.selectionEndLine() == _e.selectionStartLine() &&
        #       _e.selectionEndCol() != 1  ))
        #    {
        #        startLine = _e.currentLineNo() + 1;
        #        endLine   = startLine;
        #
        #        _e.unmark();
        #        curPos = _e.columnNo();
        #        _e.insertString( (pos ? '' : '') + modifCode);
        #        _e.gotoCol( curPos + 1);
        #
        #
        #    }
        #    else
        #    {
        #        if (endLine > startLine && _e.selectionEndCol() == 1)
        #            endLine --;
        #        _e.unmark();
        #        _e.gotoLine(startLine);
        #        _e.gotoCol(1);
        #        spaces = strRep(' ', strLen(_e.currentLine()) - strLen(strLTrim(_e.currentLine())));
        #        insertLine(startLine, spaces + modifCode + ' -->');
        #        insertLine(endLine + 2, spaces + modifCode + ' <--');
        #        _e.gotoLine(startLine);
        #        _e.gotoCol(strlen(spaces) + 1);
        #    }
        #
        #    DEVCommentsTool::add2Project(_e.path(), projName);
        #
        #
        #}
        #
      ENDSOURCE
      SOURCE #comments_InsertBPDeviationTag
        #// Changed on 21 Apr 2010 at 10:37:52 by Rayso
        #public void comments_InsertBPDeviationTag(Editor _editor)
        #{
        #    ;
        #
        #    _editor.unmark();
        #    _editor.insertLines('//BP Deviation Documented');
        #}
      ENDSOURCE
      SOURCE #comments_OpenCommentSetup
        #void comments_OpenCommentSetup(Editor _e)
        #{
        #    ;
        #    DEVCommentsTool::openCommentSetup();
        #
        #
        #}
      ENDSOURCE
      SOURCE #comments_OpenCurProject
        #void comments_OpenCurProject(Editor _e)
        #{
        #    ;
        #    DEVCommentsTool::openCurProject();
        #
        #
        #}
      ENDSOURCE
      SOURCE #dev_simpleLineNoSemicolum
        #private void dev_simpleLineNoSemicolum(str _simpleStr)
        #{
        #    ;
        #    sdssource += strRep(' ',sdsindentLevel) + _simpleStr + '\n';
        #}
      ENDSOURCE
      SOURCE #documentation_HeaderTemplate
        #//AOSRunmode::Client
        #public void documentation_HeaderTemplate(Editor _editor)
        #{
        #    #TokenTypes
        #    #AOT
        #    #SysBPCheck
        #    #SysCompilerOutput
        #
        #    #define.startLine(2)
        #    #define.startColumn(5)
        #    #define.maxDialogString(800)
        #
        #    str source;
        #    str text;
        #    MemberFunction memberFunction = TreeNode::findNode(_editor.path());
        #    TreeNode parent = TreeNode::findNode(SysTreeNode::pathParent(_editor.path()));
        #    SysDictMethod sysDictMethod;
        #    int i;
        #    int symbol;
        #    SysScannerClass scanner;
        #    TreeNode exceptionNode;
        #    TreeNode exceptionValueNode;
        #    xRefTmpReferences tmpxRefReferences;       // the source, as the xRef sees it
        #    DictClass dictClass;
        #    ListEnumerator listEnum;
        #    str existingDoc;
        #
        #str formatXML(XML _xml)
        #{
        #    _xml = strReplace(_xml, '>', '>\n');
        #    _xml = strReplace(_xml, '<', '\n<');
        #
        #    _xml = strReplace(_xml, '\n<c>\n', '<c>');
        #    _xml = strReplace(_xml, '\n</c>\n', '</c>');
        #    _xml = strReplace(_xml, '\n\n', '\n');
        #
        #    return '\n'+_xml+'\n';
        #}
        #
        #    if (parent)
        #    {
        #        // Save to get latest source.
        #        parent.AOTsave();
        #
        #        source = memberFunction.AOTgetSource();
        #
        #        if (!strLen(source))
        #            return;
        #
        #        // Mark the memberfunction as dirty
        #        memberFunction.AOTsetSource(source);
        #    }
        #
        #    sysDictMethod = SysDictMethod::newMemberFunction(memberFunction);
        #
        #    if (sysDictMethod.compiledOk())
        #    {
        #        if (sysDictMethod.xmlDocumentationCanBeAutomated())
        #        {
        #            //
        #            // Truncate to max length
        #            //
        #            existingDoc = formatXml(sysDictMethod.xmlDocumentationAutomated());
        #            if (strLen(existingDoc) > #maxDialogString)
        #            {
        #                existingDoc = subStr(existingDoc, 1, #maxDialogString)+'\n...\n';
        #            }
        #
        #            if (Box::yesNo(strFmt("@SYS107202", existingDoc+'\n')+"@SYS107204", DialogButton::No, "@SYS107109") == DialogButton::No)
        #            {
        #                return;
        #            }
        #        }
        #        existingDoc = sysDictMethod.xmlDocumentationInherited();
        #
        #        if (existingDoc &&
        #            Box::yesNo(strFmt("@SYS327437", '\n'+existingDoc+'\n')+"@SYS107204", DialogButton::No, "@SYS107109") == DialogButton::No)
        #        {
        #            return;
        #        }
        #
        #        scanner = new SysScannerClass(memberFunction);
        #        appl.updatexRefSet(true);
        #        memberFunction.aoTmakeXref(1);
        #        tmpxRefReferences = xRefCreate::makeTmp(appl.lastxRef(), memberFunction.treeNodePath());
        #        appl.updatexRefSet(false);
        #
        #        //
        #        // Insert summary
        #        //
        #        text = '/// <summary>\n/// \n/// </summary>\n';
        #
        #        //
        #        // Insert parameters
        #        //
        #        for (i=1; i<=sysDictMethod.parameterCnt(); i++)
        #        {
        #            if (!sysDictMethod.parameterName(i))
        #            {
        #                // BP Deviation documented
        #                throw error("@SYS107108", '', SysInfoAction_Formrun::newFormnameControlnameDesc(formStr(SysUserSetup), identifierStr(DebuggerPopupCombo), "@SYS321"));
        #            }
        #            text += strFmt('/// <param name="%1">\n/// \n/// </param>\n', sysDictMethod.parameterName(i));
        #        }
        #
        #        //
        #        // Insert returns
        #        //
        #        if (sysDictMethod.returnType() != Types::void &&
        #            sysDictMethod.name() != #MethodNameClassDeclaration)
        #        {
        #            text += '/// <returns>\n/// \n/// </returns>\n';
        #        }
        #
        #        //
        #        // Insert remarks
        #        //
        #        text += '/// <remarks>\n/// \n/// </remarks>\n';
        #
        #        //
        #        // Insert exceptions
        #        //
        #        if (scanner.symbolExists(#Throw_sym))
        #        {
        #            exceptionNode  = TreeNode::findNode(#SystemEnumsPath+'\\'+enumStr(Exception));
        #            scanner.firstSymbol();
        #            symbol = scanner.nextSymbol();
        #            while (symbol)
        #            {
        #                while (symbol && symbol != #Throw_sym)
        #                {
        #                    symbol = scanner.nextSymbol();
        #                }
        #                if (symbol)
        #                {
        #                    symbol = scanner.nextSymbol();
        #                    if (scanner.string() == enumStr(Exception))
        #                    {
        #                        scanner.nextSymbol();
        #                        scanner.nextSymbol();
        #                    }
        #                    //
        #                    // Get right casing
        #                    //
        #                    exceptionValueNode = exceptionNode.AOTfindChild(scanner.string());
        #                    if (exceptionValueNode)
        #                    {
        #                        text += strFmt('/// <exception cref="Exception::%1">\n/// \n/// </exception>\n', exceptionValueNode.treeNodeName());
        #                    }
        #                }
        #            }
        #        }
        #
        #        //
        #        // Insert permission
        #        //
        #        dictClass = new DictClass(classNum(CodeAccessPermission));
        #        listEnum = dictClass.extendedBy().getEnumerator();
        #        while (listEnum.moveNext())
        #        {
        #            while select tmpxRefReferences
        #                where tmpxRefReferences.ParentId == listEnum.current()
        #                  && tmpxRefReferences.Name == methodStr(CodeAccessPermission, demand)
        #                  && tmpxRefReferences.Kind == xRefKind::ClassInstanceMethod
        #            {
        #                text += strFmt('/// <permission cref="%1">\n/// \n/// </permission>\n', classId2Name(listEnum.current()));
        #
        #                //
        #                // Only add each permission class once
        #                //
        #                break;
        #            }
        #        }
        #
        #        _editor.unmark();
        #        _editor.gotoLine(1);
        #        _editor.gotoCol(1);
        #        _editor.insertLines(text);
        #        _editor.gotoLine(#startLine);
        #        _editor.gotoCol(#startColumn);
        #    }
        #    else
        #    {
        #        throw error(strFmt("@SYS97041", 1, memberFunction.treeNodePath()));
        #    }
        #}
      ENDSOURCE
      SOURCE #getApplicableScripts
        #//
        #// System entry point
        #//
        #public container getApplicableScripts(Editor _editor)
        #{
        #    TreeNode aotNode = EditorScripts::getApplObjectNode(_editor);
        #    DictClass dictClass = new DictClass(classNum(EditorScripts));
        #    DictMethod dictMethod;
        #    int i;
        #    container scripts;
        #
        #    //
        #    // Insert menu items
        #    //
        #    for (i = 1; i <= dictClass.objectMethodCnt(); i++)
        #    {
        #        dictMethod = dictClass.objectMethodObject(i);
        #        if (this.isApplicableMethod(dictMethod, aotNode))
        #        {
        #            scripts += dictMethod.name();
        #        }
        #    }
        #
        #    return scripts;
        #}
      ENDSOURCE
      SOURCE #isApplicableMethod
        #//
        #// Use this method to control what scripts are shown on the scripts popup menu in the editor
        #//
        #protected boolean isApplicableMethod(DictMethod _dictMethod, TreeNode _aotNode)
        #{
        #    #TreenodeSysNodeType
        #    //
        #    // Only one parameter of type Editor
        #    // Must be public
        #    // Must return void
        #    //
        #    if (_dictMethod.parameterCnt() != 1 ||
        #        _dictMethod.parameterType(1) != Types::Class ||
        #        _dictMethod.parameterId(1) != classNum(Editor) ||
        #        _dictMethod.accessSpecifier() != AccessSpecifier::public ||
        #        _dictMethod.returnType() != Types::void)
        #    {
        #        return false;
        #    }
        #
        #    switch (_dictMethod.name())
        #    {
        #        //
        #        // Editor scripts that does not apply to Macros
        #        //
        #        case methodStr(EditorScripts, template_database_whileSelect):
        #        case methodStr(EditorScripts, template_flow_do):
        #        case methodStr(EditorScripts, template_flow_if):
        #        case methodStr(EditorScripts, template_flow_ifElse):
        #        case methodStr(EditorScripts, template_flow_else):
        #        case methodStr(EditorScripts, template_flow_switch):
        #        case methodStr(EditorScripts, template_flow_try):
        #        case methodStr(EditorScripts, template_flow_for):
        #        case methodStr(EditorScripts, template_flow_while):
        #            if (_aotNode &&
        #                _aotNode.treeNodeType().id() != #NT_MCRCODE)
        #            {
        #                return true;
        #            }
        #            return false;
        #
        #        //
        #        // Editor scripts that does not apply to Macros and Jobs
        #        //
        #        case methodStr(EditorScripts, template_method_construct):
        #        case methodStr(EditorScripts, template_method_edit):
        #        case methodStr(EditorScripts, template_method_editWithClass):
        #        case methodStr(EditorScripts, template_method_main):
        #        case methodStr(EditorScripts, template_method_parm):
        #        case methodStr(EditorScripts, documentation_HeaderTemplate):
        #            if (_aotNode &&
        #                _aotNode.treeNodeType().id() != #NT_MCRCODE &&
        #                _aotNode.treeNodeType().id() != #NT_XALCODE)
        #            {
        #                return true;
        #            }
        #            return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #last_classHeader
        #void last_classHeader(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.classHeader();
        #    ;
        #    editor.insertLines(template);
        #}
      ENDSOURCE
      SOURCE #last_comment
        #void last_comment(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.comment();
        #    ;
        #    editor.insertLines(template);
        #}
      ENDSOURCE
      SOURCE #last_functionHeader
        #void last_functionHeader(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.functionHeader();
        #    ;
        #    editor.insertLines(template);
        #}
        #
      ENDSOURCE
      SOURCE #sendTo_file
        #public void sendTo_file(Editor  e)
        #{
        #    Filename filename;
        #    TextIo io;
        #    int i = strFind(e.path(), '\\', strLen(e.path()), -strLen(e.path()));
        #    str defaultName = subStr(e.path(), i+1, strLen(e.path()));
        #    ;
        #    filename = WinAPI::getSaveFileName(0, ['Text','*.txt'], '', "@SYS56237", 'txt', defaultName );
        #    if (filename)
        #    {
        #        // BP deviation documented
        #        io = new TextIo(filename, 'W', 65001); // Write the file in UTF8
        #        io.write(EditorScripts::getSelectedText(e));
        #    }
        #}
      ENDSOURCE
      SOURCE #sendTo_mailRecipient
        #public void sendTo_mailRecipient(Editor e)
        #{
        #    SysINetMail mail = new SysINetMail();
        #    mail.sendMail('',e.path(),EditorScripts::getSelectedText(e),true);
        #}
      ENDSOURCE
      SOURCE #tableBrowser
        #void tableBrowser(Editor _e)
        #{
        #    str                 fieldName;
        #    ;
        #
        #    fieldName = substr(_e.currentLine(), _e.selectionStartCol(), _e.selectionEndCol() - _e.selectionStartCol());
        #
        #    new SysTableBrowser().run(tablename2id(fieldName));
        #}
      ENDSOURCE
      SOURCE #template_database_whileSelect
        #public void template_database_whileSelect(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.whileSelect());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+15);
        #
        #}
      ENDSOURCE
      SOURCE #template_flow_do
        #public void template_flow_do(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.doWhile());
        #
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_else
        #public void template_flow_else(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #    Source template = xppSource.elseBlock();
        #
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+3);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_for
        #public void template_flow_for(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.for());
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+6);
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_if
        #public void template_flow_if(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #    Source template = xppSource.if();
        #
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_ifElse
        #public void template_flow_ifElse(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.ifElse());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_switch
        #public void template_flow_switch(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.switch());
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+9);
        #
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_try
        #public void template_flow_try(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.tryCatch());
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_while
        #public void template_flow_while(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.while());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+8);
        #}
        #
      ENDSOURCE
      SOURCE #template_method_construct
        #public void template_method_construct(Editor editor)
        #{
        #    xppSource       xppSource         = new xppSource();
        #    Dialog          dialog;
        #    DialogField     dlgClassTypeName;
        #    Source          template;
        #    str             path = editor.path();
        #    TreeNode        treeNode = path ? TreeNode::findNode(path) : null;
        #    ClassName       className;
        #    #TreeNodeSysNodeType
        #
        #    if (treeNode)
        #    {
        #        treeNode = treeNode.AOTparent();
        #        if (treeNode && treeNode.treeNodeType().id() == #NT_CLASS)
        #        {
        #            className = treeNode.treeNodeName();
        #        }
        #    }
        #
        #    if (!className)
        #    {
        #        dialog = new Dialog("@SYS73363");
        #        dlgClassTypeName = dialog.addField(extendedTypeStr(ClassName));
        #        if (!dialog.run())
        #        {
        #            return;
        #        }
        #        className = dlgClassTypeName.value();
        #    }
        #
        #    if (className)
        #    {
        #        template = xppSource.constructMethod(className);
        #
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_edit
        #public void template_method_edit(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource();
        #    Dialog          dialog          = new Dialog("@SYS69534");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(ExtendedDataTypeName));
        #    DialogField     dlgTablename    = dialog.addField(extendedTypeStr(TableName));
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(SysElementName),"@SYS62312","@SYS62313");
        #    Source          template;
        #;
        #    if (dialog.run())
        #    {
        #        template = xppSource.editMethod(dlgExtTypeName.value(),dlgTablename.value(),dlgName.value());
        #
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_editWithClass
        #public void template_method_editWithClass(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource(4);
        #    Dialog          dialog          = new Dialog("@SYS63066");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(ExtendedDataTypeName));
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(SysElementName),"@SYS62312","@SYS63067");
        #    DialogField     dlgClassname    = dialog.addField(extendedTypeStr(ClassName),"@SYS24724","@SYS63068");
        #    DialogField     dlgMethod       = dialog.addField(extendedTypeStr(SysElementName),"@SYS26958","@SYS63070");
        #    Source          template;
        #;
        #    if (dialog.run())
        #    {
        #        template = xppSource.editMethodWithClass(dlgExtTypeName.value(),dlgName.value(),dlgClassname.value(),dlgMethod.value());
        #
        #        editor.insertLines(template);
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #template_method_exists
        ##DictField
        #void template_method_exists(Editor _e)
        #{
        #    DictTable dt;
        #    DictIndex di;
        #    DictField df;
        #    Dialog dialog;
        #    DialogField dialogField;
        #
        #    int i;
        #    int longestTypeLength;
        #    int longestNameLength;
        #    FieldId fieldId;
        #    str mandatoryFields;
        #
        #    str methodText;
        #    str indent;
        #    //TextBuffer tb;
        #    str             path = _e.path();
        #    TreeNode        treeNode = path ? TreeNode::findNode(path) : null;
        #
        #    str strTypeOf(DictField _df, int _padTo = 0)
        #    {
        #        str res;
        #        if(df.typeId())
        #            res = new DictType(df.typeId()).name();
        #        else if(df.enumId())
        #            res = new DictEnum(df.enumId()).name();
        #        else
        #            res = '?UNKNOWN?';
        #        if(_padTo)
        #        {
        #            res += strrep(' ', _padTo - strlen(res));
        #        }
        #        return res;
        #    }
        #
        #    str prettyName(str _name)
        #    {
        #        return strlwr(substr(_name,1,1)) + substr(_name, 2, strlen(_name)-1);
        #    }
        #    ;
        #    dialog = new Dialog();
        #    dialog.caption('Table name');
        #    dialogField = dialog.addField(extendedTypeStr(TableName));
        #    if (treeNode)
        #    {
        #        treeNode = treeNode.AOTparent();
        #        if(treeNode)
        #        {
        #            treeNode = treeNode.AOTparent();
        #        }
        #
        #        dialogField.value(treeNode.treeNodeName());
        #    }
        #
        #    if(! dialog.run())
        #    {
        #        return;
        #    }
        #
        #    dt = new DictTable(tablename2id(dialogField.value()));
        #    if(!dt)
        #        throw error('Table name is incorrect');
        #
        #    di = new DictIndex(dt.id(), dt.primaryIndex());
        #
        #    dialog = new Dialog();
        #    dialog.caption('Index name');
        #    dialogField = dialog.addFieldValue(extendedTypeStr(IndexName), di ?  di.name() : '');
        #    if(! dialog.run())
        #    {
        #        return;
        #    }
        #
        #    di = new DictIndex(dt.id() , dt.indexName2Id(dialogField.value()));
        #    if(! di)
        #        throw error('Incorrect index');
        #
        #    methodText = strfmt('public static boolean exist(',  dt.name());
        #    indent     = strrep(' ', strlen(methodText));
        #
        #
        #    // find longest type name
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        df = new DictField(dt.id(), di.field(i));
        #        longestTypeLength = max(longestTypeLength, strlen(strTypeOf(df)));
        #        longestNameLength = max(longestNameLength, strlen(df.name()));
        #    }
        #
        #
        #    // build args and mandatory fields list
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        fieldId = di.field(i);
        #        df = new DictField(dt.id(), fieldId);
        #        if(df.flags() & #DBF_MANDATORY == #DBF_MANDATORY
        #         || di.name() == 'RecId')
        #        {
        #            if(mandatoryFields)
        #            {
        #                mandatoryFields += ' && ';
        #            }
        #            mandatoryFields += '_' + prettyName(df.name());
        #        }
        #
        #        if(i != 1)
        #        {
        #            methodText += strfmt(',\n%1', indent);
        #        }
        #
        #        methodText += strfmt('%1 _%2', strTypeOf(df, longestTypeLength), prettyName(df.name()));
        #    }
        #
        #    //build method header
        #    methodText += strfmt(')\n{\n', indent, strrep(' ', 1+longestTypeLength - strlen('boolean')));
        #    indent = '    ';
        #    methodText += indent + 'return';
        #
        #    //check for mandatory fields
        #    if(mandatoryFields)
        #    {
        #        methodText += ' ' + mandatoryFields + '\n    '+indent+'&& ';
        #        indent += '        ';
        #    }
        #
        #    //build select query
        #    methodText += '(select firstonly RecId from ' + dt.name() + '\n';
        #    methodText += indent + '    where ';
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        df = new DictField(dt.id(), di.field(i));
        #        if(i != 1)
        #        {
        #            methodText += '\n' + indent + '       && ';
        #        }
        #        methodText += dt.name() + '.' + df.name() + strrep(' ', longestNameLength - strlen(df.name())) + ' == _' + prettyName(df.name());
        #    }
        #    methodText += ').RecId != 0;\n';
        #
        #    methodText += '}';
        #    _e.insertLines(methodText);
        #
        #}
      ENDSOURCE
      SOURCE #template_method_find
        ##DictField
        #void template_method_find(Editor _e)
        #{
        #    DictTable       dt;
        #    DictIndex       di;
        #    DictField       df;
        #    Dialog          dialog;
        #    DialogField     dialogField;
        #
        #    int             i;
        #    int             longestTypeLength = strlen('boolean'); //for forupdate
        #    int             longestNameLength;
        #    FieldId         fieldId;
        #    str             mandatoryFields;
        #
        #    str             methodText;
        #    str             indent;
        #    str             varName;
        #    //TextBuffer      tb;
        #    str             path = _e.path();
        #    TreeNode        treeNode = path ? TreeNode::findNode(path) : null;
        #
        #    str strTypeOf(DictField _df, int _padTo = 0)
        #    {
        #        str res;
        #        if(df.typeId())
        #            res = new DictType(df.typeId()).name();
        #        else if(df.enumId())
        #            res = new DictEnum(df.enumId()).name();
        #        else
        #            res = '?UNKNOWN?';
        #        if(_padTo)
        #        {
        #            res += strrep(' ', _padTo - strlen(res));
        #        }
        #        return res;
        #    }
        #
        #    str prettyName(str _name)
        #    {
        #        return strlwr(substr(_name,1,1)) + substr(_name, 2, strlen(_name)-1);
        #    }
        #    ;
        #    dialog = new Dialog();
        #    dialog.caption('table name');
        #
        #    dialogField = dialog.addField(extendedTypeStr(TableName));
        #    if (treeNode)
        #    {
        #        treeNode = treeNode.AOTparent();
        #        if(treeNode)
        #        {
        #            treeNode = treeNode.AOTparent();
        #        }
        #
        #        dialogField.value(treeNode.treeNodeName());
        #    }
        #
        #    if(! dialog.run())
        #    {
        #        return;
        #    }
        #
        #    dt = new DictTable(tablename2id(dialogField.value()));
        #
        #    if(!dt)
        #        throw error('Table name is incorrect');
        #
        #    di = new DictIndex(dt.id(), dt.primaryIndex());
        #
        #    dialog = new Dialog();
        #    dialog.caption('Index name');
        #    dialogField = dialog.addFieldValue(extendedTypeStr(IndexName), di ?  di.name() : '');
        #    if(! dialog.run())
        #    {
        #        return;
        #    }
        #
        #    di = new DictIndex(dt.id() , dt.indexName2Id(dialogField.value()));
        #    if(! di)
        #        throw error('Incorrect index');
        #
        #    methodText = strfmt('public static %1 find(',  dt.name());
        #    indent     = strrep(' ', strlen(methodText));
        #    varName    = prettyName(dt.name());
        #
        #
        #    // find longest type name
        #    longestTypeLength = strlen('boolean');
        #    //longestNameLength = strlen('_forUpdate');
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        df = new DictField(dt.id(), di.field(i));
        #        longestTypeLength = max(longestTypeLength, strlen(strTypeOf(df)));
        #        longestNameLength = max(longestNameLength, strlen(df.name()));
        #    }
        #
        #
        #    // build args and mandatory fields list
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        fieldId = di.field(i);
        #        df = new DictField(dt.id(), fieldId);
        #        if(df.flags() & #DBF_MANDATORY == #DBF_MANDATORY
        #         || di.name() == 'RecId')
        #        {
        #            if(mandatoryFields)
        #            {
        #                mandatoryFields += ' && ';
        #            }
        #            mandatoryFields += '_' + prettyName(df.name());
        #        }
        #
        #        if(i != 1)
        #        {
        #            methodText += strfmt(',\n%1', indent);
        #        }
        #
        #        methodText += strfmt('%1 _%2', strTypeOf(df, longestTypeLength), prettyName(df.name()));
        #    }
        #
        #    //build method header
        #    methodText += strfmt(',\n%1boolean%2_forUpdate = false)\n{\n', indent, strrep(' ', 1+longestTypeLength - strlen('boolean')));
        #    indent = '    ';
        #    methodText += indent + dt.name() + ' ' + varName + ';\n';
        #    methodText += indent + '\n';
        #
        #    //check for mandatory fields
        #    if(mandatoryFields)
        #    {
        #        methodText += indent + 'if (' + mandatoryFields + ')\n';
        #        methodText += indent + '{\n';
        #        indent += '    ';
        #    }
        #
        #    //selectForUpdate
        #    methodText += indent + varName+'.selectForUpdate(_forUpdate);\n\n';
        #
        #    //build select query
        #    methodText += indent + 'select firstonly ' + varname + '\n';
        #    methodText += indent + '    where ';
        #    for(i = 1; i <= di.numberOfFields(); ++i)
        #    {
        #        df = new DictField(dt.id(), di.field(i));
        #        if(i != 1)
        #        {
        #            methodText += '\n' + indent + '       && ';
        #        }
        #        methodText += varName + '.' + df.name() + strrep(' ', longestNameLength - strlen(df.name())) + ' == _' + prettyName(df.name());
        #    }
        #    methodText += ';\n';
        #
        #    //footer
        #    if(mandatoryFields)
        #    {
        #        indent = substr(indent, 1, strlen(indent) - 4);
        #        methodText += indent + '}\n';
        #    }
        #    methodText += '\n';
        #    methodText += indent + 'return '+varName+';\n';
        #
        #    methodText += '}';
        #    _e.insertLines(methodText);
        #}
      ENDSOURCE
      SOURCE #template_method_findRecId
        #public void template_method_findRecId(Editor _e)
        #{
        #
        #    Source      templateSource;
        #    DEVCommentsTool  commentsTool = new DEVCommentsTool();
        #    ;
        #    templateSource = commentsTool.getFindRecIdSource(_e.path());
        #
        #    _e.insertLines(templateSource);
        #
        #    //DEVCommentsTool::add2Project(_e.path(), projName, false);
        #}
      ENDSOURCE
      SOURCE #template_method_main
        #public void template_method_main(Editor editor)
        #{
        #    xppSource       xppSource = new xppSource(editor.columnNo());
        #    Source          template;
        #    int             currentLine = editor.currentLineNo();
        #    int             currentCol = editor.columnNo();
        #
        #    template = xppSource.mainMethod();
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
      ENDSOURCE
      SOURCE #template_method_parm
        #public void template_method_parm(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource();
        #    Dialog          dialog          = new Dialog("@SYS62311");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(SysXppType),'','',false /* ignoreEDTConstraints */);
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(NotesLine),"@SYS62312","@SYS62313");
        #    Source          template;
        #
        #    extendedDataTypeName    typeName;
        #    SysElementName          name;
        #    container               con;
        #
        #    if (dialog.run())
        #    {
        #        if (dlgExtTypeName.value())
        #        {
        #            template = xppSource.parmMethod(dlgExtTypeName.value(),dlgName.value());
        #        }
        #        else
        #        {
        #            con = str2con_RU(dlgName.value(), ' ', true);
        #            typeName = conPeek(con, 1);
        #            name = conPeek(con, 2);
        #            if (subStr(name, strLen(name), 1) == ';')
        #            {
        #                name = subStr(name, 1, strLen(name) - 1);
        #            }
        #
        #            template = xppSource.parmMethod(typeName, name);
        #        }
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_test
        #/// <summary>
        #/// Editor script for test methods
        #/// </summary>
        #/// <param name="editor">
        #/// The <c>Editor</c> class to insert the test method to.
        #/// </param>
        #public void template_method_test(Editor editor)
        #{
        #    xppSource       xppSource = new xppSource();
        #    Source          template;
        #
        #    template = @'[SysTestCheckInTestAttribute]
        #public void test()
        #{
        #    // Arrange
        #
        #    // Act
        #
        #    // Assert
        #
        #}';
        #    editor.insertLines(template);
        #
        #    editor.gotoLine(2);
        #    editor.gotoCol(17);
        #}
        #
      ENDSOURCE
      SOURCE #template_processDS
        #void template_processDS(Editor editor)
        #{
        #    Dialog          dialog          = new Dialog('Process DS');
        #    DialogField     dlgDSName       = dialog.addField(extendedtypestr(SysElementName), 'DS Name');
        #    DialogField     dlgVarName      = dialog.addField(extendedtypestr(SysElementName), "@SYS11906");
        #
        #    Source dev_processDS(str _dsName, str _varName)
        #    {
        #
        #        ;
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('for(%1 = %2.getFirst(true) ? %2.getFirst(true) : %2.cursor();', _varName, _dsName));
        #        this.dev_simpleLineNoSemicolum(strFmt('    %1.RecId;', _varName));
        #        this.dev_simpleLineNoSemicolum(strFmt('    %1 = %2.getNext())', _varName, _dsName));
        #        this.dev_simpleLineNoSemicolum('{');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum('}');
        #
        #        return sdssource;
        #
        #    }
        #;
        #    sdssource = '';
        #    sdsindentLevel = editor.columnNo() ;
        #    if (dialog.run())
        #    {
        #        editor.gotoCol(1);
        #        editor.insertLines(dev_processDS(dlgDSName.value(),dlgVarName.value()));
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #template_SelectForUpdate
        #void template_SelectForUpdate(Editor editor)
        #{
        #    Dialog          dialog          = new Dialog('select for update');
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedtypestr(TableName));
        #    DialogField     dlgName         = dialog.addField(extendedtypestr(SysElementName),"@SYS62312","@SYS62313");
        #
        #    Source dev_selectForUpdate(str _typeName, str _varName)
        #    {
        #
        #        ;
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('%1   %2', _typeName, _varName));
        #
        #        this.dev_simpleLineNoSemicolum(';');
        #
        #        this.dev_simpleLineNoSemicolum('ttsbegin;');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('while select forupdate %1', _varName));
        #
        #        this.dev_simpleLineNoSemicolum('{');
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('    %1.update();', _varName));
        #        this.dev_simpleLineNoSemicolum('}');
        #
        #        this.dev_simpleLineNoSemicolum('ttscommit;');
        #
        #        return sdssource;
        #    }
        #
        #    ;
        #    sdssource = '';
        #    sdsindentLevel = editor.columnNo() ;
        #
        #    if (dialog.run())
        #    {
        #        editor.gotoCol(1);
        #        editor.insertLines(dev_selectForUpdate(dlgExtTypeName.value(),dlgName.value()));
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #template_SelectQuery
        #void template_SelectQuery(Editor editor)
        #{
        #    Dialog          dialog          = new Dialog('select query');
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedtypestr(TableName));
        #    DialogField     dlgName         = dialog.addField(extendedtypestr(SysElementName),"@SYS62312","@SYS62313");
        #
        #    Source dev_selectQuery(str _typeName, str _varName)
        #    {
        #
        #        ;
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('Query                query = new Query();'));
        #        this.dev_simpleLineNoSemicolum(strFmt('QueryBuildDataSource qBDS;'));
        #        this.dev_simpleLineNoSemicolum(strFmt('QueryRun             queryRun;'));
        #        this.dev_simpleLineNoSemicolum(strFmt('%1%3 %2;', _typeName, _varName, strrep(' ', strlen('QueryBuildDataSource') - strlen(_typeName))));
        #
        #        this.dev_simpleLineNoSemicolum(';');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('qBDS     = query.addDataSource(tablenum(%1));', _typeName));
        #        this.dev_simpleLineNoSemicolum(strFmt('queryRun = new QueryRun(query);'));
        #
        #        this.dev_simpleLineNoSemicolum('');
        #        this.dev_simpleLineNoSemicolum('while (queryRun.next())');
        #        this.dev_simpleLineNoSemicolum('{');
        #
        #        this.dev_simpleLineNoSemicolum(strFmt('    %1 = queryRun.get(tablenum(%2));', _varName, _typeName));
        #        this.dev_simpleLineNoSemicolum('}');
        #
        #        return sdssource;
        #    }
        #
        #    ;
        #    sdssource = '';
        #    sdsindentLevel = editor.columnNo() ;
        #    if (dialog.run())
        #    {
        #        editor.gotoCol(1);
        #        editor.insertLines(dev_selectQuery(dlgExtTypeName.value(),dlgName.value()));
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #template_switch
        #void template_switch(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #
        #    Dialog          dialog              = new Dialog('Switch');
        #    DialogField     dlgEnumName         = dialog.addField(extendedtypestr(SysElementName), 'Enum Name');
        #    DialogField     dlgEnumVarName      = dialog.addField(extendedtypestr(SysElementName), 'Enum variable');
        #
        #Source switchS(Source _condition = '',
        #              identifierName _enumName = '') //TRUD
        #{
        #    DictEnum    dictEnum;
        #    int         i;
        #    ;
        #    //indentLevel = 1;
        #
        #    this.dev_simpleLineNoSemicolum(strFmt('switch (%1)',_condition));
        #
        #    this.dev_simpleLineNoSemicolum('{');
        #    sdsindentLevel += 4;
        #
        #    if (_enumName)
        #    {
        #        dictEnum = new DictEnum(enumName2Id(_enumName));
        #        for (i = 0; i < dictEnum.values(); i++)
        #        {
        #            this.dev_simpleLineNoSemicolum(strFmt('case %1::%2:', _enumName, dictEnum.index2Symbol(i)));
        #
        #            this.dev_simpleLineNoSemicolum('');
        #
        #            this.dev_simpleLineNoSemicolum('    break;');
        #
        #        }
        #
        #    }
        #    else
        #    {
        #        this.dev_simpleLineNoSemicolum('case :');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum('    break;');
        #
        #        this.dev_simpleLineNoSemicolum('case :');
        #
        #        this.dev_simpleLineNoSemicolum('');
        #
        #        this.dev_simpleLineNoSemicolum('    break;');
        #    }
        #
        #    this.dev_simpleLineNoSemicolum('default :');
        #
        #    this.dev_simpleLineNoSemicolum('    throw error(Error::wrongUseOfFunction(funcName()));');
        #    sdsindentLevel -= 4;
        #    this.dev_simpleLineNoSemicolum('}');
        #
        #
        #    return sdssource;
        #}
        #
        #    ;
        #    sdssource = '';
        #    sdsindentLevel = editor.columnNo() ;
        #
        #    if (dialog.run())
        #    {
        #        editor.gotoCol(1);
        #        editor.insertLines(switchs(dlgEnumVarName.value(), dlgEnumName.value()));
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #template_throw
        #void template_throw(Editor e)
        #{
        #    e.insertString('throw error(strFmt(""));');
        #}
      ENDSOURCE
      SOURCE #transformSelection
        #private void transformSelection(Editor _editor, IdentifierName _transformation)
        #{
        #    str line;
        #    int i;
        #    int startLine = _editor.selectionStartLine();
        #    int endLine   = _editor.selectionEndLine();
        #    int startCol  = _editor.selectionStartCol(); //points at the first selected char
        #    int endCol    = _editor.selectionEndCol()-1; //points at the last selected char
        #    MarkMode markMode = _editor.markMode();
        #    #define.maxLineLength(300)
        #
        #str transform(str data)
        #{
        #    switch (_transformation)
        #    {
        #        case identifierStr('strlwr'):
        #            return strLwr(data);
        #
        #        case identifierStr('strupr'):
        #            return strUpr(data);
        #    }
        #    return data;
        #}
        #
        #void transformLine(int lineNo, int start, int end)
        #{
        #    _editor.gotoCol(0);
        #    _editor.gotoLine(lineNo);
        #    line = _editor.currentLine();
        #    line = subStr(line, 1, start-1) +
        #           transform(subStr(line, start, end-start+1)) +
        #           subStr(line, end+1, #maxLineLength);
        #
        #    _editor.deleteLines(1);
        #    _editor.insertLines(line+'\n');
        #    return;
        #}
        #;
        #    _editor.unmark();
        #
        #    switch (markMode)
        #    {
        #        case MarkMode::LineMark:
        #            _editor.gotoCol(1);
        #            for (i=startLine; i<=endLine; i++)
        #            {
        #                transformLine(i, 1, #maxLineLength);
        #            }
        #            break;
        #
        #        case MarkMode::ColMark:
        #            for (i=startLine; i<=endLine; i++)
        #            {
        #                transformLine(i, startCol, endCol);
        #            }
        #            break;
        #
        #        case MarkMode::AreaMark:
        #            if (startLine == endLine)
        #            {
        #                transformLine(startLine, startCol, endCol);
        #            }
        #            else
        #            {
        #                //convert first line
        #                transformLine(startLine, startCol, #maxLineLength);
        #
        #                //convert full lines
        #                for (i=startLine+1; i<endLine; i++)
        #                {
        #                    transformLine(i, 1, #maxLineLength);
        #                }
        #
        #                //convert last line
        #                transformLine(endLine, 1, endCol);
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #getApplObjectNode
        #protected static TreeNode getApplObjectNode(Editor _editor)
        #{
        #    TreeNode aotNode = TreeNode::findNode(_editor.path());
        #    return SysTreeNode::getRootElement(aotNode);
        #}
      ENDSOURCE
      SOURCE #getSelectedText
        #public static str getSelectedText(Editor e)
        #{
        #    int i;
        #    str text;
        #    str line;
        #    int startLine = e.selectionStartLine()+1;
        #    int endLine   = e.selectionEndLine()+1;
        #    int startCol  = e.selectionStartCol();
        #    int endCol    = e.selectionEndCol();
        #
        #    if (startLine == endLine && startCol == endCol)
        #    {
        #        e.firstLine();
        #        while (e.moreLines())
        #        {
        #            text += e.getLine()+'\r\n';
        #            e.nextLine();
        #        }
        #    }
        #    else
        #    {
        #        e.firstSelectedLine();
        #        for (i = startLine; i <= endLine; i++)
        #        {
        #            line = e.getLine();
        #            if (i == startLine && i == endLine)
        #            {
        #                line = subStr(line, startcol, endCol-startCol);
        #            }
        #            else
        #            if (i == endLine)
        #            {
        #                line = subStr(line, 1, endCol-1);
        #            }
        #            else
        #            if (i == startLine)
        #            {
        #                line = strRep(' ', startCol-1)+subStr(line, startCol, strLen(line));
        #            }
        #
        #            text += line + '\r\n';
        #            e.nextSelectedLine();
        #        }
        #    }
        #    return text;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: Info unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Info
    PROPERTIES
      Name                #Info
      Extends             #xInfo
      Origin              #{2D04F004-0000-1000-496E-666F00000000}
      LegacyId            #61444
    ENDPROPERTIES
    
    METHODS
      SOURCE #activate
        #void activate(FormRun   formRun)
        #{
        #    if (formRun.name() != formstr(DocuView) &&
        #        formRun.name() != formstr(sysFormSearch)                // SP4
        #       )
        #    {
        #        this.setLastActivatedForm(formRun);
        #    }
        #
        #    if (SysTaskRecorderEventManager::parmRecording())
        #    {
        #        SysTaskRecorderGlobal::setGlobalProperty(#globalPropWarnOnFormActivate,true);
        #    }
        #}
      ENDSOURCE
      SOURCE #add
        #Exception add(
        #    Exception _exception,
        #    str _txt,
        #    str _helpUrl = '',
        #    Object _sysInfoAction = null,
        #    boolean buildprefix = true)
        #{
        #    int numOfLines,i;
        #    int actionClassId;
        #    container packedAction;
        #    xSession session;
        #    ;
        #    if (_exception != Exception::Info) //trud
        #    {
        #        exceptionTextFallThrough();
        #    }
        #    switch (logLevel)
        #    {
        #        case SysInfologLevel::None:
        #            return _exception;
        #        case SysInfologLevel::Warning:
        #            if (_exception == Exception::Info)
        #                return _exception;
        #            break;
        #        case SysInfologLevel::Error:
        #            if (_exception == Exception::Info || _exception == Exception::Warning)
        #                return _exception;
        #    }
        #    if (infologLine() > errorsPerBatch)
        #    {
        #        i = infologLine();
        #        while (!numEqualPrefixes && numOfLines <= errorsPerBatch && SysInfologMessageStruct::comparePrefix(conpeek(conpeek(this.copy(i,i),2),2)))
        #        {
        #            i--;
        #            numOfLines++;
        #        }
        #        if (numEqualPrefixes)
        #        {
        #            i = infologLine();
        #            if (SysInfologMessageStruct::comparePrefix(conpeek(conpeek(this.copy(i,i),2),2)))
        #            {
        #                numEqualPrefixes++;
        #            }
        #            else
        #            {
        #                numEqualPrefixes = 0;
        #            }
        #        }
        #        else
        #        {
        #            numEqualPrefixes = numOfLines;
        #        }
        #
        #        if (numEqualPrefixes > errorsPerBatch &&
        #           (_exception == Exception::Info || _exception == Exception::Warning || _exception == Exception::Error))
        #        {
        #            return _exception;
        #        }
        #    }
        #
        #    try
        #    {
        #        if (!_sysInfoAction && !_helpUrl && isSystemAdministrator() && isConfigurationkeyEnabled(configurationkeynum(SysDevelopmentMorphX)) /*hasSecuritykeyAccess(securitykeynum(SysDevelopment), AccessType::View)*/)
        #        {
        #            session = new xSession();
        #            if(session.clientKind() == ClientType::Client)
        #            {
        #                _sysInfoAction = SysInfoAction_Editor::newStack();
        #            }
        #        }
        #    }
        #    catch
        #    {
        #        return super(_exception, (buildprefix?getprefix():'')+_txt);
        #    }
        #
        #    if (_sysInfoAction && !_sysInfoAction.enabled()) //test access rights
        #    {
        #        _sysInfoAction = null;
        #    }
        #
        #    if (_helpUrl || _sysInfoAction)
        #    {
        #        if (_sysInfoAction)
        #        {
        #            packedAction  = _sysInfoAction.pack();
        #            actionClassId = classidget(_sysInfoAction);
        #        }
        #        else
        #        {
        #            packedAction  = connull();
        #            actionClassId = 0;
        #        }
        #
        #        this.addSysInfoAction(_helpUrl, actionClassId, packedAction);
        #    }
        #
        #    return super(_exception, (buildprefix?getprefix():'')+_txt);
        #}
      ENDSOURCE
      SOURCE #addSysInfoAction
        #void addSysInfoAction(
        #    str _helpUrl,
        #    int actionClassId,
        #    container action)
        #{
        #    tmpInfoTable.HelpUrl       = _helpUrl;
        #    tmpInfoTable.Action        = action;
        #    tmpInfoTable.ActionClassId = actionClassId;
        #
        #    tmpInfoTable.insert();
        #    tmpActionId[ infologLine() +1] = tmpInfoTable.RecId;
        #}
      ENDSOURCE
      SOURCE #addTimeOut
        #int addTimeOut(Object object, str methodName, int time, boolean idle = true)
        #{
        #    int hdl;
        #    Struct      valueStruct = new Struct('object caller;str method');
        #    ObjectIdent ident       = new ObjectIdent(object);
        #
        #    if (!setTimeOutMap)
        #        setTimeOutMap       = new Map(Types::Integer, Types::Class);
        #
        #    valueStruct.value('caller', ident);
        #    valueStruct.value('method', methodName);
        #
        #    hdl = this.setTimeOut(identifierstr(callTimeOut), time, idle);
        #    setTimeOutMap.insert(hdl, valueStruct);
        #    return hdl;
        #}
      ENDSOURCE
      SOURCE #autologOff
        #void autologOff()
        #{
        #    SysGlobalCache cache = appl.globalCache();
        #    ;
        #    cache.set(classstr(Info), identifierstr(Autologoff), true);
        #    this.shutDown(true);
        #
        #    // The shutdown may not be successful.  For instance, if the
        #    // user had pending changes the client may be prevented from
        #    // shutting down.  Restart the timer so it will fire again.
        #    this.startAutoLogoffTimer();
        #}
      ENDSOURCE
      SOURCE #breakpointForm
        #private FormRun breakpointForm(FormRun _form = null)
        #{
        #    #define.BreakpointForm('BreakpointForm')
        #    str mapOwner = #BreakpointForm;
        #    FormRun tempForm;
        #
        #    if (!prmisdefault(_form))
        #    {
        #        this.workspaceCache().set(mapOwner, 0, _form);
        #    }
        #
        #    if (this.workspaceCache().isSet(mapOwner, 0))
        #    {
        #       tempForm = this.workspaceCache().get(mapOwner, 0);
        #    }
        #    else
        #    {
        #       tempForm = null;
        #    }
        #
        #    return tempForm;
        #}
      ENDSOURCE
      SOURCE #breakpointFormClosed
        #private boolean breakpointFormClosed(boolean _closed = false)
        #{
        #    #define.BreakpointFormClosed('BreakpointFormClosed')
        #    str mapOwner = #BreakpointFormClosed;
        #    boolean closed;
        #
        #    if (!prmisdefault(_closed))
        #    {
        #        this.workspaceCache().set(mapOwner, 0, _closed);
        #    }
        #
        #    if (this.workspaceCache().isSet(mapOwner, 0))
        #    {
        #       closed = this.workspaceCache().get(mapOwner, 0);
        #    }
        #    else
        #    {
        #        closed = false;
        #    }
        #
        #    return closed;
        #}
      ENDSOURCE
      SOURCE #breakpointNotify
        #public void breakpointNotify(BreakpointNotify _notification)
        #{
        #    Object o;
        #    Args   args;
        #    FormRun formRun;
        #
        #    switch(_notification)
        #    {
        #        case BreakpointNotify::BreakpointForm:
        #            if (!this.breakpointForm() || this.breakpointFormClosed())
        #            {
        #                this.breakpointFormClosed(false);
        #
        #                args = new Args();
        #                args.name(formstr(SysBreakpoints));
        #                formRun = this.breakpointForm(classfactory.formRunClass(args));
        #                formRun.init();
        #                formRun.run();
        #            }
        #            else
        #            {
        #                this.breakpointForm().close();
        #            }
        #            break;
        #
        #        case BreakpointNotify::BreakpointChange:
        #            if (this.breakpointForm() && !this.breakpointFormClosed())
        #            {
        #                o = this.breakpointForm();
        #                o.updateListDelayed();
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #browser
        #private FormRun browser(FormRun _browser = null)
        #{
        #    #define.Browser('InfoLogBrowser')
        #    str mapOwner = #Browser;
        #    FormRun browserForm;
        #
        #    if (!prmisdefault(_browser))
        #    {
        #        this.workspaceCache().set(mapOwner, 0, _browser);
        #    }
        #
        #    if (this.workspaceCache().isSet(mapOwner, 0))
        #    {
        #       browserForm = this.workspaceCache().get(mapOwner, 0);
        #    }
        #    else
        #    {
        #       browserForm = null;
        #    }
        #
        #    return browserForm;
        #}
      ENDSOURCE
      SOURCE #browserActionButton
        #private FormButtonControl browserActionButton()
        #{
        #    return this.browser().design().controlName('action');
        #}
      ENDSOURCE
      SOURCE #browserBottomGroup
        #private FormGroupControl browserBottomGroup()
        #{
        #    return this.browser().design().controlName('bottomgroup');
        #}
      ENDSOURCE
      SOURCE #browserCloseButton
        #private FormButtonControl browserCloseButton()
        #{
        #    return this.browser().design().controlName('close');
        #}
      ENDSOURCE
      SOURCE #browserCurrentError
        #private FormStaticTextControl browserCurrentError()
        #{
        #    return this.browser().design().controlName('currenterror');
        #}
      ENDSOURCE
      SOURCE #browserCurrentPicture
        #private FormWindowControl browserCurrentPicture()
        #{
        #    return this.browser().design().controlName('currentpicture');
        #}
      ENDSOURCE
      SOURCE #browserDeleteAll
        #private FormButtonControl browserDeleteAll()
        #{
        #    return this.browser().design().controlName('deleteall');
        #}
      ENDSOURCE
      SOURCE #browserErrorTree
        #private FormTreeControl browserErrorTree()
        #{
        #    return this.browser().design().controlName('errortree');
        #}
      ENDSOURCE
      SOURCE #browserHelpButton
        #private FormButtonControl browserHelpButton()
        #{
        #    return this.browser().design().controlName('help');
        #}
      ENDSOURCE
      SOURCE #browserImageList
        #private ImageListAppl_Infolog browserImageList()
        #{
        #    Object object;
        #;
        #    object = this.browser();
        #    return object.imagelist();
        #}
      ENDSOURCE
      SOURCE #browserInfoText
        #private FormStringControl browserInfoText()
        #{
        #    return this.browser().design().controlName('InfoText');
        #}
      ENDSOURCE
      SOURCE #browserResizedOnce
        #private boolean browserResizedOnce(boolean _resizedOnce = false)
        #{
        #    #define.BrowserResizedOnce('InfoLogBrowserResizedOnce')
        #    str mapOwner = #BrowserResizedOnce;
        #    boolean sizedOnce;
        #
        #    if (!prmisdefault(_resizedOnce))
        #    {
        #        this.workspaceCache().set(mapOwner, 0, _resizedOnce);
        #    }
        #
        #    if (this.workspaceCache().isSet(mapOwner, 0))
        #    {
        #       sizedOnce = this.workspaceCache().get(mapOwner, 0);
        #    }
        #    else
        #    {
        #        sizedOnce = false;
        #    }
        #
        #    return sizedOnce;
        #}
      ENDSOURCE
      SOURCE #browserTopGroup
        #private FormGroupControl browserTopGroup()
        #{
        #    return this.browser().design().controlName('topgroup');
        #}
      ENDSOURCE
      SOURCE #browserTreeGroup
        #private FormGroupControl browserTreeGroup()
        #{
        #    return this.browser().design().controlName('treegroup');
        #}
      ENDSOURCE
      SOURCE #callTimeOut
        #private void callTimeOut()
        #{
        #    Struct      valueStruct;
        #    ObjectIdent ident;
        #    Object      obj;
        #    str         method;
        #    DictClass   dictClass;
        #    int         hdl = this.getTimeOutTimerHandle();
        #
        #    if (setTimeOutMap.exists(hdl))
        #    {
        #        valueStruct = setTimeOutMap.lookup(hdl);
        #        ident       = valueStruct.value('caller');
        #        method      = valueStruct.value('method');
        #
        #        obj = ident.object();
        #        if (obj)
        #        {
        #            setTimeOutMap.remove(hdl);
        #            dictClass = new DictClass(classidget(obj));
        #
        #            // callTimeOut is called from addTimeOut which in turn is called only from client classes.
        #
        #            // BP deviation documented
        #            dictClass.callObject(method,obj);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #canShowCreateRuleMenuItem
        #public boolean canShowCreateRuleMenuItem(FormRun _caller)
        #{
        #    return EventRule::canShowCreateRuleMenuItem(_caller);
        #}
      ENDSOURCE
      SOURCE #canShutdown
        #public boolean canShutdown(boolean _silent)
        #{
        #    boolean ret;
        #;
        #    DocuFileWatchDog::openFiles(_silent);
        #
        #    ret = super(_silent);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #canUpdateView
        #boolean canUpdateView()
        #{
        #    // COM Object/Server
        #    if (!hasGUI())
        #        return false;
        #
        #    // Most common situation
        #    if (! updateViewObj)
        #        return true;
        #
        #    // Object is dead, so okay to view
        #    if (! updateViewObj.object())
        #        return true;
        #
        #    // It's alive so no update
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canUpdatexRef
        #boolean canUpdatexRef()
        #{   ;
        #    // Most common situation
        #    if (!updatexRefObj)
        #        return true;
        #
        #    // Object is dead, so okay to update
        #    if (!updatexRefObj.object())
        #        return true;
        #
        #    // It's alive, so no update
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canViewAlertInbox
        #public boolean canViewAlertInbox()
        #{
        #    boolean ret;
        #    ;
        #
        #    if(alreadySetCanViewAlertInbox)
        #    {
        #        return canViewAlertInboxValue;
        #    }
        #
        #    ret = SysDictMenu::isMenuFunctionVisible(
        #        new MenuFunction(menuitemdisplaystr(EventAlertInbox), MenuItemType::Display));
        #
        #    canViewAlertInboxValue = ret;
        #    alreadySetCanViewAlertInbox = true;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkForTimeZoneMismatch
        #void checkForTimeZoneMismatch()
        #{
        #    #ResAppl
        #    #define.cancelButton      ('CancelButton')
        #    #define.DialogClassName   ('Dialog')
        #    #define.IconControl       ('Icon')
        #    #define.MessageTextControl('MessageText')
        #    #define.CheckBoxControl   ('CheckBox')
        #    #define.MessageGroup      ('MessageGroup')
        #    #define.OptionGroup       ('OptionGroup')
        #
        #    Dialog dlg;
        #    UserInfo userInfo;
        #
        #    FormBuildGroupControl fbMainGroup;
        #    FormBuildGroupControl fbMessageGroup;
        #    FormBuildGroupControl fbOptionGroup;
        #
        #    FormBuildWindowControl        fbIcon;
        #    FormBuildStaticTextControl    fbMessage;
        #    FormBuildCheckBoxControl      fbCheckbox;
        #    FormBuildCommandButtonControl fbButton;
        #
        #    FormCheckBoxControl           checkbox;
        #    ;
        #
        #    if (clientKind() == ClientType::Client)
        #    {
        #        userInfo = xUserInfo::find(true, curuserid());
        #        if (userInfo && userInfo.NotifyTimeZoneMismatch)
        #        {
        #            if (xSession::isUserPreferredTzSameAsLocalMachine() == false)
        #            {
        #                // Time zone mismatch
        #                dlg = new Dialog("@SYS113344");
        #                dlg.formBuildDesign().setCompany(false);
        #
        #                fbMainGroup = dlg.mainFormGroup();
        #
        #                fbMessageGroup = fbMainGroup.addControl(FormControlType::Group, #MessageGroup);
        #                fbMessageGroup.frameType(FormFrameType::None);
        #                fbMessageGroup.columns(2);
        #
        #                fbOptionGroup = fbMainGroup.addControl(FormControlType::Group, #OptionGroup);
        #                fbOptionGroup.frameType(FormFrameType::None);
        #                fbOptionGroup.leftMode(FormLeft::AutoRight);
        #
        #                fbIcon = fbMessageGroup.addControl(FormControlType::Image, #IconControl);
        #                fbIcon.imageResource(#ImageInfoLarge);
        #                fbIcon.backStyle(FormBackStyle::Transparent);
        #                fbIcon.backgroundColor(WindowsPalette::ButtonFace3D);
        #                fbIcon.left(0);
        #
        #                // The local machine time zone does not match your preferred time zone settings.
        #                fbMessage = fbMessageGroup.addControl(FormControlType::StaticText, #MessageTextControl);
        #                fbMessage.text("@SYS113345");
        #                fbMessage.topMode(0);
        #                fbMessage.topValue(10);
        #
        #
        #                // Do not notify me again
        #                fbCheckbox = fbOptionGroup.addControl(FormControlType::CheckBox, #CheckBoxControl);
        #                fbCheckbox.leftMode(FormLeft::RightEdge);
        #                fbCheckbox.label("@SYS113346");
        #
        #                fbButton = dlg.dialogForm().buildDesign().control(#cancelButton);
        #                fbButton.visible(false);
        #
        #                dlg.run();
        #                dlg.wait();
        #
        #                if (dlg.closedOk())
        #                {
        #                    checkbox = dlg.formRun().design().controlName(#CheckBoxControl);
        #                    if (checkbox.value())
        #                    {
        #                        userInfo.NotifyTimeZoneMismatch = false;
        #                        ttsbegin;
        #                        userInfo.update();
        #                        ttscommit;
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkStartupCompany
        #void checkStartupCompany()
        #{
        #    ;
        #    Info::checkStartupCompany_Server(curext(), curuserid());
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #final class Info extends xInfo
        #{
        #    #SysTaskRecorderMacro
        #
        #    ObjectIdent         docuView;
        #    ObjectIdent         lastActivatedForm;
        #
        #    str                 errorDescription;
        #    int                 imageResource;
        #    recId               tmpActionId[];
        #    int                 treeId[];
        #    int                 offsetSeq;
        #    SysInfolog          tmpInfoTable;
        #
        #    boolean             updateCalled;
        #    boolean             unused;
        #    int                 treeItems;
        #    TmpInfolog          tmpInfolog;
        #    int                 firstPrefix;
        #    int                 sequenceCounter;
        #
        #    boolean             doxRefCreate;
        #    boolean             hasPrefix;
        #
        #    ObjectIdent         updateViewObj;          // Update of info. log
        #
        #    str 255             urlLookup;
        #    int                 errorsPerBatch;
        #    boolean             emptyTmpInfologCalled;
        #
        #    boolean             docuHandlingActive;
        #    boolean             docuToolbarButtonActive;
        #    Docu                docu;
        #
        #    xRef                    lastxRef;
        #    ObjectIdent             updatexRefObj;          // Update of xRef. Can be temporarely canceled
        #    Exception               maxException;
        #    ImageListAppl_Infolog   imagelist;
        #    ObjectIdent             infoActionObject;          // Update of info. log
        #    int                     numEqualPrefixes;
        #
        #    ProfileManager          profileMgr;
        #
        #    // Multipurpose cache used e.g. for imagelists and Forms security setup
        #    SysGlobalCache          globalCache;
        #    #define.watchdogInterval(15*60*1000)
        #    Map                     setTimeOutMap;
        #
        #    // Map that contains a separate SysGlobalCache for each workspace window
        #    Map                     workspaceCacheMap;
        #
        #    SysOperationProgressForm operationProgress;
        #    SysInfologLevel     loglevel;
        #
        #    // Generating PDF fonts is very time consuming, so we keep a cache global here, Axapta 4.0#41749.
        #    SysPDFFontCache         pdfFontCache;
        #
        #    boolean                 alreadySetCanViewAlertInbox;
        #    boolean                 canViewAlertInboxValue;
        #
        #    #Define.CurrentVersion(1)
        #
        #    #define.PropertyString("Property")
        #    #define.ObsoleteUpdateXrefTreeNodeAPI("Use the Application::updateXrefTreeNode method instead, which can run on either the client or server.")
        #}
      ENDSOURCE
      SOURCE #clear
        #/*
        #    This is overridden to ensure that the number of lines left are considered at each usage.
        #    Do not call this with 0 (zero) unless you are sure no one else has put valuable information
        #    into the infolog system.
        #
        #    Use this pattern to clear the infolog cache:
        #
        #    int line = infolog.line();
        #    try
        #    {
        #        //
        #    }
        #    catch
        #    {
        #        infolog.clear(line);
        #    }
        #*/
        #public void clear(int _linesLeft = 0)
        #{
        #    int i;
        #
        #    if (_linesLeft)
        #    {
        #        for (i=_linesLeft+1; i<= infologLine() ; i++)
        #        {
        #            tmpActionId[i] = 0;
        #        }
        #    }
        #    else
        #    {
        #        // Delete all
        #        tmpActionId[0] = 0;
        #    }
        #    super(_linesLeft);
        #}
      ENDSOURCE
      SOURCE #clearBreakpointForm
        #void clearBreakpointForm()
        #{
        #    this.breakpointFormClosed(true);
        #}
      ENDSOURCE
      SOURCE #clearBrowser
        ##resource
        #void clearBrowser()
        #{
        #    treeItems = 0;
        #    tmpInfoTable = null;
        #    tmpInfoTable.recordLevelSecurity(true);
        #    //BP deviation documented
        #    tmpInfoTable.setTmp();
        #    tmpActionId[0] = 0; //clear array
        #
        #    if (this.browser())
        #    {
        #        this.browserInfoText().text('');
        #        this.browserErrorTree().deleteAll();
        #        this.browserCurrentError().text('');
        #        this.browserCurrentPicture().imageResource(#RES_INFOLOG_L_INFO);
        #        maxException = Exception::Info;
        #    }
        #    this.emptyTmpInfolog();
        #}
      ENDSOURCE
      SOURCE #close
        #void close(FormRun formRun)
        #{
        #    if (lastActivatedForm && lastActivatedForm.object() == formRun)
        #        lastActivatedForm   = null;
        #
        #    if (! docuView)
        #        return;
        #
        #    if (formRun.name() != formstr(DocuView))
        #        return;
        #
        #    docuView            = null;
        #    lastActivatedForm   = null;
        #}
      ENDSOURCE
      SOURCE #closeInfolog
        #public void closeInfolog(int _delayedInMS = 0)
        #{
        #;
        #    if (_delayedInMS)
        #    {
        #        this.setTimeOut(methodstr(Info, closeInfologDelayed), _delayedInMS, true);
        #    }
        #    else
        #    {
        #        this.closeInfologDelayed();
        #    }
        #}
      ENDSOURCE
      SOURCE #closeInfologDelayed
        #private void closeInfologDelayed()
        #{
        #;
        #    //
        #    // CanClose() will set visible to false on the infolog browser form
        #    //
        #    if (this.browser() != null && this.browser().canClose())
        #    {
        #        this.browser().close();
        #    }
        #}
      ENDSOURCE
      SOURCE #collectESignature
        #/// <summary>
        #///    Indicates whether the Electronic Signature should be collected for the specified <c>databaseLog</c>
        #///    type and record.
        #/// </summary>
        #/// <param name="_logType">
        #///    The parameter is the log type for the database log type.
        #/// </param>
        #/// <param name="_record">
        #///    The parameter is the record of the calling method.
        #/// </param>
        #/// <returns>
        #///    true is signature needs to be collected; otherwise, false.
        #/// </returns>
        #boolean collectESignature(DatabaseLogType _logType, Common _record)
        #{
        #    boolean ret = true;
        #    ;
        #
        #    //info("ESignature required for table " + tableid2name(_record.TableId) + " for " + enum2str(_logType) + " operation");
        #    if (!SIGBaseDocument::checkAndCache(_logType,_record))
        #    {
        #        ret = checkFailed("@SYS138056");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #connectorSessionStart
        #/*
        #No SYS code must exist in this method
        #*/
        #void connectorSessionStart()
        #{
        #}
      ENDSOURCE
      SOURCE #connectorSessionStop
        #/*
        #No SYS code must exist in this method
        #*/
        #void connectorSessionStop()
        #{
        #}
      ENDSOURCE
      SOURCE #copy
        #public container copy(int _from, int _to)
        #{
        #    int i;
        #    InfologData systemData;
        #    InfologData returnData;
        #
        #    systemData = super(_from, _to);
        #    if (conlen(systemData))
        #    {
        #        returnData = [[#CurrentVersion]];
        #
        #        for (i=1; i<=conlen(systemData); i+=2)
        #        {
        #            if (tmpActionId[_from+(i div 2)])
        #            {
        #                select firstonly tmpInfoTable
        #                    where tmpInfoTable.RecId == tmpActionId[_from+(i div 2)];
        #
        #                returnData += [[conpeek(systemData, i), conpeek(systemData, i+1), tmpInfoTable.HelpUrl, tmpInfoTable.ActionClassId, tmpInfoTable.Action]];
        #            }
        #            else
        #            {
        #                returnData += [[conpeek(systemData, i), conpeek(systemData, i+1)]];
        #            }
        #        }
        #    }
        #    return returnData;
        #}
      ENDSOURCE
      SOURCE #cut
        #public container cut(int _from = 1, int _to = infologLine())
        #{
        #    int i;
        #    int lines = this.num();
        #    InfologData systemData;
        #    InfologData returnData;
        #
        #    systemData = super(_from, _to);
        #    returnData = [[#CurrentVersion]];
        #    for (i=1; i<=conlen(systemData); i+=2)
        #    {
        #        if (tmpActionId[_from+(i div 2)])
        #        {
        #            select firstonly tmpInfoTable
        #                where tmpInfoTable.RecId == tmpActionId[_from+(i div 2)];
        #
        #            returnData += [[conpeek(systemData, i), conpeek(systemData, i+1), tmpInfoTable.HelpUrl, tmpInfoTable.ActionClassId, tmpInfoTable.Action]];
        #        }
        #        else
        #        {
        #            returnData += [[conpeek(systemData, i), conpeek(systemData, i+1)]];
        #        }
        #    }
        #
        #    for (i=0; i<=lines-_to+1; i++)
        #        tmpActionId[_from+i] = tmpActionId[_to+i+1];
        #
        #    return returnData;
        #}
      ENDSOURCE
      SOURCE #docu
        #Docu    docu()
        #{
        #    return docu;
        #}
      ENDSOURCE
      SOURCE #docuHandlingActive
        #boolean docuHandlingActive(boolean _docuHandlingActive = docuHandlingActive)
        #{
        #    ;
        #    docuHandlingActive = _docuHandlingActive;
        #
        #    return docuHandlingActive;
        #
        #}
      ENDSOURCE
      SOURCE #docuInit
        #void docuInit()
        #{
        #;
        #    docu = new Docu();
        #}
      ENDSOURCE
      SOURCE #doxRefCreate
        #boolean doxRefCreate(boolean _doxRefCreate = doxRefCreate)
        #{
        #    doxRefCreate = _doxRefCreate;
        #    return doxRefCreate;
        #}
      ENDSOURCE
      SOURCE #emptyTmpInfolog
        #void emptyTmpInfolog(boolean resetErrorsPerBatch = true)
        #{
        #    ;
        #    tmpInfoLog            = null;
        #    sequenceCounter       = 0;
        #    offsetSeq             = 1;
        #    if (resetErrorsPerBatch)
        #        errorsPerBatch        = maxint()-1;
        #    numEqualPrefixes     = 0;
        #    emptyTmpInfologCalled = false;
        #}
      ENDSOURCE
      SOURCE #errorsPerBatch
        #int errorsPerBatch(int number = errorsPerBatch)
        #{
        #    if (number)
        #        errorsPerBatch = number;
        #    else
        #        errorsPerBatch = maxint();
        #
        #    return errorsPerBatch;
        #}
      ENDSOURCE
      SOURCE #eventAlertInit
        #void eventAlertInit()
        #{
        #    SysGlobalCache cache                    = infolog.globalCache();
        #    EventAlertPoller alertPoller            = EventAlertPoller::newAlertPoller(false);
        #    EventDrillDownPoller drillDownPoller    = EventDrillDownPoller::construct();
        #;
        #    cache.set(classstr(EventAlertPoller), literalstr(ReferenceId), alertPoller, false);
        #    cache.set(classstr(EventDrillDownPoller), literalstr(ReferenceId), drillDownPoller, false);
        #}
      ENDSOURCE
      SOURCE #executeUserOptions
        #void executeUserOptions()
        #{
        #    this.startAutoLogoffTimer();
        #
        #    this.setTimeOut(methodstr(Info,watchDog), #watchdogInterval, false);
        #}
        #
      ENDSOURCE
      SOURCE #export
        #container export()
        #{
        #    return infolog.copy(1, infolog.num());
        #}
      ENDSOURCE
      SOURCE #findNode
        #/*
        #    corrects xInfo.findNode so it can find the root node by it's path: '\'
        #*/
        #TreeNode findNode(str _path)
        #{
        #    str path = _path == '\\' ? '' : _path;
        #    return super(path);
        #}
      ENDSOURCE
      SOURCE #formNotify
        #void formNotify(FormRun formRun,FormNotify event,FormNotifyEventArgs eventArgs=null)
        #{
        #    switch (event)
        #    {
        #        case FormNotify::Activate:
        #            this.activate(formRun);
        #            if (docu)
        #                docu.reSearch(formRun);
        #            break;
        #        case FormNotify::DeActivate:
        #            break;
        #        case FormNotify::Open:
        #            this.open(formRun);
        #            if (docu)
        #                docu.set(formRun);
        #            break;
        #        case FormNotify::Close:
        #            this.close(formRun);
        #            if (docu)
        #                docu.clear(formRun);
        #            break;
        #        case FormNotify::RecordChange:
        #            if (docu)
        #                docu.reSearch(formRun);
        #
        #            if (formRun.isWorkflowEnabled())
        #            {
        #                // only refresh controls if current ds equals workflow data source
        #                if ((eventArgs != null) && (eventArgs.formDataSource()))
        #                {
        #                    if (eventArgs.formDataSource().name() == formRun.workflowDataSource().name())
        #                    {
        #                        formRun.updateWorkflowControls();
        #                    }
        #                }
        #            }
        #
        #            break;
        #        case FormNotify::NoteClicked:
        #            if (docu)
        #                docu.note(formRun);
        #            break;
        #        case FormNotify::RecordsWritten:
        #            if (formRun.isWorkflowEnabled())
        #            {
        #                formRun.updateWorkflowControls();
        #            }
        #            break;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #getInfoActionData
        #container getInfoActionData(int line)
        #{
        #    recId recId = tmpActionId[line];
        #
        #    if (recId)
        #    {
        #        select tmpInfoTable
        #            where tmpInfoTable.RecId == recId;
        #        return [tmpInfoTable.ActionClassId, tmpInfoTable.Action];
        #    }
        #    return connull();
        #}
      ENDSOURCE
      SOURCE #getNode
        #public TreeNode getNode(UtilElementType _utilType,
        #                        str _name,
        #                        utilElementId _parentId=0,
        #                        int _utilFileType=UtilFileType::Application,
        #                        UtilEntryLevel _utillevel=0,
        #                        boolean _forcelevel=0,
        #                        int _mode=0,
        #                        boolean _oldUtil=0)
        #{
        #    UtilElements utilElem;
        #    TreeNode treeNode;
        #
        #    if (_utilFileType == UtilFileType::Application)
        #    {
        #        if (_utilType == UtilElementType::ViewQuery ||
        #            _utilType == UtilElementType::SecurityKey ||
        #            _utilType == UtilElementType::ConfigurationKey ||
        #            _utilType == UtilElementType::Perspective)
        #        {
        #            // The kernel's findNode() cannot return these types
        #
        #            utilElem.RecordType = _utilType;
        #            utilElem.Name       = _name;
        #            utilElem.ParentId   = _parentId;
        #
        #            treeNode = TreeNode::findNode(xUtilElements::getNodePathRough(utilElem));
        #
        #            if (! treeNode)
        #                return null;
        #
        #            if (treeNode.AOTLayer() == _utillevel &&
        #                treeNode.AOTIsOld() == _oldUtil)
        #            {
        #                return treeNode;  // The right one
        #            }
        #
        #            return SysTreeNode::nodeInLayer(treeNode, _utillevel, _forcelevel, _oldUtil);
        #        }
        #    }
        #
        #    return super(_utilType, _name, _parentId, _utilFileType, _utillevel, _forcelevel, _mode, _oldUtil);
        #}
      ENDSOURCE
      SOURCE #getPDFFontCache
        #SysPDFFontCache getPDFFontCache()
        #{;
        #    // Generating PDF fonts is very time consuming, so we keep a cache global here, Axapta 4.0#41749.
        #    // To reduce the likely hood of confusing print job settings this cache is cleared when the app goes idle, see onEventGoingIdle.
        #    // So, the cache is really only used in rapid printing scenarios, such as batch printing.
        #    if (!pdfFontCache)
        #        pdfFontCache = new SysPDFFontCache();
        #
        #    return pdfFontCache;
        #}
      ENDSOURCE
      SOURCE #globalCache
        #SysGlobalCache globalCache()
        #{
        #    if (!globalCache)
        #        globalCache = SysGlobalCache::construct();
        #
        #    return globalCache;
        #}
        #
        #
      ENDSOURCE
      SOURCE #import
        #boolean import(container c, boolean clearExisting = false)
        #{
        #    int version, oldInfologLen;
        #    int i, start, end, len;
        #    container currentEntry;
        #    int entryLen;
        #    int entryType;
        #    str entryText;
        #    ;
        #
        #    len = conlen(c);
        #
        #    // Must have at least one element
        #    if(len == 0)
        #        return false;
        #
        #    // first element is a container with one integer element (version)
        #    if(typeof(conpeek(c, 1)) != Types::Container ||
        #        conlen(conpeek(c, 1)) != 1 ||
        #        typeof(conpeek(conpeek(c, 1), 1)) != Types::Integer)
        #        return false;
        #
        #    // Get the version
        #    version = conpeek(conpeek(c, 1), 1);
        #
        #    // version has to match otherwise import fails
        #    if(version != #CurrentVersion)
        #        return false;
        #
        #    // Save the current number of entries
        #    oldInfologLen = infolog.num();
        #
        #    // append to the info log
        #    for(i = 2; i <= len; i++)
        #    {
        #        // each entry is a container
        #        if(typeof(conpeek(c, i)) != Types::Container)
        #            break;
        #
        #        // Get the current entry
        #        currentEntry = conpeek(c, i);
        #
        #        // Get the current entry length
        #        entryLen = conlen(currentEntry);
        #
        #        // entries can be formatted in 2 ways
        #        // 1. [exceptionType, Text]
        #        // 2. [exceptionType, Text, helpUrl, actionClassId, action]
        #        if(entryLen != 2 && entryLen != 5)
        #            break;
        #
        #        // Validate types
        #        if(typeof(conpeek(currentEntry, 1)) != Types::Integer ||
        #            typeof(conpeek(currentEntry, 2)) != Types::String)
        #            break;
        #
        #        // Extract the first 2 values in the entry
        #        entryType = conpeek(currentEntry, 1);
        #        entryText = conpeek(currentEntry, 2);
        #
        #        if(entryLen == 5)
        #        {
        #            // Validate types
        #            if(typeof(conpeek(currentEntry, 3)) != Types::String ||
        #                typeof(conpeek(currentEntry, 4)) != Types::Integer ||
        #                typeof(conpeek(currentEntry, 5)) != Types::Container)
        #                break;
        #
        #            // Extract the remaining 3
        #            this.addSysInfoAction(conpeek(currentEntry, 3), conpeek(currentEntry, 4), conpeek(currentEntry, 5));
        #        }
        #
        #        // Add the entry to the current infolog
        #        //BP Deviation documented - Must use infolog.add because the Global class does not expose helper methods for each type of exception.
        #        infolog.add(entryType, entryText);
        #    }
        #
        #    // Revert in the case of failure
        #    if(i < len)
        #    {
        #        start = oldInfologLen + 1;
        #        end = oldInfologLen + i - 2;
        #
        #        if(start >= infolog.num())
        #            infolog.cut(start, end);
        #
        #        return false;
        #    }
        #
        #    // Clear the old info log items
        #    if(clearExisting && oldInfologLen > 0)
        #    {
        #        infolog.cut(1, oldInfologLen);
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #infoActionObject
        #/*
        #This object will be passed to the unpack method on a SysInfoAction class.
        #Make sure the object is a client object, otherwise it will not be passed on.
        #*/
        #Object infoActionObject(Object obj = null)
        #{
        #    if (!prmisdefault(obj))
        #    {
        #        if (obj)
        #        {
        #            infoActionObject = new ObjectIdent(obj);
        #        }
        #        else
        #        {
        #            infoActionObject = null;
        #        }
        #    }
        #    if (infoActionObject && infoActionObject.object())
        #        return infoActionObject.object();
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #infologData
        #InfologData infologData()
        #{
        #    recId tmpActionIdBackup[];
        #    int i;
        #    int lines = this.num();
        #    InfologData infologData = this.copy(1,lines);
        #
        #    for (i=1; i<=lines; i++)
        #        tmpActionIdBackup[i] = tmpActionId[i];
        #
        #    this.clear(0);
        #
        #    for (i=1; i<=lines; i++)
        #        tmpActionId[i] = tmpActionIdBackup[i];
        #
        #    return infologData;
        #}
      ENDSOURCE
      SOURCE #infologLevel
        #SysInfologLevel infologLevel()
        #{
        #    return loglevel;
        #}
      ENDSOURCE
      SOURCE #initBrowser
        #boolean initBrowser()
        #{
        #    FormRun browserWindow;
        #    Args browserArgs = new Args();
        #    xSession mySession = new xSession();
        #    ClientType clientType = xGlobal::clientKind();
        #
        #    // COM Object/Server
        #    if ((clientType == ClientType::COMObject) || (clientType == ClientType::Server) || Session::isServer())
        #        return false;
        #
        #    // bugfix DE-552-764-S99j
        #    if (mySession.clientKind() == ClientType::WorkerThread)
        #        return false;
        #
        #    if (!this.browser())
        #    {
        #        // No browser found to create one and store it in the
        #        // current workspace
        #
        #        // A browser must be resized once for the tree to appear
        #        this.browserResizedOnce(false);
        #
        #        browserArgs.name(formstr(SysInfologBrowser));
        #        //BP deviation documented - ClassFactory.formRunClass method cannot be used since ClassFactory is not initialized at this point.
        #        browserWindow = new FormRun(browserArgs);
        #
        #        this.browser(browserWindow);
        #        this.browser().run();
        #        this.initializeInfolog(this.browser().hWnd());
        #        return true;
        #    }
        #
        #    if( SysTaskRecorderEventManager::parmRecording() )
        #    {
        #        if( !(this.browser() is SysTaskRecorderSetupFormRun) )
        #        {
        #            this.browserResizedOnce(false);
        #            browserArgs.name(formstr(SysInfologBrowser));
        #            browserWindow = SysTaskRecorderSetupFormRun::newArgs(browserArgs);
        #            this.browser(browserWindow);
        #            this.browser().run();
        #            this.initializeInfolog(this.browser().hWnd());
        #
        #            SysTaskRecorderRunningFormsManager::addFormToList(browserWindow);
        #
        #            return true;
        #        }
        #
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #insertXReferences
        #void insertxReferences()
        #{
        #    ;
        #
        #    if (this.canUpdatexRef())
        #    {
        #        xRefCreate::insertxReferences(true);
        #    }
        #}
      ENDSOURCE
      SOURCE #isDocuSet
        #boolean isDocuSet()
        #{
        #    if (docuView && docuView.object())
        #        return true;
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #lastxRef
        #xRef lastxRef(xRef _lastxRef = lastxRef)
        #{
        #    lastxRef = _lastxRef;
        #    return lastxRef;
        #}
      ENDSOURCE
      SOURCE #line
        #/// <summary>
        #/// Gets the number of lines in the Infolog buffer.
        #/// </summary>
        #/// <returns>
        #/// The number of lines in the Infolog buffer.
        #/// </returns>
        #[SysObsoleteAttribute("@SYS138838", false)]
        #public int line()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #new
        #void new()
        #{
        #    UserInfo userInfo;
        #
        #    super();
        #
        #    // Initialize the TmpInfolog.
        #    this.emptyTmpInfolog();
        #
        #    if(new Session().clientKind() == ClientType::Client)
        #    {
        #        AifServiceGenerationManager::registerServicesOnClient();
        #    }
        #
        #    select firstonly InfologLevel from userInfo
        #        where userInfo.Id == curuserid();
        #
        #    loglevel = userInfo.InfologLevel;
        #
        #    profileMgr = ProfileManager::construct();
        #
        #    alreadySetCanViewAlertInbox = false;
        #    canViewAlertInboxValue = false;
        #}
      ENDSOURCE
      SOURCE #newHeadLine
        #void newHeadLine(SysInfologMessageStruct logline)
        #{
        #    #Resource
        #    #ResAppl
        #
        #    str 11          time = time2str(timenow(), 0, 0);
        #    FormTreeItem    formTreeItem;
        #    SysInfolog      tmpInfoTable2;
        #
        #    tmpInfoTable2.recordLevelSecurity(true);
        #    tmpInfoLog.recordLevelSecurity(true);
        #
        #    if (logline.prefixDepth())
        #    {
        #        firstPrefix = 2;
        #        tmpInfoLog.Name      = logline.preFixTextElement(1);
        #    }
        #    else
        #    {
        #        firstPrefix = 1;
        #        tmpInfoLog.Name      = "@SYS14327"+' ('+time+')';
        #    }
        #
        #    tmpInfoLog.Parent    = 0;
        #    tmpInfoLog.Prefix    = tmpInfoLog.Name;
        #    tmpInfoLog.Image     = this.browserImageList().image(#ImageEnvelopeOpen);
        #    tmpInfoLog.Seq       = this.sequence();
        #    tmpInfoLog.insert();
        #    // BP deviation documented
        #    tmpInfoTable2.setTmp();
        #    tmpInfoTable2.setTmpData(tmpInfoTable);
        #    tmpInfoTable2.Text    = tmpInfoLog.Name;
        #    tmpInfoTable2.insert();
        #
        #    // BP deviation documented
        #    formTreeItem         = new FormTreeItem(tmpInfoLog.Name, tmpInfoLog.Image);
        #    formTreeItem.stateBold(true);
        #    formTreeItem.stateExpanded(true);
        #
        #    treeId[1] = this.browserErrorTree().addItem(0,FormTreeAdd::First, formTreeItem);
        #    if (!treeId[1])
        #        throw error(strfmt("@SYS76877",tmpInfoLog.Name));
        #
        #    this.browserErrorTree().selectSetFirstVisible(treeId[1]);
        #    formTreeItem = this.browserErrorTree().getItem(treeId[1]);
        #    formTreeItem.data(tmpInfoTable2.RecId);
        #    this.browserErrorTree().setItem(formTreeItem);
        #}
        #
      ENDSOURCE
      SOURCE #numFrom
        #/*
        #Method to get the number of a specific exception, from a specific line in the infolog. Like the num() method,
        #but with the from parameter.
        #*/
        #Integer numFrom(
        #    Integer     fromNo,
        #    Exception   exception
        #    )
        #{
        #    Counter     i,noOf;
        #
        #    for (i=fromNo;i<= infologLine() ;i++)
        #    {
        #        if (this.level(i) == exception)
        #            noOf++;
        #    }
        #
        #    return noOf;
        #}
      ENDSOURCE
      SOURCE #onEventGoingIdle
        #//Event fired by kernel when the client goes idle.
        #//It is not fired during CTRL-Break dialog.
        #void onEventGoingIdle()
        #{
        #    ;
        #
        #    this.operationProgressClear();
        #    this.endLengthyOperation(true);
        #    pdfFontCache = null;
        #
        #    // Check whether the Task Recorder requires a screenshot
        #    if (SysTaskRecorderEventManager::parmRecording())
        #    {
        #        if  (SysTaskRecorderGlobal::getGlobalProperty(#globalPropTakeScreenshot, false))
        #        {
        #            SysTaskRecorderGlobal::setGlobalProperty(#globalPropTakeScreenshot, false);
        #            SysTaskRecorderTask::takeScreenshot();
        #        }
        #
        #        if (SysTaskRecorderGlobal::getGlobalProperty(#globalPropWarnOnFormActivate, false)
        #            && this.parmLastActivatedForm())
        #        {
        #            SysTaskRecorderGlobal::setGlobalProperty(#globalPropWarnOnFormActivate,false);
        #            SysTaskRecorderEventManager::warnIfFormCannotBeRecorded(this.parmLastActivatedForm().object());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #open
        #void open(FormRun formRun)
        #{
        #
        #}
      ENDSOURCE
      SOURCE #operationProgress
        #SysOperationProgressForm operationProgress(boolean query = false)
        #{
        #    if (!query && !operationProgress)
        #        operationProgress = SysOperationProgressForm::construct();
        #
        #    return operationProgress;
        #}
      ENDSOURCE
      SOURCE #operationProgressClear
        #void operationProgressClear()
        #{
        #    SysOperationProgress sysOperationProgress;
        #;
        #    if (operationProgress)
        #    {
        #        sysOperationProgress = operationProgress.caller();
        #        if (!sysOperationProgress)
        #        {
        #            SysOperationProgress::clearCache();
        #        }
        #        else
        #        {
        #            sysOperationProgress.hide();
        #        }
        #        operationProgress = null;
        #    }
        #}
      ENDSOURCE
      SOURCE #parmDocu
        #Docu parmDocu()
        #{
        #    return docu;
        #}
      ENDSOURCE
      SOURCE #parmDocuHandlingActive
        #boolean parmDocuHandlingActive(boolean _docuHandlingActive = docuHandlingActive)
        #{
        #;
        #    docuHandlingActive = _docuHandlingActive;
        #
        #    return docuHandlingActive;
        #}
      ENDSOURCE
      SOURCE #parmDocuToolbarButtonActive
        #boolean parmDocuToolbarButtonActive(boolean _docuToolbarButtonActive = docuToolbarButtonActive)
        #{
        #;
        #    docuToolbarButtonActive = _docuToolbarButtonActive;
        #
        #    return docuToolbarButtonActive;
        #}
      ENDSOURCE
      SOURCE #parmLastActivatedForm
        #ObjectIdent parmLastActivatedForm()
        #{
        #    return lastActivatedForm;
        #}
      ENDSOURCE
      SOURCE #print
        #void print(PrintMedium _printMedium,
        #           str         _name        = '')
        #{
        #    Object  object;
        #
        #    if (this.browser())
        #    {
        #        object = this.browser();
        #        object.print(true, _printMedium, _name);
        #    }
        #}
      ENDSOURCE
      SOURCE #profileMgr
        #ProfileManager profileMgr()
        #{
        #    return profileMgr;
        #}
      ENDSOURCE
      SOURCE #removeTimeOut
        #void removeTimeOut(int timerHdl)
        #{
        #    this.cancelTimeOut(timerHdl);
        #
        #    if (setTimeOutMap)
        #    {
        #        setTimeOutMap.remove(timerHdl);
        #    }
        #}
      ENDSOURCE
      SOURCE #reportSendMail
        #void reportSendMail(PrintJobSettings p1)
        #{
        #    SysINetMail m = new SysINetMail();
        #
        #    str fileName = 'axaptareport';
        #
        #    if (p1.format() == PrintFormat::ASCII || p1.format() == PrintFormat::TEXTUTF8)
        #        fileName = fileName + '.txt';
        #    else if (p1.format() == PrintFormat::RTF)
        #        fileName = fileName + '.rtf';
        #    else if (p1.format() == PrintFormat::HTML)
        #        fileName = fileName + '.htm';
        #    else if (p1.format() == PrintFormat::PDF || p1.format() == PrintFormat::PDF_EMBED_FONTS)
        #        fileName = fileName + '.pdf';
        #
        #    m.sendMailAttach(p1.mailTo(),p1.mailCc(), p1.mailSubject(),'axapta report', true, p1.fileName(), fileName);
        #}
        #
      ENDSOURCE
      SOURCE #reportSendMailServer
        #void reportSendMailServer(PrintJobSettings p1)
        #{
        #    ;
        #    RunbaseReportStd::serverSendMail(p1);
        #}
      ENDSOURCE
      SOURCE #sequence
        #int sequence()
        #{
        #    sequenceCounter++;
        #    return sequenceCounter;
        #}
      ENDSOURCE
      SOURCE #setAction
        #void setAction(int lineNum, SysInfoAction _sysInfoAction = null)
        #{
        #    ;
        #    select forupdate tmpInfoTable where
        #        tmpInfoTable.RecId == tmpActionId[lineNum];
        #
        #    if (_sysInfoAction)
        #    {
        #        tmpInfoTable.Action        = _sysInfoAction.pack();
        #        tmpInfoTable.ActionClassId = classidget(_sysInfoAction);
        #    }
        #    else
        #    {
        #        tmpInfoTable.Action        = connull();
        #        tmpInfoTable.ActionClassId = 0;
        #    }
        #
        #    if (tmpInfoTable.RecId)
        #    {
        #        tmpInfoTable.update();
        #    }
        #    else
        #    {
        #        tmpInfoTable.insert();
        #        tmpActionId[linenum] = tmpInfoTable.RecId;
        #    }
        #}
      ENDSOURCE
      SOURCE #setDocuHandling
        #void setDocuHandling()
        #{
        #    SysUserInfo sysUserInfo = SysUserInfo::find();
        #
        #    this.parmDocuHandlingActive(sysUserInfo.DocuHandlingActive);
        #    this.parmDocuToolbarButtonActive(sysUserInfo.DocuToolbarButtonActive);
        #
        #    docu.initCheckToolbarButtonTicks();
        #}
      ENDSOURCE
      SOURCE #setInfoLogLevel
        #void setInfoLogLevel(SysInfologLevel level)
        #{
        #    loglevel = level;
        #}
      ENDSOURCE
      SOURCE #setLastActivatedForm
        #ObjectIdent setLastActivatedForm(FormRun _lastActivatedForm = null)
        #{
        #    if (!prmisdefault(_lastActivatedForm))
        #        lastActivatedForm = new ObjectIdent(_lastActivatedForm);
        #
        #    return lastActivatedForm;
        #}
      ENDSOURCE
      SOURCE #singleError
        #SysInfolog singleError()
        #{
        #    FormTreeItem item = this.browserErrorTree().getItem(treeId[2]);
        #    SysInfolog tmpInfoTable2;
        #    tmpInfoTable2.recordLevelSecurity(true);
        #    //BP deviation documented
        #    tmpInfoTable2.setTmp();
        #    tmpInfoTable2.setTmpData(tmpInfoTable);
        #
        #    if (treeItems == 1)
        #    {
        #        select firstonly tmpInfoTable2
        #            where tmpInfoTable2.RecId == item.data();
        #        return tmpInfoTable2;
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #startAutoLogoffTimer
        #void startAutoLogoffTimer()
        #{
        #    UserInfo userInfo;
        #
        #    select firstonly AutoLogOff
        #        from userInfo
        #        where userInfo.Id == curuserid();
        #
        #    if (userInfo && userInfo.AutoLogOff)
        #    {
        #        this.setTimeOut(methodstr(Info,autologOff), userInfo.AutoLogOff*1000*60, true);
        #    }
        #}
      ENDSOURCE
      SOURCE #startup
        #/*
        #This method shouldn't be overlayered, use the startupPost() method instead !
        #*/
        #void startup(str startupCommand)
        #{
        #    SysStartupCmd sysStartupCmd;
        #
        #    this.initBrowser();
        #    this.clearBrowser();
        #    this.docuInit();
        #
        #    if (xGlobal::clientKind() == ClientType::COMObject)
        #        return;
        #
        #    if (startupCommand)
        #    {
        #        sysStartupCmd = SysStartupCmd::construct(startupCommand);
        #        if (sysStartupCmd)
        #            sysStartupCmd.infoInit();
        #    }
        #    this.executeUserOptions();
        #    this.setDocuHandling();
        #
        #    super(startupCommand);
        #
        #    InventDim::startUpCreateBlank();
        #
        #    this.startupPost();
        #    SysFileDeployer::main(new Args());
        #
        #    if (hasGui())
        #    {
        #        if (!isRunningMode())
        #        {
        #            if (!ReleaseUpdateRunning::start())
        #            {
        #                SysCheckList::runCheckList();
        #            }
        #        }
        #        else
        #        {
        #            // Present dialog to client if model store is dirty. Prioritize checklist prior to modified model store dialog.
        #            if (isSystemAdministrator() && (SysModelStore::isInstallMode() || SysCheckList_Update::isUpgradeMode()))
        #            {
        #                SysModelStoreModified::main(new Args());
        #            }
        #        }
        #    }
        #
        #    versioncontrol.init();
        #
        #    if (isRunningMode() && isConfigurationkeyEnabled(configurationkeynum(event)))
        #        this.eventAlertInit();
        #
        #    if (startupCommand && sysStartupCmd)
        #    {
        #        sysStartupCmd.infoRun();
        #    }
        #
        #    if (isRunningMode())
        #    {
        #        this.checkStartupCompany();
        #
        #        if (!startupCommand)
        #        {
        #            this.checkForTimeZoneMismatch();
        #        }
        #    }
        #
        #    if (!appl.isConfigMode() && xGlobal::clientKind() == ClientType::Client)
        #    {
        #        smmInit::getsmmInitObject();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #startupPost
        #/*
        #No SYS code must exist in this method
        #*/
        #void startupPost()
        #{
        #}
      ENDSOURCE
      SOURCE #tmpInfoTable
        #SysInfolog tmpInfoTable()
        #{
        #    return tmpInfoTable;
        #}
      ENDSOURCE
      SOURCE #updateViewSet
        #/*
        #Will disable the infolog if an object is provided and disabled is true.
        #The log is enabled if object = null, or object = current classid and disable = false
        #*/
        #void updateViewSet(Object obj, boolean disable = true)
        #{
        #    if (disable && obj)
        #    {
        #        // If another object is still alive
        #        if (updateViewObj && updateViewObj.object())
        #            return;
        #
        #        updateViewObj   = new ObjectIdent(obj);
        #    }
        #    else
        #    {
        #        if (obj)
        #        {
        #            if (updateViewObj && updateViewObj.object() && classidget(obj) == classidget(updateViewObj.object()))
        #                updateViewObj   = null;
        #        }
        #        else
        #            updateViewObj   = null;
        #    }
        #}
      ENDSOURCE
      SOURCE #updatexRefSet
        #/*
        #Will disable update of the xRef if an object is provided and disabled is true.
        #The update is enabled if object = null, or object = current classid and disable = false
        #*/
        #void updatexRefSet(Object obj,
        #                   boolean disable = true)      // true => xRef DB are disabled. false => enabled
        #{
        #    if (disable && obj)
        #    {
        #        // If another object is still alive
        #        if (updatexRefObj && updatexRefObj.object())
        #            return;
        #
        #        updatexRefObj   = new ObjectIdent(obj);
        #    }
        #    else
        #    {
        #        if (obj)
        #        {
        #            if (updatexRefObj &&
        #                updatexRefObj.object() &&
        #                classidget(obj) == classidget(updatexRefObj.object()))
        #            {
        #                updatexRefObj = null;
        #            }
        #        }
        #        else
        #        {
        #            updatexRefObj   = null;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateXrefTreeNode
        #/// <summary>
        #///    Updates the cross reference information for the following node types: \Web\Web Files\List
        #///    Definitions, \Web\Web Files\Static Files, \Web\Web Files\Page Definitions, \Web\Web Files\Web
        #///    Controls, \SSRS Reports\Reports\ReportDesign, \Visual Studio Projects\ProjectX, \Visual Studio
        #///    Projects\ProjectX\Project Output\Assembly File,
        #/// </summary>
        #/// <param name="_treeNode">
        #///    The tree node for which to update the cross references.
        #/// </param>
        #/// <remarks>
        #///    This method is invoked by the framework whenever any of the described node types is compiled or
        #///    updated for cross reference.
        #/// </remarks>
        #[SysObsoleteAttribute(#ObsoleteUpdateXrefTreeNodeAPI,false)]
        #void updateXrefTreeNode(TreeNode _treeNode)
        #{
        #    #TreeNodeSysNodeType
        #
        #    if (_treeNode)
        #    {
        #        try
        #        {
        #            switch (_treeNode.TreeNodeType().id())
        #            {
        #                case #NT_WEBPAGEDEF: // for \Web\Web Files\Page Definitions
        #                case #NT_WEBSTATICFILE: // for \Web\Web Files\Static Files
        #                case #NT_WEBCONTROL: // for \Web\Web Files\Web Controls
        #                case #NT_WEBLISTDEF: // for \Web\Web Files\List Definitions
        #                    xrefWeb::updateXref(_treeNode);
        #                    break;
        #                case #NT_SSRSREPORTDESIGN: // for \SSRS Reports\Reports\ReportDesign
        #                    xrefSSRSReport::updateReportDesignXref(_treeNode);
        #                    break;
        #                case #NT_SSRSREPORT: // for \SSRS Reports\Reports\Report
        #                    xrefSSRSReport::updateReportConceptNodeXref(_treeNode);
        #                    break;
        #                case #NT_REFERENCE:
        #                    xRefAssemblyReferences::updateXref(_treeNode);   // for \References\
        #                    break;
        #                case #NT_VSPROJECT: // for \Visual Studio Projects\ProjectX
        #                    xrefVisualStudioProject::updateXref(_treeNode);
        #                    break;
        #                case #NT_VSPROJECTFILE: // for \Visual Studio Projects\ProjectX\Project Output\Assembly File
        #                    xrefVisualStudioProject::updateAssemblyXref(_treeNode);
        #                    break;
        #            }
        #        }
        #        catch
        #        {
        #            error(strfmt("@SYS320348",_treeNode.AOTname()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #urlLookup
        #void urlLookup(str url = '')
        #{
        #    str execFile;
        #    str tempFileName;
        #    TextBuffer buf;
        #    if (url)
        #    {
        #        urlLookup = url;
        #        this.setTimeOut(identifierstr(UrlLookup),5,false);
        #    }
        #    else
        #    {
        #        tempFileName = WinAPI::getTempPath() + 'temp.htm';
        #        buf = new TextBuffer();
        #        buf.setText('<HTML> <\HTML>');
        #        //BP deviation documented
        #        buf.toFile(tempFileName);
        #        execFile = WinAPI::findExecutable(tempFileName);
        #        if (execFile)
        #            WinAPI::shellExecute(execFile,strFmt('\"%1\"',urlLookup));
        #        else
        #            WinAPI::shellExecute(strFmt('\"%1\"',urlLookup));
        #
        #        urlLookup = '';
        #    }
        #}
      ENDSOURCE
      SOURCE #view
        #void view(container _c = connull())
        #{
        #    if (! this.canUpdateView())
        #        return;
        #
        #    if (prmisdefault(_c))
        #    {
        #        if (this.num() && !updateCalled)
        #        {
        #            updateCalled = true;
        #            this.setTimeOut(identifierstr(ViewDelay),1,true);
        #        }
        #    }
        #    else
        #    {
        #        this.viewBuild(_c);
        #    }
        #}
      ENDSOURCE
      SOURCE #viewAlertInbox
        #public void viewAlertInbox(int _selectedTab=1)
        #{
        #    MenuFunction menuFunction;
        #    Args args;
        #
        #    ;
        #    super(_selectedTab);
        #
        #    args = new Args();
        #
        #    args.parm(int2str(_selectedTab));
        #
        #    menuFunction = new MenuFunction(menuitemdisplaystr(EventAlertInbox),
        #                                       MenuItemType::Display);
        #    menuFunction.run(args);
        #}
      ENDSOURCE
      SOURCE #viewBuild
        ##define.MaxErrors(10000)
        #
        #void viewBuild(
        #    InfologData _data               = this.copy(1,this.num()),
        #    boolean     _emptyTmpInfolog    = false)
        #{
        #    SysInfologMessageStruct logLine;
        #
        #    int                  i = 1, j;
        #    Exception            exception;
        #    str 12               time = time2str(timenow(),0,0);
        #    int                  resNumber;
        #    int                  batchCount;
        #
        #    FormTreeItem         treeItem;
        #    int                  imageNumber;
        #
        #    int                  parentId;
        #    SysInfoLogStr        niceName;
        #
        #    TmpInfolog           tmpLookup;
        #    UserInfo             userInfo;
        #
        #    int                  oldParentId;
        #    SysInfologEnumerator enum = SysInfologEnumerator::newData(_data);
        #    #resource
        #    #resAppl
        #
        #TmpInfolog selectInfolog()
        #{
        #    TmpInfolog tmpinfolog2;
        #    tmpinfolog2.setTmpData(tmpInfoLog);
        #
        #    select tmpinfolog2
        #        where tmpinfolog2.Seq == 1;
        #
        #    if (tmpinfolog2)
        #        return tmpinfolog2;
        #    return null;
        #}
        #
        #TmpInfolog selectInfolog2(SysInfologPrefix _prefix, int _parentid)
        #{
        #    TmpInfolog tmpinfolog2;
        #    tmpinfolog2.setTmpData(tmpInfoLog);
        #
        #    select tmpinfolog2
        #        where tmpinfolog2.Parent == _parentid   &&
        #              tmpinfolog2.Prefix == _prefix;
        #
        #    if (tmpinfolog2)
        #        return tmpinfolog2;
        #    return null;
        #}
        #
        #    if (prmisdefault(_data))
        #        this.clear(0);
        #
        #    if (conlen(_data)==0)
        #        return;
        #
        #    if (enum.length() > #maxerrors)
        #    {
        #        enum.delete(#maxerrors);
        #        enum.add(Exception::Warning, strfmt("@SYS86217", #maxerrors));
        #    }
        #
        #    startLengthyOperation();
        #    enum.reset();
        #    while (enum.moveNext())
        #    {
        #        exception = enum.currentException();
        #        if (maxException < exception )
        #            maxException = exception;
        #    }
        #
        #    switch (maxException)
        #    {
        #        case Exception::Info:
        #            imageResource       = #RES_INFOLOG_L_INFO;
        #            errorDescription    = "@SYS26000";
        #            break;
        #
        #        case Exception::Warning:
        #            imageResource       = #RES_INFOLOG_L_WARNING;
        #            errorDescription    = "@SYS26001";
        #            break;
        #
        #        default :
        #            imageResource       = #RES_INFOLOG_L_ERROR;
        #            errorDescription    = "@SYS26002";
        #            break;
        #    }
        #
        #    select firstonly DebugInfo, TraceInfo from userInfo
        #        where userInfo.Id == curuserid();
        #
        #    // Make sure there is a browser available
        #    // for the current application window.
        #    if (this.initBrowser())
        #    {
        #        this.clearBrowser();
        #    }
        #
        #    if (!bitTest(userInfo.DebugInfo, 1 << 8 ) ||       //SQL Trace Off
        #       (!bitTest(userInfo.TraceInfo, 1 << 1 ) &&       //FLAG_TraceInfoStateInfo
        #        !bitTest(userInfo.TraceInfo, 1 << 5 )))        //FLAG_TraceInfoWarningInfo
        #    {
        #        infolog.activateWindow(this.browser().hWnd());
        #        infolog.setWindowOrder(this.browser().hWnd());
        #    }
        #    enum.reset();
        #    enum.moveNext();
        #    logLine  = SysInfologMessageStruct::construct(enum.currentMessage());
        #
        #    tmpInfoLog = selectInfoLog();
        #    tmpInfoLog.recordLevelSecurity(true);
        #
        #    if (!tmpInfoLog)
        #        this.newHeadLine(logLine);
        #
        #    hasPrefix = false;
        #
        #    enum.reset();
        #    i = 1;
        #    while (enum.moveNext())
        #    {
        #        logLine  = SysInfologMessageStruct::construct(enum.currentMessage());
        #        exception = enum.currentException();
        #
        #        switch (exception)
        #        {
        #            case Exception::Info:
        #                imageNumber = this.browserImageList().image(#ImageInfo);
        #                resNumber   = #RES_INFOLOG_L_INFO;
        #                break;
        #
        #            case Exception::Warning:
        #                imageNumber = this.browserImageList().image(#ImageWarning);
        #                resNumber   = #RES_INFOLOG_L_WARNING;
        #                break;
        #
        #            default :
        #                imageNumber = this.browserImageList().image(#ImageError);
        #                resNumber   = #RES_INFOLOG_L_ERROR;
        #                break;
        #        }
        #        parentId = 1;   //header has id = 1
        #
        #        for (j=firstPrefix; j<=logLine.prefixDepth(); j++)
        #        {
        #            tmpLookup.setTmpData(tmpInfoLog);
        #            tmpLookup = selectInfolog2(logLine.preFixTextElement(j), parentid);
        #
        #            if (tmpLookup)
        #            {
        #                parentId = tmpLookup.Seq;
        #            }
        #            else
        #            {
        #                batchCount           = 0;
        #                tmpInfoLog.Name      = logLine.preFixTextElement(j);
        #                tmpInfoLog.Parent    = parentId;
        #                tmpInfolog.Prefix    = tmpInfolog.Name;
        #                tmpInfolog.ConIdx    = 0;
        #                tmpInfoLog.Image     = this.browserImageList().image(#ImageNote);
        #                tmpInfoLog.Seq       = this.sequence();
        #                tmpInfoLog.insert();
        #                parentId             = tmpInfoLog.Seq;
        #            }
        #        }
        #        if (parentId != oldParentId)
        #        {
        #            batchCount  = 0;
        #            oldParentId = parentId;
        #        }
        #        if (batchCount <= errorsPerBatch)
        #        {
        #            tmpInfoLog.Parent   = parentId;
        #            tmpInfoLog.Seq      = this.sequence();
        #
        #            if (batchCount == errorsPerBatch)
        #            {
        #                tmpInfoLog.Name     = strfmt("@SYS86217", errorsPerBatch);
        #                tmpInfoLog.Image    = this.browserImageList().image(#ImageWarning);
        #                tmpInfolog.ConIdx   = i;
        #
        #                if((!imageResource) || (imageResource == #RES_INFOLOG_L_INFO))
        #                {
        #                    imageResource       = #RES_INFOLOG_L_WARNING;
        #                    errorDescription    = "@SYS26001";
        #                }
        #            }
        #            else
        #            {
        #                if (enum.currentActionClassId() ||
        #                    enum.currentHelpUrl())
        #                {
        #                    tmpInfoTable.HelpUrl       = enum.currentHelpUrl();
        #                    tmpInfoTable.Action        = enum.currentActionClassData();
        #                    tmpInfoTable.ActionClassId = enum.currentActionClassId();
        #                    tmpInfoTable.insert();
        #                    tmpActionId[i] = tmpInfoTable.RecId;
        #                }
        #
        #                tmpInfoLog.Name     = logLine.message();
        #                tmpInfoLog.Image    = imageNumber;
        #                tmpInfolog.ConIdx   = i;
        #            }
        #            tmpInfoLog.doInsert();
        #            batchCount++;
        #        }
        #        i++;
        #    }
        #
        #
        #
        #    while select forupdate tmpInfoLog
        #        order by Seq
        #        where tmpInfoLog.Seq > offsetSeq
        #    {
        #        niceName = strRemoveCr(substr(tmpInfoLog.Name,1,254));
        #
        #        // BP deviation documented
        #        treeItem = new FormTreeItem(niceName, tmpInfoLog.Image);
        #        treeItems++;
        #        treeItem.data(0);
        #        treeItem.stateExpanded(true);
        #
        #        treeId[tmpInfoLog.Seq] = this.browserErrorTree().addItem(treeId[tmpInfoLog.Parent], 0, treeItem);
        #        if (treeId[tmpInfoLog.Seq])
        #        {
        #            treeItem           = this.browserErrorTree().getItem(treeId[tmpInfoLog.Seq]);
        #
        #            if (tmpInfoLog.ConIdx)      //not prefix
        #            {
        #                select firstonly forupdate Text, Image, ActionClassId, HelpUrl, RecId from tmpInfoTable
        #                    where tmpInfoTable.RecId == tmpActionId[tmpInfoLog.ConIdx];
        #
        #                tmpInfoTable.Text  = tmpInfolog.Name;
        #                tmpInfoTable.Image = tmpInfolog.Image;
        #                tmpInfoTable.write();
        #                tmpInfoLog.delete();
        #                if (tmpInfoTable.ActionClassId)
        #                    treeItem.overlayImage(this.browserImageList().image(#ImageOverlayAction));
        #                else
        #                {
        #                    if (tmpInfoTable.HelpUrl)
        #                        treeItem.overlayImage(this.browserImageList().image(#ImageOverlayHelp));
        #                }
        #            }
        #            else
        #            {
        #                tmpInfoTable.Action        = connull();
        #                tmpInfoTable.ActionClassId = 0;
        #                tmpInfoTable.Text          = tmpInfolog.Name;
        #                tmpInfoTable.Image         = tmpInfolog.Image;
        #                tmpInfoTable.insert();
        #                offsetSeq = tmpInfolog.Seq;
        #                treeItem.children(true);
        #            }
        #            treeItem.data(tmpInfoTable.RecId);
        #            this.browserErrorTree().setItem(treeItem);
        #        }
        #    }
        #
        #    if ((treeItems > 0 || hasPrefix) && (!this.browserDeleteAll().visible()))
        #    {
        #        this.browser().lock();
        #        this.browserDeleteAll().visible(true);
        #        this.browser().unLock();
        #        this.browser().resetSize();
        #        this.browser().arrange();
        #    }
        #
        #    if (this.browserDeleteAll().visible())
        #        this.browserDeleteAll().updateWindow();
        #
        #    this.browserCloseButton().updateWindow();
        #
        #    if (this.browserErrorTree().visible())
        #        this.browserErrorTree().updateWindow();
        #
        #    if (_emptyTmpInfolog)
        #        this.emptyTmpInfolog();
        #
        #    this.viewRefresh();
        #
        #    if (this.browserCurrentPicture().imageResource() != imageResource)
        #    {
        #        this.browserCurrentPicture().imageResource(imageResource);
        #        this.browserCurrentPicture().updateWindow();
        #    }
        #
        #    if ((treeItems>0 || hasPrefix) && this.browserCurrentError().text() != errorDescription)
        #    {
        #        this.browserCurrentError().text(errorDescription);
        #        this.browserCurrentError().updateWindow();
        #    }
        #    this.browserTopGroup().updateWindow();
        #
        #    if (!this.browser().design().visible())
        #    {
        #        this.browser().design().visible(true);
        #        this.browserErrorTree().updateWindow();
        #        this.browserCurrentError().updateWindow();
        #        this.browserCurrentPicture().updateWindow();
        #        this.browserDeleteAll().updateWindow();
        #        this.browserCloseButton().updateWindow();
        #        this.browserHelpButton().updateWindow();
        #        this.browserActionButton().updateWindow();
        #        this.browserTreeGroup().updateWindow();
        #        this.browserBottomGroup().updateWindow();
        #        this.browser().redraw();
        #    }
        #    tmpActionId[0] = 0; //clear array
        #    endLengthyOperation();
        #}
      ENDSOURCE
      SOURCE #viewCreateRuleDialog
        #public void viewCreateRuleDialog(FormRun _caller)
        #{
        #    ;
        #    EventRule::viewCreateRuleDialog(_caller);
        #}
      ENDSOURCE
      SOURCE #viewDelay
        #void viewDelay(boolean emptyTmpInfolog = true)
        #{
        #    InfologData infologData;
        #    ;
        #    updateCalled = false;
        #    infologData = this.infologData();
        #    this.viewBuild(infologData, emptyTmpInfolog);
        #}
      ENDSOURCE
      SOURCE #viewRefresh
        #void viewRefresh()
        #{
        #    #Resource
        #    #ResAppl
        #    #WinAPI
        #    #define.EM_GetLineCount(0x00BA)
        #
        #    if (!this.browserResizedOnce())
        #    {
        #        this.browserCloseButton().visible(false);
        #        this.browserDeleteAll().visible(false);
        #        this.browser().lock();
        #
        #        this.browserHelpButton().visible(false);
        #        this.browserActionButton().visible(false);
        #        this.browserErrorTree().visible(true);
        #        this.browserDeleteAll().visible(true);
        #        this.browserTreeGroup().visible(true);
        #        this.browserCloseButton().visible(true);
        #        this.browserDeleteAll().visible(true);
        #
        #        if (WinAPI::getWindowLong(this.browser().hWnd(),#GWL_STYLE) & #WS_MAXIMIZE == 0)
        #            this.browser().design().width(340);     //resize if we're not maximized
        #        this.browser().resetSize();
        #        this.browser().arrange();
        #        this.browser().redraw();
        #        this.browser().unLock();
        #        this.browser().redraw();
        #        this.browserResizedOnce(true);
        #    }
        #
        #    this.browserCloseButton().setFocus();
        #}
      ENDSOURCE
      SOURCE #viewUpdate
        #void viewUpdate()
        #{
        #    if (!this.canUpdateView())
        #        return;
        #
        #    this.viewDelay(false);
        #    if (!emptyTmpInfologCalled)
        #    {
        #        emptyTmpInfologCalled = true;
        #        this.setTimeOut(identifierstr(emptyTmpInfolog),1,true);
        #    }
        #}
      ENDSOURCE
      SOURCE #watchDog
        #void watchDog()
        #{
        #    int infologLine;
        #    this.setTimeOut(methodstr(Info,watchDog), #watchdogInterval, false);
        #
        #    infologLine = infologLine();
        #    try
        #    {
        #        SysUserLog::updateLogoutTime();
        #        SysUtilElementsLog::persistRegisteredUsages();
        #    }
        #    catch
        #    {
        #        //
        #        // Clean up any exception messages in the infolog, caused by logging.
        #        //
        #        this.clear(infologLine);
        #    }
        #}
      ENDSOURCE
      SOURCE #workspaceCache
        #SysGlobalCache workspaceCache(int workSpaceNum = xInfo::currentWorkspaceNum())
        #{
        #    SysGlobalCache workspaceCache;
        #;
        #    // Construct the singleton cache map object. This will hold a cache
        #    // object associated to each workspace window. The cache will be
        #    // cleaned up in the overriden method workspaceWindowDestroyed()
        #    if (!workspaceCacheMap)
        #    {
        #        workspaceCacheMap = new Map(Types::Integer, Types::Class);
        #    }
        #
        #    // Check if an existing cache is associated with the workspace
        #    if (workspaceCacheMap.exists(this.hWnd(workSpaceNum)))
        #    {
        #        workspaceCache = workspaceCacheMap.lookup(this.hWnd(workSpaceNum));
        #    }
        #    else
        #    {
        #        // construct a new cache and associate it with the current workspace
        #        workspaceCache = SysGlobalCache::construct();
        #        workspaceCacheMap.insert(this.hWnd(workSpaceNum), workspaceCache);
        #    }
        #
        #    return workspaceCache;
        #}
      ENDSOURCE
      SOURCE #workspaceWindowCreated
        #void workspaceWindowCreated(int _hWnd)
        #{
        #    super(_hWnd);
        #
        #    // Put workspace window specific initialization here.
        #
        #    // Update areas pages for Retail Essentials
        #    RetailSMB::UpdateAreaPages();
        #}
      ENDSOURCE
      SOURCE #workspaceWindowDestroyed
        #void workspaceWindowDestroyed(int _hWnd)
        #{
        #    FormRun tempWindow;
        #
        #    // Clean up the instance of infolog
        #    if (this.browser())
        #    {
        #        tempWindow = this.browser();
        #        this.browser(null);
        #        if (tempWindow.hWnd())
        #        {
        #            tempWindow.close();
        #        }
        #        tempWindow = null;
        #    }
        #
        #    // Clean up the breakpoint form
        #    if (this.breakpointForm())
        #    {
        #        tempWindow = this.breakpointForm();
        #        this.breakpointForm(null);
        #        if (tempWindow.hWnd())
        #        {
        #            tempWindow.close();
        #        }
        #        tempWindow = null;
        #    }
        #
        #    // This method is called when a workspace window is destroyed
        #    // here workspace related resources can be cleaned up
        #    if (workspaceCacheMap && workspaceCacheMap.exists(_hWnd))
        #    {
        #        // clean up the workspace cache object. This is created in the
        #        // workspaceCache() function.
        #        workspaceCacheMap.remove(_hWnd);
        #    }
        #
        #    super(_hWnd);
        #}
      ENDSOURCE
      SOURCE #xref
        #void xref(str _path, xRef _xRef)
        #{
        #    Map xRefCompileMap;
        #    Map xRefProperyMap;
        #    str className;
        #
        #    ;
        #    lastxRef = _xRef;
        #
        #    if (this.canUpdatexRef())
        #    {
        #        xRefCreate::xRefUpdate(_path);
        #    }
        #    else
        #    {
        #        // if xref information is from compiler add it to xRefCompilerMap else into xRefProperyMap
        #        if(XRefMode::COMPILE == _xRef.mode())
        #        {
        #            xRefCompileMap = infolog.globalCache().get(classstr(xRefUpdateTmpReferences), '', null);
        #            if(xRefCompileMap != null)
        #            {
        #                xRefCompileMap.insert(_path, _xRef);
        #            }
        #        }
        #        else
        #        {
        #            if(XRefMode::PROPERTY == _xRef.mode())
        #            {
        #                className = classstr(xRefUpdateTmpReferences);
        #                className = strins(className,#PropertyString,strlen(classname)+1);
        #                xRefProperyMap = infolog.globalCache().get(className, '', null);
        #                if(xRefProperyMap != null)
        #                {
        #                    xRefProperyMap.insert(_path, _xRef);
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkStartupCompany_Server
        #server static void checkStartupCompany_Server(str _curext, userId _curuseid)
        #{
        #    UserInfo userInfo;
        #
        #    if (!hasMenuItemAccess(menuitemdisplaystr(SysDataAreaSelect), MenuItemType::Display) ||
        #        !hasMenuItemAccess(menuitemdisplaystr(OMLegalEntities), MenuItemType::Display))
        #    {
        #        select firstonly Company from userInfo
        #            where userInfo.Id == curuserid();
        #
        #        if (userInfo.Company != curext())
        #        {
        #            appl.setDefaultCompany(userInfo.Company, false);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #con2xml
        #client server static XML con2xml(container _data)
        #{
        #    int j;
        #    Exception    exception;
        #    SysInfologMessageStruct struc;
        #    XmlDocument  doc = XmlDocument::newBlank();
        #    XmlElement   elem, e, e2;
        #    SysInfologEnumerator enum = SysInfologEnumerator::newData(_data);
        #    str          s;
        #
        #    elem = doc.createElement('infolog');
        #    doc.appendChild(elem);
        #
        #    while (enum.moveNext())
        #    {
        #        exception = enum.currentException();
        #        struc = SysInfologMessageStruct::construct(enum.currentMessage());
        #        e2 = elem;
        #        for (j=1; j<= struc.prefixDepth(); j++)
        #        {
        #            if (s)
        #                s = strrem(struc.preFixTextElement(j), ' ');
        #            else
        #                s = '_';
        #
        #            e = doc.createElement(s);
        #            e2.appendChild(e);
        #            e2 = e;
        #        }
        #        e = doc.createElement(strfmt('%1',exception));
        #        e2.appendChild(e);
        #        e.text(struc.message());
        #    }
        #
        #    return strrem(doc.xml(),'\n');
        #}
      ENDSOURCE
      SOURCE #directoryOnServer
        #/// <summary>
        #///    Gets a server side directory based on the directory type.
        #/// </summary>
        #/// <param name="_directoryType">
        #///    The directory type.
        #/// </param>
        #/// <returns>
        #///    The server side directory.
        #/// </returns>
        #public server static FilePath directoryOnServer(DirectoryType _directoryType)
        #{
        #    return xInfo::directory(_directoryType);
        #}
      ENDSOURCE
      SOURCE #infoCon2Str
        #client server static str infoCon2Str(container c)
        #{
        #    str s;
        #    SysInfologEnumerator enum = SysInfologEnumerator::newData(c);
        #
        #    while (enum.moveNext())
        #    {
        #        s+=strfmt('%1#%2#',int2str(enum.currentException()), enum.currentMessage());
        #    }
        #    return s;
        #}
      ENDSOURCE
      SOURCE #infoStr2Con
        #client server static container infoStr2Con(str s)
        #{
        #    container c;
        #    int i = strfind(s, '#', 1, strlen(s));
        #
        #    while (i)
        #    {
        #        c += substr(s, 1, i-1);
        #        s = substr(s, i+1, strlen(s));
        #        i = strfind(s, '#', 1, strlen(s));
        #    }
        #
        #    return c;
        #}
      ENDSOURCE
      SOURCE #licensedComUsers
        #static server int licensedComUsers()
        #{
        #    Dictionary  dictionary = new Dictionary();
        #    SysConfig   sysConfigTemp;
        #
        #    select firstOnly Id, Value, ConfigType from sysConfigTemp
        #        where sysConfigTemp.Id == licensecodenum(SysCOMUsers)  && (sysConfigTemp.ConfigType == ConfigType::AccessCodes);
        #
        #    return dictionary.testCode(sysConfigTemp.Id,
        #                               sysConfigTemp.Value,
        #                               xSysConfig::find(ConfigType::LicenseName,0).Value,
        #                               xSysConfig::find(ConfigType::SerialNo,0).Value,
        #                               xSysConfig::find(ConfigType::LicenseName,1).Value);
        #}
      ENDSOURCE
      SOURCE #licensedObjectServers
        #static server int licensedObjectServers()
        #{
        #    Dictionary  dictionary = new Dictionary();
        #    SysConfig   sysConfigTemp;
        #
        #    select firstOnly Id, Value, ConfigType from sysConfigTemp
        #        where sysConfigTemp.Id == licensecodenum(SysObjectServers)  && (sysConfigTemp.ConfigType == ConfigType::AccessCodes);
        #
        #    return dictionary.testCode(sysConfigTemp.Id,
        #                               sysConfigTemp.Value,
        #                               xSysConfig::find(ConfigType::LicenseName,0).Value,
        #                               xSysConfig::find(ConfigType::SerialNo,0).Value,
        #                               xSysConfig::find(ConfigType::LicenseName,1).Value);
        #}
      ENDSOURCE
      SOURCE #licensedUsers
        #static server int licensedUsers()
        #{
        #    Dictionary  dictionary = new Dictionary();
        #    SysConfig   sysConfigTemp;
        #
        #    select firstOnly Id, Value, ConfigType from sysConfigTemp
        #        where (sysConfigTemp.Id == licensecodenum(SysUsers)) && (sysConfigTemp.ConfigType == ConfigType::AccessCodes);
        #
        #    return dictionary.testCode(sysConfigTemp.Id,
        #                               sysConfigTemp.Value,
        #                               xSysConfig::find(ConfigType::LicenseName,0).Value,
        #                               xSysConfig::find(ConfigType::SerialNo,0).Value,
        #                               xSysConfig::find(ConfigType::LicenseName,1).Value);
        #}
      ENDSOURCE
      SOURCE #licensedUsersTotal
        #static server int licensedUsersTotal()
        #{
        #    return Info::licensedUsers()+Info::licensedComUsers();
        #}
      ENDSOURCE
      SOURCE #messageWinAddLine
        #client static void messageWinAddLine(str _messageLine)
        #{
        #    infolog.messageWin().addLine(_messageLine);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVPropertyMap unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVPropertyMap
    PROPERTIES
      Name                #DEVPropertyMap
      Origin              #{855FEAF8-6BE3-4CFB-B512-B79BAB0A1FD9}
      LegacyId            #50710
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DEVPropertyMap
        #{
        #    TreeNode    treeNode;
        #    str         treeNodeProperties;
        #    str         propLine;
        #    str         key, value;
        #    Map         propertyMap;
        #    int         lineCount;
        #    boolean     IsETDArray;
        #
        #    #define.edt("ExtendedDataType")
        #}
      ENDSOURCE
      SOURCE #debug_showPropertyMap
        #private void debug_showPropertyMap()
        #{
        #    MapIterator     mapIterator = new MapIterator(propertyMap);
        #    str             buffer;
        #
        #    while (mapIterator.more())
        #    {
        #      //  buffer += strfmt('%1 - %2', CIT_Dev::padr(mapIterator.key(), 25), mapIterator.value()) + '\n';
        #        mapIterator.next();
        #    }
        #
        #    info(buffer);
        #}
      ENDSOURCE
      SOURCE #extractPair
        #private void extractPair(boolean _alltrim = true)
        #{
        #    int     dividerPos = strscan(propLine, '#', 1, strlen(propLine));
        #
        #    ;
        #
        #    key   = substr(propLine, 1, dividerPos - 1);
        #    value = substr(propLine, dividerPos + 1, strlen(propline) - dividerPos);
        #
        #    if (_alltrim)
        #    {
        #        key   = strlrtrim(key);
        #        value = strlrtrim(value);
        #    }
        #}
      ENDSOURCE
      SOURCE #finalize
        #void finalize()
        #{
        #}
      ENDSOURCE
      SOURCE #getLine
        #private boolean getLine()
        #{
        #    propLine = strLine(treeNodeProperties, lineCount);
        #    lineCount++;
        #
        #    return propLine != '';
        #}
      ENDSOURCE
      SOURCE #getProperty
        #public str getProperty(str _propName)
        #{
        #    ;
        #
        #    return propertyMap.lookup(_propName);
        #}
      ENDSOURCE
      SOURCE #isPair
        #private boolean isPair()
        #{
        #    return this.isTokenFound('#');
        #}
      ENDSOURCE
      SOURCE #isTokenFound
        #private boolean isTokenFound(str _token)
        #{
        #    return strscan(propLine, _token, 1, strlen(propLine));
        #}
      ENDSOURCE
      SOURCE #new
        #void new(TreeNode _treeNode = null)
        #{
        #    ;
        #
        #    if (_treeNode != null)
        #    {
        #        treeNode           = _treeNode;
        #        treeNodeProperties = treeNode.AOTgetProperties();
        #        this.parse();
        #    }
        #}
      ENDSOURCE
      SOURCE #parse
        #private void parse()
        #{
        #    propertyMap = new Map(Types::STRING, Types::STRING);
        #    lineCount   = 0;
        #    IsETDArray  = false;
        #
        #    while (this.getLine())
        #    {
        #        if (this.isPair())
        #        {
        #            this.extractPair();
        #            propertyMap.insert(key, value);
        #        }
        #        else
        #        {
        #            // Свойство ExtendedDataType хранится в виде массива из двух элементов
        #            if (this.isTokenFound(#edt))
        #            {
        #                IsETDArray = true;
        #                // Добраться до первого элемента массива, откидывая все строки без символа '#'
        #                while (! this.isPair())
        #                {
        #                    this.getLine();
        #                }
        #
        #                this.extractPair();
        #                propertyMap.insert(#edt, value);
        #                // Отбросить все оставшиеся элементы массива
        #                while (this.isPair())
        #                {
        #                    this.getLine();
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #save
        #public void save()
        #{
        #    str newProps;
        #    lineCount   = 0;
        #
        #    while (this.getLine())
        #    {
        #        if (this.isPair())
        #        {
        #            this.extractPair(false);
        #            newProps += key + '#' + propertyMap.lookup(strlrtrim(key)) + '\n';
        #        }
        #        else
        #        {
        #            // Свойство ExtendedDataType хранится в виде массива из двух элементов
        #            if (this.isTokenFound(#edt))
        #            {
        #                newProps += propline + '\n';    // ExtendedDataType
        #                this.getLine();
        #                newProps += propline + '\n';    // ARRAY
        #                this.getLine();
        #                this.extractPair(false);
        #                newProps += key + '#' + propertyMap.lookup(#edt) + '\n';     //First array element
        #                this.getLine();
        #                newProps += propline + '\n';    // Second array element
        #                this.getLine();
        #                newProps += propline + '\n';    // ENDARRAY
        #            }
        #            else
        #            {
        #                newProps += propline + '\n';    // Any other lines
        #            }
        #        }
        #    }
        #
        #    newProps += '\n';
        #
        #    treeNode.AOTsetProperties(newProps);
        #    treeNode.AOTsave();
        #}
      ENDSOURCE
      SOURCE #setNode
        #public void setNode(TreeNode _treeNode)
        #{
        #    ;
        #
        #    treeNode           = _treeNode;
        #    treeNodeProperties = treeNode.AOTgetProperties();
        #
        #    this.parse();
        #}
      ENDSOURCE
      SOURCE #setProperty
        #public void setProperty(str _propName, str _propValue, boolean _autosave = false)
        #{
        #    propertyMap.remove(_propName);
        #    propertyMap.insert(_propName, _propValue);
        #    if (_autosave)
        #    {
        #        this.save();
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVCommentsTool unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVCommentsTool
    PROPERTIES
      Name                #DEVCommentsTool
      Origin              #{DCC59E9E-8355-4354-935B-F2E3822E891F}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//trud - comments tool
        #public class DEVCommentsTool
        #{
        #}
      ENDSOURCE
      SOURCE #forEach
        #str forEach(Map map, boolean _keyOnly = false, str _divider = ", ", str _keyPrefix = " _", str _keySuffix = "", boolean _repeatKeyAfterSuffix = false)
        #{
        #    MapIterator mapIterator = new MapIterator(map);
        #    boolean     firstField  = true;
        #    str         result;
        #
        #    while (mapIterator.more())
        #    {
        #
        #        result     += (firstField ? "" : _divider) +
        #                      (_keyOnly ? "" : any2str(mapIterator.value()) ) +
        #                      _keyPrefix +
        #                      (_repeatKeyAfterSuffix ? any2str(mapIterator.key()) : this.getVarName(mapIterator.key()) )+
        #                      _keySuffix +
        #                      (_repeatKeyAfterSuffix ? this.getVarName(mapIterator.key()) : "");
        #
        #        firstField  = false;
        #        mapIterator.next();
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #getFindRecIdSource
        #str getFindRecIdSource(str _path)
        #{
        #    treeNode        treeNode;
        #    str             res;
        #    str             tableName;
        #    Map             mapTypes = new Map(Types::String, Types::String);
        #    ;
        #    treeNode = TreeNode::findNode(_path);
        #    treeNode = SysTreeNode::getRootElement(treeNode);
        #    tableName = treeNode.AOTname();
        #
        #    mapTypes.insert('RecId', 'RecId');
        #
        #    res = this.getFindTemplate(tableName, mapTypes, 'findRecId');
        #
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #getFindTemplate
        #str getFindTemplate(str _tableName, Map _indexMap, str _methodName)
        #{
        #    str source;
        #    str tableNameVar = this.getVarName(_tableName);
        #    ;
        #    source  = 'static ' + _tableName + ' ' + _methodName + '(' + this.forEach(_indexMap) + ', boolean _forupdate = false)\n';
        #    source += '{\n';
        #    source += '    ' + _tableName + ' ' + tableNameVar + ';\n';
        #    source += '    ;\n';
        #    source += '    if (' + this.forEach(_indexMap, true, ' || ') + ')\n';
        #    source += '    {\n';
        #    source += '        ' + tableNameVar + '.selectForUpdate(_forupdate);\n';
        #    source += '        select ' + tableNameVar + ' where \n' + strrep(' ', 12) +
        #                                  this.forEach(_indexMap, true, ' &&\n' + strrep(' ', 12), tableNameVar + '.' ,' == _', true) + ';\n';
        #    source += '    }\n';
        #    source += '    return ' + tableNameVar + ';\n';
        #    source += '}\n';
        #
        #    return source;
        #}
      ENDSOURCE
      SOURCE #getVarName
        #str getVarName(str _name)
        #{
        #    str res;
        #    ;
        #    res = strLwr(subStr(_name, 1, 1)) + subStr(_name, 2, strLen(_name));
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #runSysContextMenu
        #void runSysContextMenu(SysContextMenu _sysContextMenu)
        #{
        #    TreeNode contextNode = _sysContextMenu.first();
        #    TreeNode checkNode;
        #    str  projName;
        #    ;
        #
        #    projName           = conpeek(DEVCommentsTool::getCurrent(), 3);
        #
        #    if (! projName)
        #    {
        #        return;
        #    }
        #
        #    while (contextNode)
        #    {
        #        checkNode = TreeNode::findNode(contextNode.treeNodePath()); // find the same node, on the server
        #        if (!checkNode)
        #        {
        #            checkNode = contextNode;   // in few situations, we can't find the node, so use the original
        #        }
        #        setPrefix(checkNode.treeNodePath());
        #
        #        DEVCommentsTool::add2Project(checkNode.treeNodePath(), projName);
        #
        #        contextNode = _sysContextMenu.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #add2Project
        #static void add2Project(str _path, str _projectName, boolean _doGrouping = true)
        #{
        #    UtilIdElements  uu;
        #    //SysTreeNode     sysTreeNode;
        #    treeNode        treeNode;
        #    boolean         projectNodeFound;
        #    int             i;
        #    UserInfo        userInfo;
        #
        #
        #
        #    boolean elementExistInProject(ProjectNode       _projectNode2,
        #                                  UtilElementType   _elementType,
        #                                  Name              _elementName)
        #    {
        #       // boolean                     projectNodeFound;
        #
        #
        #        projectNodeFound = DEVCommentsTool::checkForProject(_projectNode2.getRunNode().AOTiterator(), _elementType, _elementName);
        #        return projectNodeFound;
        #    }
        #
        #    void add2ProjectNode(UtilElementType   _elementType,
        #                         Name              _elementName)
        #    {
        #        SysProjectFilterRunBase     sysProjectFilterRunBase;
        #        ProjectNode                 projectNode;
        #        ;
        #        projectNode = infolog.projectRootNode();
        #        projectNode = projectNode.AOTfirstChild();  //Private projects
        #        projectNode = projectNode.AOTnextSibling(); //Shared projects
        #
        #        projectNode = projectNode.AOTfindChild(_projectName);
        #        if(projectNode)
        #        {
        #            projectNode = projectNode.getRunNode();
        #            if(!elementExistInProject(projectNode,_ElementType,_ElementName))
        #            {
        #                SysProjectFilterRunBase = new SysProjectFilterRunBase();
        #                SysProjectFilterRunBase.parmProjectNode(ProjectNode);
        #                SysProjectFilterRunBase.grouping((! _doGrouping) ? SysProjectGrouping::None : SysProjectGrouping::AOT);
        #
        #                switch (_ElementName)
        #                {
        #                    case classstr(Info):
        #                    case classstr(Session):
        #                    case classstr(Application):
        #                    case classstr(Company):
        #                    case classstr(Site):
        #                    case classstr(ClassFactory):
        #                    case classstr(Global):
        #                    case classstr(VersionControl):
        #                        SysProjectFilterRunBase.doUtilElements(xUtilElements::find(UtilElementType::ClassInstanceMethod,'ClassDeclaration', Global::className2Id(_ElementName)));
        #                    default:
        #                        SysProjectFilterRunBase.doUtilElements(xUtilElements::find(_ElementType, _ElementName));
        #                        break;
        #                }
        #
        #                SysProjectFilterRunBase.doUtilElements(xUtilElements::find(_ElementType,_ElementName));
        #                SysProjectFilterRunBase.write();
        #                projectNode.AOTsave();
        #            }
        #        }
        #        else
        #        {
        #            warning(strFmt('Project %1 not found', _projectName));
        #        }
        #
        #    }
        #
        #
        #    UtilIdElements findTreeNode(TreeNode _treeNode)
        #    {
        #        UtilIdElements utilElements;
        #        UtilIdElements utilElementsFromNode;
        #        TreeNode     utilNode = _treeNode;
        #
        #        while (utilNode && !utilNode.utilIdElement().name)
        #        {
        #            utilNode = utilNode.AOTparent();
        #            utilElementsFromNode = utilNode.utilIdElement();
        #        }
        #
        #        if (utilNode)
        #        {
        #            utilElementsFromNode = utilNode.utilIdElement();
        #
        #            select firstonly utilElements
        #                where utilElements.Name         == utilElementsFromNode.Name         &&
        #                      utilElements.Id           == utilElementsFromNode.Id           &&
        #                      utilElements.RecordType   == utilElementsFromNode.RecordType   &&
        #                      utilElements.ParentId     == utilElementsFromNode.ParentId     &&
        #                      utilElements.UtilLevel    == utilElementsFromNode.UtilLevel;
        #
        #            return utilElements;
        #        }
        #
        #        return null;
        #    }
        #
        #
        #    if (_projectName)
        #    {
        #
        #        treeNode = TreeNode::findNode(_path);
        #        if (! treeNode)
        #        {
        #            for (i = strLen(_path); i > 5; i--)
        #            {
        #                if (subStr(_path, i , 1) == @'\')
        #                {
        #                    _path = subStr(_path, 1, i - 1);
        #                    treeNode = TreeNode::findNode(_path);
        #                    break;
        #                }
        #            }
        #        }
        #        treeNode = SysTreeNode::getRootElement(treeNode);
        #        uu = findTreeNode(treeNode);
        #
        #        add2ProjectNode(uu.recordType, uu.name);
        #        select userInfo
        #            where userInfo.id == curUserId();
        #        if (userInfo.startupProject != _projectName)
        #        {
        #            if (Box::yesNo(strFmt('Set current project to %1?', _projectName), DialogButton::Yes) == DialogButton::Yes)
        #            {
        #                ttsBegin;
        #                select forUpdate userInfo
        #                    where userInfo.id == curUserId();
        #                userInfo.startupProject = _projectName;
        #                userInfo.update();
        #                ttsCommit;
        #            }
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #checkForProject
        #static boolean checkForProject(TreeNodeIterator   _treeNodeIterator,
        #                        UtilElementType    _elementType,
        #                        Name               _elementName)
        #{
        #    ProjectNode             //projectNode,
        #                    projectNodeLocal;
        #    //TreeNodeIterator        TreeNodeIterator;
        #    //UtilElements            UE;
        #    boolean                 projectNodeFound;
        #
        #
        #
        #    projectNodeLocal = _TreeNodeIterator.next();
        #    while(projectNodeLocal && !projectNodeFound)
        #    {
        #        if(!(projectNodeLocal.treeNodeType().isUtilElement() && projectNodeLocal.utilIdElement().name))//applObjectType())
        #            projectNodeFound = DEVCommentsTool::checkForProject(projectNodeLocal.AOTiterator(), _elementType, _elementName);
        #        else
        #        {
        #            if(projectNodeLocal.utilIdElement().recordType == _elementType && //applObjectType()    == _elementType &&
        #                projectNodeLocal.treeNodeName()      == _elementName)
        #                projectNodeFound = true;
        #        }
        #        projectNodeLocal = _TreeNodeIterator.next();
        #    }
        #    return projectNodeFound;
        #}
      ENDSOURCE
      SOURCE #getCurrent
        #static container getCurrent(boolean _isTmp = false)
        #{
        #    container c;
        #    ;
        #
        #    //c = ['DEV-345', 'PO Address from WH for Handheld Orders', 'DEV345_POAddressFromWH'];
        #    c = ['DEV-505', 'Clean out CRM Log file', 'DEV505_ClearCRMLog'];
        #
        #
        #    return c;
        #}
      ENDSOURCE
      SOURCE #isSuperUser
        #static boolean isSuperUser()
        #{
        #    //add users for comment tool here
        #    return (curuserid() == 'Eclipse'
        #        //||  curuserid() == 'Admin'
        #         );
        #}
      ENDSOURCE
      SOURCE #main
        #static void main(Args args)
        #{
        #    DEVCommentsTool     commentsTool = new DEVCommentsTool();
        #
        #    if (SysContextMenu::startedFrom(args))
        #    {
        #        commentsTool.runSysContextMenu(args.parmObject());
        #    }
        #}
      ENDSOURCE
      SOURCE #openCommentSetup
        #static void openCommentSetup()
        #{
        #    ;
        #    SysUtil::editPathLogicalPos(@'\Classes\DEVCommentsTool\getCurrent',1000,8);
        #}
      ENDSOURCE
      SOURCE #openCurProject
        #static void openCurProject()
        #{
        #    str                         projName;
        #    ProjectNode                 projectNode;
        #    ;
        #
        #    projName           = conpeek(DEVCommentsTool::getCurrent(), 3);
        #
        #    if (! projName)
        #    {
        #        return;
        #    }
        #
        #    projectNode = infolog.projectRootNode();
        #    projectNode = projectNode.AOTfirstChild();  //Private projects
        #    projectNode = projectNode.AOTnextSibling(); //Shared projects
        #
        #    projectNode = projectNode.AOTfindChild(projName);
        #
        #    if(projectNode)
        #    {
        #        projectNode = projectNode.getRunNode();
        #        projectNode.AOTnewWindow();
        #    }
        #
        #
        #}
      ENDSOURCE
      SOURCE #processCheckInForm
        #static void processCheckInForm(FormRun  _sysVersionControlCheckIn)
        #{
        #    FormStringControl           fsc;
        #    str                         projName;
        #    ;
        #
        #    if (DEVCommentsTool::isSuperUser())
        #    {
        #        projName           = conpeek(DEVCommentsTool::getCurrent(), 3);
        #
        #        fsc = _sysVersionControlCheckIn.design().controlName('Comment');
        #        if (fsc && fsc.visible())
        #        {
        #            fsc.text(projName);
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #processSaveTaskForm
        #static void processSaveTaskForm(FormRun  _sysVersionControlCheckIn)
        #{
        #    FormStringControl           fsc;
        #    str                         projName;
        #    ;
        #
        #    if (DEVCommentsTool::isSuperUser())
        #    {
        #        projName           = conpeek(DEVCommentsTool::getCurrent(), 1);
        #
        #        fsc = _sysVersionControlCheckIn.design().controlName('TaskNameEdit');
        #        if (fsc && fsc.visible())
        #        {
        #            fsc.text(strFmt('%1Testing', projName));
        #        }
        #    }
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVDevImportExcelTemplate unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVDevImportExcelTemplate
    PROPERTIES
      Name                #DEVDevImportExcelTemplate
      Extends             #RunBase
      Origin              #{D50CCB18-8CF0-4F6C-A328-CAD12FA1E857}
    ENDPROPERTIES
    
    METHODS
      SOURCE #afterImport
        #void afterImport()
        #{
        #    ;
        #    info(strFmt("%1 records imported", importedLineCount));
        #}
      ENDSOURCE
      SOURCE #checkStringLen
        #boolean checkStringLen(str _value, tableid _tableId, fieldid _fieldid)
        #{
        #    boolean res = true;
        #    DictTable dt = new DictTable(_tableId);
        #    DictField   df = new DictField(_tableId, _fieldid);
        #    ;
        #    if (strLen(_value) >  df.stringLen())
        #    {
        #        throw error(strFmt("Значение в поле '%1' - '%2' превышает максимально допустимую длину %3",
        #                           df.label(),  _value, df.stringLen()));
        #    }
        #    return res;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class DEVDevImportExcelTemplate extends RunBase
        #{
        #    FilenameOpen           filenameOpen;
        #    Line                   fromLine;
        #    Line                   toLine;
        #
        #    DialogField            dlgFilenameOpen;
        #    DialogField            dlgFromLine;
        #    DialogField            dlgToLine;
        #
        #    int                   importedLineCount;
        #
        #
        #    #define.CurrentVersion(1)
        #    #localmacro.CurrentList
        #        filenameOpen,
        #        fromLine,
        #        toLine
        #    #endmacro
        #}
        #
      ENDSOURCE
      SOURCE #dialog
        #public Object dialog()
        #{
        #    DialogRunbase       dialog = super();
        #    ;
        #
        #    dlgFilenameOpen            = dialog.addFieldValue(extendedtypestr(FilenameOpen), filenameOpen, "File name", "File path and name.");
        #    dlgFilenameOpen.mandatory_RU(true);
        #    dlgFromLine                = dialog.addFieldValue(extendedtypestr(Line), fromLine, "From line", "From line");
        #    dlgFromLine.mandatory_RU(true);
        #    dlgToLine                  = dialog.addFieldValue(extendedtypestr(Line), toLine, "To line(0 - all)", "To line(0 - all)");
        #
        #    return dialog;
        #}
        #
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    ;
        #
        #    filenameOpen       = dlgFilenameOpen.value();
        #    fromLine           = dlgFromLine.value();
        #    toLine             = dlgToLine.value();
        #
        #    return super();
        #}
        #
      ENDSOURCE
      SOURCE #getValue
        #anytype getValue(Map _cellsMap, int _idx, Types _types)
        #{
        #    OXMLCell_RU cell;
        #    anytype     res = nullValueFromType(_types);
        #    str         s;
        #    int64       intVal;
        #    real        r;
        #    date        d;
        #
        #    DocumentFormat.OpenXml.Spreadsheet.Cell cc;
        #    DocumentFormat.OpenXml.Spreadsheet.CellValue cv;
        #
        #    if (_cellsMap.exists(_idx))
        #    {
        #        cell = _cellsMap.lookup(_idx);
        #
        #        switch (_types)
        #        {
        #            case Types::Integer:
        #            case Types::Int64:
        #                s = cell.getValue();
        #                cc = cell.cell();
        #                cv = CC.get_CellValue();
        #                s =cv.get_InnerText();
        #                s = strReplace(s, ' ', '');
        #                intVal = str2int64(s);
        #                res = intVal;
        #                break;
        #            case Types::Real:
        #                s = cell.getValue();
        #                cc = cell.cell();
        #                cv = CC.get_CellValue();
        #                s =cv.get_InnerText();
        #                s = strReplace(s, ',', '.');
        #                s = strReplace(s, ' ', '');
        #                r = str2num(s);
        #                res = r;
        #                break;
        #            case Types::Date:
        #                s = cell.getValue();
        #                d = dateNull();
        #                if (str2int(s) > 10000)
        #                {
        #                    d = dateNull() + (str2int(s) - 2);
        #                }
        #                res = d;
        #                break;
        #
        #            //case Types::UtcDateTime:
        #            //    break;
        #
        #            default :
        #                s = cell.getValue();
        #                res = s;
        #
        #        }
        #
        #    }
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #initParmDefault
        #public void initParmDefault()
        #{
        #    ;
        #
        #    super();
        #
        #    fromLine = 2;
        #}
        #
      ENDSOURCE
      SOURCE #loadExcel
        #private void loadExcel()
        #{
        #    XMLExcelDocument_RU excelDocument;
        #    OXMLWorkbook_RU workbook;
        #    MapEnumerator worksheetsEnumerator;
        #    OXMLWorksheet_RU worksheet;
        #    Map rows;
        #    MapEnumerator rowsEnumerator;
        #    OXMLRow_RU row;
        #    Map cellsMap;
        #    int rowCnt;
        #    boolean ok = true;
        #
        #    int startRow = fromLine;
        #
        #
        #    setPrefix(RunBase::getDescription(classIdGet(this)));
        #    try
        #    {
        #
        #        excelDocument = XMLExcelDocument_RU::newFromFile(filenameOpen, "", false);
        #
        #        workbook = excelDocument.workbook();
        #        worksheetsEnumerator = workbook.worksheets().getEnumerator();
        #
        #        if (worksheetsEnumerator.moveNext())
        #        {
        #            worksheet = worksheetsEnumerator.currentValue();
        #        }
        #
        #        rows = worksheet.rows();
        #
        #        rowCnt = rows.elements();
        #
        #        this.progressInit(RunBase::getDescription(classIdGet(this)),
        #                          rowCnt,
        #                          #AviSearch);
        #
        #
        #
        #        rowsEnumerator = rows.getEnumerator();
        #
        #        while (startRow > 1)
        #        {
        #            rowsEnumerator.moveNext();
        #
        #            startRow--;
        #        }
        #
        #        while (rowsEnumerator.moveNext())
        #        {
        #            progress.incCount();
        #
        #            row = rowsEnumerator.currentValue();
        #
        #            cellsMap = row.cells();
        #
        #            setPrefix(strFmt("Row %1", row.rowIndex()));
        #
        #            try
        #            {
        #                if (! this.processLineData(cellsMap))
        #                {
        #                    break;
        #                }
        #            }
        #            catch (Exception::Error)
        #            {
        #                //ok = checkFailed("Error reading line");
        #                continue;
        #            }
        #        }
        #        this.afterImport();
        #
        #        excelDocument.closeDocument(false);
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        error(AifUtil::getClrErrorMessage());
        #    }
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    ;
        #
        #    return [#CurrentVersion, #CurrentList];
        #}
        #
      ENDSOURCE
      SOURCE #parmFilenameOpen
        #public FilenameOpen parmFilenameOpen(FilenameOpen _filenameOpen = filenameOpen)
        #{
        #    ;
        #
        #    filenameOpen = _filenameOpen;
        #
        #    return filenameOpen;
        #}
        #
      ENDSOURCE
      SOURCE #parmFromLine
        #public Line parmFromLine(Line _fromLine = fromLine)
        #{
        #    ;
        #
        #    fromLine = _fromLine;
        #
        #    return fromLine;
        #}
        #
      ENDSOURCE
      SOURCE #parmToLine
        #public Line parmToLine(Line _toLine = toLine)
        #{
        #    ;
        #
        #    toLine = _toLine;
        #
        #    return toLine;
        #}
        #
      ENDSOURCE
      SOURCE #processLineData
        #boolean processLineData(Map _cellsMap)
        #{
        #    boolean  isContinue = true;
        #    ItemId itemId;
        #    TransDate  transDate;
        #    CostAmount costValue;
        #
        #    ;
        #    transDate = this.getValue(_cellsMap, 2, Types::Date);
        #    itemId = this.getValue(_cellsMap, 3, Types::String);
        #    if (!itemId)
        #    {
        #        isContinue = false;
        #    }
        #    info(strFmt("%1 %2", transDate, itemId));
        #
        #    return isContinue;
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    ;
        #
        #    this.loadExcel();
        #}
        #
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container _packedClass)
        #{
        #    Version    version = RunBase::getVersion(_packedClass);
        #    ;
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList] = _packedClass;
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #construct
        #public static DEVDevImportExcelTemplate construct()
        #{
        #    return new DEVDevImportExcelTemplate();
        #}
      ENDSOURCE
      SOURCE #description
        #static ClassDescription description()
        #{
        #    ;
        #
        #    return "Import from excel template";
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    DEVDevImportExcelTemplate    runObject = DEVDevImportExcelTemplate::construct();
        #    ;
        #
        #    if (runObject.prompt())
        #    {
        #        runObject.run();
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVWizard unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVWizard
    PROPERTIES
      Name                #DEVWizard
      Origin              #{EEE37E5A-8D2E-4F16-AE23-B0C54E032A30}
      LegacyId            #50720
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DEVWizard
        #{
        #    #AOT
        #    #Properties
        #}
      ENDSOURCE
      SOURCE #addFieldToGroupByExample
        #static void addFieldToGroupByExample(TreeNode _tableNode, str _fieldname, str _searchfield)
        #{
        #    TreeNode            groupNode;
        #    TreeNodeIterator    treeNodeIterator = infolog.findNode(_tableNode.treeNodePath() + '\\Field Groups').AOTiterator();
        #
        #    ;
        #
        #    groupNode = treeNodeIterator.next();
        #
        #    while (groupNode)
        #    {
        #        if (groupNode.AOTfindChild(_searchfield))
        #        {
        #            DEVWizard::assert(! groupNode.AOTfindChild(_fieldname),
        #                strfmt("@CIT72", funcname(), _fieldname, groupnode.treeNodeName()));
        #
        #            groupNode.AOTadd(_fieldName);
        #        }
        #        groupNode = treeNodeIterator.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #aotElement_addMethod
        #public static MemberFunction aotElement_addMethod(TreeNode _AOTelement, str _methodName, str _source, boolean _isStatic = false, boolean _findMethods = true, boolean _overwrite = false)
        #{
        #    TreeNode        methodsNode    = _findMethods ? infolog.findNode(_AOTelement.treeNodePath() + '\\Methods') : _AOTelement;
        #    MemberFunction  memberFunction = methodsNode.AOTfindChild(_methodName);
        #
        #    ;
        #
        #    DEVWizard::assert(_overwrite || ! memberFunction, strfmt("@CIT118135", _methodName));
        #
        #    if (memberFunction)
        #    {
        #        memberFunction.AOTdelete();
        #        _AOTelement.AOTsave();
        #    }
        #
        #    methodsNode.AOTadd(_methodName);
        #    memberFunction = methodsNode.AOTfindChild(_methodName);
        #    memberFunction.AOTsetSource(_source, _isStatic);
        #    memberFunction.AOTsave();
        #    memberFunction.AOTcompile();
        #    memberFunction.AOTrestore();
        #
        #    return memberFunction;
        #}
      ENDSOURCE
      SOURCE #assert
        #static void assert(anytype _condition, str _message)
        #{
        #    if (! _condition)
        #        throw error(_message);
        #}
      ENDSOURCE
      SOURCE #buildClassId2classId
        #public static classid buildClassId2classId(classid _classId)
        #{
        #    switch (_classId)
        #    {
        #        case classNum(FormBuildStaticTextControl):
        #            return classNum(FormStaticTextControl);
        #        case classnum(FormBuildStringControl):
        #            return classnum(FormStringControl);
        #        case classnum(FormBuildTabControl):
        #            return classNum(FormTabControl);
        #        case classnum(FormBuildCheckBoxControl):
        #            return classNum(FormCheckBoxControl);
        #        case classnum(FormBuildGroupControl):
        #            return classnum(FormGroupControl);
        #        case classNum(FormBuildButtonControl):
        #            return classNum(FormButtonControl);
        #        case classNum(FormBuildRealControl):
        #            return classNum(FormRealControl);
        #        case classNum(FormBuildIntControl):
        #            return classNum(FormIntControl);
        #        case classNum(FormBuildComboBoxControl):
        #            return classNum(FormComboBoxControl);
        #        case classNum(FormBuildWindowControl):
        #            return classNum(FormWindowControl);
        #        case classNum(FormBuildDateControl):
        #            return classNum(FormDateControl);
        #        case classNum(FormBuildGridControl):
        #            return classNum(FormGridControl);
        #        case classNum(FormBuildRadioControl):
        #            return classNum(FormRadioControl);
        #        case classNum(FormBuildButtonGroupControl):
        #            return classNum(FormButtonGroupControl);
        #        case classNum(FormBuildTabPageControl):
        #            return classNum(FormTabPageControl);
        #        case classNum(FormBuildCommandButtonControl):
        #            return classNum(FormCommandButtonControl);
        #        case classNum(FormBuildMenuButtonControl):
        #            return classNum(FormMenuButtonControl);
        #        case classNum(FormBuildFunctionButtonControl):
        #            return classNum(FormFunctionButtonControl);
        #        case classNum(FormBuildListBoxControl):
        #            return classNum(FormListBoxControl);
        #        case classNum(FormBuildTimeControl):
        #            return classNum(FormTimeControl);
        #        case classNum(FormBuildTableControl):
        #            return classNum(FormTableControl);
        #        case classNum(FormBuildButtonSeparatorControl):
        #            return classNum(FormButtonSeparatorControl);
        #        case classNum(FormBuildTreeControl):
        #            return classNum(FormTreeControl);
        #        case classNum(FormBuildActiveXControl):
        #            return classNum(FormActiveXControl);
        #        case classNum(FormBuildListControl):
        #            return classNum(FormListControl);
        #        case classNum(FormBuildProgressControl):
        #            return classNum(FormProgressControl);
        #        case classNum(FormBuildAnimateControl):
        #            return classNum(FormAnimateControl);
        #        case classNum(FormBuildHTMLControl):
        #            return classNum(FormHTMLControl);
        #    }
        #
        #    throw error(strFmt("@SYS18598",funcName()));
        #}
      ENDSOURCE
      SOURCE #checkNameExist
        #static boolean checkNameExist(IdentifierName _identifierName, str _elementName, container _pathes = [#TablesPath, #ExtendedDataTypesPath, #ClassesPath])
        #{
        #    int     pathCnt = conlen(_pathes);
        #    int     pathIdx;
        #    boolean exist;
        #
        #    if (_identifierName)
        #    {
        #        for (pathIdx = 1; pathIdx <= pathCnt; pathIdx++)
        #        {
        #            exist = TreeNode::findNode(conpeek(_pathes, pathIdx) + '\\' + _identifierName) && true;
        #            if (exist)
        #            {
        #                break;
        #            }
        #        }
        #
        #        if (exist)
        #        {
        #            warning(strfmt("@CIT74", _elementName,_identifierName));
        #        }
        #    }
        #    else
        #    {
        #        exist = true;
        #    }
        #
        #    return exist;
        #}
      ENDSOURCE
      SOURCE #createGroup
        #public static ProjectNode createGroup(TreeNode _parent, GroupNodeType _type, str _name = "")
        #{
        #    DEVPropertyMap propertyMap;
        #    ProjectNode        groupNode;
        #    str                groupType;
        #
        #    ;
        #
        #    if (_parent.AOTtypeStr() != 'PRN' && _parent.AOTtypeStr() != 'PGR')
        #    {
        #        throw error(strfmt("@CIT75", funcname()));
        #    }
        #
        #    groupType = enum2str(_type);
        #    _name     = _name ? _name : groupType;
        #    _parent.AOTadd(_name);
        #    groupNode = _parent.AOTfindChild(_name);
        #
        #    propertyMap = new DEVPropertyMap(groupNode);
        #    propertyMap.setProperty('ProjectGroupType', groupType, true);
        #
        #    return groupNode;
        #}
      ENDSOURCE
      SOURCE #ctrlId2treeNode
        #static TreeNode ctrlId2treeNode(Form _form, int _ctrlId)
        #{
        #    return TreeNode::findNode(DEVWizard::ctrlId2treeNodePath(_form, _ctrlId));
        #}
      ENDSOURCE
      SOURCE #ctrlId2treeNodePath
        #static TreeNodePath ctrlId2treeNodePath(Form _form, int _ctrlId)
        #{
        #    #AOT
        #
        #    return #FormsPath + '\\' + _form.treeNodeName() + '\\designs\\design' + DEVWizard::getParent(_form, _ctrlId);
        #}
      ENDSOURCE
      SOURCE #edt_addRefDataSet
        #client public static void edt_addRefDataSet(TreeNode _edtNode, str _table, str _field)
        #{
        #    #Winapi
        #    #file
        #
        #    TextBuffer  textBuffer   = new TextBuffer();
        #
        #    str         filename;
        #    str         inputText, outputText;
        #    str         line;
        #    int         lineCount;
        #    int         i;
        #    int         importId;
        #    boolean     updated;
        #    str         name = _edtNode.treeNodeName();
        #    ;
        #
        #    filename = WinApi::getFolderPath(#CSIDL_INTERNET_CACHE) + '\\AxaptaExport_' + name + #xpo;
        #    _edtNode.treeNodeExport(filename);
        #
        #    textBuffer.fromFile(filename);
        #
        #    inputText   = textBuffer.getText();
        #    lineCount   = textBuffer.numLines();
        #
        #    for (i = 0; i < lineCount; i++)
        #    {
        #        line = strline(inputText, i);
        #        outputText += line + '\n';
        #        if (! updated && strscan(line, 'TYPEREFERENCES', 1, strlen(line)))
        #        {
        #            outputText += '      TYPEREFERENCETYPE DATASET\n';
        #            outputText += '      PROPERTIES\n';
        #            outputText += '        Table               #' + _table + '\n';
        #            outputText += '        RelatedField        #' + _field + '\n';
        #            outputText += '      ENDPROPERTIES\n\n';
        #            updated = true;
        #        }
        #    }
        #    textBuffer.setText(outputText);
        #    textBuffer.toFile(filename);
        #    textBuffer.regularExpressions(false);
        #    textBuffer.find('***');
        #
        #    importId = infolog.startImport(filename, 0);
        #    infolog.importElement(importId, 0, UtilElementType::ExtendedType, name, textBuffer.matchPos(), 4);
        #    infolog.endImport(importId, 0);
        #}
      ENDSOURCE
      SOURCE #edt_addRefTable
        #client public static void edt_addRefTable(TreeNode _edtNode, str _table, str _field)
        #{
        #    DEVPropertyMap propertyMap  = new DEVPropertyMap();
        #    ;
        #    propertyMap.setNode(_edtNode);
        #
        #    propertyMap.setProperty('ReferenceTable',   _table, true);
        #    _edtNode.AOTsave();
        #}
      ENDSOURCE
      SOURCE #getBaseType
        #public static Types getBaseType(identifiername _typename)
        #{
        #    return new DictType(new Dictionary().typename2id(_typename)).baseType();
        #}
      ENDSOURCE
      SOURCE #getIndexStructure
        #static Map getIndexStructure(TableId _tableId, IndexId _indexId)
        #{
        #    Map                 indexMap        = new Map(Types::STRING, Types::STRING);
        #    DictTable           dictTable       = new DictTable(_tableId);
        #    DictIndex           primaryIndex    = new DictIndex(_tableId, _indexId);
        #    DictField           indexField;
        #    int                 fieldCnt;
        #    int                 fieldIdx;
        #    ;
        #
        #    fieldCnt = primaryIndex.numberOfFields();
        #
        #    for (fieldIdx = 1; fieldIdx <= fieldCnt; fieldIdx++)
        #    {
        #        indexField = new DictField(_tableId, primaryIndex.field(fieldIdx));
        #        DEVWizard::assert(indexField.typeId() || indexField.enumId(),
        #            strfmt("@CIT76", funcname(), indexField.name(), tableid2name(_tableId)));
        #
        #        indexMap.insert(indexField.name(), indexField.typeId() ? extendedTypeId2name(indexField.typeId()) : enumId2Name(indexField.enumId()));
        #    }
        #    return indexMap;
        #}
      ENDSOURCE
      SOURCE #getParent
        #static  TreeNodePath getParent(Form _form, int _id)
        #{
        #    Object          fbc;
        #    TreeNodePath    subNodePath;
        #
        #    if (! _id)
        #    {
        #        return '';
        #    }
        #    fbc = _form.design().control(_id);
        #
        #    subNodePath = sysFormRun::controlTypeStr(DEVWizard::buildClassId2classId(classidget(fbc))) + ':' + fbc.name();
        #
        #    if (fbc.isContainer())
        #    {
        #        subNodePath = strFmt('[%1]', subNodePath);
        #    }
        #    return DEVWizard::getParent(_form, fbc.containerId()) + '\\' + subNodePath;
        #}
      ENDSOURCE
      SOURCE #getWizardResults
        #public static ProjectNode getWizardResults()
        #{
        #    #define.projectName('Wizard_Results')
        #    TreeNode        treeNode = infolog.projectRootNode().AOTfindChild('Private');
        #    ProjectNode     project = treeNode.AOTfindChild(#projectName);
        #
        #    ;
        #
        #    if (! project)
        #    {
        #        treeNode.AOTadd(#projectName);
        #        project = treeNode.AOTfindChild(#projectName);
        #    }
        #
        #    return project.getRunNode();
        #}
      ENDSOURCE
      SOURCE #index_addField
        #public static TreeNode index_addField(TreeNode _index, str _fieldname)
        #{
        #    ;
        #
        #    DEVWizard::assert(! _index.AOTfindChild(_fieldname),
        #        strfmt("@CIT72", funcname(), _fieldname, _index.treeNodePath()));
        #
        #    _index.AOTadd(_fieldname);
        #
        #    return _index.AOTfindChild(_fieldname);
        #}
      ENDSOURCE
      SOURCE #isObjectNameValid
        ##Characters
        #public static boolean isObjectNameValid(str _name)
        #{
        #    DictType    dictType = new DictType(extendedtypenum(identifiername));
        #    str 1       c;
        #    int         len = strlen(_name);
        #    int         i;
        #    boolean     ok = (len > 0) && (len <= dictType.stringLen());
        #
        #    boolean isAlpha(str 1 _c)
        #    {
        #        return (_c >= #a && _c <= #z) || (_c >= #capitalA && _c <= #capitalZ);
        #    }
        #    boolean isDigit(str 1 _c)
        #    {
        #        return (_c >= #0 && _c <= #9);
        #    }
        #
        #    if (ok)
        #    {
        #        ok = isAlpha(substr(_name, 1, 1));
        #        if (ok)
        #        {
        #            for (i = 2; i <= len; i++)
        #            {
        #                c = substr(_name, i, 1);
        #                ok = (isAlpha(c) || isDigit(c) || c == '_') && ok;
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #reexportNode
        #client public static void reexportNode(TreeNode _treeNode)
        #{
        #    #Winapi
        #    #file
        #    int         importId;
        #    str         filename    = WinApi::getFolderPath(#CSIDL_INTERNET_CACHE) + '\\AxaptaExport_' + _treeNode.treeNodeName() + #xpo;
        #    TextBuffer  textBuffer  = new TextBuffer();
        #
        #    _treeNode.treeNodeExport(filename);
        #
        #    textBuffer.fromFile(filename);
        #    textBuffer.regularExpressions(false);
        #    textBuffer.find('***');
        #
        #    importId = infolog.startImport(filename, 0);
        #    infolog.importElement(importId, 0, _treeNode.utilElement().RecordType, _treeNode.treeNodeName(), textBuffer.matchPos(), 4);
        #    infolog.endImport(importId, 0);
        #}
      ENDSOURCE
      SOURCE #table_addField
        #public static TreeNode table_addField(TreeNode _table, str _fieldname, types _fieldtype)
        #{
        #    AOTTableFieldList    fieldList = infolog.findNode(_table.treeNodePath() + '\\Fields');
        #
        #    ;
        #
        #    DEVWizard::assert(! fieldList.AOTfindChild(_fieldname),
        #        strfmt("@CIT72", funcname(), _fieldname, fieldlist.treeNodePath()));
        #
        #    switch (_fieldtype)
        #    {
        #        case types::CONTAINER:
        #            fieldlist.addContainer(_fieldname);
        #            break;
        #        case types::DATE:
        #            fieldlist.addDate(_fieldname);
        #            break;
        #        case types::ENUM:
        #            fieldlist.addEnum(_fieldname);
        #            break;
        #        case types::INTEGER:
        #            fieldlist.addInteger(_fieldname);
        #            break;
        #        case types::REAL:
        #            fieldlist.addReal(_fieldname);
        #            break;
        #        case types::STRING:
        #        case types::RSTRING:
        #            fieldList.addString(_fieldname);
        #            break;
        #        case types::UtcDateTime:
        #            fieldlist.addTime(_fieldname);
        #            break;
        #        case types::Int64:
        #            fieldlist.addInt64(_fieldname);
        #            break;
        #        default:
        #            throw error(strfmt("@CIT77", funcname(), enum2str(_fieldtype)));
        #    }
        #
        #    return infolog.findNode(fieldList.treeNodePath() + '\\' + _fieldname);
        #}
      ENDSOURCE
      SOURCE #table_addFieldToGroup
        #public static TreeNode table_addFieldToGroup(TreeNode _tableNode, str _groupName, str _fieldname)
        #{
        #    TreeNode    groupNode = infolog.findNode(_tableNode.treeNodePath() + '\\Field Groups\\' + _groupName);
        #
        #    ;
        #
        #    DEVWizard::assert(! groupNode.AOTfindChild(_fieldname),
        #                        strfmt("@CIT72", funcname(), _fieldname, _groupName));
        #
        #    groupNode.AOTadd(_fieldName);
        #
        #    return infolog.findNode(groupNode.treeNodePath() + '\\' + _fieldName);
        #}
      ENDSOURCE
      SOURCE #table_addIndex
        #public static TreeNode table_addIndex(TreeNode _table, str _indexname)
        #{
        #    TreeNode    indexesNode = infolog.findNode(_table.treeNodePath() + '\\Indexes');
        #
        #    ;
        #
        #    DEVWizard::assert(! indexesNode.AOTfindChild(_indexname),
        #        strfmt("@CIT72", funcname(), _indexname, indexesNode.treeNodePath()));
        #
        #    indexesNode.AOTadd(_indexName);
        #
        #    return indexesNode.AOTfindChild(_indexName);
        #}
      ENDSOURCE
      SOURCE #typeDefaultValue
        #static str typeDefaultValue(str _typeName)
        #{
        #    Types baseType = new DictType(new Dictionary().typename2id(_typename)).baseType();
        #
        #    ;
        #
        #    switch (baseType)
        #    {
        #        case Types::CONTAINER:
        #            return 'connull()';
        #        case Types::DATE:
        #            return 'datenull()';
        #        case Types::RSTRING:
        #        case Types::STRING:
        #        case Types::VARSTRING:
        #            return '\'\'';
        #    }
        #
        #    return '0';
        #}
      ENDSOURCE
      SOURCE #typename2id
        #public static extendedtypeid typename2id(identifiername _typeName)
        #{
        #    return new Dictionary().typename2id(_typename);
        #}
      ENDSOURCE
      SOURCE #validateCondition
        #static boolean validateCondition(anytype _condition, str _message, Exception _exception = Exception::Error)
        #{
        #    if (! _condition)
        #    {
        #        error(_message);
        #    }
        #
        #    return _condition && true;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVLabelsCreateHelper unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVLabelsCreateHelper
    PROPERTIES
      Name                #DEVLabelsCreateHelper
      Origin              #{C691689F-94A8-4565-B5E1-710692B9FB90}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        ##define.lang('EN-US')
        #class DEVLabelsCreateHelper
        #{
        #
        #}
      ENDSOURCE
      SOURCE #createLabelsInFile
        #void createLabelsInFile()
        #{
        #    DEVLabelsCreateInfo     labelsCreateInfo, labelsCreateInfo2;
        #    Label                   label = new Label(#lang);
        #    container               value;
        #    str                     defaultModule;
        #    Dialog                  d = new Dialog('Insert labels in file');
        #    DialogField             df;
        #    int                     num;
        #    ;
        #
        #    value = classfactory.lastValueGet("",
        #                                    curuserid(),
        #                                    UtilElementType::Form,
        #                                    identifierstr(SysLabelSearch),
        #                                    'Advanced');
        #    if (value)
        #    {
        #        defaultModule = conPeek(value, 7);
        #    }
        #    df = d.addFieldValue(extendedTypeStr(Num), defaultModule, 'Label file');
        #    d.addText(strFmt('Create labels for %1 language', #lang), 100);
        #    if (! d.run())
        #    {
        #        return;
        #    }
        #    defaultModule = df.value();
        #
        #    if (! defaultModule)
        #    {
        #        throw error('Default Module not found');
        #    }
        #
        #    ttsBegin;
        #    while select forUpdate labelsCreateInfo
        #        order by recid
        #        where labelsCreateInfo.IsProcessed == false &&
        #              labelsCreateInfo.LabelActionType == DEVLabelActionType::CreateNewLabel &&
        #            ! labelsCreateInfo.NewLabel
        #    {
        #        //BP Deviation Documented
        #        select labelsCreateInfo2
        #            where labelsCreateInfo2.IsProcessed     == false &&
        #                  labelsCreateInfo2.LabelActionType == DEVLabelActionType::CreateNewLabel &&
        #                  labelsCreateInfo2.RecId           <  labelsCreateInfo.RecId &&
        #                  labelsCreateInfo2.TextValue       == labelsCreateInfo.TextValue &&
        #                  labelsCreateInfo2.NewLabel ;
        #        if (labelsCreateInfo2.RecId)
        #        {
        #            labelsCreateInfo.NewLabel = labelsCreateInfo2.NewLabel;
        #        }
        #        else
        #        {
        #            labelsCreateInfo.NewLabel = label.insert(labelsCreateInfo.TextValue, '', defaultModule);
        #            num++;
        #        }
        #        labelsCreateInfo.update();
        #
        #
        #    }
        #    ttsCommit;
        #
        #    info(strFmt('%1 labels created', num));
        #}
      ENDSOURCE
      SOURCE #processLabels
        #void processLabels()
        #{
        #    DEVLabelsCreateInfo     labelsCreateInfo, labelsCreateInfoGroup;
        #    DEVLabelsCreateInfo     labelsCreateInfoPrev;
        #    TreeNode                treeNode;
        #    str                     source;
        #    int                     newPos;
        #    int                     prevOffset;
        #    int                     numProcessed;
        #    str                     sTmp;
        #
        #    int getPosInSource(str  _source, int _row, int _column)
        #    {
        #        int pos;
        #        int line;
        #        int i;
        #        str posText;
        #        ;
        #        for (i = 1; i <= _row - 1; i++)
        #        {
        #            pos = strFind(_source, '\n', pos + 1, maxInt());
        #            if (! pos)
        #            {
        #                break;
        #            }
        #        }
        #        if (! pos && _row != 1)
        #        {
        #            throw error(strFmt('Position not found. Path %1, Row %2, Col %3', labelsCreateInfo.ElementPath, _row, _column));
        #        }
        #
        #        pos = pos + _column + 1 - prevOffset;
        #
        #        posText = subStr(_source, pos, strLen(labelsCreateInfo.TextValue));
        #        if (posText != labelsCreateInfo.TextValue)
        #        {
        #            throw error(strFmt('Text is not equal. Path %1, Row %2, Col %3, Source text %4, Expected %5',
        #                                labelsCreateInfo.ElementPath, _row, _column, posText, labelsCreateInfo.TextValue));
        #        }
        #
        #        return pos;
        #    }
        #    ;
        #    while select labelsCreateInfoGroup
        #        group by ElementPath
        #        where labelsCreateInfoGroup.IsProcessed == false &&
        #             ! labelsCreateInfoGroup.PropertyName &&
        #               labelsCreateInfoGroup.NewLabel
        #    {
        #        treeNode = TreeNode::findNode(labelsCreateInfoGroup.ElementPath);
        #        source = treeNode.AOTgetSource();
        #
        #        labelsCreateInfoPrev = null;
        #        ttsBegin;
        #        while select forUpdate labelsCreateInfo
        #                order by Line, Column
        #            where labelsCreateInfo.IsProcessed == false &&
        #                  labelsCreateInfo.NewLabel &&
        #                  labelsCreateInfo.ElementPath == labelsCreateInfoGroup.ElementPath
        #        {
        #            if (labelsCreateInfoPrev.RecId &&
        #                labelsCreateInfoPrev.Line == labelsCreateInfo.Line)
        #            {
        #                prevOffset += strLen(labelsCreateInfoPrev.TextValue) + labelsCreateInfoPrev.SpacesOnEnd - strLen(labelsCreateInfoPrev.NewLabel);
        #            }
        #            else
        #            {
        #                prevOffset = 0;
        #            }
        #            newPos = getPosInSource(source, labelsCreateInfo.Line, labelsCreateInfo.Column);
        #
        #            source = strDel(source, newPos, strLen(labelsCreateInfo.TextValue) + labelsCreateInfo.SpacesOnEnd);
        #            source = strIns(source, labelsCreateInfo.NewLabel, newPos);
        #
        #
        #            labelsCreateInfoPrev.data(labelsCreateInfo);
        #
        #            labelsCreateInfo.IsProcessed = true;
        #            labelsCreateInfo.update();
        #        }
        #        numProcessed++;
        #        treeNode.AOTsetSource(source);
        #        treeNode.AOTsave();
        #        treeNode.AOTcompile();
        #
        #        ttsCommit;
        #        //info(source);
        #    }
        #    info(strFmt('%1 methods processed', numProcessed));
        #
        #    numProcessed = 0;
        #    while select labelsCreateInfoGroup
        #        group by ElementPath
        #        where labelsCreateInfoGroup.IsProcessed == false &&
        #              labelsCreateInfoGroup.PropertyName &&
        #              labelsCreateInfoGroup.NewLabel
        #    {
        #        treeNode = TreeNode::findNode(labelsCreateInfoGroup.ElementPath);
        #
        #        ttsBegin;
        #        while select forUpdate labelsCreateInfo
        #        //        order by Line, Column
        #            where labelsCreateInfo.IsProcessed == false &&
        #                  labelsCreateInfo.ElementPath == labelsCreateInfoGroup.ElementPath &&
        #                  labelsCreateInfo.NewLabel
        #        {
        #            sTmp = treeNode.AOTgetProperties(false, false, false);
        #            if (strScan(sTmp, labelsCreateInfo.PropertyName, 1, 5000) &&  treeNode.AOTgetProperty(labelsCreateInfo.PropertyName))
        #            {
        #                treeNode.AOTsetProperty(labelsCreateInfo.PropertyName, labelsCreateInfo.NewLabel);
        #            }
        #            else
        #            {
        #                warning(strFmt('%1 property on element %2 is empty. Element skipped',
        #                                labelsCreateInfo.PropertyName,
        #                                labelsCreateInfo.ElementPath));
        #            }
        #            labelsCreateInfo.IsProcessed = true;
        #            labelsCreateInfo.update();
        #        }
        #        numProcessed++;
        #        treeNode.AOTsave();
        #        treeNode.AOTcompile();
        #
        #        ttsCommit;
        #
        #
        #    }
        #    info(strFmt('%1 elements processed', numProcessed));
        #
        #}
      ENDSOURCE
      SOURCE #setLabelAction
        #void setLabelAction()
        #{
        #    DEVLabelsCreateInfo  labelsCreateInfoLocal;
        #    Label                label = new Label(#lang);
        #    str                  text, labelTxt;
        #    ;
        #    ttsBegin;
        #    while select forUpdate labelsCreateInfoLocal
        #    {
        #        labelsCreateInfoLocal.NewLabel      = "";
        #        labelsCreateInfoLocal.NewLabelValue = "";
        #        labelsCreateInfoLocal.LabelActionType = DEVLabelActionType::Skip;
        #
        #        text        = SysLabel::seachStringBuildExactStr(labelsCreateInfoLocal.TextValue);
        #        labelTxt    = label.searchFirst(text);
        #        if (! labelTxt && SysLabel::searchStringHasSpecialChars(labelsCreateInfoLocal.TextValue))
        #
        #        {
        #            text = SysLabel::searchStringBuildSpecialCharString(labelsCreateInfoLocal.TextValue);
        #            text = SysLabel::seachStringBuildExactStr(text);
        #            labelTxt  = label.searchFirst(text);
        #        }
        #        if (labelTxt)
        #        {
        #            labelsCreateInfoLocal.NewLabel      = labelTxt;
        #            labelsCreateInfoLocal.NewLabelValue = label.extractString(labelTxt);
        #            labelsCreateInfoLocal.LabelActionType = DEVLabelActionType::UseExisting;
        #        }
        #        else
        #        {
        #            labelsCreateInfoLocal.LabelActionType = DEVLabelActionType::CreateNewLabel;
        #        }
        #        labelsCreateInfoLocal.update();
        #    }
        #    ttsCommit;
        #
        #}
      ENDSOURCE
      SOURCE #DEVhandleLabelError
        #//trud, labels create
        ##SysBPCheck
        #static void DEVhandleLabelError(int            _errorCode,
        #                                 int            _line,
        #                                 int            _col,
        #                                 str            _errorMessage,
        #                                 str            _propertyName ,
        #                                 TreeNodePath   _treeNodePath )
        #{
        #    DEVLabelsCreateInfo     labelsCreateInfo;
        #    str                     textVal;
        #    str                     prefixValue;
        #    ;
        #    if (! appl.globalCache().isSet(formStr(DEVLabelsCreateInfo), 'IsEnabled'))
        #    {
        #        return;
        #    }
        #    try
        #    {
        #        if ((_errorCode == #compileApplicationCheck && _errorMessage != strFmt('%1', "@SYS87094"))
        #            || _errorCode == #BPErrorLabelIsText || _errorCode == #BPErrorHelpIsText)
        #        {
        #            if (_errorCode == #compileApplicationCheck)
        #            {
        #                prefixValue = strFmt("@SYS55394");
        #                prefixValue = subStr(prefixValue, 1, strLen(prefixValue) - 2);
        #                if (prefixValue != subStr(_errorMessage, 1, strLen(prefixValue)))
        #                {
        #                    return;
        #                    //throw error(strFmt("Prefix %1 doen't match %2", prefixValue, _errorMessage));
        #                }
        #                textVal = subStr(_errorMessage, strLen(prefixValue)  + 1, strLen(_errorMessage));
        #            }
        #            if (_errorCode == #BPErrorLabelIsText ||
        #                _errorCode == #BPErrorHelpIsText)
        #            {
        #                prefixValue = strFmt("@SYS60289", _propertyName);
        #                prefixValue = subStr(prefixValue, 1, strLen(prefixValue) - 2);
        #                if (prefixValue != subStr(_errorMessage, 1, strLen(prefixValue)))
        #                {
        #                    throw error(strFmt('Prefix %1 doen"t match %2', prefixValue, _errorMessage));
        #                }
        #                textVal = subStr(_errorMessage, strLen(prefixValue)  + 1, strLen(_errorMessage));
        #            }
        #            if (textVal)
        #            {
        #                labelsCreateInfo.ElementPath    = _treeNodePath;
        #                labelsCreateInfo.PropertyName   = _propertyName;
        #                labelsCreateInfo.Column         = _col;
        #                labelsCreateInfo.Line           = _line;
        #                labelsCreateInfo.TextValue      = textVal;
        #                labelsCreateInfo.insert();
        #            }
        #        }
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVMultiBatchTemplate unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVMultiBatchTemplate
    PROPERTIES
      Name                #DEVMultiBatchTemplate
      Extends             #RunBaseBatch
      Origin              #{DC763F23-5199-411C-BF20-29F4F54D80E0}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DEVMultiBatchTemplate extends RunBaseBatch
        #{
        #    FromDate               fromDate;
        #    ToDate                 toDate;
        #
        #    QueryRun               queryRun;
        #
        #    DialogField            dlgFromDate;
        #    DialogField            dlgToDate;
        #
        #    NotesLine                   batchIdentifier;
        #    BatchHeader                 batchHeader;
        #    DEVMultiBatchTaskTable      multiBatchTaskTable;
        #    RecordInsertList            recordInsertListBatch;
        #
        #
        #    #define.CurrentVersion(1)
        #    #localmacro.CurrentList
        #        fromDate,
        #        toDate,
        #        batchIdentifier
        #    #endmacro
        #}
        #
      ENDSOURCE
      SOURCE #dialog
        #public Object dialog()
        #{
        #    DialogRunbase       dialog = super();
        #    ;
        #
        #    dlgFromDate                = dialog.addFieldValue(extendedtypestr(FromDate), fromDate);
        #    dlgToDate                  = dialog.addFieldValue(extendedtypestr(ToDate), toDate);
        #
        #    return dialog;
        #}
        #
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    ;
        #
        #    fromDate           = dlgFromDate.value();
        #    toDate             = dlgToDate.value();
        #
        #    return super();
        #}
        #
      ENDSOURCE
      SOURCE #initParmDefault
        #public void initParmDefault()
        #{
        #    ;
        #
        #    this.initQuery();
        #
        #    super();
        #}
        #
      ENDSOURCE
      SOURCE #initQuery
        #public void initQuery()
        #{
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbds = query.addDataSource(tablenum(VendTable));
        #    QueryBuildRange         qBR;
        #    ;
        #
        #    qBR = SysQuery::findOrCreateRange(qbds, fieldnum(VendTable, RecId));
        #    qBR.status(RangeStatus::HIDDEN);
        #    queryRun = new QueryRun(query);
        #}
        #
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    ;
        #
        #    return [#CurrentVersion, #CurrentList, queryRun.pack()];
        #}
        #
      ENDSOURCE
      SOURCE #parmBatchIdentifier
        #public NotesLine parmBatchIdentifier(NotesLine _batchIdentifier = batchIdentifier)
        #{
        #    batchIdentifier = _batchIdentifier;
        #
        #    return batchIdentifier;
        #}
      ENDSOURCE
      SOURCE #parmFromDate
        #public FromDate parmFromDate(FromDate _fromDate = fromDate)
        #{
        #    ;
        #
        #    fromDate = _fromDate;
        #
        #    return fromDate;
        #}
        #
      ENDSOURCE
      SOURCE #parmToDate
        #public ToDate parmToDate(ToDate _toDate = toDate)
        #{
        #    ;
        #
        #    toDate = _toDate;
        #
        #    return toDate;
        #}
        #
      ENDSOURCE
      SOURCE #processTable
        #void processTable(VendTable     _vendTable)
        #{
        #    ;
        #    info(strFmt('Processing %1 for %2. Dates %3 %4',
        #                    _vendTable.AccountNum, batchIdentifier, fromDate, toDate));
        #
        #    sleep(1000);
        #
        #}
      ENDSOURCE
      SOURCE #queryRun
        #public QueryRun queryRun()
        #{
        #    ;
        #
        #    return queryRun;
        #}
        #
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    int                     processedCounter;
        #    QueryBuildDataSource    qBDS;
        #    VendTable             vendTable;
        #
        #    ;
        #    if (batchIdentifier)//child task
        #    {
        #        ttsBegin;
        #
        #        while select forupdate multiBatchTaskTable
        #            where multiBatchTaskTable.TaskId == batchIdentifier
        #        join vendTable
        #            where vendTable.recId == multiBatchTaskTable.RefRecId
        #        {
        #            this.processTable(vendTable);
        #
        #            multiBatchTaskTable.IsProcessed = true;
        #            multiBatchTaskTable.update();
        #        }
        #        ttsCommit;
        #
        #    }
        #    else
        #    {
        #        qBDS = queryRun.query().dataSourceTable(tableNum(VendTable));
        #
        #        this.progressInit(RunBase::getDescription(classIdGet(this)),
        #                          SysQuery::countTotal(queryRun),
        #                          #AviSearch);
        #
        #        while (queryRun.next())
        #        {
        #            vendTable = queryRun.get(tablenum(VendTable));
        #            processedCounter++;
        #
        #
        #
        #            if(processedCounter > 4)
        #            {
        #                this.sds_processThreadItem();
        #
        #                processedCounter = 1;
        #
        #            }
        #            this.sds_addTaskLine(vendTable);
        #
        #            progress.incCount();
        #
        #        }
        #        this.sds_processThreadItem();
        #    }
        #    //info(strfmt("%1 record(s) processed", processedCounter));
        #}
        #
      ENDSOURCE
      SOURCE #sds_addTaskLine
        #void sds_addTaskLine(VendTable     _vendTable)
        #{
        #    ;
        #    if (! batchIdentifier)
        #    {
        #        multiBatchTaskTable.GroupNum = 1;
        #        multiBatchTaskTable.GroupTaskId = strFmt("%1", newGuid());
        #        batchIdentifier = strFmt('%1 _ %2', multiBatchTaskTable.GroupTaskId, multiBatchTaskTable.GroupNum);
        #    }
        #
        #    multiBatchTaskTable.TaskId = batchIdentifier;
        #    multiBatchTaskTable.RefRecId = _vendTable.RecId;
        #
        #    if (! recordInsertListBatch)
        #    {
        #        recordInsertListBatch = new RecordInsertList(tableNum(DEVMultiBatchTaskTable));
        #    }
        #    recordInsertListBatch.add(multiBatchTaskTable);
        #
        #}
      ENDSOURCE
      SOURCE #sds_processThreadItem
        #protected void sds_processThreadItem()
        #{
        #    DEVMultiBatchTemplate        childThread;
        #    ;
        #    if (! batchIdentifier)
        #    {
        #        return;
        #    }
        #    if (recordInsertListBatch)
        #    {
        #        recordInsertListBatch.insertDatabase();
        #    }
        #
        #    childThread = RunBase::makeObject(classIdGet(this));
        #    childThread.batchInfo().resetBatchHeader();
        #    childThread.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        #    childThread.batchInfo().parmDataareaId(this.parmCurrentBatch().Company);
        #    childThread.batchInfo().parmCaption(childThread.caption() + ' (Helper)');
        #    childThread.unpack(this.pack());
        #
        #    childThread.parmBatchIdentifier(batchIdentifier);
        #    if (this.isInBatch())
        #    {
        #        batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        #
        #        batchHeader.addRuntimeTask(childThread, this.parmCurrentBatch().ReciD);
        #
        #        batchHeader.save();
        #    }
        #    else
        #    {
        #        childThread.run();
        #    }
        #
        #    multiBatchTaskTable.GroupNum++;
        #    batchIdentifier = strFmt("%1 _ %2", multiBatchTaskTable.GroupTaskId, multiBatchTaskTable.GroupNum);
        #
        #}
      ENDSOURCE
      SOURCE #showQueryValues
        #public boolean showQueryValues()
        #{
        #    ;
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container _packedClass)
        #{
        #    Version    version = RunBase::getVersion(_packedClass);
        #    container  queryCon;
        #    ;
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList,queryCon] = _packedClass;
        #            if (SysQuery::isPackedOk(queryCon))
        #            {
        #                queryRun = new QueryRun(queryCon);
        #            }
        #            else
        #            {
        #                this.initQuery();
        #            }
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #construct
        #public static DEVMultiBatchTemplate construct()
        #{
        #    return new DEVMultiBatchTemplate();
        #}
      ENDSOURCE
      SOURCE #description
        #static ClassDescription description()
        #{
        #    ;
        #
        #    return 'DEVMultiBatchTemplate';
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    DEVMultiBatchTemplate    runObject = DEVMultiBatchTemplate::construct();
        #    ;
        #
        #    if (runObject.prompt())
        #    {
        #        runObject.run();
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DEVMultiBatchTemplate2 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEVMultiBatchTemplate2
    PROPERTIES
      Name                #DEVMultiBatchTemplate2
      Extends             #RunBaseBatch
      Origin              #{5A624A73-9BCF-4F82-80A6-C16897546B01}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DEVMultiBatchTemplate2 extends RunBaseBatch
        #{
        #    FromDate               fromDate;
        #    ToDate                 toDate;
        #
        #    QueryRun               queryRun;
        #
        #    DialogField            dlgFromDate;
        #    DialogField            dlgToDate;
        #
        #    NotesLine                   batchIdentifier;
        #    BatchHeader                 batchHeader;
        #
        #    Batchable       finalTask;
        #
        #
        #    #define.CurrentVersion(1)
        #    #localmacro.CurrentList
        #        fromDate,
        #        toDate,
        #        batchIdentifier
        #    #endmacro
        #}
        #
      ENDSOURCE
      SOURCE #dialog
        #public Object dialog()
        #{
        #    DialogRunbase       dialog = super();
        #    ;
        #
        #    dlgFromDate                = dialog.addFieldValue(extendedtypestr(FromDate), fromDate);
        #    dlgToDate                  = dialog.addFieldValue(extendedtypestr(ToDate), toDate);
        #
        #    return dialog;
        #}
        #
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    ;
        #
        #    fromDate           = dlgFromDate.value();
        #    toDate             = dlgToDate.value();
        #
        #    return super();
        #}
        #
      ENDSOURCE
      SOURCE #initParmDefault
        #public void initParmDefault()
        #{
        #    ;
        #
        #    this.initQuery();
        #
        #    super();
        #}
        #
      ENDSOURCE
      SOURCE #initQuery
        #public void initQuery()
        #{
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbds = query.addDataSource(tablenum(VendTable));
        #    QueryBuildRange         qBR;
        #    ;
        #
        #    qBR = SysQuery::findOrCreateRange(qbds, fieldnum(VendTable, RecId));
        #    qBR.status(RangeStatus::HIDDEN);
        #    queryRun = new QueryRun(query);
        #}
        #
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    ;
        #
        #    return [#CurrentVersion, #CurrentList, queryRun.pack()];
        #}
        #
      ENDSOURCE
      SOURCE #parmBatchIdentifier
        #public NotesLine parmBatchIdentifier(NotesLine _batchIdentifier = batchIdentifier)
        #{
        #    batchIdentifier = _batchIdentifier;
        #
        #    return batchIdentifier;
        #}
      ENDSOURCE
      SOURCE #parmFromDate
        #public FromDate parmFromDate(FromDate _fromDate = fromDate)
        #{
        #    ;
        #
        #    fromDate = _fromDate;
        #
        #    return fromDate;
        #}
        #
      ENDSOURCE
      SOURCE #parmToDate
        #public ToDate parmToDate(ToDate _toDate = toDate)
        #{
        #    ;
        #
        #    toDate = _toDate;
        #
        #    return toDate;
        #}
        #
      ENDSOURCE
      SOURCE #processTable
        #void processTable(VendTable     _vendTable)
        #{
        #    ;
        #    info(strFmt('Processing %1 for %2. Dates %3 %4',
        #                    _vendTable.AccountNum, batchIdentifier, fromDate, toDate));
        #
        #    sleep(5000);
        #
        #}
      ENDSOURCE
      SOURCE #processThreadItem
        #protected void processThreadItem(boolean _isLast)
        #{
        #    DEVMultiBatchTemplate2        childThread;
        #    ;
        #    if (! batchIdentifier)
        #    {
        #        return;
        #    }
        #
        #
        #    childThread = RunBase::makeObject(classIdGet(this));
        #    childThread.batchInfo().resetBatchHeader();
        #    childThread.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        #    childThread.batchInfo().parmDataareaId(this.parmCurrentBatch().Company);
        #    childThread.batchInfo().parmCaption(childThread.caption() + ' (Helper)');
        #    childThread.unpack(this.pack());
        #
        #    childThread.parmBatchIdentifier(batchIdentifier);
        #    if (_isLast)
        #    {
        #        finalTask = childThread;
        #    }
        #
        #    if (this.isInBatch())
        #    {
        #        if (! batchHeader)
        #        {
        #            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        #        }
        #        batchHeader.addRuntimeTask(childThread, this.parmCurrentBatch().ReciD);
        #
        #        if (! _isLast && finalTask)
        #        {
        #            batchHeader.addDependency(finalTask, childThread, BatchDependencyStatus::FinishedOrError);
        #        }
        #
        #    }
        #    else
        #    {
        #        if (! _isLast)
        #        {
        #            childThread.run();
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #queryRun
        #public QueryRun queryRun()
        #{
        #    ;
        #
        #    return queryRun;
        #}
        #
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    int                     processedCounter;
        #    QueryBuildDataSource    qBDS;
        #    VendTable             vendTable;
        #
        #    int numTask;
        #
        #    ;
        #    if (batchIdentifier)//child task
        #    {
        #        if (batchIdentifier == 'TheLast')
        #        {
        #            info('Last task');
        #        }
        #        else
        #        {
        #            ttsBegin;
        #
        #            select vendTable
        #                where vendTable.AccountNum == batchIdentifier;
        #
        #            this.processTable(vendTable);
        #
        #            ttsCommit;
        #        }
        #
        #    }
        #    else
        #    {
        #        batchIdentifier = 'TheLast';
        #        this.processThreadItem(true);
        #
        #        qBDS = queryRun.query().dataSourceTable(tableNum(VendTable));
        #
        #        this.progressInit(RunBase::getDescription(classIdGet(this)),
        #                          SysQuery::countTotal(queryRun),
        #                          #AviSearch);
        #
        #        while (queryRun.next())
        #        {
        #            vendTable = queryRun.get(tablenum(VendTable));
        #            processedCounter++;
        #            if (processedCounter > 1000)
        #            {
        #                break;
        #            }
        #            batchIdentifier = strFmt('%1', vendTable.AccountNum);
        #
        #
        #            this.processThreadItem(false);
        #
        #            progress.incCount();
        #
        #        }
        #        if (finalTask)
        #        {
        #            if (this.isInBatch())
        #            {
        #                batchHeader.save();
        #                info("batch saved");
        #            }
        #            else
        #            {
        #                finalTask.run();
        #            }
        #        }
        #
        #    }
        #    //info(strfmt("%1 record(s) processed", processedCounter));
        #}
        #
      ENDSOURCE
      SOURCE #showQueryValues
        #public boolean showQueryValues()
        #{
        #    ;
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container _packedClass)
        #{
        #    Version    version = RunBase::getVersion(_packedClass);
        #    container  queryCon;
        #    ;
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList,queryCon] = _packedClass;
        #            if (SysQuery::isPackedOk(queryCon))
        #            {
        #                queryRun = new QueryRun(queryCon);
        #            }
        #            else
        #            {
        #                this.initQuery();
        #            }
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #construct
        #public static DEVMultiBatchTemplate2 construct()
        #{
        #    return new DEVMultiBatchTemplate2();
        #}
      ENDSOURCE
      SOURCE #description
        #static ClassDescription description()
        #{
        #    ;
        #
        #    return 'DEVMultiBatchTemplate2';
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    DEVMultiBatchTemplate2    runObject = DEVMultiBatchTemplate2::construct();
        #    ;
        #
        #    if (runObject.prompt())
        #    {
        #        runObject.run();
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysBPCheck unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysBPCheck
    PROPERTIES
      Name                #SysBPCheck
      RunOn               #Client
      Origin              #{2D0A1871-0000-1000-C4E1-DA5250436865}
      LegacyId            #6257
    ENDPROPERTIES
    
    METHODS
      SOURCE #addError
        #public void addError(int _errorCode, int _line, int _col, str _errorMessage, str _propertyName = '', TreeNodePath _treeNodePath = SysTreeNode::getPath(treeNode))
        #{
        #    boolean ignore = false;
        #
        #    //
        #    // Tutorial objetcs should be accepted as is.
        #    // Errors are treated as warnings
        #    //
        #    if (match('Tutorial', _treeNodePath))
        #    {
        #        this.addWarning(_errorCode, _line, _col, _errorMessage, _propertyName);
        #    }
        #    else
        #    {
        #        ignore = this.shouldIgnore(_errorCode, _treeNodePath);
        #        if (ignore)
        #        {
        #            this.addInfo(_errorCode, _line, _col, _errorMessage, _propertyName, _treeNodePath);
        #        }
        #        else
        #        {
        #            if (compilationResultProvider)
        #            {
        #                compilationResultProvider.compilerOutputMessage(_treeNodePath, _errorCode, _line, _col, SysCompilerSeverity::Error, _errorMessage, _propertyName, SysCompilerOutputTab::BestPractices);
        #                //trud labels -->
        #                DEVLabelsCreateHelper::DEVhandleLabelError(_errorCode, _line, _col, _errorMessage, _propertyName , _treeNodePath);
        #                //trud labels <--
        #            }
        #            else
        #            {
        #                this.addMessageWindow(Exception::Error, _line, _col, _errorMessage, _propertyName);
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addInfo
        #public void addInfo(int _errorCode, int _line, int _col, str _errorMessage, str _propertyName = '', TreeNodePath _treeNodePath = SysTreeNode::getPath(treeNode))
        #{
        #    if (this.toBeUsed(SysBPWarningLevel::All))
        #    {
        #        if (compilationResultProvider)
        #        {
        #            compilationResultProvider.compilerOutputMessage(_treeNodePath, _errorCode, _line, _col, SysCompilerSeverity::BestPractice, _errorMessage, _propertyName, SysCompilerOutputTab::BestPractices);
        #        }
        #        else
        #        {
        #            this.addMessageWindow(Exception::Info, _line, _col, _errorMessage, _propertyName);
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #addMessageWindow
        #public void addMessageWindow(Exception _exception, int _line, int _col, str _errorMessage, str _propertyName = '')
        #{
        #    if (_propertyName) // Property
        #    {
        #        switch (_exception)
        #        {
        #            case Exception::Error:
        #                error(_errorMessage, '', new SysInfoAction_Properties(SysTreeNode::getPath(treeNode)));
        #                break;
        #
        #            case Exception::Warning:
        #                warning(_errorMessage, '', new SysInfoAction_Properties(SysTreeNode::getPath(treeNode)));
        #                break;
        #
        #            default:
        #                info(_errorMessage, '', new SysInfoAction_Properties(SysTreeNode::getPath(treeNode)));
        #                break;
        #        }
        #    }
        #    else
        #    if (_line && _col) // Source
        #    {
        #        switch (_exception)
        #        {
        #            case Exception::Error:
        #                error(_errorMessage,'', SysInfoAction_Editor::newLineColumn(SysTreeNode::getPath(treeNode), _line, _col));
        #                break;
        #
        #            case Exception::Warning :
        #                warning(_errorMessage,'', SysInfoAction_Editor::newLineColumn(SysTreeNode::getPath(treeNode), _line, _col));
        #                break;
        #
        #            default :
        #                info(_errorMessage,'', SysInfoAction_Editor::newLineColumn(SysTreeNode::getPath(treeNode), _line, _col));
        #                break;
        #        }
        #    }
        #    else
        #    {
        #        switch (_exception)
        #        {
        #            case Exception::Error:
        #                error(_errorMessage,'', SysInfoAction_Editor::newLineColumn(SysTreeNode::getPath(treeNode), _line, _col));
        #                break;
        #
        #            case Exception::Warning:
        #                warning(_errorMessage,'', SysInfoAction_Editor::newLineColumn(SysTreeNode::getPath(treeNode), _line, _col));
        #                break;
        #
        #            default:
        #                info(_errorMessage,'', SysInfoAction_Editor::newLineColumn(SysTreeNode::getPath(treeNode), _line, _col));
        #                break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addWarning
        #public void addWarning(int _errorCode, int _line, int _col, str _errorMessage, str _propertyName = '', TreeNodePath _treeNodePath = SysTreeNode::getPath(treeNode))
        #{
        #    boolean ignore = false;
        #
        #    ignore = this.shouldIgnore(_errorCode, _treeNodePath);
        #
        #    if(ignore)
        #    {
        #        this.addInfo(_errorCode, _line, _col, _errorMessage, _propertyName, _treeNodePath);
        #    }
        #    else
        #    {
        #
        #        if (this.toBeUsed(SysBPWarningLevel::Warning))
        #        {
        #            if (compilationResultProvider)
        #            {
        #                compilationResultProvider.compilerOutputMessage(_treeNodePath, _errorCode, _line, _col, SysCompilerSeverity::WarningLevel1, _errorMessage, _propertyName, SysCompilerOutputTab::BestPractices);
        #            }
        #            else
        #            {
        #                this.addMessageWindow(Exception::Warning, _line, _col, _errorMessage, _propertyName);
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #check
        #public void check(str _treeNodePath, boolean _checkSubNodes = true)
        #{
        #    treeNode = infolog.findNode(_treeNodePath);
        #
        #    if (treeNode)
        #    {
        #        if (_checkSubNodes)
        #        {
        #            this.traverseTreeNodes(treeNode);
        #        }
        #        else
        #        {
        #            this.performCheckOfTreenode(treeNode);
        #        }
        #    }
        #    treeNode = null;
        #}
        #
      ENDSOURCE
      SOURCE #checkConfigurationKey
        #public boolean checkConfigurationKey(ConfigurationKeyId _configurationKeyId)
        #{
        #    DictConfigurationKey    dictConfigurationKey;
        #    boolean                 ret = true;
        #
        #    if (_configurationKeyId)
        #    {
        #        dictConfigurationKey = new DictConfigurationKey(_configurationKeyId);
        #        if (dictConfigurationKey)
        #        {
        #            if (this.toBeUsed(SysBPWarningLevel::Warning) && dictConfigurationKey.name() == #NotDecided)
        #            {
        #                this.addWarning(#BPErrorConfigurationKeySpecific, 0, 0, strFmt("@SYS72461", dictConfigurationKey.name()), #PropertyConfigurationKey);
        #            }
        #        }
        #        else
        #        {
        #            this.addError(#BPErrorConfigurationKeyUnknown, 0, 0, strFmt("@SYS73068", int2str(_configurationKeyId)), #PropertyConfigurationKey);
        #            ret = false;
        #        }
        #    }
        #
        #    return ret;
        #
        #}
        #
      ENDSOURCE
      SOURCE #checkHelpBasics
        #public boolean checkHelpBasics(
        #    str             _propertyValue,
        #    LabelString     _labelString,
        #    SysPropertyName _sysPropertyName,
        #    boolean         _mandatory = true,
        #    TreeNodePath    _treeNodePath = SysTreeNode::getPath(treeNode)
        #    )
        #{
        #    LabelString helpString;
        #    boolean     ret = true;
        #
        #    if (_propertyValue)
        #    {
        #        if (SysLabel::isLabelId(_propertyValue))
        #        {
        #            if (!this.label().exists(_propertyValue))
        #            {
        #                if (SysLabelLog::exists(_propertyValue))
        #                {
        #                    this.addError(#BPError, 0, 0, strFmt("@SYS76945", _propertyValue), _sysPropertyName, _treeNodePath);
        #                }
        #                else
        #                {
        #                    this.addError(#BPError, 0, 0, strFmt("@SYS76844", _propertyValue), _sysPropertyName, _treeNodePath); // Unknown Label
        #                }
        #                ret = false;
        #            }
        #            else
        #            {
        #                helpString = this.label().extractString(_propertyValue);
        #
        #                // are label and help equal?!
        #                if (_labelString  && (_labelString == helpString))
        #                {
        #                    this.addError(#BPErrorLabelAndHelpAreEqual, 0, 0, "@SYS55404", _sysPropertyName, _treeNodePath); // Label and Help are equal
        #                    ret = false;
        #                }
        #            }
        #        }
        #        else
        #        {
        #            this.addError(#BPErrorHelpIsText, 0, 0, strFmt("@SYS60289", _sysPropertyName, _propertyValue), _sysPropertyName, _treeNodePath); // Property '%1' must contain a label ID, not '%2'
        #            ret = false;
        #        }
        #    }
        #    else
        #    if (_mandatory)
        #    {
        #        this.addError(#BPErrorHelpNotDefined, 0, 0, "@SYS55407", _sysPropertyName, _treeNodePath); // No Help defined
        #        ret = false;
        #    }
        #
        #    return ret;
        #
        #}
        #
      ENDSOURCE
      SOURCE #checkLabelBasics
        #public boolean checkLabelBasics(
        #    str             _propertyValue,
        #    SysPropertyName _sysPropertyName,
        #    boolean         _mandatory = true,
        #    str             _labelDefined = _propertyValue,
        #    TreeNodePath    _treeNodePath = SysTreeNode::getPath(treeNode)
        #    )
        #{
        #    LabelString labelString;
        #    boolean     ret = true;
        #    container   allowedAcronyms = ['sr','jr','prof','dr','ms','mrs','mr','avg', 'pct', 'qty', 'no', 'etc', 'agrmt', 'mth', 'qtr', 'ref', 'min', 'max', 'rep', 'incl', 'excl', 'pcs', 'C.O.D'];
        #    str         acronym;
        #    int         i;
        #    boolean     skip;
        #
        #    if (_propertyValue)
        #    {
        #        if (SysLabel::isLabelId(_propertyValue))
        #        {
        #            if (!this.label().exists(_propertyValue))
        #            {
        #                if (SysLabelLog::exists(_propertyValue))
        #                {
        #                    this.addError(#BPError, 0, 0, strFmt("@SYS76945", _propertyValue), _sysPropertyName, _treeNodePath);
        #                }
        #                else
        #                {
        #                    this.addError(#BPError, 0, 0, strFmt("@SYS76844", _propertyValue), _sysPropertyName, _treeNodePath);
        #                }
        #                ret = false;
        #            }
        #            else
        #            {
        #                if (_labelDefined)
        #                {
        #                    labelString = this.label().extractString(_labelDefined);
        #                    skip = false;
        #                    if (infolog.language() == 'en-us')
        #                    {
        #                        for (i=conLen(allowedAcronyms); i; i--)
        #                        {
        #                            acronym = conPeek(allowedAcronyms, i);
        #                            if (strScan(labelString, acronym+'.', strLen(labelString)-strLen(acronym)-1, strLen(acronym)+1))
        #                            {
        #                                skip = true;
        #                                break;
        #                            }
        #                        }
        #                    }
        #
        #                    if (!skip &&
        #                        match(#matchEndByPeriod, labelString) &&
        #                        !match(#matchEndBy3Periods, labelString))
        #                    {
        #                        this.addError(#BPErrorLabelWrongEndSign, 0, 0, strFmt("@SYS55433",_propertyValue), _sysPropertyName, _treeNodePath); // Label may not end with a period ('.')
        #                        ret = false;
        #                    }
        #                }
        #            }
        #        }
        #        else
        #        {
        #            if (parameters.CheckLabelUse) //trud
        #            {
        #            if (match(':a+', _propertyValue))
        #            {
        #                this.addError(#BPErrorLabelIsText, 0, 0, strFmt("@SYS60289", _sysPropertyName, _propertyValue), _sysPropertyName, _treeNodePath); // Property '%1' must contain a label ID, not '%2'
        #                ret = false;
        #            }
        #            }
        #        }
        #    }
        #    else
        #    if (_mandatory)
        #    {
        #        if (_sysPropertyName == #PropertyCaption)
        #        {
        #            this.addError(#BPErrorCaptionNotDefined, 0, 0, "@SYS60369", #PropertyCaption, _treeNodePath); // No caption defined
        #        }
        #        else
        #        {
        #            this.addError(#BPErrorLabelNotDefined, 0, 0, "@SYS55406", _sysPropertyName, _treeNodePath); // No Label defined
        #        }
        #        ret = false;
        #    }
        #
        #    return ret;
        #
        #}
        #
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #// Class must be AOSRunMode::Client based as long the FormBuild nodes are client only based
        #class SysBPCheck
        #{
        #    #SysBPCheck
        #    #SysCompilerOutput
        #    #TreeNodeSysNodeType
        #    #Properties
        #    #ResAppl
        #    #AOT
        #
        #    Label                           label;
        #    Label                           labelEnUs;
        #    TreeNode                        treeNode; // TreeNode to be checked
        #    SysBPParameters                 parameters;
        #    SysCompilationResultProvider    compilationResultProvider;
        #
        #    Map                             sysBPCheckMap;
        #    int                             systemErrors;
        #    Map                             ignoreMap;
        #
        #    boolean                         checkChildren;
        #    Set                             layerSetting;
        #
        #    #define.matchLettersOneOrSeveral(':a+')
        #    #define.matchEndByPeriod('\\.>')
        #    #define.matchEndBy3Periods('\\.\\.\\.>')
        #    #define.matchEndByQuestionMark('\\?>')
        #    #define.matchEndByNr('nr\\.>')
        #
        #}
      ENDSOURCE
      SOURCE #getSysBpCheckBase
        #private SysBPCheckBase getSysBpCheckBase(TreeNode _treeNode)
        #{
        #    SysBPCheckBase  sysBPCheckBase;
        #    ClassId         classId = SysBPCheckBase::treeNode2SysBPCheckClassId(_treeNode);
        #    DictClass       dictClass;
        #
        #    if (sysBPCheckMap.exists(classId))
        #        return sysBPCheckMap.lookup(classId);
        #
        #    dictClass = new DictClass(classId);
        #    sysBPCheckBase = dictClass.makeObject();
        #
        #    sysBPCheckMap.insert(classId, sysBPCheckBase);
        #    return sysBPCheckBase;
        #}
      ENDSOURCE
      SOURCE #initIgnoreMap
        #protected void initIgnoreMap()
        #{
        #    int             errorCode;
        #    str             errorCodeStr;
        #    TreeNodePath    path;
        #    Set             set;
        #    Set             ignoreSet;
        #    SetEnumerator   enum;
        #    XmlReader       xmlReader;
        #    Map             errorCodeMap = new Map(Types::String, Types::Integer);
        #    TreeNode        macroNode;
        #    TreeNode        bpIgnoreMacroNode = TreeNode::findNode(#pathForIgnoreList);
        #    TreeNode        bpStyleExceptionsMacroNode = TreeNode::findNode(#pathForStyleExceptionList);
        #    Array           macroArray = new Array(Types::Class);
        #    int             i;
        #
        #    ignoreMap = new Map(Types::Integer, Types::Class);
        #
        #    if (!bpIgnoreMacroNode)
        #    {
        #        throw error("@SYS28152", #pathForIgnoreList);
        #    }
        #
        #    if (!bpStyleExceptionsMacroNode)
        #    {
        #        throw error("@SYS28152", #pathForStyleExceptionList);
        #    }
        #
        #    macroArray.value(1, bpIgnoreMacroNode);
        #    macroArray.value(2, bpStyleExceptionsMacroNode);
        #
        #    for(i=1;i<=macroArray.lastIndex();i++)
        #    {
        #        macroNode = macroArray.value(i);
        #        xmlReader = XmlReader::newXml(macroNode.AOTgetSource());
        #        while (xmlReader.read())
        #        {
        #            if (xmlReader.name() == #IgnoreListViolation)
        #            {
        #                errorCodeStr = xmlReader.getAttribute2(#IgnoreListErrorCode);
        #                if (errorCodeMap.exists(errorCodeStr))
        #                {
        #                    errorCode = errorCodeMap.lookup(errorCodeStr);
        #                }
        #                else
        #                {
        #                    //BP Deviation Documented
        #                    errorCode = runbuf(strFmt('int convert(){#SysBPCheck return %1;}', errorCodeStr));
        #                    errorCodeMap.insert(errorCodeStr, errorCode);
        #                }
        #
        #                path = xmlReader.getAttribute2(#IgnoreListPath);
        #
        #                if (ignoreMap.exists(errorCode))
        #                {
        #                    set = ignoreMap.lookup(errorCode);
        #                }
        #                else
        #                {
        #                    set = new Set(Types::String);
        #                    ignoreMap.insert(errorCode, set);
        #                }
        #                set.add(path);
        #            }
        #        }
        #    }
        #
        #    //
        #    // Re-add manually ignored BP checks
        #    //
        #    ignoreSet = infolog.globalCache().get(classStr(SysBPCheck), staticMethodStr(SysBPCheck, ignore), new Set(Types::Integer));
        #    enum = ignoreSet.getEnumerator();
        #    while (enum.moveNext())
        #    {
        #        ignoreMap.insert(enum.current(), null);
        #    }
        #}
      ENDSOURCE
      SOURCE #isProxyNode
        #private boolean isProxyNode(TreeNode _treeNode)
        #{
        #    return _treeNode.AOTIsProxyNode();
        #}
      ENDSOURCE
      SOURCE #label
        #public Label label()
        #{
        #    return label;
        #}
      ENDSOURCE
      SOURCE #labelEnUs
        #public Label labelEnUs()
        #{
        #    return labelEnUs;
        #}
      ENDSOURCE
      SOURCE #new
        #void new()
        #{
        #    Map languageMap;
        #    Set languageIdSet;
        #    UtilEntryLevel layer;
        #
        #    label             = new Label();
        #
        #    languageMap     = Map::create(LanguageTable::installedLanguages());
        #    languageIdSet   = languageMap.valueSet();
        #
        #    if (languageIdSet.in(#LanguageEnUs))
        #    {
        #        labelEnUs = new Label(#LanguageEnUs);
        #    }
        #    sysBPCheckMap = new Map(Types::Integer, Types::Class);
        #
        #    //
        #    // Create a bit mask where all bits from currentlayer and up are set
        #    // E.g. currentLayer = var -> mask = 1111 1100 0000 0000
        #    //
        #    layerSetting = new Set(Types::Enum);
        #    for (layer = currentAOLayer(); layer<enumCnt(UtilEntryLevel); layer++)
        #    {
        #        layerSetting.add(layer);
        #    }
        #}
      ENDSOURCE
      SOURCE #parmIgnoreMap
        #public Map parmIgnoreMap(Map _ignoreMap = ignoreMap)
        #{
        #    if (prmisDefault(_ignoreMap) && !ignoreMap)
        #    {
        #        this.initIgnoreMap();
        #    }
        #    else
        #    {
        #        ignoreMap = _ignoreMap;
        #    }
        #    return ignoreMap;
        #}
        #
      ENDSOURCE
      SOURCE #parmParameters
        #public SysBPParameters parmParameters(SysBPParameters _parameters = parameters)
        #{
        #    parameters = _parameters;
        #    return parameters;
        #}
      ENDSOURCE
      SOURCE #parmSysCompilationResultProvider
        #public SysCompilationResultProvider parmSysCompilationResultProvider(SysCompilationResultProvider _compilationResultProvider = compilationResultProvider)
        #{
        #    compilationResultProvider = _compilationResultProvider;
        #
        #    if (!prmisDefault(_compilationResultProvider))
        #    {
        #        if (compilationResultProvider)
        #        {
        #            parameters = compilationResultProvider.bestPracticesParm();
        #        }
        #        else
        #        {
        #            parameters = SysBPParameters::find();
        #        }
        #    }
        #
        #    return compilationResultProvider;
        #}
        #
      ENDSOURCE
      SOURCE #performCheckDueToLayerSetting
        #private boolean performCheckDueToLayerSetting(TreeNode _treeNode)
        #{
        #    SysDictMethod dictMethod;
        #    UtilElements utilElement;
        #
        #    // Is the node valid, if not the node+children cannot be skipped
        #    if (!TreeNode::isNodeReferenceValid(_treeNode))
        #        return true;
        #
        #    // The node exist in a layer that must be checked
        #    if (Set::intersection(_treeNode.AOTLayers(), layerSetting).elements() > 0)
        #        return true;
        #
        #    // The node is a method on a table or a class that is not yet saved in current layer
        #    if ((_treeNode is MemberFunction ||  _treeNode.handle() == classNum(MemberFunction)) &&
        #         _treeNode.treeNodeType().isUtilElement())
        #    {
        #        utilElement = _treeNode.utilElement();
        #        dictMethod = new SysDictMethod(utilElement.RecordType, utilElement.ParentId, utilElement.Name);
        #
        #        if (dictMethod &&
        #            dictMethod.getSource() != _treeNode.AOTgetSource())
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #performCheckOfTreenode
        #private void performCheckOfTreenode(TreeNode _treeNode)
        #{
        #    SysBPCheckBase      sysBPCheckBase;
        #    int                 infologLines;
        #
        #    //Find the BP rules applying to this treenode
        #    sysBPCheckBase = this.getSysBpCheckBase(treeNode);
        #    sysBPCheckBase.parmSysBPCheck(this);
        #
        #    try
        #    {
        #        if (sysBPCheckBase)
        #        {
        #            infologLines = infologLine();
        #            checkChildren = sysBPCheckBase.checkChildren();
        #
        #            sysBPCheckBase.checkPreInit();
        #
        #            if (sysBPCheckBase.init())
        #            {
        #                sysBPCheckBase.check();
        #            }
        #            else
        #            {
        #                // init() has failed with an error msg in the infolog
        #                if (infologLines != infologLine())
        #                {
        #                    systemErrors++;
        #                    this.addError(#BPError, systemErrors, 0, strFmt("@SYS90607", SysTreeNode::getPath(treeNode)), methodStr(SysBPCheck, performCheckOfTreenode), #ClassesPath+'\\'+classStr(SysBPCheck));
        #                }
        #            }
        #        }
        #    }
        #    catch
        #    {
        #        //Unknown references can lead to exceptions being thrown.
        #        exceptionTextFallThrough();
        #    }
        #
        #    if (sysBPCheckBase)
        #    {
        #        sysBPCheckBase.dispose();
        #        sysBPCheckBase = null;
        #        // objects that are treeNodeRelease'd and contains
        #        // references to other objects has to be null'ed explicitely before
        #        // the release when they are going to be reassigned
        #    }
        #}
      ENDSOURCE
      SOURCE #shouldIgnore
        #public boolean shouldIgnore(int _errorCode, TreeNodePath _treeNodePath)
        #{
        #    Set ignoreSet;
        #    boolean ignore = false;
        #
        #    if (this.parmIgnoreMap().exists(_errorCode))
        #    {
        #        ignoreSet = ignoreMap.lookup(_errorCode);
        #        if (!ignoreSet || ignoreSet.in(_treeNodePath))
        #            ignore = true;
        #    }
        #
        #    return ignore;
        #}
      ENDSOURCE
      SOURCE #toBeUsed
        #// Error if check includes errors
        #// Warning if check includes warnings and/or errors
        #// All if check includes info
        #public boolean toBeUsed(SysBPWarningLevel _sysBPWarningLevel)
        #{
        #    boolean ret;
        #
        #    switch (parameters.WarningLevel)
        #    {
        #        case SysBPWarningLevel::Error : // Only Errors
        #            ret = (_sysBPWarningLevel == SysBPWarningLevel::Error) ? true : false;
        #            break;
        #
        #        case SysBPWarningLevel::Warning : // Errors and Warnings
        #            ret = (_sysBPWarningLevel == SysBPWarningLevel::Error ||
        #                   _sysBPWarningLevel == SysBPWarningLevel::Warning) ? true : false;
        #            break;
        #
        #        default : // All
        #            ret = true;
        #            break;
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #traverseTreeNodes
        #private void traverseTreeNodes(TreeNode _treeNode)
        #{
        #    TreeNodeTraverser   treeNodeTraverser;
        #    TreeNodePath        parentPath;
        #    TreeNode            parentNode;
        #    boolean             performCheck = true;
        #    boolean             includeProxyNodes = false;
        #
        #    checkChildren = true;
        #    if (_treeNode)
        #    {
        #        includeProxyNodes = this.isProxyNode(_treeNode);
        #        if (parameters.LayerSetting == SysBPLayerSetting::SkipLowerLayer)
        #        {
        #            parentNode = _treeNode;
        #            while (parentNode)
        #            {
        #                if (parentNode.treeNodeType().isLayerAware())
        #                {
        #                    performCheck = this.performCheckDueToLayerSetting(parentNode);
        #                    break;
        #                }
        #                parentNode = parentNode.AOTparent();
        #            }
        #        }
        #
        #        treeNodeTraverser = new TreeNodeTraverser(_treeNode);
        #
        #        // Traverse treenodes
        #        while (treeNodeTraverser.next())
        #        {
        #            if (!compilationResultProvider)
        #            {
        #                setPrefix(treeNodeTraverser.infologPrefix());
        #            }
        #
        #            // Get current treenode
        #            treeNode = treeNodeTraverser.currentNode();
        #
        #            if (!includeProxyNodes && this.isProxyNode(treeNode))
        #            {
        #                continue;
        #            }
        #
        #            if (parameters.LayerSetting == SysBPLayerSetting::SkipLowerLayer
        #             && treeNode.treeNodeType().isLayerAware())
        #            {
        #                performCheck = this.performCheckDueToLayerSetting(treeNode);
        #            }
        #
        #            // Is the current node a child, and should children be skipped?
        #            if (checkChildren ||
        #                strStartsWith(treeNode.treeNodePath(), parentPath)) //No longer a child to the parent
        #            {
        #                //No longer a child to the parent
        #                checkChildren = true;
        #                parentPath = treeNode.treeNodePath();
        #
        #                if (performCheck)
        #                {
        #                    //Perform the BP check
        #                    this.performCheckOfTreenode(treeNode);
        #                }
        #            }
        #
        #            if (treeNode.treeNodeType().isRootElement())
        #            {
        #                if (Global::hasGUI())
        #                {
        #                    infolog.messageWin().addLine(treeNode.treeNodePath());
        #                }
        #            }
        #        }
        #    }
        #
        #    infolog.globalCache().remove(classStr(SysScannerClass), classStr(Map));
        #}
      ENDSOURCE
      SOURCE #treeNode
        #public TreeNode treeNode()
        #{
        #    return treeNode;
        #}
      ENDSOURCE
      SOURCE #checkTreeNode
        #static public void checkTreeNode(TreeNode _treeNode)
        #{
        #    SysBPParameters parameters = SysBPParameters::find();
        #    Args args = new Args();
        #
        #    args.object(_treeNode);
        #    args.record(parameters);
        #    SysBPCheck::main(args);
        #}
      ENDSOURCE
      SOURCE #construct
        #private static SysBPCheck construct()
        #{
        #    return new SysBPCheck();
        #}
        #
      ENDSOURCE
      SOURCE #description
        #public client server static ClassDescription description()
        #{
        #    return strFmt("@SYS28198");
        #}
      ENDSOURCE
      SOURCE #handleTreenode
        #static public TreeNode handleTreenode(
        #    TreeNode                        _node,
        #    SysCompilationResultProvider    _compilationResultProvider,
        #    SysBPCheck                      _sysBPCheck)
        #{
        #    TreeNode treeNode = SysTreeNode::getNode(_node); // find the same node, on the server. If it doesn't exists the method will return the original
        #
        #    if (_compilationResultProvider &&
        #        treeNode.treeNodeType().isRootElement())
        #    {
        #        _compilationResultProvider.startBPCheckObject(SysTreeNode::getPath(_node));
        #    }
        #
        #    if (treeNode)
        #    {
        #        _sysBPCheck.traverseTreeNodes(treeNode);
        #    }
        #    else
        #    {
        #        _sysBPCheck.addError(#BPError, 0, 0, strFmt("@SYS75310", classStr(SysBPCheck)));
        #    }
        #    return treeNode;
        #
        #}
      ENDSOURCE
      SOURCE #ignore
        #public static void ignore(int _errorCode)
        #{
        #    SysCompilerOutput   compilerOutput = infolog.compilerOutput();
        #    SysBPCheck          bpCheck;
        #    Map                 ignoreMap;
        #    Set                 ignoreSet;
        #
        #    if (compilerOutput)
        #    {
        #        bpCheck = compilerOutput.getBPCheck();
        #        if (bpCheck)
        #        {
        #            ignoreMap = bpCheck.parmIgnoreMap();
        #            //
        #            // Null means ignore all occurrances
        #            //
        #            ignoreMap.insert(_errorCode, null);
        #        }
        #        ignoreSet = infolog.globalCache().get(classStr(SysBPCheck), staticMethodStr(SysBPCheck, ignore), new Set(Types::Integer));
        #        ignoreSet.add(_errorCode);
        #        infolog.globalCache().set(classStr(SysBPCheck), staticMethodStr(SysBPCheck, ignore), ignoreSet);
        #    }
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args args)
        #{
        #    SysCompilationResultProvider    compilationResultProvider;
        #    SysBPCheck                      sysBPCheck;
        #    TreeNode                        contextNode;
        #    TreeNode                        treeNode;
        #    TreeNode                        treeNodeToRelease;
        #    SysBPParameters                 originalParameters;
        #
        #    if (infolog)
        #    {
        #        compilationResultProvider = infolog.compilerOutput() as SysCompilationResultProvider;
        #    }
        #
        #    if (compilationResultProvider)
        #    {
        #        sysBPCheck = compilationResultProvider.getBPCheck();
        #    }
        #    else
        #    {
        #        sysBPCheck = SysBPCheck::newCompilerOutput(null);
        #        setPrefix("@SYS70918");
        #    }
        #
        #    if (sysBPCheck)
        #    {
        #        if (compilationResultProvider)
        #        {
        #            compilationResultProvider.startBPCheckContext();
        #        }
        #
        #        if (SysContextMenu::startedFrom(args))
        #        {
        #
        #            contextNode = args.parmObject().first();
        #
        #            while (contextNode)
        #            {
        #                treeNode = SysBPCheck::handleTreenode(contextNode, compilationResultProvider, sysBPCheck);
        #
        #                if (treeNodeToRelease &&
        #                    treeNode.treeNodeType().isConsumingMemory())
        #                {
        #                    treeNodeToRelease.treeNodeRelease();
        #                    treeNodeToRelease = null;
        #                }
        #
        #                contextNode = args.parmObject().next();
        #
        #                if (treeNode.treeNodeType().isConsumingMemory())
        #                {
        #                    treeNodeToRelease = treeNode;
        #                }
        #            }
        #        }
        #        else
        #        {
        #            if (args.object() is TreeNode)
        #            {
        #                contextNode = args.object() as TreeNode;
        #                if (args.record() is SysBPParameters)
        #                {
        #                    originalParameters = sysBPCheck.parmParameters();
        #                    sysBPCheck.parmParameters(args.record() as SysBPParameters);
        #                }
        #
        #                treeNode = SysBPCheck::handleTreenode(contextNode, compilationResultProvider, sysBPCheck);
        #
        #                if (args.record() is SysBPParameters)
        #                {
        #                    // Reset back to original parameters
        #                    sysBPCheck.parmParameters(originalParameters);
        #                }
        #            }
        #        }
        #        if (compilationResultProvider)
        #        {
        #            compilationResultProvider.endBPCheckContext();
        #        }
        #        if (treeNodeToRelease)
        #        {
        #            treeNodeToRelease.treeNodeRelease();
        #            treeNodeToRelease = null;
        #        }
        #
        #    }
        #    else
        #    {
        #        throw error(strFmt("@SYS19384", classStr(SysBPCheck)));
        #    }
        #
        #    // Notify the editors to allow them to update markings
        #    CompileOutputInfos::NotifyChanges();
        #}
        #
      ENDSOURCE
      SOURCE #newCompilerOutput
        #public static SysBPCheck newCompilerOutput(SysCompilationResultProvider _compilationResultProvider)
        #{
        #    SysBPCheck sysBPCheck = SysBPCheck::construct();
        #
        #    sysBPCheck.parmSysCompilationResultProvider(_compilationResultProvider);
        #    sysBPCheck.initIgnoreMap();
        #    return sysBPCheck;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysBPCheckExtendedType unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysBPCheckExtendedType
    PROPERTIES
      Name                #SysBPCheckExtendedType
      Extends             #SysBPCheckBase
      Origin              #{2D161984-0000-1000-6BDB-532C448A00DE}
      LegacyId            #6532
    ENDPROPERTIES
    
    METHODS
      SOURCE #check
        #public void check()
        #{
        #    if (parameters.CheckTableAndRecIdReferences)
        #    {
        #        this.checkTableIdAndRecIdInheritance();
        #    }
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #checkConfigurationKey
        #boolean checkConfigurationKey()
        #{
        #    Counter         counter;
        #    DictRelation    dictRelation;
        #    SysDictField    externField;
        #    Set             thisSet;
        #    Set             externSet;
        #
        #    boolean ret;
        #
        #    ret = super();
        #
        #    ret = ret && sysBPCheck.checkConfigurationKey(sysDictType.configurationKeyId());
        #
        #    if (ret)
        #    {
        #        dictRelation = sysDictType.relationObject(1);
        #        if (dictRelation)
        #        {
        #            thisSet = this.getSetOfConfigurationKeyId(sysDictType.configurationKeyId());
        #
        #            for (counter = 1; counter <= dictRelation.lines(); counter++)
        #            {
        #                externField = new SysDictField(dictRelation.table(), dictRelation.lineExternTableValue(counter));
        #                if (externField)
        #                {
        #                    externSet = this.getSetOfConfigurationKeyId(externField.configurationKeyId());
        #
        #                    if (!SysDictConfigurationKey::isSetsOfConfigurationKeyIdOk(thisSet, externSet))
        #                    {
        #                        sysBPCheck.addWarning(#BPErrorConfigurationKeySetsNotOk, 0, 0, strFmt("@SYS74534",
        #                                              counter,
        #                                              sysDictType.name(), SysDictConfigurationKey::configurationKeyIdSet2KeySet(thisSet).toString(),
        #                                              externField.name(), SysDictConfigurationKey::configurationKeyIdSet2KeySet(externSet).toString()));
        #                        ret = false;
        #                    }
        #                }
        #                else
        #                {
        #                    sysBPCheck.addError(#BPErrorTypeFieldNotExistInTable, 0, 0, strFmt("@SYS55418", dictRelation.lineExternTableValue(counter), dictRelation.table()));
        #                    ret = false;
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #checkHelpUse
        #boolean checkHelpUse()
        #{
        #    boolean     ret;
        #    SysDictType tmpSysDictType      = new SysDictType(sysDictType.extend());
        #    boolean     parentLabelAbstract = (sysDictType ? sysDictType.label() == '' : false);
        #
        #    ret = super();
        #
        #    ret = ret && sysBPCheck.checkHelpBasics(sysDictType.helpLabelId(), sysDictType.label(), #propertyHelpText, !parentLabelAbstract && this.checkLabelMandatory());
        #
        #    if (ret && sysDictType.helpDefined())
        #    {
        #        if (sysDictTypeExtend)
        #        {
        #            if (sysDictType.helpDefined() == sysDictTypeExtend.helpLabelId()) // Type's Help is a copy of its Extended (..) Data Type's Help
        #            {
        #                sysBPCheck.addError(#BPErrorTypeHelpIsCopyOfExtendedHelp, 0, 0, "@SYS55449", #propertyHelpText);
        #                ret = false;
        #            }
        #        }
        #        else // only check the enum if it is a stand alone (not via a Extended Type)
        #        {
        #            if (sysDictEnum)
        #            {
        #                if (sysDictType.helpDefined() == sysDictEnum.helpDefined()) // Type's Help is a copy of the Enum's Help
        #                {
        #                    sysBPCheck.addError(#BPErrorTypeHelpIsCopyOfEnumHelp, 0, 0, "@SYS55451", #propertyHelpText);
        #                    ret = false;
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #
        #}
        #
        #
        #
      ENDSOURCE
      SOURCE #checkLabelMandatory
        #private boolean checkLabelMandatory ()
        #{
        #    SysDictType tmpSysDictType;
        #    ;
        #
        #    tmpSysDictType = new SysDictType(sysDictType.id());
        #    while (tmpSysDictType.extend())
        #    {
        #        tmpSysDictType = new SysDictType(tmpSysDictType.extend());
        #    }
        #
        #    return tmpSysDictType.enumId() ? !isSysId(tmpSysDictType.enumId()) : !isSysId(tmpSysDictType.id());
        #
        #}
      ENDSOURCE
      SOURCE #checkLabelUse
        #boolean checkLabelUse()
        #{
        #    boolean     ret;
        #
        #    ret = super();
        #
        #    ret = ret && sysBPCheck.checkLabelBasics(sysDictType.labelLabel(), #propertyLabel, this.checkLabelMandatory(), sysDictType.labelDefined());
        #
        #    if (ret && sysDictType.labelDefined())
        #    {
        #        if (sysDictTypeExtend)
        #        {
        #            if (sysDictType.labelDefined() == sysDictTypeExtend.labelLabel()) // Type's Label is a copy of its Extended (..) Data Type's Label
        #            {
        #                sysBPCheck.addError(#BPErrorTypeLabelIsCopyOfExtendedHelp, 0, 0, "@SYS55448", #propertyLabel);
        #                ret = false;
        #            }
        #        }
        #        else // only check the enum if it is a stand alone (not via an Extended Type)
        #        {
        #            if (sysDictEnum)
        #            {
        #                if (sysDictType.labelDefined() == sysDictEnum.labelDefined()) // Type's Label is a copy of the Enum's Label
        #                {
        #                    sysBPCheck.addError(#BPErrorTypeLabelIsCopyOfEnumHelp, 0, 0, "@SYS55450", #propertyLabel);
        #                    ret = false;
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkProperties
        #boolean checkProperties()
        #{
        #    boolean ret;
        #    boolean rightJustified;
        #
        #    ret = super();
        #
        #    if (sysDictType.baseType() == Types::Enum &&
        #        !sysDictEnum)
        #    {
        #        sysBPCheck.addError(#BPErrorEnumNotExist, 0, 0, strFmt("@SYS57821", sysDictType.enumId()), #propertyEnumType);
        #    }
        #
        #    //sysDictType.stringRight returns false for all non-strings
        #    rightJustified = sysDictType.stringRight();
        #    if (rightJustified)
        #    {
        #        sysBPCheck.addError(#BPErrorEnumRightJustified, 0, 0, "@SYS107157", #propertyEnumType);
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #checkReference
        #boolean checkReference()
        #{
        #    int             arrayIndex;
        #    DictRelation    dictRelation;
        #    DictTable       externTable;
        #    DictField       externField;
        #
        #    boolean ret;
        #
        #    ret = super();
        #
        #    // Check to see if a field of this datatype are long enough to hold the values in the related table
        #    if (ret)
        #    {
        #        for (arrayIndex = 1; arrayIndex <= sysDictType.arraySize(); arrayIndex++)
        #        {
        #            dictRelation = sysDictType.relationObject(arrayIndex);
        #            if (dictRelation)
        #            {
        #                externTable = new DictTable(dictRelation.table()); // externTable
        #                if (externTable)
        #                {
        #                    externField = externTable.fieldObject(dictRelation.lineExternTableValue(1)); // the relation field are allways No. 1
        #                    if (!externField) // Field with ID '%1' does not exist in table '%2'
        #                    {
        #                        sysBPCheck.addError(#BPErrorTypeFieldNotExistInTable, 0, 0, strFmt("@SYS55418", dictRelation.lineExternTableValue(1), externTable.name()));
        #                        ret = false;
        #                    }
        #                    else
        #                    if (sysDictType.stringLen() < externField.stringLen()) // The fields in the relation are incompatible. '%1.%2' are '%3' characters too short.
        #                    {
        #                        sysBPCheck.addError(#BPErrorTypeFieldsIncompatible, 0, 0, strFmt("@SYS55422",'', sysDictType.name(), externField.stringLen() - sysDictType.stringLen()));
        #                        ret = false;
        #                    }
        #                }
        #                else
        #                {
        #                    sysBPCheck.addError(#BPErrorTypeExternTableUnknown, 0, 0, strFmt("@SYS55416", dictRelation.externTable())); // Table with ID '%1' does not exist
        #                    ret = false;
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #checkTableIdAndRecIdInheritance
        #boolean checkTableIdAndRecIdInheritance()
        #{
        #    boolean ret;
        #;
        #
        #    if (sysDictType.id()     != extendedTypeNum(RefRecId) &&
        #        sysDictType.extend() == extendedTypeNum(RecId))
        #    {
        #        sysBPCheck.addError(#BPErrorTypeExtendsRecId, 0, 0, "@SYS92962");
        #        ret = false;
        #    }
        #
        #    if (sysDictType.id()     != extendedTypeNum(RefTableId) &&
        #        sysDictType.extend() == extendedTypeNum(TableId))
        #    {
        #        sysBPCheck.addError(#BPErrorTypeExtendsTableId, 0, 0, "@SYS92963");
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysBPCheckExtendedType extends SysBPCheckBase
        #{
        #    SysDictType sysDictType;
        #    SysDictType sysDictTypeExtend;
        #    SysDictEnum sysDictEnum;
        #}
      ENDSOURCE
      SOURCE #dispose
        #public void dispose()
        #{
        #    super();
        #    sysDictType = null;
        #    sysDictTypeExtend = null;
        #    sysDictEnum = null;
        #}
      ENDSOURCE
      SOURCE #getSetOfConfigurationKeyId
        #private Set getSetOfConfigurationKeyId(ConfigurationKeyId _configurationKeyId)
        #{
        #    SysDictConfigurationKey sysDictConfigurationKey;
        #    Set set;
        #    ;
        #
        #    sysDictConfigurationKey = new SysDictConfigurationKey(_configurationKeyId);
        #    if (sysDictConfigurationKey)
        #    {
        #        set = sysDictConfigurationKey.getSetOfParentConfigurationKeyId();
        #        set.add(_configurationKeyId);
        #    }
        #    else
        #    {
        #        set = new Set(Types::Integer);
        #    }
        #
        #    return set;
        #}
      ENDSOURCE
      SOURCE #init
        #public boolean init()
        #{
        #    super();
        #
        #    sysDictType = SysDictType::newName(sysBPCheck.treeNode().treeNodeName());
        #
        #    if (sysDictType)
        #    {
        #        if (match('<tutorial', sysDictType.name()) ||
        #            match('<DEL_', sysDictType.name()))
        #        {
        #            return false;
        #        }
        #        else
        #        {
        #            sysDictTypeExtend = new SysDictType(sysDictType.extend());
        #            sysDictEnum       = new SysDictEnum(sysDictType.enumId());
        #
        #            if (sysDictType.name() != sysBPCheck.treeNode().treeNodeName())
        #            {
        #                error(strFmt("@SYS60291",classStr(SysDictType), sysDictType.name(), sysBPCheck.treeNode().treeNodeName()));
        #                return false;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        error(strFmt("@SYS19384", classStr(SysDictType)));
        #        return false;
        #    }
        #    return true;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysBPCheckFormEditControl unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysBPCheckFormEditControl
    PROPERTIES
      Name                #SysBPCheckFormEditControl
      Extends             #SysBPCheckFormBase
      Origin              #{2D19198B-0000-1000-3BA7-26BCEE5736BD}
      LegacyId            #6539
    ENDPROPERTIES
    
    METHODS
      SOURCE #check
        #public void check()
        #{
        #    super();
        #
        #    if (parameters.CheckDisablingTechnique)
        #    {
        #        this.checkDisablingTechnique();
        #    }
        #
        #    this.checkMenuItemName();
        #    this.checkWebMenuItemName();
        #    this.checkMinNoOfDecimals();
        #    this.checkListPageControl(sysBPCheck.treeNode(), false);
        #}
      ENDSOURCE
      SOURCE #checkConfigurationKey
        #boolean checkConfigurationKey()
        #{
        #    boolean ret;
        #
        #    ret = super();
        #
        #    ret = ret && sysBPCheck.checkConfigurationKey(configurationKeyName2Id(findProperty(properties, #PropertyConfigurationKey)));
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #checkDisablingTechnique
        #/*
        #    Fields the user shouldn't change, should be set like this:
        #    allowEdit   No  so the user can't change the value.
        #    Skip        Yes Set skip to yes if the user shouldn't enter the field on his or her tabbing through the form.
        #    Enabled     Yes default The user can explicitly navigate to the field to see the help text or copy the field value.
        #*/
        #boolean checkDisablingTechnique() // checkFormControlDisablingTechnique
        #{
        #    identifierName allowEdit;
        #    identifierName skip;
        #    identifierName enabled;
        #    boolean        ret = true;
        #    ;
        #
        #    if (sysBPCheck.toBeUsed(SysBPWarningLevel::Warning))
        #    {
        #        allowEdit = findProperty(properties, #PropertyAllowEdit);
        #        skip      = findProperty(properties, #PropertySkip);
        #        enabled   = findProperty(properties, #PropertyEnabled);
        #
        #        if ((allowEdit && skip && enabled) && // situation can't be checked for control that hasnt all three properties
        #            (enabled == #PropertyValueNo))
        #        {
        #            sysBPCheck.addWarning(#BPErrorFormDisablingTechnique, 0, 0, "@SYS72538", #propertyAllowEdit);
        #            ret = false;
        #        }
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #checkLabelUse
        #/*
        #    Each control must effectively have a label and a help text, preferably from the used field, method, EDT or Enum.
        #    Label and a help text must not be the same as from the used field, method, EDT or Enum (disabling intelliMorph).
        #    Label and a help text must not be equal (i.e. the help must be more descriptive)
        #*/
        #boolean checkLabelUse()
        #{
        #    identifierName  dataField        = findProperty(properties, #PropertydataField);
        #    identifierName  dataSource       = findProperty(properties, #PropertyDataSource);
        #    identifierName  dataMethod       = findProperty(properties, #PropertyDataMethod);
        #    identifierName  extendedDataType = findProperty(properties, #PropertyExtendedDataType);
        #    identifierName  enumType         = findProperty(properties, #PropertyEnumType);
        #    LabelString     label            = findProperty(properties, #PropertyLabel);
        #    LabelString     helpText         = findProperty(properties, #PropertyHelpText);
        #    boolean         showLabel        = findProperty(properties, #PropertyShowLabel) == #PropertyValueYes;
        #
        #    LabelString     labelString;
        #
        #    FormBuildDataSource formBuildDataSource;
        #    SysDictMethod       dictMethod;
        #
        #    TreeNode            memberFunction;
        #    SysDictField        sysDictField;
        #    SysDictType         sysDictType;
        #    SysDictEnum         sysDictEnum;
        #    SysDictClass        sysDictClass;
        #    boolean             ret;
        #
        #    ret = super();
        #
        #    if (ret)
        #    {
        #        if (dataField && dataSource)
        #        {
        #            if (!label || !helpText)
        #            {
        #                formBuildDataSource = SysFormBuildDataSource::findTreeNode(sysBPCheck.treeNode());
        #                if (!formBuildDataSource)
        #                {
        #                    error(strfmt("@SYS72519",dataSource,dataField),'',
        #                          new SysInfoAction_Properties(sysBPCheck.treeNode().treeNodePath()));
        #                    return false;
        #                }
        #
        #                sysDictField = new SysDictField(formBuildDataSource.table(), fieldname2id(formBuildDataSource.table(), dataField));
        #                if (!sysDictField)
        #                {
        #                    error(strfmt("@SYS55418",dataField,formBuildDataSource.table()),'',
        #                          new SysInfoAction_Properties(sysBPCheck.treeNode().treeNodePath()));
        #                    return false;
        #                }
        #            }
        #        }
        #        else
        #        if (dataMethod)
        #        {
        #            if (dataSource)
        #            {
        #                formBuildDataSource = SysFormBuildDataSource::findTreeNode(sysBPCheck.treeNode());
        #                if (!formBuildDataSource)
        #                {
        #                    error(strfmt("@SYS72522",dataSource,dataMethod),'',
        #                          new SysInfoAction_Properties(sysBPCheck.treeNode().treeNodePath()));
        #                    return false;
        #                }
        #
        #                // at data source level?!     \Forms\CustTrans\Data Sources\CustTrans\Methods
        #                memberFunction = this.findNode(strfmt(#DataSourceMethodPath, SysTreeNode::getRootElementPath(sysBPCheck.treeNode()), dataSource, dataMethod));
        #
        #                if (memberFunction)
        #                {
        #                    dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod,0,'');
        #                    dictMethod.setMethod(memberFunction);
        #                }
        #
        #                if (dictMethod == null)
        #                {
        #                    sysDictClass = new SysDictClass(classNum(FormDataSource));
        #                    if (SysDictClass.hasObjectMethod(dataMethod))
        #                    {
        #                        dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(FormDataSource), dataMethod);
        #                    }
        #
        #                    if (dictMethod != null && dictMethod.displayType() == DisplayFunctionType::None)
        #                    {
        #                        // If the method is defined on FormDataSource but is not a data method check on the backing table.
        #                        dictMethod = null;
        #                    }
        #                }
        #
        #                if (dictMethod == null)    // at table?
        #                {
        #                    dictMethod = new SysDictMethod(UtilElementType::TableInstanceMethod,formBuildDataSource.table(),dataMethod);
        #                    if (!dictMethod)
        #                    {
        #                        error(strfmt("@SYS60360",dataMethod),'',
        #                              new SysInfoAction_Properties(sysBPCheck.treeNode().treeNodePath()));
        #                        return false;
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                // find the display method, either local at the method node or at the form level.
        #                // local?
        #                memberFunction = this.findNode(strfmt(#MethodPath, sysBPCheck.treeNode().AOTparent().treeNodePath(), dataMethod));
        #                if (!memberFunction)
        #                {
        #                    // at form level?!
        #                    memberFunction = this.findNode(strfmt(#MethodPath, SysTreeNode::getRootElementPath(sysBPCheck.treeNode()), dataMethod));
        #                }
        #                if (!memberFunction) // Method not found
        #                {
        #                    sysBPCheck.addError(#compileApplicationCheck, 0, 0, strfmt("@SYS60360", dataMethod));
        #                    ret = false;
        #                }
        #
        #                dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod,0,'');
        #                if (memberFunction)
        #                {
        #                    dictMethod.setMethod(memberFunction);
        #                }
        #            }
        #
        #            switch (dictMethod.returnType())
        #            {
        #                case Types::UserType :
        #                    sysDictType = new SysDictType(dictMethod.returnId());
        #                    break;
        #
        #                case Types::Enum :
        #                    sysDictEnum = new SysDictEnum(dictMethod.returnId());
        #                    break;
        #
        #                default:
        #                    sysDictType = new SysDictType(dictMethod.returnId());
        #                    break;
        #            }
        #
        #            if (!(sysDictType || sysDictEnum)) // Display methods must be typed
        #            {
        #                sysBPCheck.addError(#compileApplicationCheck, 0, 0, strfmt("@SYS60362", dictMethod.returnType(), dictMethod.name()));
        #                ret = false;
        #            }
        #        }
        #        else
        #        if (extendedDataType)
        #        {
        #            sysDictType = new SysDictType(new Dictionary().typeName2Id(extendedDataType));
        #        }
        #        else
        #        if (enumType)
        #        {
        #            sysDictEnum = new SysDictEnum(new Dictionary().enumName2Id(enumType));
        #        }
        #
        #        // Check Label
        #        if (label)
        #        {
        #            labelString = label;
        #            ret = sysBPCheck.checkLabelBasics(label, #propertyLabel);
        #        }
        #        else
        #        {
        #            if (sysDictField)
        #            {
        #                labelString = sysDictField.labelLabel();
        #                ret = sysBPCheck.checkLabelBasics(labelString, #propertyLabel, showLabel && (!sysDictField.label() && !isSysId(sysDictField.typeId()) && !isSysId(sysDictField.tableid())));
        #            }
        #            else
        #            if (sysDictType)
        #            {
        #                labelString = sysDictType.labelLabel();
        #                ret = sysBPCheck.checkLabelBasics(labelString, #propertyLabel, showLabel && !this.isSysIdType(sysDictType.id()));
        #            }
        #            else
        #            if (sysDictEnum)
        #            {
        #                labelString = sysDictEnum.labelDefined();
        #                ret = sysBPCheck.checkLabelBasics(labelString, #propertyLabel, showLabel && !isSysId(sysDictEnum.id()));
        #            }
        #        }
        #
        #        labelString = SysLabel::labelId2String2(labelString);
        #
        #        // Check Help
        #        if (helpText)
        #        {
        #            ret = sysBPCheck.checkHelpBasics(helpText, labelString, #propertyHelpText);
        #        }
        #        else
        #        {
        #            if (sysDictField)
        #            {
        #                ret = sysBPCheck.checkHelpBasics(sysDictField.helpLabelId(), labelString, #propertyHelpText, !sysDictField.help() && !isSysId(sysDictField.typeId()) && !isSysId(sysDictField.tableid()));
        #            }
        #            else
        #            if (sysDictType)
        #            {
        #                ret = sysBPCheck.checkHelpBasics(sysDictType.helpLabelId(), labelString, #propertyHelpText, !sysDictType.help() && !isSysId(sysDictType.id()));
        #            }
        #            else
        #            if (sysDictEnum)
        #            {
        #                ret = sysBPCheck.checkHelpBasics(sysDictEnum.helpDefined(), labelString, #propertyHelpText, !sysDictEnum.help() && !isSysId(sysDictEnum.id()));
        #            }
        #        }
        #
        #        if (showLabel)
        #        {
        #            // Is the specialized label needed?
        #            if (label && (sysDictType || sysDictEnum))
        #            {
        #                if (sysDictType &&
        #                    label == sysDictType.labelLabel())
        #                {
        #                    sysBPCheck.addError(#BPErrorLabelIsCopyOfDisplayMethod, 0, 0, "@SYS60361", #propertyLabel); // Control's label is a copy of its display methods label
        #                    ret = false;
        #                }
        #                else
        #                if (sysDictEnum &&
        #                    label == sysDictEnum.labelDefined())
        #                {
        #                    sysBPCheck.addError(#BPErrorLabelIsCopyOfDisplayMethod, 0, 0, "@SYS60361", #propertyLabel); // Control's label is a copy of its display methods label
        #                    ret = false;
        #                }
        #                else
        #                if (sysBPCheck.toBeUsed(SysBPWarningLevel::Warning))
        #                {
        #                    if (sysDictType &&
        #                        sysDictType.label())
        #                    {
        #                        sysBPCheck.addWarning(#BPErrorLabelChangedAtControl, 0, 0, strfmt("@SYS60298", sysDictType.label(), SysLabel::labelId2String2(label)), #propertyLabel); // why not use the defined label?!
        #                        ret = false;
        #                    }
        #                    else
        #                    if (sysDictEnum &&
        #                        sysDictEnum.label())
        #                    {
        #                        sysBPCheck.addWarning(#BPErrorLabelChangedAtControl, 0, 0, strfmt("@SYS60298", sysDictEnum.label(), SysLabel::labelId2String2(label)), #propertyLabel); // why not use the defined label?!
        #                        ret = false;
        #                    }
        #                }
        #            }
        #        }
        #
        #        // Is the specialized help needed?
        #        if (helpText  && (sysDictType || sysDictEnum))
        #        {
        #            if (sysDictType && (helpText == sysDictType.helpLabelId()))
        #            {
        #                sysBPCheck.addError(#BPErrorFieldHelpIsCopyOfExtendedHelp, 0, 0, "@SYS72533", #propertyHelp);
        #                ret = false;
        #            }
        #            else
        #            if (sysDictEnum && (helpText == sysDictEnum.helpDefined()))
        #            {
        #                sysBPCheck.addError(#BPErrorFieldHelpIsCopyOfEnumHelp, 0, 0, "@SYS72533", #propertyHelp);
        #                ret = false;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkMenuItemName
        #/*
        #* MenuItemName should be blank for FormWebControls
        #*/
        #boolean checkMenuItemName()
        #{
        #    boolean ret = true;
        #
        #    if (findPropertyPos(properties, #PropertyMenuItemName) > 0 &&
        #        findProperty(properties, #PropertyMenuItemName) != '')
        #    {
        #        sysBPCheck.addError(#BPErrorFormWebControlUnknownMenuItemName, 0, 0, strfmt("@SYS93552", #PropertyMenuItemName, sysBPCheck.treeNode().treeNodeName()), #PropertyMenuItemName);
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkMinNoOfDecimals
        #boolean checkMinNoOfDecimals()
        #{
        #    boolean ret = true;
        #
        #    identifierName noOfDecimals = findProperty(properties, #PropertyNoofdecimals);
        #    identifierName minNoOfDecimals = findProperty(properties, #PropertyMinNoofdecimals);
        #
        #    if (noOfDecimals != #PropertyValueAuto &&
        #        minNoOfDecimals != #PropertyValueAuto &&
        #        str2int(noOfDecimals) < str2int(minNoOfDecimals))
        #    {
        #        sysBPCheck.addError(#BPErrorFormControlMinNoOfDecimals, 0, 0, strfmt("@SYS96235"));
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #checkReference
        #boolean checkReference()
        #{
        #    #AOT
        #
        #    Form                form;
        #    FormBuildDataSource formBuildDataSource;
        #    SysDictTable        table;
        #    SysDictTable        sysDictTable;
        #    SysDictClass        sysDictClass;
        #    DictMethod          dictMethod;
        #    MemberFunction      memberFunction;
        #    Counter             counter;
        #    boolean             ret;
        #    str                 dataSource = findProperty(properties, #PropertyDataSource);
        #    str                 dataField  = hasProperty(properties, #PropertyDataField) ? findProperty(properties, #PropertyDataField) : findProperty(properties, #PropertyReferenceField);
        #    str                 dataMethod = findProperty(properties, #PropertyDataMethod);
        #    str                 optionalRecordControl = findProperty(properties, #PropertyOptionalRecordControl);
        #
        #    ret = super();
        #
        #    if (ret && dataSource)
        #    {
        #        if (substr(dataField, strlen(dataField), 1) == ']')
        #        {
        #            dataField = strdel(dataField, strfind(dataField, '[', 1, strlen(dataField)), strlen(dataField));
        #        }
        #
        #        ret = false;
        #        form = this.findNode(SysTreeNode::applObjectPath(sysBPCheck.treeNode().treeNodePath()));
        #
        #        if (form)
        #        {
        #            // Get data source
        #            for (counter = form.dataSourceCount(); counter; counter--)
        #            {
        #                formBuildDataSource = form.dataSource(counter);
        #                if (formBuildDataSource.name() == dataSource)
        #                {
        #                    ret = true;
        #                    break;
        #                }
        #            }
        #
        #            if (ret)
        #            {
        #                ret = false;
        #
        #                sysDictTable = new SysDictTable(formBuildDataSource.table());
        #                if (sysDictTable)
        #                {
        #                    switch (true)
        #                    {
        #                        case optionalRecordControl == 'Yes':
        #                            ret = true;
        #                            break;
        #
        #                        case dataField  != '' :
        #                            if (sysDictTable.fieldName2Id(dataField))
        #                            {
        #                                ret = true;
        #                            }
        #
        #                            if (!ret)
        #                            {
        #                                sysBPCheck.addError(#BPError, 0, 0, strfmt("@SYS77716", dataField, sysDictTable.name()), #PropertyDataMethod);
        #                            }
        #                            break;
        #
        #                        case dataMethod != '' :
        #                            dictMethod = null;
        #
        #                            // look for the method on the form data source
        #                            sysDictClass = new SysDictClass(classNum(FormDataSource));
        #                            if (SysDictClass.hasObjectMethod(dataMethod))
        #                            {
        #                                dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(FormDataSource), dataMethod);
        #                            }
        #
        #                            if (dictMethod != null && dictMethod.displayType() == DisplayFunctionType::None)
        #                            {
        #                                // If the method is defined on FormDataSource but is not a data method check on the backing table.
        #                                dictMethod = null;
        #                            }
        #
        #                            if (dictMethod == null)
        #                            {
        #                                memberFunction = this.findNode(strfmt(#DataSourceMethodPath, form.treeNodePath(), dataSource, dataMethod));
        #                            }
        #
        #                            //  if the dataMethod was on the form's DataSource continue
        #                            if (dictMethod != null || memberFunction)
        #                            {
        #                                ret = true;
        #                            }
        #                            else
        #                            {
        #                                // look on the table and or the super tables
        #                                table =  new SysDictTable(sysDictTable.id());
        #                                while(table)
        #                                {
        #                                    for (counter = table.objectMethodCnt(); counter; counter--)
        #                                    {
        #                                        if (table.objectMethodObject(counter).name() == dataMethod)
        #                                        {
        #                                            memberFunction = this.findNode(strfmt(#MethodPath, table.path(), dataMethod)); // data method on Table
        #
        #                                            // DictMethod object only works for normal tables
        #                                            if (!table.isView() &&
        #                                                !table.isMap())
        #                                            {
        #                                                dictMethod = new DictMethod(UtilElementType::TableInstanceMethod, table.id(), memberFunction.name());
        #                                            }
        #                                            ret = true;
        #                                            break;
        #                                        }
        #                                    }
        #
        #                                    if(!ret && !memberFunction)
        #                                    {
        #                                        // try the super table
        #                                        if(table.supportInheritance())
        #                                        {
        #                                            table = new SysDictTable(table.extends());
        #                                        }
        #                                        else
        #                                        {
        #                                            table = null;
        #                                        }
        #                                    }
        #                                    else
        #                                    {
        #                                        table = null;
        #                                    }
        #                                }
        #                            }
        #
        #                            if (ret)
        #                            {
        #                                if (memberFunction || dictMethod != null)
        #                                {
        #                                    if ((dictMethod &&
        #                                            dictMethod.displayType() == DisplayFunctionType::None) ||
        #                                        //
        #                                        // AOTTooltip isn't type safe as dictMethod is
        #                                        // But dictMethod only works for table methods
        #                                        //
        #                                        (!dictMethod &&
        #                                            !match('display ', memberFunction.AOTtoolTip()) &&
        #                                            !match('edit ', memberFunction.AOTtoolTip())))
        #                                    {
        #                                        sysBPCheck.addError(#BPError, 0, 0, strfmt("@SYS77717", dataMethod, dataSource), #propertyDataMethod);
        #                                        ret = false;
        #                                    }
        #                                }
        #                                else
        #                                {
        #                                    sysBPCheck.addError(#BPError, 0, 0, strfmt("@SYS77713", dataMethod, dataSource), #PropertyDataMethod);
        #                                    ret = false;
        #                                }
        #                            }
        #                            else
        #                            {
        #                                sysBPCheck.addError(#BPError, 0, 0, strfmt("@SYS77713", dataMethod, dataSource), #PropertyDataMethod);
        #                                ret = false;
        #                            }
        #                            break;
        #
        #                        default :
        #                            sysBPCheck.addError(#BPError, 0, 0, strfmt("@SYS77714", dataSource), #propertyDataSource);
        #                            ret = false;
        #                            break;
        #                    }
        #                }
        #                else
        #                {
        #                    sysBPCheck.addError(#BPError, 0, 0, strfmt("@SYS74746", formBuildDataSource.name()));
        #                    ret = false;
        #                }
        #            }
        #            else
        #            {
        #                sysBPCheck.addError(#BPError, 0, 0, strfmt("@SYS77715", dataSource));
        #                ret = false;
        #            }
        #
        #            formBuildDataSource = null;
        #        }
        #        else
        #        {
        #            error(strfmt("@SYS57709", sysBPCheck.treeNode().treeNodePath()));
        #            ret = false;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkWebMenuItemName
        #/*
        #* WebMenuItemName should be valid if not blank for FormWebControls
        #*/
        #boolean checkWebMenuItemName()
        #{
        #    boolean ret = true;
        #    str webMenuItemName = findProperty(properties, #PropertyWebMenuItemName);
        #    str webMenuItemType = findProperty(properties, #PropertyWebMenuItemType);
        #    UtilElementType utilElementType;
        #
        #    if (findPropertyPos(properties, #PropertyWebMenuItemName) > 0 &&
        #        webMenuItemName != '' && webMenuItemType != ''
        #       )
        #    {
        #        switch(webMenuItemType)
        #        {
        #            case 'Url':
        #                utilElementType = UtilElementType::WebUrlItem;
        #                break;
        #            case 'Action':
        #                utilElementType = UtilElementType::WebActionItem;
        #                break;
        #        }
        #
        #        if (!xUtilElements::exist(utilElementType, webMenuItemName))
        #        {
        #            sysBPCheck.addError(#BPErrorFormWebControlUnknownMenuItemName, 0, 0, strfmt("@SYS93552", #PropertyWebMenuItemName, sysBPCheck.treeNode().treeNodeName()), #PropertyWebMenuItemName);
        #            ret = false;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysBPCheckFormEditControl extends SysBPCheckFormBase
        #{
        #    #SysBPCheck
        #    #Properties
        #}
      ENDSOURCE
      SOURCE #isSysIdType
        #protected boolean isSysIdType(int _id)
        #{
        #    DictType dictType;
        #
        #    if (isSysId(_id))
        #        return true;
        #
        #    dictType = new DictType(_id);
        #    if (dictType && dictType.extend())
        #    {
        #        return this.isSysIdType(dictType.extend());
        #    }
        #    return false;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysBPCheckMemberFunction unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysBPCheckMemberFunction
    PROPERTIES
      Name                #SysBPCheckMemberFunction
      Extends             #SysBPCheckBase
      Origin              #{2D181999-0000-1000-26EA-7D0DB529E986}
      LegacyId            #6553
    ENDPROPERTIES
    
    METHODS
      SOURCE #addSuppressableError
        #protected void addSuppressableError(int _errorCode, int _line, int _col, str _errorMessage, str _propertyName = '', TreeNodePath _treeNodePath = '')
        #{
        #    if (this.deviationDocumented(_line))
        #    {
        #        if (prmisDefault(_treeNodePath))
        #        {
        #            sysBPCheck.addInfo(_errorCode, _line, _col, _errorMessage, _propertyName);
        #        }
        #        else
        #        {
        #            sysBPCheck.addInfo(_errorCode, _line, _col, _errorMessage, _propertyName, _treeNodePath);
        #        }
        #    }
        #    else
        #    {
        #        if (prmisDefault(_treeNodePath))
        #        {
        #            sysBPCheck.addError(_errorCode, _line, _col, _errorMessage, _propertyName);
        #        }
        #        else
        #        {
        #            sysBPCheck.addError(_errorCode, _line, _col, _errorMessage, _propertyName, _treeNodePath);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addSuppressableWarning
        #protected void addSuppressableWarning(int _errorCode, int _line, int _col, str _errorMessage, str _propertyName = '', TreeNodePath _treeNodePath = '')
        #{
        #    if (this.deviationDocumented(_line))
        #    {
        #        if (prmisDefault(_treeNodePath))
        #        {
        #            sysBPCheck.addInfo(_errorCode, _line, _col, _errorMessage, _propertyName);
        #        }
        #        else
        #        {
        #            sysBPCheck.addInfo(_errorCode, _line, _col, _errorMessage, _propertyName, _treeNodePath);
        #        }
        #    }
        #    else
        #    {
        #        if (prmisDefault(_treeNodePath))
        #        {
        #            sysBPCheck.addWarning(_errorCode, _line, _col, _errorMessage, _propertyName);
        #        }
        #        else
        #        {
        #            sysBPCheck.addWarning(_errorCode, _line, _col, _errorMessage, _propertyName, _treeNodePath);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #check
        #public void check()
        #{
        #    super();
        #
        #    if (sysDictMethod.compiledOk() && memberFunction.AOTgetSource())
        #    {
        #        this.checkSource();
        #        this.checkIndentation();
        #        this.checkSymbols();
        #        this.checkReturnTypes();
        #
        #        this.checkFrameworkClassDisclaimer();
        #
        #        if (parameters.CheckVCSReferences)
        #        {
        #            this.checkUseLocalObjects();
        #        }
        #
        #        if (parameters.CheckTwC)
        #        {
        #            this.checkUseOfDangerousClasses();
        #            this.checkUseOfDangerousFunctions();
        #        }
        #
        #        if (parameters.CheckEmptyMethods)
        #        {
        #            this.checkEmptyMethod();
        #        }
        #
        #        if (parameters.CheckAOS)
        #        {
        #            this.checkUseOfFieldLists();
        #            this.checkUseOfCacheAddMethod();
        #        }
        #
        #        if (parameters.CheckPrivacy)
        #        {
        #            this.checkAccessSpecifier();
        #        }
        #
        #        if (parameters.CheckDiscontinuation)
        #        {
        #            this.checkDiscontinuation();
        #        }
        #
        #        if (parameters.CheckFutureReservedWords)
        #        {
        #            this.checkFutureReservedWord();
        #        }
        #
        #        if (parameters.CheckVariables)
        #        {
        #            this.checkVariables();
        #        }
        #
        #        if (parameters.CheckXmlDocumentation)
        #        {
        #            this.checkXmlDocumentation();
        #        }
        #
        #        if (parameters.CheckUpgradeScript && isUpgradeScript)
        #        {
        #            this.checkUpgradeScriptMethodType();
        #            this.checkUpgradeScriptRequiredAttributes();
        #            this.checkUpgradeScriptTableXRef();
        #        }
        #
        #        if (parameters.CheckOperationLabelAttribute)
        #        {
        #            this.checkSysOperationLabel();
        #        }
        #
        #        if (parameters.CheckInteractionClassControlReferences)
        #        {
        #            this.checkInteractionClassControlReferences();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkAccessSpecifier
        #/*
        #    This method checks the method for how it's access specifier could be set to
        #    private/protected/public
        #    based on who calls it.
        #
        #    A hint will be given, if the methods access specifier has not been set,
        #    *   and could be set to more private than it it's default public.
        #    *   or could be explicitely specified as public.
        #
        #    If the programmer has explicitely specified any of the possible access specifiers, the check are skipped
        #    The compiler checks if combinations are possible at all.
        #*/
        #protected boolean checkAccessSpecifier()
        #{
        #    boolean ret = true;
        #
        #    xRefPaths xRefPaths;
        #    xRefPaths xRefPathsReference;
        #    xRefReferences xRefReferences;
        #    UtilElements callingElement;
        #
        #    AccessSpecifier neededPublicity;
        #    TreeNode callingNode;
        #    SysDictMethod superDictMethod;
        #
        #    #TokenTypes
        #
        #    boolean isMorePublic(AccessSpecifier oneAccessSpecifier, AccessSpecifier otherAccessSpecifier)   // is oneAccessSpecifier more public than otherAccessSpecifier?
        #    {
        #        switch (oneAccessSpecifier)
        #        {
        #            case AccessSpecifier::private:
        #                switch (otherAccessSpecifier)
        #                {
        #                    case AccessSpecifier::private:     return false;
        #                    case AccessSpecifier::protected:   return false;
        #                    case AccessSpecifier::public:      return false;
        #                }
        #            case AccessSpecifier::protected:
        #                switch (otherAccessSpecifier)
        #                {
        #                    case AccessSpecifier::private:     return true;
        #                    case AccessSpecifier::protected:   return false;
        #                    case AccessSpecifier::public:      return false;
        #                }
        #            case AccessSpecifier::public:
        #                switch (otherAccessSpecifier)
        #                {
        #                    case AccessSpecifier::private:     return true;
        #                    case AccessSpecifier::protected:   return true;
        #                    case AccessSpecifier::public:      return false;
        #                }
        #        }
        #        return false;
        #    }
        #
        #    AccessSpecifier maxPublicity(AccessSpecifier oneAccessSpecifier, AccessSpecifier otherAccessSpecifier)
        #    {
        #        return isMorePublic(oneAccessSpecifier, otherAccessSpecifier) ? oneAccessSpecifier : otherAccessSpecifier;
        #    }
        #
        #    if (sysBPCheck.toBeUsed(SysBPWarningLevel::Warning))
        #    {
        #        if (parentId &&           // this check is only done on table and class methods
        #            !(methodType == UtilElementType::ClassInstanceMethod && methodName == #MethodNameClassDeclaration)                              &&           // a ClassDeclaration isn't a real method
        #            sysDictMethod.displayType() == DisplayFunctionType::None                  &&           // that aren't edit/display methods (as theese are more public than public!)
        #            (sysDictMethod.accessSpecifier() == AccessSpecifier::public &&                         // that are having the default access specification (public)
        #             !new xppScanner(SysUtil::unpackSource(sysDictMethod.getSource())).find(#PUBLIC_SYM))) // and the default access specification (public) are the default, i.e. unspecified in the method
        #        {
        #            // set the inital bid on how private this method can be
        #            if (methodType == UtilElementType::ClassStaticMethod &&
        #                (methodName == #MethodNameMain        ||                              // main are called from the complete outside
        #                 methodName == #MethodNameDescription ||                              // description are called by the runbase framework
        #                 methodName == #MethodNameHelpText)                                   // helpText are a "standard property" (used in consistency check framework)
        #               )
        #            {
        #                neededPublicity = AccessSpecifier::public;
        #            }
        #            else
        #            {
        #                neededPublicity = AccessSpecifier::private; // most private ("lowest") possible, until otherwise proven
        #                if (methodType == UtilElementType::ClassInstanceMethod)
        #                {
        #                    superDictMethod = sysDictMethod.superDictMethod();
        #                    if (superDictMethod)
        #                        neededPublicity = superDictMethod.accessSpecifier();            // can't be more private than it?s super method
        #                }
        #                if (neededPublicity == AccessSpecifier::private)    // if it is overridden, private are too private
        #                {
        #                    if (sysDictMethod.subDictMethodList(true).elements())
        #                    {
        #                        neededPublicity = AccessSpecifier::protected; // protected is the most restrictive for an overridden method
        #                    }
        #                }
        #            }
        #
        #            if (neededPublicity != AccessSpecifier::public)
        #            {
        #                // find all direct call's to this method
        #                while select Path from xRefPaths
        #                join TableId from xRefReferences
        #                    where xRefReferences.xRefPathRecId == xRefPaths.RecId &&
        #                          xRefReferences.Reference     == XRefReference::Call
        #                join TableId from xRefPathsReference
        #                    where xRefPathsReference.RecId == xRefReferences.ReferencePathRecId &&
        #                          xRefPathsReference.Path  == memberFunction.treeNodePath()
        #                {
        #                    callingNode = this.findNode(xRefPaths.Path);
        #                    if (callingNode)
        #                    {
        #                        if (callingNode.treeNodeType().isUtilElement())
        #                        {
        #                            callingElement = callingNode.utilElement();
        #
        #                            // caller private to the table or the class
        #                            if (callingElement.ParentId == parentId &&
        #                               (( (callingElement.RecordType    == UtilElementType::ClassStaticMethod || callingElement.RecordType    == UtilElementType::ClassInstanceMethod) &&
        #                                  (methodType == UtilElementType::ClassStaticMethod || methodType == UtilElementType::ClassInstanceMethod) ) ||
        #                                ( (callingElement.RecordType    == UtilElementType::TableStaticMethod || callingElement.RecordType    == UtilElementType::TableInstanceMethod) &&
        #                                  (methodType == UtilElementType::TableStaticMethod || methodType == UtilElementType::TableInstanceMethod) ) ) )
        #                            {
        #                                neededPublicity = maxPublicity(neededPublicity,AccessSpecifier::private);
        #                            }
        #                            else
        #                            // caller from a sub class
        #                            if ((((callingElement.RecordType    == UtilElementType::ClassStaticMethod || callingElement.RecordType    == UtilElementType::ClassInstanceMethod) &&
        #                                  (methodType == UtilElementType::ClassStaticMethod || methodType == UtilElementType::ClassInstanceMethod) ) ) &&
        #                                  SysDictClass::isSuperclass(callingElement.ParentId,parentId) )
        #                            {
        #                                neededPublicity = maxPublicity(neededPublicity,AccessSpecifier::protected);
        #                            }
        #                            else
        #                            // caller from a another class
        #                            {
        #                                neededPublicity = AccessSpecifier::public;
        #                                break; // one external caller are enough to make it public
        #                            }
        #                        }
        #                        else
        #                        // caller from a another element (not class)
        #                        {
        #                            neededPublicity = AccessSpecifier::public;
        #                            break; // one external caller are enough to make it public
        #                        }
        #                    }
        #                }
        #            }
        #
        #            if (isMorePublic(sysDictMethod.accessSpecifier(),neededPublicity))
        #            {
        #                this.addSuppressableWarning(#BPErrorMethodAccessCanBeSetExplicitely, 1, 1, strFmt("@SYS68392", neededPublicity));
        #                ret = false;
        #            }
        #            else
        #            {
        #                if (neededPublicity == AccessSpecifier::public)// which is the default, and as we only are here if it isn't explicitely specified in the method, it can be set.
        #                {
        #                    this.addSuppressableWarning(#BPErrorMethodAccessCanBeSetExplicitely, 1, 1, strFmt("@SYS68392", neededPublicity));
        #                    ret = false;
        #                }
        #            }
        #        }
        #    }
        #    callingNode = null;
        #    return ret;
        #
        #}
        #
      ENDSOURCE
      SOURCE #checkAOS
        #/*
        #This method checks the source text for
        #    Client/server usability - tell's it's recommondations.
        #*/
        #public boolean checkAOS()
        #{
        #    TextBuffer  textBuffer;
        #    boolean     ret;
        #
        #    UtilElementType utilElementType;
        #
        #    ClassRunMode runOn = sysDictMethod.runMode();
        #    str runOnString;
        #    str tierString;
        #
        #    #define.serverString('server')
        #    #define.clientString('client')
        #    #define.calledFromString('called from')
        #
        #    int startPos;
        #    container posOfWhileSelect;     // list of pointers to while select statements
        #
        #    ClassRunMode calledRunOn;
        #    int countSides[];           // indexed by ClassRunMode + 1 (the one is zero (0), the other is one (1) based)
        #    str logSides[];
        #
        #    xRefNames         xRefNamesNull;
        #    xRefTmpReferences thisRefererences;
        #    xRefTmpReferences thisDeclarations;
        #
        #    void giveHint(ClassRunMode _tier)
        #    {
        #        boolean warn = true;
        #
        #        xRefPaths       xRefPathsCALL,
        #                        xRefPathsDEFINITION;
        #        xRefReferences  xRefReferencesCALL,
        #                        xRefReferencesDEFINITION;
        #        SysApplicationObjectPathInfo applObjectPathInfoCALL;
        #
        #        // Method is hinted to _tier, but if it's only called from the same _tier, don't bother to give a warning
        #        while select Path from xRefPathsCALL
        #        join TableId from xRefReferencesCALL
        #            where xRefReferencesCALL.xRefPathRecId == xRefPathsCALL.RecId
        #               && xRefReferencesCALL.Reference     == XRefReference::Call
        #               && xRefReferencesCALL.Line          >  0                         // .. virtual call's not checked by this procedure
        #        join TableId from xRefReferencesDEFINITION
        #            where xRefReferencesDEFINITION.xRefNameRecId == xRefReferencesCALL.xRefNameRecId
        #               && xRefReferencesDEFINITION.Reference     == XRefReference::Definition
        #        join TableId from xRefPathsDEFINITION
        #            where xRefPathsDEFINITION.Path == sysDictMethod.path()
        #               && xRefReferencesDEFINITION.xRefPathRecId == xRefPathsDEFINITION.RecId
        #        {
        #            warn = false;
        #            applObjectPathInfoCALL = new SysApplicationObjectPathInfo(xRefPathsCALL.Path);
        #            if (applObjectPathInfoCALL.runMode() != _tier)
        #            {
        #                warn = true;
        #                break;
        #            }
        #        }
        #        if (warn)
        #        {
        #            if (runOn == ClassRunMode::Called)
        #            {
        #                runOnString = #calledFromString;
        #            }
        #            else
        #            {
        #                runOnString = strLwr(strFmt('%1',runOn));
        #            }
        #            tierString = strLwr(strFmt('%1', _tier));
        #            this.addSuppressableWarning(#BPErrorMethodConsiderRunOn, 0, 0, strFmt("@SYS54211", runOnString, tierString, logSides[_tier + 1])); // Consider '%1' method to run on '%2' since it uses: '%3'
        #            ret = false;
        #        }
        #        else
        #        {
        #            sysBPCheck.addInfo(#BPErrorMethodOnlyCalledFrom, 0, 0, strFmt("@SYS68394", runOn, _tier, logSides[_tier + 1]));
        #        }
        #    }
        #    ;
        #
        #    if (!memberFunction.AOTgetSource())
        #        return true;
        #
        #    ret = super();
        #
        #    if (ret)
        #    {
        #        if (methodType == UtilElementType::ClassInstanceMethod &&
        #            match('AOSRunMode\\:\\:',memberFunction.AOTparent().AOTfindChild(#methodNameClassDeclaration).AOTgetSource()) ) // this is a class, and AOSRunMode is written in it's ClassDeclaration, skip it
        #        {
        #            sysBPCheck.addInfo(#BPErrorMethodAOSRunModeWritten, 0, 0, strFmt("@SYS55401", methodType, methodName));
        #            return true;
        #        }
        #
        #        if (match('dialog>', sysDictMethod.path())) // we skip the checks for *dialog methods, they are always run in the beginning of a bigger job (hopefully!)
        #            return true;
        #
        #        if (match('\\\\' + #methodNameClassDeclaration + '>', sysDictMethod.path())) // there are no checks to be done for classdeclarations
        #            return true;
        #
        #        if (runOn == ClassRunMode::ClientOrServer) // this must be an concious decision, so no further checking is nessecary
        #            return true;
        #
        #        if (sysDictMethod.isAbstract())     // there are no client server calls in an abstract method
        #            return true;
        #
        #        // init
        #        textBuffer = new TextBuffer();
        #        textBuffer.setText(scanner.source());
        #
        #        // BP Deviation Documented
        #        if (textBuffer.find('AOSRunMode\\:\\:Server')) // indicates the developer already decided that the current implementation is ok
        #        {
        #            if (runOn == ClassRunMode::Server)
        #            {
        #                sysBPCheck.addInfo(#BPErrorMethodAOSRunModeWritten, 0, 0, strFmt("@SYS85367", methodType, methodName, ClassRunMode::Server));
        #                return true;
        #            }
        #            sysBPCheck.addError(#BPErrorMethodBoundWrong, 0, 0, strFmt("@SYS85345", runOn, ClassRunMode::Server));
        #        }
        #
        #        // BP Deviation Documented
        #        if (textBuffer.find('AOSRunMode\\:\\:Client')) // indicates the developer already decided that the current implementation is ok
        #        {
        #            if (runOn == ClassRunMode::Client)
        #            {
        #                sysBPCheck.addInfo(#BPErrorMethodAOSRunModeWritten, 0, 0, strFmt("@SYS85367", methodType, methodName, ClassRunMode::Client));
        #                return true;
        #            }
        #            sysBPCheck.addError(#BPErrorMethodBoundWrong, 0, 0, strFmt("@SYS85345", runOn, ClassRunMode::Client));
        #        }
        #
        #        // BP Deviation Documented
        #        if (textBuffer.find('AOSRunMode\\:\\:Called')) // indicates the developer already decided that the current implementation is ok
        #        {
        #            if (runOn == ClassRunMode::Called)
        #            {
        #                sysBPCheck.addInfo(#BPErrorMethodAOSRunModeWritten, 0, 0, strFmt("@SYS85367", methodType, methodName, ClassRunMode::Called));
        #                return true;
        #            }
        #            sysBPCheck.addError(#BPErrorMethodBoundWrong, 0, 0, strFmt("@SYS85345", runOn, ClassRunMode::Called));
        #        }
        #
        #        // for each method call in the source, find out where the call are to .. client, called or server
        #        thisRefererences.setTmpData(tmpxRefReferences);
        #        while select thisRefererences
        #            where (thisRefererences.Kind == xRefKind::TableInstanceMethod ||
        #                   thisRefererences.Kind == xRefKind::TableStaticMethod   ||
        #                   thisRefererences.Kind == xRefKind::MapInstanceMethod   ||
        #                   thisRefererences.Kind == xRefKind::MapStaticMethod     ||
        #                   thisRefererences.Kind == xRefKind::ClassInstanceMethod ||
        #                   thisRefererences.Kind == xRefKind::ClassStaticMethod)
        #               && thisRefererences.Reference == XRefReference::Call
        #        {
        #            utilElementType = xRefNamesNull.utilElementType(thisRefererences.Kind);
        #
        #            if (thisRefererences.Kind == xRefKind::ClassInstanceMethod && thisRefererences.ParentName == classStr(QueryRun) && thisRefererences.Name == identifierStr(next))
        #            {
        #                calledRunOn = ClassRunMode::Server;   // QueryRun.next() executes on the server (except for client based tmp tables)
        #            }
        #            else
        #            if (thisRefererences.Kind == xRefKind::ClassInstanceMethod && (thisRefererences.ParentName == classStr(DLL) ||
        #                                                                           thisRefererences.ParentName == classStr(DLLFunction)) &&
        #                                                                           thisRefererences.Name == #MethodNameNew)
        #            {
        #                calledRunOn = ClassRunMode::Client;   // DLL's should be new'ed on the client
        #            }
        #            else
        #            if (thisRefererences.Kind == xRefKind::ClassInstanceMethod && (match('super[ (]', subStr(scanner.sourceLine(thisRefererences.Line), thisRefererences.Column,6))))   // this is a super call
        #            {
        #                calledRunOn = runOn;   // super calls are always executed where the object are instatiated; same side as self!
        #            }
        #            else
        #            if (thisRefererences.Kind == xRefKind::ClassStaticMethod && thisRefererences.ParentName == classStr(Global) &&
        #                (thisRefererences.Name == staticMethodStr(Global, error)   ||
        #                 thisRefererences.Name == staticMethodStr(Global, warning) ||
        #                 thisRefererences.Name == staticMethodStr(Global, info)    ||
        #                 thisRefererences.Name == staticMethodStr(Global, checkFailed)))
        #            {
        #                calledRunOn = ClassRunMode::Called;   // Treat these (client calls) as neutral calls, as they are (normally) only called by exeception
        #            }
        #            else
        #            {
        #                calledRunOn = new SysDictMethod(utilElementType,thisRefererences.ParentId,thisRefererences.Name).runMode();
        #            }
        #
        #            countSides[calledRunOn+1]++;
        #            logSides[calledRunOn+1] += strFmt('%1%2%3%4',
        #                                    (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                    thisRefererences.ParentName,
        #                                    (utilElementType == UtilElementType::ClassInstanceMethod || utilElementType == UtilElementType::TableInstanceMethod) ? '.' : '::',
        #                                    thisRefererences.Name);
        #
        #            // Perform various other analysis
        #            if (thisRefererences.Kind == xRefKind::ClassInstanceMethod &&
        #                thisRefererences.ParentName == classStr(Info) &&
        #                thisRefererences.Name == identifierStr(add))  // use error, warning, info, checkFailed
        #            {
        #                this.addSuppressableError(#BPErrorMethodNeutralFunctNotUsed, thisRefererences.Line, thisRefererences.Column, strFmt("@SYS54379",thisRefererences.ParentName,
        #                                           (utilElementType == UtilElementType::ClassInstanceMethod || utilElementType == UtilElementType::TableInstanceMethod) ? '.' : '::',
        #                                            thisRefererences.Name,
        #                                            'error, warning, info, checkfailed'));
        #                ret = false;
        #            }
        #            else
        #            if (thisRefererences.Kind == xRefKind::ClassInstanceMethod &&
        #                thisRefererences.ParentName == classStr(Company) &&
        #                thisRefererences.Name == identifierStr(ext)) // use curExt
        #            {
        #                sysBPCheck.addError(#BPErrorMethodNeutralFunctNotUsed, thisRefererences.Line, thisRefererences.Column, strFmt("@SYS54379",thisRefererences.ParentName,
        #                                    (utilElementType == UtilElementType::ClassInstanceMethod || utilElementType == UtilElementType::TableInstanceMethod) ? '.' : '::',
        #                                    thisRefererences.Name,
        #                                    identifierStr(curExt)));
        #                ret = false;
        #            }
        #
        #        }
        #        if (sysBPCheck.toBeUsed(SysBPWarningLevel::Warning))
        #        {
        #
        #            if (match('<\\\\Data Dictionary\\\\Tables\\\\', sysDictMethod.path()) && // it's a table method
        #                textBuffer.find('super: *(: *)'))                       // the xRef isn't set up to report the super calls
        #            {
        #                calledRunOn = runOn;  // same side as self!
        #                countSides[calledRunOn+1]++;
        #                logSides[calledRunOn+1] += strFmt('%1%2',
        #                                        (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                        'super()');
        #            }
        #
        #            // class instance methods can also refer to member variables; should count as calls to their own tier
        #            if (!memberFunction.isStatic())
        #            {
        #                // find accessed variables, that are defined outside this method
        #                thisRefererences.setTmpData(tmpxRefReferences);
        #                thisDeclarations.setTmpData(tmpxRefReferences);
        #                while select thisRefererences
        #                    group by Kind, ParentName, Name
        #                    where thisRefererences.ParentName
        #                       && (thisRefererences.Kind == xRefKind::BasicType || thisRefererences.Kind == xRefKind::Class        ||
        #                           thisRefererences.Kind == xRefKind::Enum      || thisRefererences.Kind == xRefKind::ExtendedType ||
        #                           thisRefererences.Kind == xRefKind::Map       || thisRefererences.Kind == xRefKind::Table)
        #                       && (thisRefererences.Reference == XRefReference::Read ||
        #                           thisRefererences.Reference == XRefReference::Write)
        #                notexists join thisDeclarations
        #                    where thisDeclarations.Name         == thisRefererences.Name
        #                       && thisDeclarations.ParentName   == thisRefererences.ParentName
        #                       && thisDeclarations.Kind         == thisRefererences.Kind
        #                       && thisDeclarations.Reference    == XRefReference::Declaration
        #                {
        #                    if (thisRefererences.Name == varStr(appl))
        #                    {
        #                        calledRunOn = ClassRunMode::Server;
        #                    }
        #                    else
        #                    if (thisRefererences.Name == varStr(infolog))
        #                    {
        #                        calledRunOn = ClassRunMode::Client;
        #                    }
        #                    else
        #                    {
        #                        calledRunOn = runOn;  // same side as self!
        #                    }
        #                    countSides[calledRunOn+1]++;
        #                    logSides[calledRunOn+1] += strFmt('%1%2',
        #                                                        (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                                        thisRefererences.Name);
        #                }
        #            }
        #
        #            // Check if method uses transactions, selects or deletes on the database, that indicates it should be run on the server
        #            calledRunOn = ClassRunMode::Server;
        #
        #            startPos = 0;
        #            while (textBuffer.find('ttsbegin: *;',startPos))
        #            {
        #                countSides[calledRunOn+1]++;
        #                logSides[calledRunOn+1] += strFmt('%1%2',
        #                                        (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                        'ttsbegin');
        #                startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #            }
        #            startPos = 0;
        #            while (textBuffer.find('ttscommit: *;',startPos))
        #            {
        #                countSides[calledRunOn+1]++;
        #                logSides[calledRunOn+1] += strFmt('%1%2',
        #                                        (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                        'ttscommit');
        #                startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #            }
        #
        #            startPos = 0;
        #            while (textBuffer.find('while: +select',startPos))
        #            {
        #                countSides[calledRunOn+1] += 2;                                     // expensive, counts double!
        #                logSides[calledRunOn+1] += strFmt('%1%2',
        #                                        (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                        'while select ...');
        #                startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #                posOfWhileSelect += startPos - strLen('select');
        #            }
        #
        #            startPos = 0;
        #            while (textBuffer.find('[\n (]+select: +',startPos))       // it might be cached - not taken into account, yet!
        #            {
        #                if (!conFind(posOfWhileSelect,textBuffer.matchPos()))  // this isn't a while select, it's a stand alone.
        #                {
        #                    countSides[calledRunOn+1]++;
        #                    logSides[calledRunOn+1] += strFmt('%1%2',
        #                                            (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                            'select ...');
        #                }
        #                startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #            }
        #
        #            startPos = 0;
        #            while (textBuffer.find('next: +[a-z?oa0-9_]+: *;',startPos))       // next on a buffer is a (potential) server call
        #            {
        #                countSides[calledRunOn+1]++;
        #                logSides[calledRunOn+1] += strFmt('%1%2',
        #                                        (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                        'next ...');
        #                startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #            }
        #
        #            startPos = 0;
        #            while (textBuffer.find('delete_from: +',startPos))
        #            {
        #                countSides[calledRunOn+1]++;
        #                logSides[calledRunOn+1] += strFmt('%1%2',
        #                                            (countSides[calledRunOn+1] > 1)? ', ':'',
        #                                            'delete_from...');
        #                startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #            }
        #
        #
        #            // report the accumulated situation
        #            #define.hintLimit(1)       // if there are only one other tier call, it dosen't change much
        #
        #            switch(runOn)
        #            {
        #                case ClassRunMode::Client:
        #                    if (countSides[ClassRunMode::Server+1] > #hintLimit)
        #                    {
        #                        if (runOn == ClassRunMode::Called)
        #                        {
        #                            runOnString = #calledFromString;
        #                        }
        #                        else
        #                        {
        #                            runOnString = strLwr(strFmt('%1',runOn));
        #                        }
        #                        this.addSuppressableWarning(#BPErrorMethodConsiderRunOn, 0, 0, strFmt("@SYS54211", runOnString,#serverString,logSides[ClassRunMode::Server+1]));
        #                    }
        #
        #                    if (sysBPCheck.toBeUsed(SysBPWarningLevel::All) && countSides[runOn+1] == 0)
        #                    {
        #                        sysBPCheck.addInfo(#BPErrorMethodBoundWrong, 0, 0, strFmt("@SYS54322", runOn));
        #                    }
        #                    break;
        #
        #                case ClassRunMode::Server:
        #                    if (countSides[ClassRunMode::Client+1] > #hintLimit)
        #                    {
        #                        if (runOn == ClassRunMode::Called)
        #                        {
        #                            runOnString = #calledFromString;
        #                        }
        #                        else
        #                        {
        #                            runOnString = strLwr(strFmt('%1',runOn));
        #                        }
        #                        this.addSuppressableWarning(#BPErrorMethodConsiderRunOn, 0, 0, strFmt("@SYS54211",runOnString,#clientString,logSides[ClassRunMode::Client+1]));
        #                    }
        #
        #                    if (countSides[runOn+1] == 0)
        #                    {
        #                        sysBPCheck.addInfo(#BPErrorMethodBoundWrong, 0, 0, strFmt("@SYS54322", runOn));
        #                    }
        #                    break;
        #
        #                case ClassRunMode::Called:
        #                    if ((countSides[ClassRunMode::Server+1] > 0) && (countSides[ClassRunMode::Client+1] > 0))
        #                    {
        #                        this.addSuppressableWarning(#BPErrorMethodConsiderRestructuring, 0, 0, strFmt("@SYS54324",runOn,countSides[ClassRunMode::Server+1],logSides[ClassRunMode::Server+1],
        #                                                                   countSides[ClassRunMode::Client+1],logSides[ClassRunMode::Client+1]));
        #                        ret = false;
        #                    }
        #                    else if (countSides[ClassRunMode::Client+1] > #hintLimit)
        #                    {
        #                        if (sysBPCheck.toBeUsed(SysBPWarningLevel::All))
        #                        {
        #                            giveHint(ClassRunMode::Client);
        #                        }
        #                    }
        #                    else if (countSides[ClassRunMode::Server+1] > #hintLimit)
        #                    {
        #                        if (sysBPCheck.toBeUsed(SysBPWarningLevel::All))
        #                        {
        #                            giveHint(ClassRunMode::Server);
        #                        }
        #                    }
        #                    break;
        #
        #                default :
        #                    break;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #
        #}
        #
      ENDSOURCE
      SOURCE #checkDiscontinuation
        #/*
        #    This method checks the source text for
        #    calls to functionality that are going to be discontinued
        #*/
        #protected boolean checkDiscontinuation()
        #{
        #    xRefTmpReferences thisRefererences;
        #    boolean           ret = true;
        #
        #    #localmacro.DiscontinuedMethods
        #        'delete',
        #        'edit',
        #        'save'
        #    #endmacro
        #
        #    // check if things are used, that are being superseed by something new
        #    thisRefererences.setTmpData(tmpxRefReferences);
        #    while select thisRefererences
        #        where thisRefererences.Kind == xRefKind::ClassInstanceMethod
        #    {
        #        switch (thisRefererences.ParentName)
        #        {
        #            case classStr(FormControl),
        #                 classStr(FormListControl),
        #                 classStr(FormListBoxControl):
        #                if (thisRefererences.Name == 'doubleclick') // The method will be discontinued in a later version '%1%2%3'. Use 'mouseDblClick'
        #                {
        #                    sysBPCheck.addError(#BPErrorMethodDiscontinuedInLaterVers, thisRefererences.Line, thisRefererences.Column, strFmt("@SYS68910", thisRefererences.ParentName,
        #                                       (thisRefererences.Kind == xRefKind::ClassInstanceMethod || thisRefererences.Kind == xRefKind::TableInstanceMethod || thisRefererences.Kind == xRefKind::MapInstanceMethod) ? '.' : '::',
        #                                        thisRefererences.Name, 'mousedblclick'));
        #                }
        #                break;
        #
        #            case classStr(MethodInfo): // The class will be discontinued in a later version 'MethodInfo'. Use: 'DictMethod'.
        #                sysBPCheck.addError(#BPErrorClassDiscontinuedInLaterVers, thisRefererences.Line, thisRefererences.Column, strFmt("@SYS69514",
        #                                    thisRefererences.ParentName, classStr(DictMethod)));
        #                break;
        #
        #            case classStr(SysMethodInfo): // The class will be discontinued in a later version 'SysMethodInfo'. Use: 'SysDictMethod'.
        #                sysBPCheck.addError(#BPErrorClassDiscontinuedInLaterVers, thisRefererences.Line, thisRefererences.Column, strFmt("@SYS69514",
        #                                    thisRefererences.ParentName, classStr(SysDictMethod)));
        #                break;
        #
        #            case classStr(TreeNode),
        #                 classStr(AOTTableFieldList),
        #                 classStr(ClassNode),
        #                 classStr(ControlNode),
        #                 classStr(DocNode),
        #                 classStr(Job),
        #                 classStr(MemberFunction),
        #                 classStr(Menu),
        #                 classStr(MenuFunction),
        #                 classStr(MenuItem),
        #                 classStr(MenuReference),
        #                 classStr(ProjectGroupNode),
        #                 classStr(ProjectNode),
        #                 classStr(Query),
        #                 classStr(QueryBuildDataSource),
        #                 classStr(QueryBuildFieldList),
        #                 classStr(QueryBuildLink),
        #                 classStr(QueryBuildRange),
        #                 classStr(Report),
        #                 classStr(ReportAutoDesignSpecs),
        #                 classStr(ReportControl),
        #                 classStr(ReportDesign),
        #                 classStr(ReportFieldGroup),
        #                 classStr(ReportSection),
        #                 classStr(ReportSectionGroup),
        #                 classStr(UserSetup),
        #                 classStr(ReportBitmapControl),
        #                 classStr(ReportDateControl),
        #                 classStr(ReportEnumControl),
        #                 classStr(ReportIntegerControl),
        #                 classStr(ReportPromptControl),
        #                 classStr(ReportRealControl),
        #                 classStr(ReportShapeControl),
        #                 classStr(ReportStringControl),
        #                 classStr(ReportSumControl),
        #                 classStr(ReportTextControl),
        #                 classStr(ReportTimeControl):
        #
        #                    switch (thisRefererences.Name)
        #                    {
        #                        case 'AOTaddExtendedDataType',
        #                             'AOTaddRelation':
        #                            sysBPCheck.addError(#BPErrorMethodDiscontinuedInLaterVers, thisRefererences.Line, thisRefererences.Column, strFmt("@SYS68910", thisRefererences.ParentName,
        #                                           (thisRefererences.Kind == xRefKind::ClassInstanceMethod || thisRefererences.Kind == xRefKind::TableInstanceMethod || thisRefererences.Kind == xRefKind::MapInstanceMethod) ? '.' : '::',
        #                                            thisRefererences.Name, 'AOTaddSubNode'));
        #
        #                            break;
        #
        #                        // outdated methods on TreeNode; use AOT prefixed variants - incl. for all sub-classes
        #                        case #DiscontinuedMethods :
        #                            sysBPCheck.addError(#BPErrorMethodDiscontinuedInLaterVers, thisRefererences.Line, thisRefererences.Column, strFmt("@SYS68910", thisRefererences.ParentName,
        #                                              (thisRefererences.Kind == xRefKind::ClassInstanceMethod || thisRefererences.Kind == xRefKind::TableInstanceMethod || thisRefererences.Kind == xRefKind::MapInstanceMethod) ? '.' : '::',
        #                                               thisRefererences.Name, 'aot'+thisRefererences.Name));
        #                            break;
        #                    }
        #
        #                break;
        #            case classStr(DictTable),
        #                classStr(SysDictTable):
        #                switch (thisRefererences.Name)
        #                {
        #                    case 'maxAccessMode':
        #                        sysBPCheck.addError(#BPErrorMethodDiscontinuedInLaterVers, thisRefererences.Line, thisRefererences.Column, strFmt("@SYS68910", thisRefererences.ParentName,
        #                                              (thisRefererences.Kind == xRefKind::ClassInstanceMethod || thisRefererences.Kind == xRefKind::TableInstanceMethod || thisRefererences.Kind == xRefKind::MapInstanceMethod) ? '.' : '::',
        #                                               thisRefererences.Name, methodStr(DictTable,visible)));
        #                        break;
        #                    default:
        #                        break;
        #                }
        #                break;
        #
        #            default:
        #                break;
        #        }
        #    }
        #
        #    while select thisRefererences
        #        where thisRefererences.Kind == xRefKind::ClassStaticMethod
        #    {
        #        switch (thisRefererences.ParentName)
        #        {
        #
        #            case classStr(Global):
        #                switch (thisRefererences.Name)
        #                {
        #                    //BP Deviation Documented
        #                    case staticMethodStr(Global, guidFromString):
        #                        this.addSuppressableError(
        #                            #BPErrorMethodDiscontinuedInLaterVers,
        #                            thisRefererences.Line,
        #                            thisRefererences.Column,
        #                            strFmt("@SYS68910", thisRefererences.ParentName, '::', thisRefererences.Name, 'str2guid'));
        #                        break;
        #
        #                    //BP Deviation Documented
        #                    case staticMethodStr(Global, stringFromGuid):
        #                        this.addSuppressableError(
        #                            #BPErrorMethodDiscontinuedInLaterVers,
        #                            thisRefererences.Line,
        #                            thisRefererences.Column,
        #                            strFmt("@SYS68910", thisRefererences.ParentName, '::', thisRefererences.Name, 'guid2str'));
        #                        break;
        #                }
        #                break;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkEmptyMethod
        #/*
        #    Check for empty methods, i.e. x++ methods that doesn't add anything semantically, like
        #    * overridings that just calls super
        #
        #    Empty methods should just be deleted.
        #*/
        #protected boolean checkEmptyMethod()
        #{
        #    TextBuffer  textBuffer;
        #    boolean     ret = true;
        #    str         params;
        #    int         i;
        #    #TokenTypes
        #
        #    if (!scanner.symbolExists(#PUBLIC_SYM) &&
        #        !scanner.symbolExists(#PROTECTED_SYM) &&
        #        !scanner.symbolExists(#PRIVATE_SYM))
        #    {
        #        textBuffer = new TextBuffer();
        #        textBuffer.setText(scanner.source());
        #
        #        for (i=1; i<=sysDictMethod.parameterCnt(); i++)
        #        {
        #            params += params ? ': *,: *' : ': *';
        #            params += sysDictMethod.parameterName(i);
        #        }
        #
        #        if (textBuffer.find('{: *super: *('+params+'): *;: *}: *>') ||      // just a super call with some parameters
        #            textBuffer.find('{: *:a+: +ret: *;: *ret: *=: *super: *('+params+'): *;: *return: +ret: *;: *}: *>'))    // ret declaration, super call w/parametres & return ret
        #        {
        #            this.addSuppressableError(#BPErrorMethodIsEmpty, 2, 1, strFmt("@SYS68904", methodName));
        #            ret = false;
        #        }
        #    }
        #
        #    return ret;
        #
        #}
        #
      ENDSOURCE
      SOURCE #checkFormControlAutoDeclaration
        #/// <summary>
        #/// Verifies that a specified control has the <c>AutoDeclaration</c> value set to a string value of Yes.
        #/// </summary>
        #/// <param name="_formName">
        #/// The form that contains the control.
        #/// </param>
        #/// <param name="_controlName">
        #/// The name of the control on the form.
        #/// </param>
        #/// <param name="_sourceLine">
        #/// The line of source code that contains the reference to the control.
        #/// </param>
        #/// <param name="_sourceCol">
        #/// The column of source code that contains the reference to the control.
        #/// </param>
        #private void checkFormControlAutoDeclaration(str _formName, str _controlName, int _sourceLine, int _sourceCol)
        #{
        #    #AOT
        #    #define.AutoDeclarationProperty('AutoDeclaration')
        #    #define.AutoDeclarationYes('Yes')
        #
        #    str         controlNodePath         = strFmt(#FormControlPath, _formName, _controlName);
        #    TreeNode    controlNode             = TreeNode::findNode(controlNodePath);
        #    str         autoDeclarationValue;
        #
        #    if (controlNode)
        #    {
        #        autoDeclarationValue = controlNode.AOTgetProperty(#AutoDeclarationProperty);
        #        if (autoDeclarationValue != #AutoDeclarationYes)
        #        {
        #            sysBPCheck.addError(
        #                #BPErrorInteractionClassFormControlNotVisible,
        #                _sourceLine,
        #                _sourceCol,
        #                strFmt("@GLS222756", _formName, _controlName));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkFrameworkClassDisclaimer
        #protected void checkFrameworkClassDisclaimer()
        #{
        #    #define.disclaimer('// This is a framework class. Customizing this class may cause problems with future upgrades to the software.')
        #
        #    Set layers = new Set(Types::Enum);
        #
        #    layers.add(UtilEntryLevel::sys);
        #    layers.add(UtilEntryLevel::syp);
        #    layers.add(UtilEntryLevel::gls);
        #    layers.add(UtilEntryLevel::glp);
        #    layers.add(UtilEntryLevel::fpk);
        #    layers.add(UtilEntryLevel::fpp);
        #    layers.add(UtilEntryLevel::isv);
        #    layers.add(UtilEntryLevel::isp);
        #
        #
        #    if (methodType == UtilElementType::ClassInstanceMethod &&
        #        methodName == #MethodNameClassDeclaration)
        #    {
        #        //
        #        // Is it a framework class?
        #        //
        #        if (strStartsWith(parentName, 'Sys') ||
        #            strStartsWith(parentName, 'AIF') ||
        #            strStartsWith(parentName, 'Workflow') ||
        #            strStartsWith(parentName, 'SRS') ||
        #            strStartsWith(parentName, 'Event') ||
        #            strStartsWith(parentName, 'AF') ||
        #            strStartsWith(parentName, 'Web') ||
        #            strStartsWith(parentName, 'Docu') ||
        #            strStartsWith(parentName, 'SQL') ||
        #            strStartsWith(parentName, 'Runbase') ||
        #           (strStartsWith(parentName, 'Release') && !strStartsWith(parentName, 'ReleaseUpdateDB')) ||
        #            strStartsWith(parentName, 'Batch') ||
        #            strStartsWith(parentName, 'User') ||
        #            strStartsWith(parentName, 'Upgrade') ||
        #            strStartsWith(parentName, 'Dialog') ||
        #            strStartsWith(parentName, 'AxdBase') ||
        #            strStartsWith(parentName, 'xRef') ||
        #            strStartsWith(parentName, 'Cue') ||
        #           (strStartsWith(parentName, 'Form') && !strStartsWith(parentName, 'FormLetter')) ||
        #            strStartsWith(parentName, 'OM') ||
        #            strStartsWith(parentName, 'Expression') ||
        #            strStartsWith(parentName, 'xUtil') ||
        #            strStartsWith(parentName, 'BI') ||
        #            strStartsWith(parentName, 'HTML') ||
        #            strStartsWith(parentName, 'Win') ||
        #            strStartsWith(parentName, 'Box') ||
        #            strStartsWith(parentName, 'Class') ||
        #            strStartsWith(parentName, 'DDE') ||
        #            strStartsWith(parentName, 'Profile') ||
        #            strStartsWith(parentName, 'TreeBuild') ||
        #            strStartsWith(parentName, 'XML'))
        #        {
        #            //
        #            // Is the method defined in the Microsoft Layers?
        #            // If so, it must contain the disclaimer
        #            //
        #            if (Set::intersection(layers, memberFunction.AOTLayers()))
        #            {
        #                if(!strContains(scanner.source(), #disclaimer))
        #                {
        #                    sysBPCheck.addError(#BPErrorClassFrameworkDisclaimer, 0, 0, "@SYS316340");
        #                }
        #                else
        #                {
        #                    if (strScan(scanner.source(), '///', 1, maxInt()) > strScan(scanner.source(), #disclaimer, 1, maxInt()))
        #                    {
        #                        sysBPCheck.addError(#BPErrorClassFrameworkDisclaimerPosition, 0, 0, "@SYS316341");
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkFutureReservedWord
        #protected boolean checkFutureReservedWord()
        #{
        #    #localmacro.FutureReservedWords
        #        'As',
        #        'Attribute',
        #        'Enum',
        #        'Foreach',
        #        'Friend',
        #        'In',
        #        'Instance',
        #        'Internal',
        #        'Long',
        #        'Is',
        #        'Module',
        #        'Namespace',
        #        'Native',
        #        'Out',
        #        'Override',
        #        'Readonly',
        #        'Ref',
        #        'Unique',
        #        'Unsigned',
        #        'WebService',
        #        'XMLRoot'
        #    #endmacro
        #
        #    boolean ret = true;
        #
        #    xRefTmpReferences thisRefererences;
        #
        #    thisRefererences.setTmpData(tmpxRefReferences);
        #    while select thisRefererences
        #        where thisRefererences.Kind == xRefKind::BasicType
        #    {
        #        switch (thisRefererences.Name)
        #        {
        #            case #FutureReservedWords :
        #                sysBPCheck.addError(#BPErrorMethodDiscontinuedInLaterVers, thisRefererences.Line, thisRefererences.Column,
        #                                      strFmt("@SYS74739", thisRefererences.Name)); // The name '%1' will be used as a reserved word in a future release.
        #                break;
        #
        #            default:
        #                break;
        #        }
        #    }
        #
        #    return ret;
        #
        #}
        #
        #
      ENDSOURCE
      SOURCE #checkIndentation
        #protected boolean checkIndentation()
        #{
        #    #TokenTypes
        #    int         symbol;
        #    int         prevSymbol;
        #    int         prevLine;
        #    int         caseLine;
        #    int         prevStartColumn;
        #    int         scannerLine;
        #    int         scannerStartColumn;
        #    int         maximumInt = maxInt();
        #    str         prevStrValue;
        #    #define.Indentation(4)
        #
        #boolean previousAllowed()
        #{
        #    if ((symbol == #WHILE_SYM     && prevSymbol == #RIGHTBR_SYM)    // Accept "} While" as in do { ... } while
        #     || (symbol == #SEMICOLON_SYM && prevSymbol == #LEFTBR_SYM)     // Accept "{;"
        #     || (symbol == #IF_SYM        && prevSymbol == #ELSE_SYM))      // Accept "else if"
        #        return true;
        #
        #    return false;
        #}
        #    symbol = scanner.firstSymbol();
        #    while (symbol)
        #    {
        #        scannerLine = scanner.line();
        #        scannerStartColumn = scanner.startColumn();
        #        if (scannerLine > 1)
        #        {
        #            switch (symbol)
        #            {
        #                case #CASE_SYM :
        #                case #DEFAULT_SYM :
        #                    caseLine = scannerLine;
        #                    break;
        #            }
        #
        #            if (!scanner.isFromExpandedMacro())
        #            {
        #                switch (symbol)
        #                {
        #                    //
        #                    // These symbols must be the first one on a line
        #                    //
        #                    case #CASE_SYM :
        #                    case #CATCH_SYM :
        #                    case #CHANGECOMP_SYM :
        #                    case #CONTINUE_SYM :
        #                    case #DEFAULT_SYM :
        #                    case #FOR_SYM :
        #                    case #RETRY_SYM :
        #                    case #TRY_SYM :
        #                    case #ELSE_SYM :
        #                    case #IF_SYM :
        #                    case #LEFTBR_SYM:
        #                    case #RIGHTBR_SYM :
        #                    case #WHILE_SYM :
        #                    case #TTSABORT_SYM :
        #                    case #TTSBEGIN_SYM :
        #                    case #TTSEND_SYM :
        #                    case #RETURN_SYM :
        #                        if (prevLine == scannerLine)
        #                        {
        #                            if (caseLine != scannerLine &&
        #                                prevSymbol != #PERIOD_SYM &&
        #                                prevSymbol != #DBLCOLON_SYM &&
        #                                !previousAllowed())
        #                            {
        #                                sysBPCheck.addError(#compileApplicationCheck, scannerLine, scannerStartColumn, strFmt("@SYS87095", scanner.strValue()));
        #                            }
        #                        }
        #                        else
        #                        {
        #                            //Check indentation
        #                            if (scanner.startColumn() mod #Indentation != 1)
        #                            {
        #                                sysBPCheck.addError(#compileApplicationCheck, scannerLine, scannerStartColumn, "@SYS87094");
        #                            }
        #                        }
        #                        break;
        #
        #                    default:
        #                        //
        #                        // Checks that no code is starting in column 2, 3 and 4.
        #                        //
        #                        if (prevLine != scannerLine &&
        #                            scannerStartColumn <=  #Indentation &&
        #                            scannerStartColumn mod #Indentation != 1)
        #                        {
        #                            sysBPCheck.addError(#compileApplicationCheck, scannerLine, scannerStartColumn, "@SYS87094");
        #                        }
        #                        break;
        #                }
        #
        #                switch (prevSymbol)
        #                {
        #                    //
        #                    // These symbols must be the only one on a line
        #                    //
        #                    case #ELSE_SYM :
        #                    case #LEFTBR_SYM:
        #                    case #RIGHTBR_SYM :
        #                        if (prevLine == scannerLine)
        #                        {
        #                            if (!previousAllowed())
        #                            {
        #                                sysBPCheck.addError(#compileApplicationCheck, prevline, prevStartColumn, strFmt("@SYS87096", prevStrValue));
        #                            }
        #                        }
        #                        break;
        #                }
        #            }
        #        }
        #        prevSymbol      = symbol;
        #        prevLine        = scannerLine;
        #        prevStartColumn = scannerStartColumn;
        #        prevStrValue    = scanner.strValue();
        #        symbol          = scanner.nextSymbol();
        #    }
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #checkInteractionClassControlReferences
        #/// <summary>
        #/// Checks that all <c>FormControlStr</c> references in a method reference form controls that have the
        #/// <c>AutoDeclaration</c> value set to a string value of Yes.
        #/// </summary>
        #/// <remarks>
        #/// Only classes that derive from the <c>PageInteraction</c> class are examined and guarantees that the
        #/// page interaction framework will work correctly.
        #/// </remarks>
        #protected void checkInteractionClassControlReferences()
        #{
        #    #TokenTypes
        #    #define.controlStrPrefix('formControlStr')
        #
        #    SysDictClass    sysDictClass;
        #    int             symbol;
        #    str             symbolStr;
        #    FormName        formName;
        #    FormControlName formControlName;
        #    int             line;
        #    int             column;
        #
        #    // Only scan classes
        #    if (! currentClass)
        #        return;
        #
        #    sysDictClass = new SysDictClass(currentClass.id());
        #
        #    // Only scan interaction classes
        #    if (!sysDictClass.isExtending(classNum(PageInteraction)))
        #        return;
        #
        #    // Scan the code for the formControlStr method
        #    symbol = scanner.firstSymbol();
        #    while (symbol)
        #    {
        #        line      = scanner.line();
        #        column    = scanner.col();
        #        symbolStr = scanner.strValue();
        #
        #        if (symbolStr == #controlStrPrefix &&
        #           !scanner.isComment(line, column))
        #        {
        #            // The next symbol should be a left paren
        #            symbol = scanner.nextSymbol();
        #            if (symbol != #LEFT_PAR_SYM)
        #            {
        #                continue;
        #            }
        #
        #            // The next symbol is the form name
        #            symbol   = scanner.nextSymbol();
        #            formName = scanner.strValue();
        #
        #            // The next symbol is a comma
        #            symbol = scanner.nextSymbol();
        #            if (symbol != #LIST_SEP_SYM)
        #            {
        #                continue;
        #            }
        #
        #            // The next symbol is the control name
        #            symbol          = scanner.nextSymbol();
        #            formControlName = scanner.strValue();
        #
        #            // The next symbol is a right paren
        #            symbol = scanner.nextSymbol();
        #            if (symbol != #RGHT_PAR_SYM)
        #            {
        #                continue;
        #            }
        #
        #            if (formName && formControlName)
        #            {
        #                this.checkFormControlAutoDeclaration(formName, formControlName, line, column);
        #            }
        #        }
        #
        #        symbol = scanner.nextSymbol();
        #    }
        #}
      ENDSOURCE
      SOURCE #checkLabelUse
        #public boolean checkLabelUse()
        #{
        #    #TokenTypes
        #    SysDictType sysDictType;
        #    SysDictEnum sysDictEnum;
        #    boolean     ret;
        #
        #    ret = super();
        #
        #    if (ret)
        #    {
        #        if (sysDictMethod.displayType() == DisplayFunctionType::Get ||
        #            sysDictMethod.displayType() == DisplayFunctionType::Set)
        #        {
        #            switch (sysDictMethod.returnType())
        #            {
        #                case Types::UserType:
        #                    sysDictType = new SysDictType(sysDictMethod.returnId());
        #                    // Note! system types (like boolean) doesn't have a label and help
        #                    sysBPCheck.checkLabelBasics(sysDictType.labelLabel(), #propertyLabel, !this.isKernelDefined(sysDictMethod.returnId()));
        #                    break;
        #
        #                case Types::Enum:
        #                    sysDictEnum = new SysDictEnum(sysDictMethod.returnId());
        #                    // Note! system types (like boolean) doesn't have a label and help
        #                    sysBPCheck.checkLabelBasics(sysDictEnum.labelDefined(), #propertyLabel, !isSysId(sysDictMethod.returnId()));
        #                    break;
        #
        #                default :
        #                    sysBPCheck.addError(#BPErrorDisplayEditNoExtendedReturnType, 0, 0, strFmt("@SYS55403"));
        #                    break;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #
        #}
        #
      ENDSOURCE
      SOURCE #checkReturnTypes
        #protected boolean checkReturnTypes()
        #{
        #    boolean ret = true;
        #    SysDictTable inheritedMethodReturnType;
        #    SysDictTable thisMethodReturnType;
        #
        #    SysDictMethod inheritedFrom;
        #
        #    if (sysDictMethod.isStatic())
        #        return ret;
        #
        #    // Get the return type of the method and check if it's a map or a record:
        #    inheritedFrom = sysDictMethod.superDictMethod();
        #    if (!inheritedFrom)
        #        return ret;
        #
        #    if (sysDictMethod.returnType() == Types::Record)
        #    {
        #        //if (inheritedFrom.returnType() != Types::Record)  //this is already checked by compiler
        #        //{
        #        //    sysBPCheck.addError(#BPErrorInheritedReturnTypeMustBeTable, 1,1,
        #        //          strfmt("@SYS309720", parentname, methodname));
        #        //}
        #        // Both records. Both must be maps or regular tables.
        #        inheritedMethodReturnType = new SysDictTable(inheritedFrom.returnId());
        #        thisMethodReturnType = new SysDictTable(sysDictMethod.returnId());
        #
        #        if (inheritedMethodReturnType.isMap() != thisMethodReturnType.isMap())
        #        {
        #            sysBPCheck.addError(#BPErrorInheritedReturnTypeMustBeTableOrMap, 1,1,
        #                strFmt("@SYS309721", parentName, methodName));
        #        }
        #        else
        #        {   // They're the same. If they are maps, they must refer to the same map.
        #            if (thisMethodReturnType.isMap())
        #            {
        #                if (sysDictMethod.returnId() != inheritedFrom.returnId())
        #                {
        #                    sysBPCheck.addError(#BPErrorInheritedReturnTypeMustBeSameMap, 1,1,
        #                        strFmt("@SYS309722", parentName, methodName));
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #checkSource
        #/*
        #    This method checks the source text for
        #    More general programming styles.
        #*/
        #protected boolean checkSource()
        #{
        #    TextBuffer textBuffer;
        #    boolean ret = true;
        #    boolean showWarnings = sysBPCheck.toBeUsed(SysBPWarningLevel::Warning);
        #    int startPos;
        #    int ttsbegins;
        #    int ttscommits;
        #    int ttsaborts;
        #
        #    int matchPosLine;
        #    int matchPosColumn;
        #    int cntChar;
        #    int parameterCount;
        #    str proposal;
        #
        #    xRefTmpReferences thisRefererences;
        #    SysDictClass dictClass,superClass;
        #
        #    #define.NonAlphaNumeric('[^a-zA-Z0-9_]')
        #
        #    void setMatchPosLineAndColumn() // Finds Line and Column from textbuffer.matchPos
        #    {
        #        cntChar = 0;
        #        matchPosLine = 0;
        #
        #        if (scanner.lines())
        #        {
        #            while ((matchPosLine <= scanner.lines()) && (cntChar <= textBuffer.matchPos()))
        #            {
        #                matchPosLine ++;
        #
        #                if ((cntChar + strLen(scanner.sourceLine(matchPosLine)) < textBuffer.matchPos()))
        #                {
        #                    cntChar += strLen(scanner.sourceLine(matchPosLine));
        #                }
        #                else
        #                {
        #                    matchPosColumn = textBuffer.matchPos() - cntChar;
        #                    break;
        #                }
        #            }
        #        }
        #    }
        #    boolean isComment()
        #    {
        #        return scanner.isComment(matchPosLine, matchPosColumn);
        #    }
        #
        #    // init
        #    textBuffer = new TextBuffer();
        #    textBuffer.setText(scanner.source());
        #
        #    // check if things are used, that mustn't be used directly
        #    thisRefererences.setTmpData(tmpxRefReferences);
        #    while select thisRefererences
        #        where (thisRefererences.Kind == xRefKind::ClassInstanceMethod &&
        #               thisRefererences.Name == #MethodNameNew &&
        #               thisRefererences.Reference == XRefReference::Call &&
        #               (thisRefererences.ParentName == classStr(FormRun) ||       // use ClassFactory.FormRunClass(.. or new menuFunction(..).run()
        #                 thisRefererences.ParentName == classStr(ReportRun) ||
        #                 thisRefererences.ParentName == classStr(DialogBox)))
        #    {
        #        switch (thisRefererences.ParentName)
        #        {
        #            case classStr(DialogBox):
        #                proposal = classStr(Box);
        #                break;
        #
        #            case classStr(FormRun):
        #                proposal = classStr(ClassFactory) + '.' + methodStr(ClassFactory, formRunClass);
        #                break;
        #
        #            case classStr(ReportRun):
        #                proposal = classStr(ClassFactory) + '.' + methodStr(ClassFactory, reportRunClass);
        #                break;
        #
        #        }
        #        this.addSuppressableError(#BPErrorMethodIllegalConstructionUsed, thisRefererences.Line, thisRefererences.Column,
        #            strFmt("@SYS137151",  thisRefererences.ParentName, proposal));
        #    }
        #
        #    // Check if method contains the bad habit with placing the code dependant on the case in block-style curly braces
        #    startPos = 0;
        #    while (textBuffer.find('\\:: *\\{',startPos))      //  was: '\\:: *\\{'
        #    {
        #        setMatchPosLineAndColumn();
        #        if (!isComment())
        #            this.addSuppressableError(#BPErrorMethodNoBracketsInCaseBlocks, matchPosLine, matchPosColumn, "@SYS152524");
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #
        #    // Check if method contains the bad habit with placing code that actually aren't a block in block-style curly braces
        #    startPos = 0;
        #    while (textBuffer.find(';: *\\{',startPos))
        #    {
        #        setMatchPosLineAndColumn();
        #        if (!isComment())
        #            this.addSuppressableError(#BPErrorMethodNonNeededBlockStyleUsed, matchPosLine, matchPosColumn, strFmt("@SYS152538"));
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #
        #    // Check if method has paranteses around the case constants
        #    startPos = 0;
        #    while (textBuffer.find(': case: *([^)]*): *\\:',startPos))
        #    {
        #        setMatchPosLineAndColumn();
        #        if (!isComment())
        #            this.addSuppressableError(#BPErrorMethodParenthesisRoundCaseConst, matchPosLine, matchPosColumn, strFmt("@SYS55397", strLRTrim(textBuffer.subStr(textBuffer.matchPos(), textBuffer.matchLen()))));
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #
        #    // Check if DateFlags is used when calling date2strusr
        #    startPos = 0;
        #    while(textBuffer.find(
        #    #NonAlphaNumeric +
        #    'date2strusr: *(: *', startPos))
        #    {
        #        setMatchPosLineAndColumn();
        #        if(!isComment())
        #        {
        #            parameterCount = this.getParameterCount(textBuffer);
        #            if(parameterCount < 2)
        #            {
        #                this.addSuppressableError(#BPErrorMethodParenthesisRoundCaseConst, matchPosLine, matchPosColumn, strFmt("@SYS191133", textBuffer.subStr(textBuffer.matchPos(), textBuffer.matchLen() - 1)));
        #            }
        #        }
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #
        #    // Check if DateFlags is used when calling datetime2str
        #    startPos = 0;
        #    while(textBuffer.find(
        #    #NonAlphaNumeric +
        #    'datetime2str: *(: *', startPos))
        #    {
        #        setMatchPosLineAndColumn();
        #        if(!isComment())
        #        {
        #            parameterCount = this.getParameterCount(textBuffer);
        #            if(parameterCount < 2)
        #            {
        #                this.addSuppressableError(#BPErrorMethodParenthesisRoundCaseConst, matchPosLine, matchPosColumn, strFmt("@SYS191133", textBuffer.subStr(textBuffer.matchPos(), textBuffer.matchLen() - 1)));
        #            }
        #        }
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #
        #    // Check if DateFlags is used when calling date2str
        #    startPos = 0;
        #    while(textBuffer.find(
        #    #NonAlphaNumeric +
        #    'date2str: *(: *', startPos))
        #    {
        #        setMatchPosLineAndColumn();
        #        if(!isComment())
        #        {
        #            parameterCount = this.getParameterCount(textBuffer);
        #            if(parameterCount < 8)
        #            {
        #                this.addSuppressableError(#BPErrorMethodParenthesisRoundCaseConst, matchPosLine, matchPosColumn, strFmt("@SYS191133", textBuffer.subStr(textBuffer.matchPos(), textBuffer.matchLen() - 1)));
        #            }
        #        }
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #
        #    // Check that ttsbegin & ttscommit/ttsabort are in the same method - they should be well balanced
        #    ttsbegins = 0;
        #    startPos = 0;
        #    while (textBuffer.find('ttsbegin: *;',startPos))
        #    {
        #        setMatchPosLineAndColumn();
        #        if (!isComment())
        #        {
        #            ttsbegins++;
        #        }
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #    ttscommits = 0;
        #    startPos = 0;
        #    while (textBuffer.find('ttscommit: *;',startPos))
        #    {
        #        setMatchPosLineAndColumn();
        #        if (!isComment())
        #        {
        #            ttscommits++;
        #        }
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #    ttsaborts = 0;
        #    startPos = 0;
        #    while (textBuffer.find('ttsabort: *;',startPos))
        #    {
        #        setMatchPosLineAndColumn();
        #        if (!isComment())
        #        {
        #            ttsaborts++;
        #        }
        #        startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    }
        #    // Error phase: No ttsbegin is allowed without at least a ttscommit or ttsabort covering it in the same method
        #    if (ttsbegins > ttscommits + ttsaborts)
        #    {
        #        this.addSuppressableError(#BPErrorMethodUnbalancedTtsbeginCommit, matchPosLine, matchPosColumn, strFmt("@SYS57826",ttsbegins - ttscommits - ttsaborts));
        #    }
        #    // Warning phase: Having more ttscommits or ttsaborts than ttsbegins is discouraged
        #    else if (showWarnings &&
        #                 (ttscommits > ttsbegins ||
        #                  ttsaborts  > ttsbegins))
        #    {
        #        this.addSuppressableWarning(#BPErrorMethodUnbalancedTtsbeginCommit, matchPosLine, matchPosColumn, strFmt("@SYS57826",ttsbegins - ttscommits - ttsaborts));
        #    }
        #
        #
        #    if (showWarnings)
        #    {
        #        // Check to use the optimizing delete_from statement
        #        if (textBuffer.find('while: +select') && (textBuffer.find('\\.: *delete: *(: *)',textBuffer.matchPos()+textBuffer.matchLen())))
        #        {
        #            setMatchPosLineAndColumn();
        #            if (!isComment())
        #            {
        #                this.addSuppressableWarning(#BPErrorMethodDeleteFromNotUsed, matchPosLine, matchPosColumn, strFmt("@SYS55398"));
        #            }
        #        }
        #
        #        // Check for use of identifierStr, as better intrisic functions often could be used
        #        startPos = 0;
        #        while (textBuffer.find('identifierstr: *([^)]+: *)',startPos))
        #        {
        #            if (!match('settimeout: *(: *>',textBuffer.subStr(1,textBuffer.matchPos() - 1)))    // setTimeOut / method names can be identified with identifierStr
        #            {
        #                setMatchPosLineAndColumn();
        #                if (!isComment())
        #                {
        #                    this.addSuppressableWarning(#BPErrorMethodIdentifierStrUsed, matchPosLine, matchPosColumn, strFmt("@SYS55399",textBuffer.subStr(textBuffer.matchPos(), textBuffer.matchLen())));
        #                    ret = false;
        #                }
        #            }
        #
        #            startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #        }
        #
        #        // check if super are called in sub classes new
        #        if (methodType == UtilElementType::ClassInstanceMethod &&
        #            methodName == #MethodNameNew)
        #        {
        #            dictClass = new SysDictClass(parentId);
        #            if (dictClass && dictClass.extend())
        #            {
        #                superClass = new SysDictClass(dictClass.extend());
        #                if (superClass)
        #                {
        #                    thisRefererences.setTmpData(tmpxRefReferences);
        #                    select firstonly thisRefererences
        #                        where thisRefererences.Kind         == xRefKind::ClassInstanceMethod
        #                           && thisRefererences.ParentName   == superClass.name()
        #                           && thisRefererences.Name         == #MethodNameNew
        #                           && thisRefererences.Reference    == XRefReference::Call;
        #                    if (!thisRefererences)
        #                    {
        #                        this.addSuppressableWarning(#BPErrorMethodMissingSuperCall, 0, 0, strFmt("@SYS62822"));
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    thisRefererences = null;
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #checkSymbols
        #protected void checkSymbols()
        #{
        #    #TokenTypes
        #    int         symbol;
        #    boolean     isMethod;
        #    boolean     passedDeclaration;
        #    boolean     ret = true;
        #    #Define.namePrintDebug('printDebug')
        #    #Define.namePrintTab('printTab')
        #    ;
        #    if (scanner.lines())
        #    {
        #        symbol = scanner.firstSymbol();
        #
        #        while (symbol)
        #        {
        #            //
        #            // Methods (both called and declared) sharing the name with standard tokens like 'print'
        #            // are reported as the standard token by the scanner.
        #            //
        #            if (isMethod)
        #            {
        #                symbol = #STD_ID;
        #                isMethod = false;
        #            }
        #
        #            switch (symbol)
        #            {
        #                case #PERIOD_SYM, #DBLCOLON_SYM :
        #                    isMethod = true;
        #                    break;
        #
        #                case #LEFT_PAR_SYM:
        #                    passedDeclaration = true;
        #                    break;
        #
        #                case #DATE2STR_FUNC, #STR2DATE_FUNC, #TODAY_FUNC :
        #                    if (parameters.CheckDate && passedDeclaration)
        #                        this.addSuppressableWarning(#BPErrorMethodIllegalDateConstruction, scanner.line(), scanner.startColumn(), strFmt("@SYS68391", scanner.strValue())); // This date construction can be illegal: %1
        #                    break;
        #
        #                case #STD_ID :
        #                    //Methods on Debug class.
        #                    //Can be converted to xref check.
        #                    if (isMethod && parameters.CheckSourcePrintAndPause && passedDeclaration)
        #                    {
        #                        switch (scanner.strValue())
        #                        {
        #                            case #namePrintDebug, #namePrintTab :
        #                                sysBPCheck.addError(#compileApplicationCheck, scanner.line(), scanner.startColumn(), strFmt("@SYS74647", scanner.strValue()));
        #                                break;
        #                        }
        #                    }
        #                    break;
        #
        #                case #TextConstant:
        #                    this.checkSymbolTextConstant(scanner.string());
        #                    break;
        #
        #                case #Print_SYM :
        #                    if (parameters.CheckSourcePrintAndPause && passedDeclaration)
        #                    {
        #                        this.addSuppressableError(#compileApplicationCheck, scanner.line(), scanner.startColumn(), strFmt("@SYS74647", scanner.strValue()));
        #                    }
        #                    break;
        #
        #                case #Pause_SYM :
        #                    if (parameters.CheckSourcePrintAndPause && passedDeclaration)
        #                    {
        #                        sysBPCheck.addError(#compileApplicationCheck, scanner.line(), scanner.startColumn(), strFmt("@SYS74647", scanner.strValue()));
        #                    }
        #                    break;
        #
        #                case #BP_SYM :
        #                    if (parameters.CheckSourcePrintAndPause && passedDeclaration)
        #                    {
        #                        sysBPCheck.addError(#compileApplicationCheck, scanner.line(), scanner.startColumn(), strFmt("@SYS74647", scanner.strValue()));
        #                    }
        #                    break;
        #
        #                default :
        #                    isMethod = false;
        #                    break;
        #
        #            }
        #            symbol = scanner.nextSymbol();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkSymbolTextConstant
        #protected void checkSymbolTextConstant(str _scannerString)
        #{
        #    str DEVnewString; // trud labels create
        #
        #    if (_scannerString)
        #    {
        #        if (parameters.CheckTextInSingleQuotes)
        #        {
        #            if (subStr(scanner.sourceLine(), scanner.startColumn(), 1) == #CharSingleQuote) // single qoute: System text, not to appear on any User Interface
        #            {
        #                if (SysLabel::isLabelId(_scannerString)) // Method contains labels in single quotes
        #                {
        #                    this.addSuppressableError(#BPErrorMethodLabelInSingleQuotes, scanner.line(), scanner.startColumn(), "@SYS55395");
        #                }
        #            }
        #        }
        #        if (parameters.CheckLabelUse)
        #        {
        #            if (subStr(scanner.sourceLine(), scanner.startColumn(), 1) == #CharDoubleQuote) // double quote: User Interface text
        #            {
        #                if (!SysLabel::isLabelId(_scannerString)) // Method contains text constant
        #                {
        #                    //Is the text only used to format a label, by using a combination of %1 and symbols?
        #                    if (allowHardcodedTexts ||
        #                        strLen(strRem(strAlpha(_scannerString), '0123456789')) == 0)   // no a-z
        #                    {
        #                        this.addSuppressableWarning(#compileApplicationCheck, scanner.line(), scanner.startColumn(), strFmt("@SYS55394", _scannerString));
        #                    }
        #                    else
        #                    {
        #                        DEVnewString = subStr(scanner.sourceLine(), scanner.startColumn() + 1, scanner.col() - scanner.startColumn() - 1); // trud labels create
        #
        #                        sysBPCheck.addError(#compileApplicationCheck, scanner.line(), scanner.startColumn(), strFmt("@SYS55394",
        #                                            //_scannerString)); // trud labels create
        #                                            DEVnewString));  // trud labels create
        #                    }
        #                }
        #                else
        #                {
        #                    if (!sysBPCheck.label().exists(_scannerString))
        #                    {
        #                        if (SysLabelLog::exists(_scannerString))
        #                        {
        #                            sysBPCheck.addError(#BPError, scanner.line(), scanner.startColumn(), strFmt("@SYS76945", _scannerString)); // Unknown Label
        #                        }
        #                        else
        #                        {
        #                            sysBPCheck.addError(#BPError, scanner.line(), scanner.startColumn(), strFmt("@SYS76844", _scannerString));
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkSysOperationLabel
        #/// <summary>
        #/// Checks whether the <c>SysOperationLabelAttribute</c> or <c>SysOperationHelpTextAttribute</c>
        #/// objects and whether the <c>LabelId</c> is correctly labeled.
        #/// </summary>
        #private void checkSysOperationLabel()
        #{
        #    SysOperationLabelAttribute      labelAttribute;
        #    SysOperationHelpTextAttribute   helpTextAttribute;
        #    str                             labelAttrStr = classStr(SysOperationLabelAttribute);
        #    str                             textAttrStr = classStr(SysOperationHelpTextAttribute);
        #
        #    labelAttribute = sysDictMethod.getAttribute(labelAttrStr);
        #    if(labelAttribute && !SysLabel::isLabelId(labelAttribute.label()))
        #    {
        #        sysBPCheck.addError(#BPErrorMethodSysOperationLabelIncorrect, 0, 0, strFmt("@SYS343201", labelAttrStr));
        #    }
        #
        #    helpTextAttribute = sysDictMethod.getAttribute(textAttrStr);
        #    if(helpTextAttribute && !SysLabel::isLabelId(helpTextAttribute.helpText()))
        #    {
        #        sysBPCheck.addError(#BPErrorMethodSysOperationLabelIncorrect, 0, 0, strFmt("@SYS343201", textAttrStr));
        #    }
        #}
      ENDSOURCE
      SOURCE #checkUpgradeScriptMethodType
        #protected void checkUpgradeScriptMethodType()
        #{
        #    if (sysDictMethod)
        #    {
        #        if (sysDictMethod.isStatic())
        #        {
        #            // The upgrade script method cannot be static.
        #            sysBPCheck.addError(#BPErrorMethodIsStatic, 1, 1, "@SYS309410");
        #        }
        #
        #        if (sysDictMethod.parameterCnt() > 0)
        #        {
        #            // The upgrade script method cannot accept parameters.
        #            sysBPCheck.addError(#BPErrorMethodHasParams, 1, 1, "@SYS309411");
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkUpgradeScriptRequiredAttributes
        #protected void checkUpgradeScriptRequiredAttributes()
        #{
        #    sysReleasedVersion                  version = this.getUpgradeScriptVersion();
        #    int                                 i;
        #    DictClass                           attributeClass;
        #    boolean                             descFound;
        #    int                                 typeCount;
        #    int                                 stageCount;
        #    boolean                             crudFound;
        #    boolean                             dependsOnMeAttributeFound;
        #    ReleaseUpdateScriptStage            scriptStage;
        #    UpgradeScriptStageAttribute         stageAttribute;
        #
        #    if (attributes)
        #    {
        #        for (i = 1; i <= attributes.lastIndex(); i++)
        #        {
        #            this.validateUpgradeAttribute(attributes.value(i));
        #            attributeClass = new DictClass(classIdGet(attributes.value(i)));
        #
        #            switch (attributeClass.id())
        #            {
        #                case classNum(UpgradeScriptDescriptionAttribute):
        #                    descFound = true;
        #                    break;
        #                case classNum(UpgradeScriptTypeAttribute):
        #                    typeCount++;
        #                    break;
        #                case classNum(UpgradeScriptStageAttribute):
        #                    stageCount++;
        #                    stageAttribute = attributes.value(i);
        #                    scriptStage = stageAttribute.parmScriptStage();
        #                    break;
        #                case classNum(UpgradeScriptTableAttribute):
        #                    crudFound = true;
        #                    break;
        #
        #                case classNum(UpgradeModuleDependsOnMeAttribute), classNum(UpgradeTaskDependsOnMeAttribute):
        #                    dependsOnMeAttributeFound = true;
        #                    break;
        #            }
        #        }
        #
        #        if (version == sysReleasedVersion::v60)
        #        {
        #            if (!descFound)
        #            {
        #                // The upgrade script is missing required attribute %1.
        #                sysBPCheck.addError(#BPErrorMissingReqDesc, 1, 1, strFmt("@SYS309412", classStr(UpgradeScriptDescriptionAttribute)));
        #            }
        #
        #            if (!typeCount)
        #            {
        #                // The upgrade script is missing required attribute %1.
        #                sysBPCheck.addError(#BPErrorMissingReqType, 1, 1, strFmt("@SYS309412", classStr(UpgradeScriptTypeAttribute)));
        #            }
        #            else if (typeCount > 1)
        #            {
        #                sysBPCheck.addError(#BPErrorInvalidUseOfUpgradeAttribute, 1, 1, strFmt("@SYS4001063", classStr(UpgradeScriptTypeAttribute)));
        #            }
        #
        #            if (!stageCount)
        #            {
        #                // The upgrade script is missing required attribute %1.
        #                sysBPCheck.addError(#BPErrorMissingReqStage, 1, 1, strFmt("@SYS309412", classStr(UpgradeScriptStageAttribute)));
        #            }
        #            else if (stageCount > 1)
        #            {
        #                sysBPCheck.addError(#BPErrorInvalidUseOfUpgradeAttribute, 1, 1, strFmt("@SYS4001063", classStr(UpgradeScriptStageAttribute)));
        #            }
        #
        #            //Perfectly we should check for the class' layer
        #            if (dependsOnMeAttributeFound && currentAOLayer == UtilEntryLevel::sys)
        #            {
        #                //%1 or %2 should not be used in the sys layer.
        #                sysBPCheck.addError(#BPErrorExternalUseOnlyAttribute, 1, 1,
        #                    strFmt("@SYS327183", classStr(UpgradeModuleDependsOnMeAttribute), classStr(UpgradeTaskDependsOnMeAttribute)));
        #            }
        #        }
        #
        #        if (!crudFound && !this.exemptFromCRUD() && (stageCount && (scriptStage == ReleaseUpdateScriptStage::PostSync)))
        #        {
        #            // The upgrade script is missing required attribute %1.
        #            sysBPCheck.addError(#BPErrorMissingReqTable, 1, 1, strFmt("@SYS309412", classStr(UpgradeScriptTableAttribute)));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkUpgradeScriptTableXRef
        #protected void checkUpgradeScriptTableXRef()
        #{
        #    xRefTmpReferences           thisReferences;
        #    xRefTmpReferences           thisTableReferences;
        #    int                         i;
        #    boolean                     tableAttributeFound;
        #    UpgradeScriptTableAttribute tableAttribute;
        #
        #
        #    thisReferences.setTmpData(tmpxRefReferences);
        #    thisTableReferences.setTmpData(tmpxRefReferences);
        #
        #    if (attributes)
        #    {
        #        while select *
        #            from thisTableReferences
        #            order by Line, Column
        #            where thisTableReferences.Kind      == xRefKind::Table &&
        #                  thisTableReferences.Reference == XRefReference::Declaration
        #            join * from thisReferences
        #                where thisReferences.Kind       == xRefKind::Table &&
        #                      thisReferences.Name       == thisTableReferences.Name &&
        #                      thisReferences.ParentName == thisTableReferences.ParentName &&
        #                      (thisReferences.Reference == XRefReference::Read ||
        #                       thisReferences.Reference == XRefReference::Write)
        #
        #        {
        #            tableAttributeFound = false;
        #
        #            for (i = 1; i <= attributes.lastIndex(); i++)
        #            {
        #                if (classNum(UpgradeScriptTableAttribute) == classIdGet(attributes.value(i)))
        #                {
        #                    tableAttribute = attributes.value(i);
        #                    if (thisReferences.actualClassName() == tableAttribute.parmTableName())
        #                    {
        #                        tableAttributeFound = true;
        #                        break;
        #                    }
        #                }
        #            }
        #            if (!tableAttributeFound)
        #            {
        #                // The upgrade script is missing required attribute %1 for table %2 referenced in the method as %3.
        #                this.addSuppressableError(#BPErrorMissingReqTable, thisTableReferences.Line, thisTableReferences.Column,
        #                    strFmt("@SYS309399", classStr(UpgradeScriptTableAttribute), thisReferences.actualClassName(), thisReferences.Name));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkUseLocalObjects
        #// Verifies all objects being referenced are known to the version control system
        #protected void checkUseLocalObjects()
        #{
        #    xRefTmpReferences thisReferences;
        #    TreeNodePath      path;
        #    FilePath          repopath;
        #    Filename          filename;
        #    Filename          objectFilename;
        #    UtilEntryLevel    pathLayer;
        #    Set               pathSet;
        #    Map               pathMap;
        #    Map               additionalFolders;
        #    Map               modelFolders;
        #    MapEnumerator     pathEnum;
        #    MapEnumerator     enum;
        #    boolean           found;
        #    #File
        #
        #void addToCache(Set _cache, TreeNodePath _path)
        #{
        #    //
        #    // Ensure the cache doesn't exhaust the memory
        #    //
        #    if (_cache.elements() > 1000)
        #    {
        #        _cache = new Set(Types::String);
        #    }
        #    _cache.add(_path);
        #}
        #
        #    if (versioncontrol.ideIntegration())
        #    {
        #        if (versioncontrol.parmSysVersionControlSystem() &&
        #            !(versioncontrol.parmSysVersionControlSystem() is SysVersionControlSystemMorphX)) //MorphX VCS is not file based.
        #        {
        #            pathSet = new Set(Types::String);
        #            thisReferences.setTmpData(tmpxRefReferences);
        #
        #            while select thisReferences
        #                where thisReferences.Reference == XRefReference::Declaration
        #                   || thisReferences.Reference == XRefReference::Definition
        #            {
        #                path = SysTreeNode::applObjectPath(thisReferences.calcPath());
        #
        #                if (path && !pathsUnderVCS.in(path))
        #                {
        #                    if (pathsNotUnderVCSError.in(path))
        #                    {
        #                        sysBPCheck.addError(#BPErrorMethodRefersLocalObject, thisReferences.Line, thisReferences.Column, strFmt("@SYS86883", path));
        #                    }
        #                    else if (pathsNotUnderVCSInfo.in(path))
        #                    {
        #                        sysBPCheck.addInfo(#BPErrorMethodRefersLocalObject, thisReferences.Line, thisReferences.Column, strFmt("@SYS86883", path));
        #                    }
        #                    else
        #                    {
        #                        pathSet.add(path);
        #                    }
        #                }
        #            }
        #
        #            if (pathSet.elements())
        #            {
        #                //
        #                // Ensure the cache gets flushed
        #                //
        #                infolog.addTimeOut(this, methodStr(SysBPCheckMemberFunction, flushCaches), 1, true);
        #
        #                repopath = strFmt('%1\\', versioncontrol.parmSysVersionControlSystem().parmFolder());
        #                additionalFolders = versioncontrol.parmSysVersionControlSystem().parmAdditionalFolders();
        #                modelFolders = versioncontrol.parmSysVersionControlSystem().parmModelFolders();
        #
        #                pathMap = Map::create(SysBPCheckMemberFunction::findLayerFromPaths(pathSet.pack()));
        #                pathEnum = pathMap.getEnumerator();
        #                while (pathEnum.moveNext())
        #                {
        #                    path = pathEnum.currentKey();
        #                    pathLayer = pathEnum.currentValue();
        #
        #                    objectFilename = SysTreeNode::treeNodePath2FilePath(path)+#xpo;
        #                    filename       = repopath+strFmt('%1', pathLayer)+objectFilename;
        #
        #                    found = false;
        #                    //BP Deviation documented
        #                    if (WinAPI::fileExists(filename))
        #                    {
        #                        found = true;
        #                    }
        #                    else
        #                    {
        #                        // Check in model folders
        #                        enum  = modelFolders.getEnumerator();
        #                        while (enum.moveNext())
        #                        {
        #                            filename = repopath+strFmt(@'%1\', enum.currentKey())+objectFilename;
        #                            //BP Deviation documented
        #                            if (WinAPI::fileExists(filename))
        #                            {
        #                                found = true;
        #                                break;
        #                            }
        #                        }
        #
        #                        //
        #                        // Check in additional folders
        #                        //
        #                        if (!found)
        #                        {
        #                            enum  = additionalFolders.getEnumerator();
        #                            while (enum.moveNext())
        #                            {
        #                                filename = repopath+strFmt('%1', enum.currentKey())+objectFilename;
        #                                //BP Deviation documented
        #                                if (WinAPI::fileExists(filename))
        #                                {
        #                                    found = true;
        #                                    break;
        #                                }
        #                            }
        #                        }
        #                    }
        #                    if (found)
        #                    {
        #                        addToCache(pathsUnderVCS, path);
        #                    }
        #                    else
        #                    {
        #                        if (currentAOLayer == pathLayer)
        #                        {
        #                            addToCache(pathsNotUnderVCSError, path);
        #                            sysBPCheck.addError(#BPErrorMethodRefersLocalObject, 0, 0, strFmt("@SYS86883", path));
        #                        }
        #                        else
        #                        {
        #                            addToCache(pathsNotUnderVCSInfo, path);
        #                            sysBPCheck.addInfo(#BPErrorMethodRefersLocalObject, 0, 0, strFmt("@SYS86883", path));
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #checkUseOfCacheAddMethod
        #protected void checkUseOfCacheAddMethod()
        #{
        #    xRefTmpReferences thisReferences;
        #    #TokenTypes
        #
        #    void testAPI(
        #        ClassName       _className,
        #        IdentifierName  _methodname,
        #        xRefKind        _kind)
        #    {
        #        int64 refCount = 0;
        #        ;
        #        if (scanner.lines())
        #        {
        #            select count (RecId) from thisReferences
        #                where thisReferences.Kind       ==   _kind &&
        #                      thisReferences.ParentName like _className &&
        #                      thisReferences.Name       ==   _methodname &&
        #                      thisReferences.Reference  ==   XRefReference::Call;
        #            refCount = thisReferences.RecId;
        #        }
        #        if(refCount > 1)
        #        {
        #            sysBPCheck.addWarning(#BPErrorMethodCacheAddMethod, thisReferences.Line, thisReferences.Column, "@SYS107158");
        #        }
        #    }
        #
        #    thisReferences.setTmpData(tmpxRefReferences);
        #
        #//BP Deviation documented
        #    testAPI(classStr(FormDataSource),          methodStr(FormDataSource, cacheAddMethod), xRefKind::ClassInstanceMethod);
        #}
        #
      ENDSOURCE
      SOURCE #checkUseOfDangerousClasses
        #protected void checkUseOfDangerousClasses()
        #{
        #    xRefTmpReferences thisReferences;
        #    #TokenTypes
        #
        #    void testAPI(
        #        ClassName       _className,
        #        IdentifierName  _methodname,
        #        int             _parm,
        #        boolean         _isError,
        #        xRefKind        _kind,
        #        CompileErrorCode _errorCode,
        #        ClassName       _apiName = _className,
        #        str             _message = _isError ? "@SYS90608" : "@SYS90609",
        #        anytype         _forbiddenParameterValue = '' )
        #    {
        #        int symbol;
        #        int i;
        #
        #        if (scanner.lines())
        #        {
        #            while select thisReferences
        #                where thisReferences.Kind       ==   _kind &&
        #                      thisReferences.ParentName like _className &&
        #                      thisReferences.Name       ==   _methodname &&
        #                      thisReferences.Reference  ==   XRefReference::Call
        #            {
        #                if (_parm != 0)
        #                {
        #                    symbol = scanner.firstSymbol();
        #
        #                    // Skip to the symbol found in xref
        #                    while (symbol &&
        #                           scanner.line() < thisReferences.Line ||
        #                           (scanner.line() == thisReferences.Line && scanner.col() < thisReferences.Column))
        #                    {
        #                        symbol = scanner.nextSymbol();
        #
        #                        if (scanner.line() == thisReferences.Line &&
        #                            (scanner.string() == identifierStr('methodStr') ||
        #                             scanner.string() == identifierStr('staticmethodStr')))
        #                        {
        #                            return;
        #                        }
        #                    }
        #
        #                    // Skip the (
        #                    while (symbol && scanner.string() != '(')
        #                    {
        #                        symbol = scanner.nextSymbol();
        #                    }
        #                    symbol = scanner.nextSymbol();
        #
        #                    // Skip to the right parameter
        #                    i = 1;
        #                    while (symbol && i < _parm)
        #                    {
        #                        if (scanner.string() == ',')
        #                            i++;
        #                        symbol = scanner.nextSymbol();
        #                    }
        #
        #                }
        #
        #                if (_parm == 0 ||
        #                    (symbol != #Str_sym &&
        #                     symbol != #Int_Sym &&
        #                     symbol != #Bad_Macro &&
        #                     xppScanner::symbolClass(symbol) != #SymbolClassINTRINSIC &&
        #                     symbol != #RGHT_PAR_SYM &&
        #                     scanner.string())) // not constant text value
        #                {
        #                    if (_isError)
        #                    {
        #                        if (_methodname == methodStr(Object, new))
        #                        {
        #                            sysBPCheck.addError(_errorCode, thisReferences.Line, thisReferences.Column, strFmt(_message, _apiName));
        #                        }
        #                        else
        #                        {
        #                            sysBPCheck.addError(_errorCode, thisReferences.Line, thisReferences.Column, strFmt(_message, _apiName+'.'+_methodname));
        #                        }
        #                    }
        #                    else
        #                    {
        #                        if (_methodname == methodStr(Object, new))
        #                        {
        #                            this.addSuppressableError(_errorCode, thisReferences.Line, thisReferences.Column, strFmt(_message, _apiName));
        #                        }
        #                        else
        #                        {
        #                            this.addSuppressableError(_errorCode, thisReferences.Line, thisReferences.Column, strFmt(_message, _apiName+'.'+_methodname));
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    if (!prmisDefault(_forbiddenParameterValue) && _parm)
        #                    {
        #                        if (typeOf(_forbiddenParameterValue) == Types::Integer &&
        #                            scanner.intValue() == _forbiddenParameterValue)
        #                        {
        #                            if (_isError)
        #                            {
        #                                sysBPCheck.addError(_errorCode, thisReferences.Line, thisReferences.Column, strFmt(_message, _apiName+'.'+_methodname));
        #                            }
        #                            else
        #                            {
        #                                this.addSuppressableError(_errorCode, thisReferences.Line, thisReferences.Column, strFmt(_message, _apiName+'.'+_methodname));
        #                            }
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #    }
        #
        #    thisReferences.setTmpData(tmpxRefReferences);
        #
        #//BP Deviation documented
        #    testAPI(classStr(DLL),          methodStr(DLL, new),                                1, true,   xRefKind::ClassInstanceMethod, #BPErrorTwCAPICalledWithNonConstantParameter);
        #    testAPI(classStr(DLLFunction),  methodStr(DLLFunction, new),                        2, true,   xRefKind::ClassInstanceMethod, #BPErrorTwCAPICalledWithNonConstantParameter);
        #//BP Deviation documented
        #    testAPI(classStr(COM),          methodStr(COM, new),                                1, true,   xRefKind::ClassInstanceMethod, #BPErrorTwCAPICalledWithNonConstantParameter);
        #
        #    testAPI('*',                    methodStr(xRecord, setTmp),                         0, false,  xRefKind::TableInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(xRecord),      "@SYS90973");
        #    testAPI(classStr(SysTableLookup), methodStr(SysTableLookupBase, parmTmpBuffer),         1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(SysTableLookup), "@SYS90973");
        #
        #//BP Deviation documented
        #    testAPI(classStr(FormListItem), methodStr(FormListItem, new),                       1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(FormListItem), "@SYS98155");
        #    testAPI(classStr(FormListItem), methodStr(FormListItem, text),                      1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(FormListItem), "@SYS98155");
        #//BP Deviation documented
        #    testAPI(classStr(FormTreeItem), methodStr(FormTreeItem, new),                       1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(FormTreeItem), "@SYS98155");
        #    testAPI(classStr(FormTreeItem), methodStr(FormTreeItem, text),                      1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(FormTreeItem), "@SYS98155");
        #
        #    testAPI(classStr(FormListControl), methodStr(FormListControl, add),                 1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(FormListControl), "@SYS98155");
        #    testAPI(classStr(FormTreeControl), methodStr(FormTreeControl, add),                 1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(FormTreeControl), "@SYS98155");
        #
        #    testAPI(classStr(FormTableCell), methodStr(FormTableCell, data),                    1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCEnsureRecordLevelSecurity, classStr(FormTableCell), "@SYS98155");
        #
        #    testAPI(classStr(QueryRun), methodStr(QueryRun, literals),                          1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCDangerousAPI, classStr(QueryRun), SysBPCheckQuery::literalErrorMessage(), 1);
        #    testAPI(classStr(Query), methodStr(Query, literals),                                1, false,  xRefKind::ClassInstanceMethod, #BPErrorTwCDangerousAPI, classStr(Query), SysBPCheckQuery::literalErrorMessage(), 1);
        #}
      ENDSOURCE
      SOURCE #checkUseOfDangerousFunctions
        #protected void checkUseOfDangerousFunctions()
        #{
        #    #TokenTypes
        #
        #    void testAPI(int _token, int _parm, int _errorCode, str _message)
        #    {
        #        int symbol;
        #        int i;
        #        boolean firstSymbol = true;
        #        if (scanner.lines() && scanner.symbolExists(_token))
        #        {
        #            symbol = scanner.firstSymbol();
        #
        #            do
        #            {
        #                if (symbol == _token &&
        #                    (firstSymbol ||
        #                     subStr(scanner.sourceLine(scanner.line()), scanner.col()-1-strLen(scanner.strValue()), 1) == ' '))
        #                {
        #                    if (_parm)
        #                    {
        #                        // Skip the (
        #                        while (symbol && scanner.string() != '(')
        #                        {
        #                            symbol = scanner.nextSymbol();
        #                        }
        #                        symbol = scanner.nextSymbol();
        #
        #                        // Skip to the right parameter
        #                        i = 1;
        #                        while (symbol && i < _parm)
        #                        {
        #                            if (scanner.string() == ',')
        #                                i++;
        #                            symbol = scanner.nextSymbol();
        #                        }
        #                    }
        #
        #                    if (_parm == 0 ||
        #                        (symbol != #TextConstant &&
        #                         symbol != #Bad_Macro &&
        #                         symbol != #RGHT_PAR_SYM &&
        #                         scanner.string())) // not constant text value
        #                    {
        #                        this.addSuppressableError(_errorCode, scanner.line(), scanner.col(), _message);
        #                    }
        #                }
        #                firstSymbol = false;
        #                symbol = scanner.nextSymbol();
        #            }
        #            while (symbol);
        #        }
        #    }
        #
        #    testAPI(#RUNBUF_EVAL,  1, #BPErrorTwCDangerousAPI,      strFmt("@SYS90609", identifierStr('RunBuf')));
        #    testAPI(#EVALBUF_EVAL, 1, #BPErrorTwCDangerousAPI,      strFmt("@SYS90609", identifierStr('EvalBuf')));
        #    testAPI(#RUNAS_FUNC,   1, #BPErrorTwCDangerousAPI,      strFmt("@SYS90609", identifierStr('RunAs')));
        #    testAPI(#FORCE_LITERALS_SYM, 0, #BPErrorTwCDangerousAPI, SysBPCheckQuery::literalErrorMessage());
        #}
      ENDSOURCE
      SOURCE #checkUseOfFieldLists
        #protected void checkUseOfFieldLists()
        #{
        #    xRefTmpReferences thisReferences;
        #    xRefTmpReferences thisTableReferences;
        #    xRefTmpReferences thisTableReferencesInBlock;
        #    xRefTmpReferences thisFieldReferencesInBlock;
        #    xRefTmpReferences thisLocalMethodCallsInBlock;
        #    str               sourceLine;
        #    int               startLine;
        #    int               endLine;
        #    int               level;
        #    int               symbol;
        #    int               size;
        #    int               parmIndex;
        #    boolean           nonFieldRefDetected;
        #    boolean           inBlock;
        #    boolean           groupByDetected;
        #    SysDictTable      dictTable;
        #    SysDictField      dictField;
        #    boolean           whileSymbolDetected;
        #    boolean           firstOnlySymbolDetected;
        #    boolean           joinSymbolDetected;
        #    boolean           breakSymbolDetected;
        #    boolean           skipCheckSymbolDetected;
        #    Set               skipTableVariables = new Set(Types::String);
        #    Set               skipTables = new Set(Types::String);
        #    #TokenTypes
        #
        #    if (scanner.symbolExists(#SEARCH_SYM))
        #    {
        #        thisReferences.setTmpData(tmpxRefReferences);
        #        thisTableReferences.setTmpData(tmpxRefReferences);
        #        thisTableReferencesInBlock.setTmpData(tmpxRefReferences);
        #        thisFieldReferencesInBlock.setTmpData(tmpxRefReferences);
        #        thisLocalMethodCallsInBlock.setTmpData(tmpxRefReferences);
        #
        #        //
        #        // build the skipTableVariables set from the input parameters
        #        //
        #        for(parmIndex=1;parmIndex<=sysDictMethod.parameterCnt();++parmIndex)
        #        {
        #            if ( Types::Record == sysDictMethod.parameterType(parmIndex) )
        #            {
        #                skipTableVariables.add(sysDictMethod.parameterName(parmIndex));
        #            }
        #        }
        #
        #        //
        #        // A table is being written,
        #        // and the table is declared in this method (and not in a classDeclaration)
        #        //
        #        while select thisReferences
        #            order by Line, Column
        #            where thisReferences.Kind       ==   xRefKind::Table &&
        #                  thisReferences.Reference  ==   XRefReference::Write
        #            exists join thisTableReferences
        #                where thisTableReferences.Kind       == xRefKind::Table &&
        #                      thisTableReferences.Reference  == XRefReference::Declaration &&
        #                      thisTableReferences.Name       == thisReferences.Name &&
        #                      thisTableReferences.ParentName == thisReferences.ParentName
        #        {
        #            dictTable = new SysDictTable(tableName2id(thisReferences.ParentName));
        #            if (dictTable &&
        #                !dictTable.isTmp() &&
        #                !skipTables.in(dictTable.name()))
        #            {
        #                sourceLine = scanner.sourceLine(thisReferences.Line);
        #
        #                // It is a select or a join...
        #                if ((strScan(sourceLine,  ' select ',    1, thisReferences.Column) ||
        #                     strScan(sourceLine,  ' join ',      1, thisReferences.Column)))
        #                {
        #                    // ...but not an exists join
        #                    if(!strScan(sourceLine, ' exists ',    1, thisReferences.Column) &&
        #                       !strScan(sourceLine, ' notexists ', 1, thisReferences.Column))
        #                    {
        #                        // Is field list already used ?
        #                        if (!strScan(sourceLine, ' from ', 1, thisReferences.Column))
        #                        {
        #                            symbol = scanner.firstSymbol();
        #                            whileSymbolDetected = false;
        #                            firstOnlySymbolDetected = false;
        #                            joinSymbolDetected = false;
        #                            skipCheckSymbolDetected = false;
        #
        #                            // Skip to the symbol found in xref
        #                            while (symbol &&
        #                                   scanner.line() < thisReferences.Line ||
        #                                   (scanner.line() == thisReferences.Line && scanner.col() < thisReferences.Column))
        #                            {
        #                                switch (symbol)
        #                                {
        #                                    case #UPDATE_SYM:    //Update_RecordSet
        #                                    case #FORUPDATE_SYM: //Forupdate
        #                                    case #INSERT_SYM:    //Insert_RecordSet
        #                                        skipCheckSymbolDetected = true;
        #                                        break;
        #
        #                                    case #WHILE_SYM:
        #                                        whileSymbolDetected = true;
        #                                        break;
        #
        #                                    case #JOIN_SYM:
        #                                        joinSymbolDetected = true;
        #                                        break;
        #
        #                                    case #FIRSTONLY_SYM:
        #                                    case #FIRSTONLY1_SYM:
        #                                    case #FIRSTONLY10_SYM:
        #                                    case #FIRSTONLY100_SYM:
        #                                    case #FIRSTONLY1000_SYM:
        #                                        firstOnlySymbolDetected = true;
        #                                        break;
        #
        #                                    case #LEFTBR_SYM:
        #                                    case #SEMICOLON_SYM:
        #                                        whileSymbolDetected = false;
        #                                        firstOnlySymbolDetected = false;
        #                                        joinSymbolDetected = false;
        #                                        skipCheckSymbolDetected = false;
        #                                        break;
        #                                }
        #                                symbol = scanner.nextSymbol();
        #                            }
        #
        #                            if (skipCheckSymbolDetected)
        #                                continue;
        #
        #                            groupByDetected = false;
        #                            breakSymbolDetected = false;
        #                            if (whileSymbolDetected)
        #                            {
        #                                // It is a while select
        #                                level = 0;
        #                                inBlock = false;
        #                                while (symbol && (level > 0 || !inBlock))
        #                                {
        #                                    switch (symbol)
        #                                    {
        #                                        case #LEFTBR_SYM:
        #                                            level++;
        #                                            if (!inBlock)
        #                                                startLine = scanner.line();
        #                                            inBlock = true;
        #                                            break;
        #                                        case #RIGHTBR_SYM:
        #                                            level--;
        #                                            if (level == 0)
        #                                                endLine = scanner.line();
        #                                            break;
        #                                        case #GROUP_SYM:
        #                                            groupByDetected = true;
        #                                            break;
        #                                        case #BREAK_SYM:
        #                                            breakSymbolDetected = true;
        #                                            break;
        #                                    }
        #                                    symbol = scanner.nextSymbol();
        #                                }
        #                                if (breakSymbolDetected)
        #                                {
        #                                    //When a break is used inside a while select
        #                                    //the buffer can be used in the rest of the method
        #                                    endLine = scanner.lines();
        #                                }
        #                            }
        #                            else
        #                            {
        #                                // It is not a while select - consider the rest of the method as a block.
        #                                inBlock = false;
        #                                while (symbol && !inBlock)
        #                                {
        #                                    switch (symbol)
        #                                    {
        #                                        case #SEMICOLON_SYM:
        #                                            inBlock = true;
        #                                            startLine = scanner.line() + 1;
        #                                            break;
        #                                        case #GROUP_SYM:
        #                                            groupByDetected = true;
        #                                            break;
        #                                    }
        #                                    symbol = scanner.nextSymbol();
        #                                }
        #                                endLine   = scanner.lines();
        #
        #                                if (!firstOnlySymbolDetected
        #                                 && !joinSymbolDetected
        #                                 && !scanner.symbolExists(#NEXT_SYM))
        #                                {
        #                                    sysBPCheck.addWarning(#BPErrorSelectUsingFirstOnly, thisReferences.Line, thisReferences.Column,
        #                                        strFmt("@SYS91288", thisReferences.Name));
        #                                }
        #                            }
        #
        #                            if (!groupByDetected)
        #                            {
        #                                //
        #                                // Find first table reference, that doesn't have a field reference.
        #                                // Only looking in the scope of startLine to endLine.
        #                                //
        #                                nonFieldRefDetected = false;
        #                                while select thisTableReferencesInBlock
        #                                    where thisTableReferencesInBlock.Kind == xRefKind::Table &&
        #                                          thisTableReferencesInBlock.Name == thisReferences.Name &&
        #                                          thisTableReferencesInBlock.Line >= startLine &&
        #                                          thisTableReferencesInBlock.Line <= endLine
        #                                {
        #                                    //
        #                                    // What is the next reference?
        #                                    //
        #                                    select firstonly thisFieldReferencesInBlock
        #                                        order by Line, Column
        #                                        where thisFieldReferencesInBlock.Line == thisTableReferencesInBlock.Line
        #                                           && thisFieldReferencesInBlock.Column > thisTableReferencesInBlock.Column;
        #
        #                                    if (!thisFieldReferencesInBlock ||
        #                                         thisFieldReferencesInBlock.Kind != xRefKind::TableField ||
        #                                         thisFieldReferencesInBlock.ParentName != thisReferences.ParentName)
        #                                    {
        #                                        nonFieldRefDetected = true;
        #                                    }
        #                                }
        #
        #                                //
        #                                // Is there a call to a local method in the block?
        #                                // Local methods are not analyzed -> the BP check is skipped
        #                                //
        #                                select firstonly thisLocalMethodCallsInBlock
        #                                    where thisLocalMethodCallsInBlock.Kind == xRefKind::LocalMethod &&
        #                                          thisLocalMethodCallsInBlock.Reference == XRefReference::Call &&
        #                                          thisLocalMethodCallsInBlock.Line >= startLine &&
        #                                          thisLocalMethodCallsInBlock.Line <= endLine;
        #
        #                                //
        #                                // Only field references; no method calls, no passing-on of the record, no calls to local methods, etc.
        #                                //
        #                                if (!nonFieldRefDetected && !thisLocalMethodCallsInBlock)
        #                                {
        #                                    size = 0;
        #                                    while select RecId from thisFieldReferencesInBlock
        #                                        group by Name
        #                                        where thisFieldReferencesInBlock.Kind == xRefKind::TableField &&
        #                                              thisFieldReferencesInBlock.ParentName == thisReferences.ParentName &&
        #                                              thisFieldReferencesInBlock.Line >= startLine &&
        #                                              thisFieldReferencesInBlock.Line <= endLine
        #                                    {
        #
        #                                        dictField = new SysDictField(dictTable.id(), dictTable.fieldName2Id(thisFieldReferencesInBlock.Name));
        #                                        if (dictField && dictField.isSql() && !dictField.isSystem())
        #                                        {
        #                                            size += dictField.fieldSize();
        #                                        }
        #                                    }
        #                                    if (size < dictTable.recordSize(false,false) / 2) //Less than half the bandwidth of fields are used
        #                                    {
        #                                        // only report BP error if the table is not an input parameter
        #                                        if ( !skipTableVariables.in(thisReferences.Name) )
        #                                        {
        #                                            this.addSuppressableError(#BPErrorSelectUsingFieldList, thisReferences.Line, thisReferences.Column,
        #                                                strFmt("@SYS91289", thisReferences.Name, num2str(100*size / dictTable.recordSize(false), 1, 0, -1, -1) ));
        #                                        }
        #                                    }
        #                                }
        #                            }
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    skipTables.add(dictTable.name());
        #                }
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #checkVariables
        #// Check the variable use in this particular method
        #protected boolean checkVariables()
        #{
        #    #AviFiles
        #    boolean                 ret = true;
        #    ;
        #    if (methodname != #methodNameClassDeclaration && // no meaning in checking ClassDeclaration on a single method basis
        #        !sysDictMethod.isAbstract()) // no meaning in checking parameters and variables in abstract methods
        #    {
        #        //
        #        // Skip if classdeclaration can't compile - as the xref will contain wrong info
        #        //
        #        if (methodType == UtilElementType::ClassInstanceMethod &&
        #            !new SysDictMethod(UtilElementType::ClassInstanceMethod, parentId, #methodNameClassDeclaration).compiledOk())
        #        {
        #            return true;
        #        }
        #
        #        ret = this.checkVariablesUse(tmpxRefReferences);
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #checkVariablesUse
        #/*
        #    Check how the variables in the method are used
        #
        #    Known problems:
        #     * When checking Class hierarcies, scope rules are not yet complete, leading to missing warnings
        #     * Parameters and variables in local methods are skipped
        #*/
        #private boolean checkVariablesUse(xRefTmpReferences _tmpxRefReferences)
        #{
        #    boolean ret = true;
        #    xRefTmpReferences variables;
        #    xRefTmpReferences reads;
        #    xRefTmpReferences writes;
        #    xRefTmpReferences all;
        #    boolean isClassDeclaration = match('\\\\' + #MethodNameClassDeclaration + '>', memberFunction.treeNodePath());
        #    int parms;           // declarations after that are variables
        #    int declarationNo;   // counter for local declarations
        #    int localMethodLine;
        #    int bodyLine, bodyColumn, symbol;
        #    #TokenTypes
        #
        #    variables.setTmpData(_tmpxRefReferences);
        #    reads.setTmpData(_tmpxRefReferences);
        #    writes.setTmpData(_tmpxRefReferences);
        #    all.setTmpData(_tmpxRefReferences);
        #
        #    parms = sysDictMethod.parameterCnt();
        #
        #    //
        #    // Find the line where the first local method is declared.
        #    // (Method-level variables cannot be declared after local methods.)
        #    //
        #    select firstonly Line from all
        #        order by Line
        #        where all.Reference == XRefReference::Definition
        #           && all.Kind      == xRefKind::LocalMethod;
        #    if (all)
        #        localMethodLine = all.Line;
        #    else
        #        localMethodLine = maxInt();
        #
        #    /* --- */
        #    declarationNo = 0;
        #    while select variables // every variable (incl. parameter) on every method are checked
        #        order by Line, Column
        #        where variables.Reference == XRefReference::Declaration &&
        #              variables.Line < localMethodLine //Ignore parameters and variables of local methods
        #    {
        #        declarationNo++;
        #
        #        // check the name rule
        #        // Name rule (Naming conventions, Underscore)
        #        if (declarationNo > parms &&
        #            match('<_',variables.Name))
        #        {
        #            this.addSuppressableError(#BPErrorMethodVariableWithUnderscore, variables.Line, variables.Column, strFmt("@SYS60113", variables.Name)); // Only parameters must start with an underscore, not variables like '%1'
        #            ret = false;
        #        }
        #        // check the usage of the variable
        #        if (isClassDeclaration)
        #        {
        #            reads.clear();
        #            writes.clear();
        #        }
        #        else
        #        {
        #            select reads
        #                where reads.ParentName == variables.ParentName
        #                   && reads.Name       == variables.Name
        #                   && reads.Reference  == XRefReference::Read;
        #            select writes
        #                where writes.ParentName == variables.ParentName
        #                   && writes.Name       == variables.Name
        #                   && writes.Reference  == XRefReference::Write /*||
        #                      writes.reference  == XRefReference::Declaration)*/ ;
        #        }
        #
        #        if (!reads && !writes && memberFunction) // Unused parameters and variables should be cleaned out
        #        {
        #            // some parameters are given by the system (like args in main)
        #            // or can be inherited by method in super class (can also be a system defined method like mouseDblClick)
        #            // it's ret to leave them untouched
        #
        #            // skip _args in main:
        #            if (!(methodname == #MethodNameMain &&
        #                  methodType == UtilElementType::ClassStaticMethod &&
        #                  declarationNo == 1)) // args are the first declaration
        #            {
        #                if (declarationNo > parms)
        #                {
        #                    sysBPCheck.addError(#BPErrorMethodVariableNotUsed, variables.Line, variables.Column, strFmt("@SYS60464", "@SYS60111", variables.Name));
        #                }
        #                else
        #                {
        #                    if (sysDictMethod.accessSpecifier() == AccessSpecifier::private)
        #                        this.addSuppressableWarning(#BPErrorMethodVariableNotUsed, variables.Line, variables.Column, strFmt("@SYS60464" ,"@SYS7755", variables.Name));
        #                    else
        #                        sysBPCheck.addInfo(#BPErrorMethodVariableNotUsed, variables.Line, variables.Column, strFmt("@SYS60464" ,"@SYS7755", variables.Name));
        #                }
        #                ret = false;
        #            }
        #        }
        #        else
        #        if (!reads)
        #        {
        #            if (declarationNo > parms)
        #            {
        #                sysBPCheck.addInfo(#BPErrorMethodVariableNotReadButWritten, writes.Line, writes.Column, strFmt("@SYS60465", "@SYS60111", variables.Name));
        #            }
        #            else
        #            {
        #                sysBPCheck.addInfo(#BPErrorMethodVariableNotReadButWritten, writes.Line, writes.Column, strFmt("@SYS60465", "@SYS7755", variables.Name));
        #            }
        #            ret = false;
        #        }
        #
        #        if (sysBPCheck.toBeUsed(SysBPWarningLevel::Warning) &&
        #            writes && (declarationNo <= parms)) // writes to parameters have to be analyzed
        #        {
        #            //
        #            // Find the line and column where the method body starts
        #            // (But only once for each method)
        #            //
        #            if (bodyLine == 0)
        #            {
        #                scanner.firstSymbol();
        #                do
        #                {
        #                    symbol = scanner.nextSymbol();
        #                }
        #                while (symbol && symbol != #LEFTBR_SYM);
        #                bodyLine = scanner.line();
        #                bodyColumn = scanner.col();
        #            }
        #
        #            // some writes to parameters are not allowed
        #            while select writes
        #                where writes.ParentName == variables.ParentName
        #                   && writes.Name       == variables.Name
        #                   && writes.Reference  == XRefReference::Write
        #                   && (writes.Line       >  bodyLine || (writes.Line == bodyLine && writes.Column > bodyColumn)) // in the method body, after the optional default value assignments
        #                   && writes.Kind       != xRefKind::Table  // only parameters which aren't supplied by reference (parameters supplied by reference may be modified - especially by accssing their members).
        #                   && writes.Kind       != xRefKind::Map
        #                   && writes.Kind       != xRefKind::Class
        #            {
        #                if (writes)
        #                {
        #                    this.addSuppressableWarning(#BPErrorMethodVariableDontWriteToParms, writes.Line, writes.Column, strFmt("@SYS60115", variables.Name, writes.Line, writes.Column));
        #                    ret = false;
        #                }
        #            }
        #        }
        #    }
        #
        #    variables           = null;
        #    reads               = null;
        #    writes              = null;
        #    all                 = null;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkXmlDocumenationParam
        #protected void checkXmlDocumenationParam()
        #{
        #    #Define.LineOffset(1)
        #    #Define.ColumnOffset(5)
        #    int cnt = sysDictMethod.xmlDocumentationParameterCount();
        #    int i;
        #    str tag;
        #
        #    // Check all parameters are documented
        #    for (i=1; i<=cnt; i++)
        #    {
        #        tag = strFmt('%1 %2="%3"', #XmlParam, #XmlName, sysDictMethod.xmlDocumentationParameterName(i));
        #
        #        // Case sensitivy parameter name check
        #        if (i > sysDictMethod.parameterCnt() ||
        #            strCmp(sysDictMethod.parameterName(i), sysDictMethod.xmlDocumentationParameterName(i)) != 0)
        #        {
        #            sysBPCheck.addError(#BPErrorXmlDocumentationParamWrongName, sysDictMethod.xmlDocumentationParameterLine(i)+#LineOffset, #ColumnOffset, strFmt("@SYS107113", tag));
        #        }
        #        else
        #        {
        #            // Is parameter documented ?
        #            if (!sysDictMethod.xmlDocumentationParameterDocumentation(i))
        #            {
        #                sysBPCheck.addError(#BPErrorXmlDocumentationParamMissing, sysDictMethod.xmlDocumentationParameterLine(i)+#LineOffset, #ColumnOffset, strFmt("@SYS107150", tag));
        #            }
        #        }
        #    }
        #
        #    // Check remaining implemented parameters are documented
        #    for (i=sysDictMethod.xmlDocumentationParameterCount()+1; i<=sysDictMethod.parameterCnt(); i++)
        #    {
        #        tag = strFmt('%1 %2="%3"', #XmlParam, #XmlName, sysDictMethod.parameterName(i));
        #
        #        // Is parameter documented ?
        #        sysBPCheck.addError(#BPErrorXmlDocumentationParamTagMissing, 0, 0, strFmt("@SYS107110", tag));
        #    }
        #}
      ENDSOURCE
      SOURCE #checkXmlDocumenationTag
        #/// <summary>
        #/// Checks if an XML tag is used correctly in the documentation.
        #/// </summary>
        #/// <param name="_tag">
        #/// The name of the tag.
        #/// </param>
        #/// <param name="_contentsMissingErrorCode">
        #/// The error code to report when the tag exists but has no content.
        #/// </param>
        #/// <param name="_tagMissingErrorCode">
        #/// The error code to report when the tag is missing.
        #/// </param>
        #/// <param name="_tagForbiddenErrorCode">
        #/// The error code to report when the tag exists but should not be used.
        #/// </param>
        #/// <remarks>
        #/// Use a value of zero as the error code to skip individual checks.
        #/// </remarks>
        #protected void checkXmlDocumenationTag(
        #    str _tag,
        #    int _contentsMissingErrorCode,
        #    int _tagMissingErrorCode = 0,
        #    int _tagForbiddenErrorCode = 0)
        #{
        #    #Define.LineOffset(1)
        #    #Define.ColumnOffset(5)
        #
        #    // Does the tag exists?
        #    if (sysDictMethod.xmlDocumentationTagExists(_tag))
        #    {
        #        // Is the tag forbidden?
        #        if (_tagForbiddenErrorCode)
        #        {
        #            sysBPCheck.addError(_tagForbiddenErrorCode, sysDictMethod.xmlDocumentationTagLine(_tag), #ColumnOffset, strFmt("@SYS107113", _tag));
        #        }
        #        else
        #        {
        #            // Does the tag have a value?
        #            if (!sysDictMethod.xmlDocumentationTagDocumentation(_tag))
        #            {
        #                // If tag is present, it must have a value
        #                sysBPCheck.addError(_contentsMissingErrorCode, sysDictMethod.xmlDocumentationTagLine(_tag)+#LineOffset, #ColumnOffset, strFmt("@SYS107150", _tag));
        #            }
        #        }
        #    }
        #    else
        #    {
        #        // Is tag mandatory?
        #        if (_tagMissingErrorCode)
        #        {
        #            sysBPCheck.addError(_tagMissingErrorCode, 0, 0, strFmt("@SYS107110", _tag));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkXmlDocumenationTags
        #protected void checkXmlDocumenationTags()
        #{
        #    #Define.LineOffset(1)
        #    #Define.ColumnOffset(5)
        #
        #    List tags = sysDictMethod.xmlDocumentationTags();
        #    ListEnumerator enumerator = tags.getEnumerator();
        #
        #    int cnt = sysDictMethod.xmlDocumentationParameterCount();
        #    str tag;
        #    Set tagSet = new Set(Types::String);
        #
        #    // Check tags
        #    while (enumerator.moveNext())
        #    {
        #        tag = enumerator.current();
        #
        #        // Does casing match a supported tag
        #        if (strCmp(tag, #XmlSummary) == 0 ||
        #            strCmp(tag, #XmlParam) == 0 ||
        #            strCmp(tag, #XmlReturns) == 0 ||
        #            strCmp(tag, #XmlException) == 0 ||
        #            strCmp(tag, #XmlPermission) == 0 ||
        #            strCmp(tag, #XmlSeeAlso) == 0 ||
        #            strCmp(tag, #XmlSyntax) == 0 ||
        #            strCmp(tag, #XmlRemarks) == 0)
        #        {
        #            // Detect if already used
        #            if (tag != #XmlParam &&      //tag is allowed multiple times
        #                tag != #XmlException &&  //tag is allowed multiple times
        #                tag != #XmlPermission && //tag is allowed multiple times
        #                tagSet.in(tag))
        #            {
        #                sysBPCheck.addError(#BPErrorXmlDocumentationDuplicated, sysDictMethod.xmlDocumentationTagLine(tag), #ColumnOffset, strFmt("@SYS107215", tag));
        #            }
        #            tagSet.add(tag);
        #        }
        #        else
        #        {
        #            // Is it a support tag, but with wrong casing?
        #            if (tag == #XmlSummary ||
        #                tag == #XmlParam ||
        #                tag == #XmlReturns ||
        #                tag == #XmlException ||
        #                tag == #XmlPermission ||
        #                tag == #XmlSeeAlso ||
        #                tag == #XmlSyntax ||
        #                tag == #XmlRemarks)
        #            {
        #                sysBPCheck.addError(#BPErrorXmlDocumentationUnsupported, sysDictMethod.xmlDocumentationTagLine(tag), #ColumnOffset, strFmt("@SYS107111", tag));
        #            }
        #            else
        #            {
        #                sysBPCheck.addWarning(#BPErrorXmlDocumentationUnsupported, sysDictMethod.xmlDocumentationTagLine(tag), #ColumnOffset, strFmt("@SYS107111", tag));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkXmlDocumentation
        #protected void checkXmlDocumentation()
        #{
        #    #Define.ColumnOffset(5)
        #
        #    if (!sysDictMethod.xmlDocumentationExists())
        #    {
        #        if (sysBPCheck.toBeUsed(SysBPWarningLevel::Warning) &&
        #            !sysDictMethod.xmlDocumentationCanBeAutomated() &&
        #            !sysDictMethod.xmlDocumentationCanBeInherited() &&
        #            (parentType == UtilElementType::Class ||
        #             parentType == UtilElementType::Table))
        #        {
        #            sysBPCheck.addWarning(#BPErrorXmlDocumentationMissing, 0, 0, "@SYS107198");
        #        }
        #        return;
        #    }
        #
        #    // Check well-formed
        #    if (!sysDictMethod.xmlDocumentationIsWellFormed())
        #    {
        #        sysBPCheck.addError(#BPErrorXmlDocumentationNotWellFormed, 0, 0, "@SYS107112");
        #        return;
        #    }
        #
        #    // summary tag is mandatory
        #    this.checkXmlDocumenationTag(#XmlSummary,
        #                                 #BPErrorXmlDocumentationSummaryMissing,
        #                                 #BPErrorXmlDocumentationSummaryTagMissing);
        #
        #    // Optional tags
        #    this.checkXmlDocumenationTag(#XmlRemarks, #BPErrorXmlDocumentationRemarksMissing);
        #    this.checkXmlDocumenationTag(#XmlException, #BPErrorXmlDocumentationExceptionMissing);
        #    this.checkXmlDocumenationTag(#XmlPermission, #BPErrorXmlDocumentationPermissionMissing);
        #    this.checkXmlDocumenationTag(#XmlSeeAlso, #BPErrorXmlDocumentationSeeAlsoMissing);
        #
        #    if (sysDictMethod.name() == #MethodNameClassDeclaration ||
        #        sysDictMethod.returnType() == Types::void)
        #    {
        #        // returns tag is forbidden
        #        this.checkXmlDocumenationTag(#XmlReturns, 0, 0, #BPErrorXmlDocumentationReturnsForbidden);
        #    }
        #    else
        #    {
        #        // returns tag is mandatory
        #        this.checkXmlDocumenationTag(#XmlReturns, #BPErrorXmlDocumentationReturnsMissing, #BPErrorXmlDocumentationReturnsTagMissing);
        #    }
        #    this.checkXmlDocumenationTags();
        #
        #    this.checkXmlDocumenationParam();
        #
        #    if (sysDictMethod.xmlDocumentationTagExists(#XmlSyntax))
        #    {
        #        sysBPCheck.addError(#BPErrorXmlDocumentationSyntaxForbidden, sysDictMethod.xmlDocumentationTagLine(#XmlSyntax), #ColumnOffset, "@SYS152515");
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysBPCheckMemberFunction extends SysBPCheckBase
        #{
        #    SysDictMethod       sysDictMethod;
        #    SysScannerClass     scanner;
        #    xRefTmpReferences   tmpxRefReferences;       // the source, as the xRef sees it
        #    MemberFunction      memberFunction;
        #    boolean             xRefIsInited;
        #    UtilElementType     parentType;
        #    UtilElementType     methodType;
        #    IdentifierName      parentName;
        #    IdentifierName      methodName;
        #    int                 parentId;
        #    boolean             allowHardcodedTexts;
        #    boolean             isUpgradeScript;
        #    DictClass           currentClass;
        #    Array               attributes;
        #
        #    UtilEntryLevel      currentAOLayer;
        #
        #    //
        #    // Caches that are flushed after every completed BP run (i.e. onIdle)
        #    //
        #    Set                 pathsUnderVCS;
        #    Set                 pathsNotUnderVCSError;
        #    Set                 pathsNotUnderVCSInfo;
        #
        #    #define.del('DEL_')
        #    #XmlDocumentation
        #}
        #
      ENDSOURCE
      SOURCE #deviationDocumented
        #protected boolean deviationDocumented(int _line)
        #{
        #    str line = scanner.sourceLine(_line - 1);
        #    if (strScan(line, #DeviationDocumented, 1, strLen(line)))
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #dispose
        #public void dispose()
        #{
        #    super();
        #    sysDictMethod = null;
        #    if (scanner)
        #    {
        #        scanner.dispose();
        #        scanner = null;
        #    }
        #    tmpxRefReferences = null;
        #    if (memberFunction)
        #    {
        #//        memberFunction.treeNodeRelease();
        #        memberFunction = null;
        #    }
        #    xRefIsInited = false;
        #}
      ENDSOURCE
      SOURCE #exemptFromCRUD
        #private boolean exemptFromCRUD()
        #{
        #    boolean             exempt;
        #    xRefTmpReferences   thisReferences;
        #    xRefTmpReferences   thisTableReferences;
        #
        #    thisReferences.setTmpData(tmpxRefReferences);
        #    thisTableReferences.setTmpData(tmpxRefReferences);
        #
        #    while select *
        #        from thisReferences
        #        order by Line, Column
        #        where thisReferences.Kind == xRefKind::ClassStaticMethod
        #    {
        #        if (thisReferences.actualClassName() == classStr(ReleaseUpdateDB))
        #        {
        #            switch (thisReferences.Name)
        #            {
        #                case 'deleteDuplicatesUsingIds':
        #                case 'deleteDuplicatesUsingNames':
        #                case 'indexAllowDup':
        #                case 'indexAllowNoDup':
        #                    exempt = true;
        #                    break;
        #                default:
        #                    exempt = false;
        #            }
        #        }
        #    }
        #
        #    return exempt;
        #}
      ENDSOURCE
      SOURCE #flushCaches
        #/// <summary>
        #/// Flush all caches.
        #/// </summary>
        #/// <remarks>
        #/// This method is invoked after a complete BP run.
        #/// </remarks>
        #public void flushCaches()
        #{
        #    pathsUnderVCS = new Set(Types::String);
        #    pathsNotUnderVCSError = new Set(Types::String);
        #    pathsNotUnderVCSInfo = new Set(Types::String);
        #}
      ENDSOURCE
      SOURCE #getParameterCount
        #// This method gets the number of parameters in a function call.
        #// Prior to calling this method, textBuffer.matchPos() should point to the begining of the function call, e.g., if target
        #// function name is "targetMethod", textBuffer.find("targetMethod: *(: *") should be called before being passed into this
        #// method. See SysBPCheckMemberFunction::checkSource for more example.
        #private int getParameterCount(TextBuffer textBuffer)
        #{
        #    int paramCount;
        #    int startPos;
        #    str currentChar;
        #    int parenthesisCount;
        #    ;
        #    parenthesisCount = 1;
        #    startPos = textBuffer.matchPos() + textBuffer.matchLen();
        #    currentChar = textBuffer.subStr(startPos, 1);
        #
        #    // if next char is not a space, there must be at least 1 parameter
        #    if(currentChar != ')')
        #    {
        #        paramCount = 1;
        #    }
        #    else
        #    {
        #        paramCount = 0;
        #        parenthesisCount = 0;
        #    }
        #
        #    // counting parameter by counting top level commas
        #    while(currentChar != ';' && parenthesisCount != 0)
        #    {
        #        if(currentChar == '(')
        #        {
        #            parenthesisCount++;
        #        }
        #        else if(currentChar == ')')
        #        {
        #            parenthesisCount--;
        #        }
        #        else if(currentChar == ',' && parenthesisCount == 1)
        #        {
        #            paramCount++;
        #        }
        #        startPos++;
        #        currentChar = textBuffer.subStr(startPos, 1);
        #    }
        #
        #    return paramCount;
        #}
      ENDSOURCE
      SOURCE #getUpgradeScriptVersion
        #private sysReleasedVersion getUpgradeScriptVersion()
        #{
        #    #SysBPCheck
        #    #TokenTypes
        #
        #    sysReleasedVersion  ver = sysReleasedVersion::Unknown;
        #    SysScannerClass     ctorScanner;
        #    MemberFunction      ctorMemberFunction;
        #    TextBuffer          source = new TextBuffer();
        #    str                 verStr;
        #
        #    MemberFunction getConstructor(IdentifierName _className)
        #    {
        #        TreeNode t = infolog.rootNode();
        #        t = t.AOTfindChild('Classes');
        #        t = t.AOTfindChild(_className);
        #        t = t.AOTfindChild(#MethodNameClassDeclaration);
        #
        #        return t;
        #    }
        #
        #    ctorMemberFunction = getConstructor(currentClass.name());
        #
        #    ctorScanner = new SysScannerClass(ctorMemberFunction);
        #    source.setText(ctorScanner.source());
        #
        #    if (source.find(@'#define.version\(.*sysReleasedVersion\:\:v[0-9]+.*\)'))
        #    {
        #        source.setText(source.subStr(source.matchPos(), source.matchLen()));
        #        if (source.find(@'v[0-9]+'))
        #        {
        #            verStr = source.subStr(source.matchPos(), source.matchLen());
        #            ver = symbol2Enum(enumNum(sysReleasedVersion), verStr);
        #        }
        #    }
        #
        #    if (!ver ||
        #        (ver == sysReleasedVersion::Unknown) ||
        #        (ver == sysReleasedVersion::vNext))
        #    {
        #        // The upgrade script does not have a valid version defined [#define.version(sysReleasedVersion)] in the class declaration.
        #        sysBPCheck.addError(#BPErrorInvalidScriptVersion, 1, 1, "@SYS309415");
        #    }
        #
        #    return ver;
        #}
      ENDSOURCE
      SOURCE #hasUpgradeAttributes
        #private boolean hasUpgradeAttributes()
        #{
        #    boolean         retVal;
        #    int             i;
        #    int             attributeClass;
        #
        #    if (sysDictMethod)
        #    {
        #        if (attributes)
        #        {
        #            for (i = 1; i <= attributes.lastIndex(); i++)
        #            {
        #                attributeClass = classIdGet(attributes.value(i));
        #
        #                if (attributeClass == classNum(UpgradeScriptDescriptionAttribute) ||
        #                    attributeClass == classNum(UpgradeScriptTypeAttribute) ||
        #                    attributeClass == classNum(UpgradeScriptStageAttribute) ||
        #                    attributeClass == classNum(UpgradeScriptTableAttribute))
        #                {
        #                    retVal = true;
        #                    break;
        #                }
        #            }
        #        }
        #    }
        #
        #    return retVal;
        #}
      ENDSOURCE
      SOURCE #init
        #public boolean init()
        #{
        #    TreeNodePath parentPath;
        #    UtilElements utilElement;
        #    super();
        #    xRefIsInited = false;
        #    allowHardcodedTexts = false;
        #
        #    if (sysBPCheck.treeNode().handle() == classNum(MemberFunction))
        #    {
        #        parentPath = SysTreeNode::applObjectPath(sysBPCheck.treeNode().treeNodePath());
        #        parentName = SysTreeNode::applObjectName(parentPath);
        #        parentType = SysTreeNode::path2ApplObjectType(parentPath);
        #        memberFunction = sysBPCheck.treeNode();
        #        methodname = memberFunction.name();
        #        sysDictMethod = SysDictMethod::newMemberFunction(memberFunction);
        #
        #        if (memberFunction.treeNodeType().isUtilElement())
        #        {
        #            utilElement = memberFunction.utilElement();
        #            parentId = utilElement.ParentId;
        #            methodType = utilElement.RecordType;
        #        }
        #        else
        #        {
        #            methodType = parentType;
        #        }
        #
        #        if (parentType == UtilElementType::Report)
        #            allowHardcodedTexts = SysBPCheckReportDesign::allowHardcodedTexts(parentName);
        #
        #        if (sysDictMethod)
        #        {
        #            scanner = new SysScannerClass(memberFunction);
        #            currentClass = new DictClass(sysDictMethod.parentId());
        #
        #            if (methodType == UtilElementType::ClassInstanceMethod ||
        #                methodType == UtilElementType::ClassStaticMethod ||
        #                methodType == UtilElementType::TableInstanceMethod ||
        #                methodType == UtilElementType::TableStaticMethod)
        #            {
        #                attributes = sysDictMethod.getAllAttributes();
        #            }
        #            else
        #            {
        #                attributes = null;
        #            }
        #
        #            isUpgradeScript = this.hasUpgradeAttributes();  // Call after setting 'attributes'
        #        }
        #        else
        #        {
        #            error(strFmt("@SYS19384", classStr(SysDictMethod)));
        #            return false;
        #        }
        #        this.initTmpxRefReferences();
        #
        #        return true;
        #    }
        #
        #    error("@SYS60290");
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #initTmpxRefReferences
        #protected void initTmpxRefReferences()
        #{
        #    if (!xRefIsInited)
        #    {
        #        appl.updatexRefSet(true);
        #        memberFunction.AOTmakeXref(1);
        #        tmpxRefReferences = xRefCreate::makeTmp(appl.lastxRef(), sysDictMethod.path());
        #        appl.updatexRefSet(false);
        #
        #        xRefIsInited = true;
        #    }
        #}
      ENDSOURCE
      SOURCE #isKernelDefined
        #private boolean isKernelDefined(int id)
        #{
        #    SysDictType dictType = new SysDictType(id);
        #    if (isSysId(dictType.id()))
        #        return true;
        #    if (dictType.extend())
        #        return this.isKernelDefined(dictType.extend());
        #    return false;
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    super();
        #    currentAOLayer = currentAOLayer();
        #    pathsUnderVCS = new Set(Types::String);
        #    pathsNotUnderVCSInfo = new Set(Types::String);
        #    pathsNotUnderVCSError = new Set(Types::String);
        #}
      ENDSOURCE
      SOURCE #validateUpgradeAttribute
        #private boolean validateUpgradeAttribute(SysAttribute _attribute)
        #{
        #    boolean                             retVal = true;
        #    UpgradeScriptTableAttribute         tableAttribute;
        #    UpgradeScriptConfigKeyAttribute     configKeyAttribute;
        #    UpgradeDependsOnModuleAttribute     moduleAttribute;
        #    UpgradeDependsOnTaskAttribute       taskAttribute;
        #    UpgradeDependsOnVersionAttribute    versionAttribute;
        #    SysDictClass                        sysDictClass;
        #
        #    switch (classIdGet(_attribute))
        #    {
        #        case classNum(UpgradeScriptTableAttribute):
        #            tableAttribute = _attribute;
        #            if (!tableName2id(tableAttribute.parmTableName()))
        #            {
        #                // Table %1 specified in the UpgradeScriptTableAttribute is not valid.
        #                sysBPCheck.addError(#BPErrorTableNotFound, 1, 1, strFmt("@SYS309400", tableAttribute.parmTableName()));
        #            }
        #            break;
        #        case classNum(UpgradeScriptConfigKeyAttribute):
        #            configKeyAttribute = _attribute;
        #            if (!configurationkeyId2Name(configKeyAttribute.parmConfigurationKeyId()))
        #            {
        #                // Configuration Key %1 specified in the UpgradeScriptConfigKeyAttribute is not valid.
        #                sysBPCheck.addError(#BPErrorConfigurationKeyNotFound, 1, 1, strFmt("@SYS309401", configKeyAttribute.parmConfigurationKeyName()));
        #            }
        #            break;
        #        case classNum(UpgradeDependsOnModuleAttribute):
        #            moduleAttribute = _attribute;
        #            sysDictClass = new SysDictClass(className2Id(moduleAttribute.parmClassName()));
        #            if (sysDictClass)
        #            {
        #                if (!sysDictClass.hasObjectMethod(moduleAttribute.parmMethodName()))
        #                {
        #                    // Method %1 in class %2 specified in the UpgradeDependsOnModuleAttribute is not valid.
        #                    sysBPCheck.addError(#BPErrorMethodNameNotFound, 1, 1, strFmt("@SYS309403", moduleAttribute.parmMethodName(), moduleAttribute.parmClassName()));
        #                }
        #            }
        #            else
        #            {
        #                // Class %1 specified in the UpgradeDependsOnModuleAttribute is not valid.
        #                sysBPCheck.addError(#BPErrorClassNameNotFound, 1, 1, strFmt("@SYS309404", moduleAttribute.parmClassName()));
        #            }
        #            break;
        #        case classNum(UpgradeDependsOnTaskAttribute):
        #            taskAttribute = _attribute;
        #            sysDictClass = new SysDictClass(currentClass.id());
        #            if (!sysDictClass.hasObjectMethod(taskAttribute.parmMethodName()))
        #            {
        #                // Method %1 in the current module specified in the UpgradeDependsOnTaskAttribute is not valid.
        #                sysBPCheck.addError(#BPErrorMethodNameNotFound, 1, 1, strFmt("@SYS309405", taskAttribute.parmMethodName()));
        #            }
        #            break;
        #        case classNum(UpgradeDependsOnVersionAttribute):
        #            versionAttribute = _attribute;
        #            sysDictClass = new SysDictClass(className2Id(versionAttribute.parmClassName()));
        #            if (sysDictClass)
        #            {
        #                if (!sysDictClass.hasObjectMethod(versionAttribute.parmMethodName()))
        #                {
        #                    // Method %1 in class %2 specified in the UpgradeDependsOnVersionAttribute is not valid.
        #                    sysBPCheck.addError(#BPErrorMethodNameNotFound, 1, 1, strFmt("@SYS309406", versionAttribute.parmMethodName(), versionAttribute.parmClassName()));
        #                }
        #            }
        #            else
        #            {
        #                // Class %1 specified in the UpgradeDependsOnVersionAttribute is not valid.
        #                sysBPCheck.addError(#BPErrorClassNameNotFound, 1, 1, strFmt("@SYS309407", versionAttribute.parmClassName()));
        #            }
        #            break;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #findLayerFromPaths
        #private static server container findLayerFromPaths(container _pathSet)
        #{
        #    UtilElements    utilElements;
        #    Map             returnMap   = new Map(Types::String, Types::Enum);
        #    Set             paths       = Set::create(_pathSet);
        #    SetEnumerator   enum        = paths.getEnumerator();
        #    TreeNodePath    path;
        #
        #    while (enum.moveNext())
        #    {
        #        path = enum.current();
        #
        #        select firstonly RecId, UtilLevel from utilElements
        #            order by UtilLevel desc
        #            where utilElements.ParentId   == 0
        #               && utilElements.RecordType == SysTreeNode::path2ApplObjectType(path)
        #               && utilElements.Name       == SysTreeNode::applObjectName(path);
        #
        #        //
        #        // Make sure the object is a real AOT object, and exclude system objects
        #        //
        #        if (utilElements)
        #        {
        #            returnMap.insert(path, utilElements.UtilLevel);
        #        }
        #    }
        #    return returnMap.pack();
        #}
        #
      ENDSOURCE
      SOURCE #pseuduUtilElements
        #private static client server UtilElements pseuduUtilElements(SysDictMethod _sysDictMethod)
        #{
        #    UtilElements utilElementsBuffer;
        #
        #    utilElementsBuffer.RecordType = _sysDictMethod.utilElementType();
        #    utilElementsBuffer.Name       = _sysDictMethod.name();
        #    utilElementsBuffer.ParentId   = _sysDictMethod.parentId();
        #
        #    return utilElementsBuffer;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysContextMenu unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysContextMenu
    PROPERTIES
      Name                #SysContextMenu
      RunOn               #Client
      Origin              #{2D0E03C8-0000-1000-FB09-5DBF82A26477}
      LegacyId            #968
    ENDPROPERTIES
    
    METHODS
      SOURCE #buildMenu
        #/// <summary>
        #///    Builds a pop-up menu for the specified windows handle.
        #/// </summary>
        #/// <param name="windowHdl">
        #///    The windows handle that should contain the context menu.
        #/// </param>
        #/// <param name="_parent">
        #///    The parent pop-up menu, which should contain the menu; optional.
        #/// </param>
        #/// <param name="_itemsPerColumn">
        #///    An integer value that specifies how many items per column; optional.
        #/// </param>
        #/// <param name="_maxColumns">
        #///    An integer value that specifies maximum columns; optional.
        #/// </param>
        #/// <returns>
        #///    A new instance of the <c>PopupMenu</c> class.
        #/// </returns>
        #public PopupMenu buildMenu(int windowHdl, PopupMenu _parent = null, int _itemsPerColumn = maxInt(), int _maxColumns = #defaultMaxCoulmns)
        #{
        #    TreeNode  treeNode;
        #    PopupMenu parent, submenu;
        #    ;
        #
        #    treeNode = TreeNode::findNode(#MenusPath+'\\'+menuStr(sysContextMenu));
        #
        #    if (_parent)
        #    {
        #        parent = _parent;
        #        submenu = new PopupMenu(windowHdl, parent);
        #    }
        #    else
        #    {
        #        parent = new PopupMenu(windowHdl);
        #        submenu = parent;
        #    }
        #    return this.buildSubMenu(treeNode, windowHdl, parent, submenu, _itemsPerColumn, _maxColumns);
        #}
      ENDSOURCE
      SOURCE #buildSubMenu
        #/// <summary>
        #///    Builds a pop-up menu for the specified tree node and windows handle.
        #/// </summary>
        #/// <param name="_treeNode">
        #///    The specified tree node which the pop-up menu is build from.
        #/// </param>
        #/// <param name="windowHdl">
        #///    The specified windows handle.
        #/// </param>
        #/// <param name="parent">
        #///    The parent pop-up menu, which should contain the menu.
        #/// </param>
        #/// <param name="popupMenu">
        #///    The specified popup menu which should contain the sub menu.
        #/// </param>
        #/// <param name="_itemsPerColumn">
        #///    An integer value that specifies how many items per column; optional.
        #/// </param>
        #/// <param name="_maxColumns">
        #///    An integer value that specifies maximum columns; optional.
        #/// </param>
        #/// <returns>
        #///    A new instance of <c>PopupMenu</c> class.
        #/// </returns>
        #public PopupMenu buildSubMenu(TreeNode  _treeNode,
        #                              int       windowHdl,
        #                              PopupMenu parent,
        #                              PopupMenu popupMenu,
        #                              int       _itemsPerColumn = maxInt(),
        #                              int       _maxColumns = #defaultMaxCoulmns)
        #{
        #    #AOT
        #    #define.menuBreakLength     (3)
        #
        #    TreeNode        treeNode = _treeNode.AOTfirstChild();
        #    MenuItem        menuItem;
        #    MenuReference   menuReference;
        #    PopupMenu       subPopupMenu;
        #    TreeNodePath    path;
        #    int             menuCounter;
        #    ;
        #
        #    if (!popupMenu)
        #        popupMenu = new PopupMenu(windowHdl, parent, _itemsPerColumn, _maxColumns );
        #
        #    if (this.selectionCount())
        #    {
        #        while (treeNode)
        #        {
        #            if (subStr(treeNode.treeNodeName(), 1, #menuBreakLength) == '---')
        #                popupMenu.insertBreak();
        #            else
        #            {
        #                switch (treeNode.handle())
        #                {
        #                    case classNum(Menu):
        #                        subPopupMenu = this.buildSubMenu(treeNode, windowHdl, parent, null, _itemsPerColumn, _maxColumns);
        #                        if (subPopupMenu.hits())
        #                            popupMenu.insertPopupMenu(treeNode.treeNodeName(), subPopupMenu);
        #                        break;
        #                    case classNum(MenuReference):
        #                        menuReference = treeNode;
        #                        subPopupMenu = this.buildSubMenu(TreeNode::findNode(#MenusPath).AOTfindChild(menuReference.menuName()),
        #                                                         windowHdl, parent, null, _itemsPerColumn, _maxColumns);
        #                        if (subPopupMenu.hits())
        #                            popupMenu.insertPopupMenu(treeNode.treeNodeName(), subPopupMenu);
        #                        break;
        #                    default :
        #                        menuItem = treeNode;
        #                        infolog.mayReloadMenu(false);
        #                        if (this.verifyItem(menuItem.menuItemName(), menuItem.menuItemType()) == 1)
        #                        {
        #                            menuCounter = popupMenu.insertItem(treeNode.treeNodeName());
        #                            path = treeNode.treeNodePath();
        #                            menuPaths[menuCounter] = path;
        #                        }
        #                        infolog.mayReloadMenu(true);
        #                }
        #            }
        #            treeNode = treeNode.AOTnextSibling();
        #        }
        #    }
        #    return popupMenu;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysContextMenu</c> class provides an interface to the context menu.
        #/// </summary>
        #/// <remarks>
        #///    This class is abstract.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #abstract public class SysContextMenu
        #{
        #    #AOT
        #    #TreeNodeSysNodeType
        #
        #    #define.defaultMaxCoulmns   (3)
        #    #define.elementTypeSelected (256)
        #
        #    TreeNodePath    menuPaths[];
        #    UtilElementType _firstType;
        #    boolean         aUtilElementTypeSeleced[#elementTypeSelected];
        #    boolean         anyUtilElementTypeSeleced;
        #    TreeNode        firstApplObjectNode;
        #    TreeNode        firstUtilNode;
        #    TreeNode        firstNode;
        #    int             oldMask;
        #
        #    boolean         xRefNamesExistTreeNodeTested;
        #    boolean         xRefNamesExistTreeNode;
        #    boolean         allowEdit;
        #}
      ENDSOURCE
      SOURCE #first
        #/// <summary>
        #///    Retrieves the first tree node object.
        #/// </summary>
        #/// <returns>
        #///    The first tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract TreeNode first()
        #{
        #}
      ENDSOURCE
      SOURCE #getFirstNode
        #/// <summary>
        #///    Retrieves the first tree node, but does not affect the current position.
        #/// </summary>
        #/// <returns>
        #///    The first tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method always returns the first tree node object. But this method does not affect the current
        #///    position. Therefore the fetching action of the <c>next</c> method is not disturbed. This method
        #///    offers better performance than a call to the <c>first</c> method followed by repositioning.
        #/// </remarks>
        #public TreeNode getFirstNode()
        #{
        #    return firstNode;
        #}
        #
        #
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    TreeNode utilNode;
        #    TreeNode treeNode;
        #    TreeNode applObjectNode;
        #
        #    treeNode = this.first();
        #
        #    if (treeNode && treeNode.treeNodeType().isUtilElement())
        #    {
        #        this.setFirstType(treeNode.utilElement().RecordType);
        #    }
        #
        #    while (treeNode)
        #    {
        #        if (!anyUtilElementTypeSeleced) // check if at least one appl object type has been selected, somewhere down the tree
        #        {
        #            applObjectNode = treeNode;
        #            while (applObjectNode.AOTparent()  &&
        #                   !applObjectNode.treeNodeType().isUtilElement())
        #            {
        #                applObjectNode = applObjectNode.AOTparent();
        #            }
        #
        #            if (applObjectNode.treeNodeType().isUtilElement() &&
        #                applObjectNode.utilElement().RecordType != UtilElementType::SharedProject &&
        #                applObjectNode.utilElement().RecordType != UtilElementType::PrivateProject)
        #            {
        #                utilNode = applObjectNode;
        #                applObjectNode = SysTreeNode::getRootElement(applObjectNode);
        #
        #                if (applObjectNode &&
        #                    applObjectNode.treeNodeType().isUtilElement() &&
        #                    applObjectNode.utilElement().RecordType != UtilElementType::SharedProject &&
        #                    applObjectNode.utilElement().RecordType != UtilElementType::PrivateProject)
        #                {
        #                    anyUtilElementTypeSeleced = true;
        #                }
        #            }
        #        }
        #
        #        if (!firstNode && treeNode)
        #        {
        #            firstNode = treeNode;
        #            firstUtilNode = utilNode;
        #            firstApplObjectNode = applObjectNode;
        #            if (firstNode.treeNodeType().isLayerAware())
        #            {
        #                oldMask = firstNode.applObjectOldLayerMask();
        #            }
        #        }
        #
        #        allowEdit = versioncontrol.allowEdit(firstApplObjectNode);
        #
        #        if (treeNode.treeNodeType().id() == #NT_DBTABLE) // condition could be extended to other types that should be look'ed for
        #        {
        #            aUtilElementTypeSeleced[treeNode.utilElement().RecordType + 1] = true;
        #            break;
        #        }
        #        treeNode = this.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #next
        #/// <summary>
        #///    Retrieves the next tree node object.
        #/// </summary>
        #/// <returns>
        #///    The next tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract TreeNode next()
        #{
        #}
      ENDSOURCE
      SOURCE #runMenu
        #/// <summary>
        #///    Runs the specified context menu.
        #/// </summary>
        #/// <param name="popupMenuChoice">
        #///    The item to select in the context menu.
        #/// </param>
        #/// <param name="_sysContextMenu">
        #///    The context menu to run.
        #/// </param>
        #/// <param name="_caller">
        #///    An object that is used to set the caller of the command; optional.
        #/// </param>
        #/// <param name="_record">
        #///    A buffer to a record; optional.
        #/// </param>
        #/// <returns>
        #///    true, if the menu function is run; otherwise false.
        #/// </returns>
        #/// <remarks>
        #///    false is returned if the specified <paramref name="popupMenuChoice" /> is less than one, or it is
        #///    not in the menu.
        #/// </remarks>
        #public boolean runMenu(int popupMenuChoice, SysContextMenu _sysContextMenu, Object _caller = this, Common _record = null)
        #{
        #    MenuItem     menuItem;
        #    MenuFunction menuFunction;
        #    Args         args = new Args();
        #
        #    if (popupMenuChoice < 1 || !menuPaths[popupMenuChoice])
        #        return false;
        #
        #    menuItem = TreeNode::findNode(menuPaths[popupMenuChoice]);
        #    menuFunction = new MenuFunction(menuItem.menuItemName(), menuItem.menuItemType());
        #
        #    args.parmObject(_sysContextMenu);
        #    args.caller(_caller);
        #    args.record(_record);
        #
        #    menuFunction.run(args);
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #selectionCount
        #/// <summary>
        #///    Retrieves the number of items selected in the context menu.
        #/// </summary>
        #/// <returns>
        #///    The count of selected items in the context menu.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract int selectionCount()
        #{
        #}
      ENDSOURCE
      SOURCE #setFirstType
        #/// <summary>
        #///    Sets the first <c>UtilElementType</c> value in the context menu.
        #/// </summary>
        #/// <param name="t">
        #///    The <c>UtilElementType</c> value to set as first.
        #/// </param>
        #public void setFirstType(UtilElementType t)
        #{
        #;
        #    _firstType = t;
        #}
      ENDSOURCE
      SOURCE #verifyDatasource
        #/// <summary>
        #///    Verifies that the first node in the context menu is among the set of the valid types.
        #/// </summary>
        #/// <returns>
        #///    1 if the first node is among the valid node types; otherwise 0.
        #/// </returns>
        #/// <remarks>
        #///    This method verifies that the first node in the context menu is one of the following types:
        #///    <list type="bullet">
        #///       <item>
        #///          <description>Form data source</description>
        #///       </item>
        #///       <item>
        #///          <description>Query data source</description>
        #///       </item>
        #///       <item>
        #///          <description>System table</description>
        #///       </item>
        #///       <item>
        #///          <description>Table collection</description>
        #///       </item>
        #///    </list>
        #/// </remarks>
        #protected int verifyDatasource()
        #{
        #    #TreeNodeSysNodeType
        #
        #    if ( firstNode.treeNodeType().id() == #SysNodeTypeFormDatasource ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeQueryDatasource ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeSystemTable ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeTableCollection)
        #    {
        #        return 1;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #verifyItem
        #/// <summary>
        #///    Verifies that the command can be displayed in the context menu.
        #/// </summary>
        #/// <param name="menuItemName">
        #///    The name of the command.
        #/// </param>
        #/// <param name="menuItemType">
        #///    The type of the command.
        #/// </param>
        #/// <returns>
        #///    1 if the command can be displayed; otherwise 0.
        #/// </returns>
        #public int verifyItem(identifierName menuItemName, MenuItemType menuItemType)
        #{
        #    #resAppl
        #    #define.pathProjects('<\\\\Projects\\\\')
        #    #define.pathMethods('\\\\Methods>')
        #
        #    boolean         docNode;
        #    UtilEntryLevel  utilEntryLevel;
        #    ClassNode       classNode;
        #    TreeNode        parentNode;
        #    SysTestable     testable;
        #    ListEnumerator  listEnumerator;
        #    int firstNodeTypeId;
        #
        #    if (!firstNode ||
        #        !this.selectionCount())
        #    {
        #        return 0;
        #    }
        #
        #    if (strStartsWith(firstNode.treeNodePath(), #SystemDocPath))
        #    {
        #        docNode = true;
        #    }
        #
        #    firstNodeTypeId = firstNode.treeNodeType().id();
        #
        #    switch (menuItemType)
        #    {
        #
        #        case MenuItemType::Display:
        #            switch (menuItemName)
        #            {
        #                                 // Security Debug Tool:
        #                // Only show SecObjectsInRole on role nodes under /security/roles
        #                //
        #                case menuitemDisplayStr(SysSecObjectsInRole):
        #                    if ( this.selectionCount() == 1 )
        #                    {
        #                        if (
        #                         _firstType == UtilElementType::SecRole
        #                         ||
        #                         _firstType == UtilElementType::SecDuty
        #                         ||
        #                         _firstType == UtilElementType::SecPrivilege
        #                         ||
        #                         _firstType == UtilElementType::ActionTool
        #                         ||
        #                         _firstType == UtilElementType::DisplayTool
        #                         ||
        #                         _firstType == UtilElementType::OutputTool
        #                         ||
        #                         _firstType == UtilElementType::WebUrlItem
        #                         ||
        #                         _firstType == UtilElementType::WebActionItem
        #                         ||
        #                         _firstType == UtilElementType::WebManagedContentItem
        #                         ||
        #                         firstNodeTypeId == #NT_OPERATION
        #                         )
        #                        {
        #                            return 1;
        #                        }
        #                    }
        #                    return 0;
        #                //
        #                // Security Debug Tool:
        #                // Only show SecObjectsAnalyze on role nodes under
        #                //
        #                case menuitemDisplayStr(SysSecObjectsAnalyze):
        #                    if ( this.selectionCount() == 1 )
        #                    {
        #                        if (
        #                         _firstType == UtilElementType::ActionTool
        #                         ||
        #                         _firstType == UtilElementType::DisplayTool
        #                         ||
        #                         _firstType == UtilElementType::OutputTool
        #                         ||
        #                         _firstType == UtilElementType::Form
        #                         ||
        #                         _firstType == UtilElementType::WebUrlItem
        #                         ||
        #                         _firstType == UtilElementType::WebActionItem
        #                         ||
        #                         _firstType == UtilElementType::WebManagedContentItem
        #                         ||
        #                         _firstType == UtilElementType::SecDuty
        #                         ||
        #                         _firstType == UtilElementType::SecPrivilege
        #                         ||
        #                         _firstType == UtilElementType::Table
        #                         ||
        #                         _firstType == UtilElementType::InfoPart
        #                         ||
        #                         _firstType == UtilElementType::Report
        #                         ||
        #                         _firstType == UtilElementType::WebControl
        #                         ||
        #                         _firstType == UtilElementType::SecCodePermission
        #                         ||
        #                         firstNodeTypeId == #NT_DBVIEW
        #                         ||
        #                         firstNodeTypeId == #NT_OPERATION
        #                         ||
        #                         firstNodeTypeId == #NT_SSRSREPORTDESIGN
        #                        )
        #                        {
        #                            return 1;
        #                        }
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Xref Analyzer' menu item when the Analyzer form is present
        #                //
        #
        #                case menuitemDisplayStr(SysSecAnalysisAddIn):
        #                    if (this.selectionCount() == 1 &&
        #                        TreeNode::findNode(@'\Forms\SysSecAnalysis') != null)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Metadata Analyzer' menu item when the Analyzer form is present
        #                //
        #                case menuitemDisplayStr(SysSecAnalysisAddInMetadataAnalyzer):
        #                    if (this.selectionCount() == 1                          &&
        #                        (_firstType==UtilElementType::Form                  ||
        #                         _firstType==UtilElementType::DisplayTool           ||
        #                         _firstType==UtilElementType::OutputTool            ||
        #                         _firstType==UtilElementType::ActionTool            ||
        #                         _firstType==UtilElementType::WebActionItem         ||
        #                         _firstType==UtilElementType::WebUrlItem            ||
        #                         _firstType==UtilElementType::WebDisplayContentItem ||
        #                         _firstType==UtilElementType::WebManagedContentItem ||
        #                         _firstType==UtilElementType::WebOutputContentItem) &&
        #                        TreeNode::findNode(@'\Forms\SysSecAnalysisMetadataAnalyzer') != null)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Reverse Engineer'menu item
        #                // on projects and perspective as we only want to reverse
        #                // engineer project elements
        #                //
        #                case menuitemDisplayStr( SysVisioAddIn ):
        #                    if ( firstNode.handle() == classNum(ProjectNode) &&     // launch from project node
        #                         match(#pathProjects,firstNode.treeNodePath()))
        #                    {
        #                        return 1;
        #                    }
        #
        #                    if (firstNode.treeNodeType().id() == #NT_PERSPECTIVE)    // launch from perspective node
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefReferencesUsedBy):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefNames::existTreeNodeAnyLayer(this.first()))
        #                        // xRefNames::existTreeNode(this.first(),true))     //only show Used By, if there are anything to show
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefReferencesUsing):
        #                    if (this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefPaths::find(SysTreeNode::getPath(this.first())))       // only show Using, if anything are used
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefNames):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefNames::existTreeNode(this.first(),false))       // only show Names, if there are anything to show
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysTypeHierarchyBrowser):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                                //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (SysTypeHierarchy::treenode2Type(firstNode, firstApplObjectNode))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysTableBrowser):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                               //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (!docNode &&
        #                        _firstType==UtilElementType::Table)
        #                    {
        #                        return 1;
        #                    }
        #                    return this.verifyDatasource();
        #
        #                case menuitemDisplayStr(SysTableForm):
        #                    if (aUtilElementTypeSeleced[UtilElementType::Table + 1] &&
        #                        !firstNode.AOTIsOld()                               //Does not work for old nodes
        #                        )
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysDictIndexShowDuplicates):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                               //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (_firstType==UtilElementType::TableIndex)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(AxdWizard):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Query)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardApproval):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowApprovalTasksPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardTask):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowTasksPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardType):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowTypesPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #                case menuitemDisplayStr(SysBPStyleCheckAnalysis):
        #                    if ((this.selectionCount() == 1) && (_firstType == UtilElementType::Form))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #                case menuitemDisplayStr(SysLcsIssueSearchAotItem):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodeType().isRootElement()))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #            }
        #            break;
        #
        #        case MenuItemType::Output:
        #            switch (menuItemName)
        #            {
        #                case menuitemOutputStr( SysXmlDocumentationCreateFile ):
        #                    if ( firstNode.handle() == classNum(ProjectNode) &&     // Only launch from project node
        #                         match(#pathProjects,firstNode.treeNodePath()))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #            }
        #            break;
        #
        #        case MenuItemType::Action:
        #            switch (menuItemName)
        #            {
        #                case menuitemActionStr(SysUpgradeProjectMarkAsResolved):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Resolved);
        #                case menuitemActionStr(SysUpgradeProjectMarkAsUnresolved):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Unresolved);
        #
        #                case menuitemActionStr(SysUpgradeProjectMarkAsResolvedRecursive):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Resolved);
        #                case menuitemActionStr(SysUpgradeProjectMarkAsUnresolvedRecursi):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Unresolved);
        #
        #                case menuitemActionStr(SysUpgradeDetectConflictsRerun):
        #                    return SysUpgradeDetectConflicts::canDetectConflictsRerun(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleAutoResolve):
        #                    return SysUpgradeConflictCodeRuleAutoResolve::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleRevertResolve):
        #                    return SysUpgradeConflictCodeRuleRevertResolve::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleCompareUpgrade):
        #                    return SysUpgradeConflictCodeRuleCompareUpgrade::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleCompareOrigina):
        #                    return SysUpgradeConflictCodeRuleCompareOrigina::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(xRefUpdate):
        #                    if (!firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysVersionControlCheckOut):
        #                    if (versioncontrol &&
        #                        versioncontrol.parmSysVersionControlSystem() &&
        #                        this.selectionCount() == 1 && firstApplObjectNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        !allowEdit)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysVersionControlUndoCheckOut):
        #                    if (versioncontrol &&
        #                        versioncontrol.parmSysVersionControlSystem() &&
        #                        this.selectionCount() == 1 && firstApplObjectNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        allowEdit)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(xRefUpdateTmpReferences):
        #                    if (!docNode &&
        #                        //this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld())                            //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysSourceReplaceSyntax):
        #                    if (!docNode &&
        #                        firstUtilNode &&
        #                        allowEdit &&
        #                        !firstNode.AOTIsOld())                             //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysImpactAnalysis):
        #                    if (!docNode &&
        #                        firstNode.treeNodeType().isRootElement() &&
        #                        !firstNode.AOTIsOld())                               //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysSourceNameWash):
        #                    if (!docNode &&
        #                        firstUtilNode &&
        #                        allowEdit &&
        #                        !firstNode.AOTIsOld() &&
        #                        (_firstType &&
        #                          (_firstType == UtilElementType::Table                 ||
        #                           _firstType == UtilElementType::TableInstanceMethod   ||
        #                           _firstType == UtilElementType::TableStaticMethod     ||
        #                           _firstType == UtilElementType::Macro                 ||
        #                           _firstType == UtilElementType::Class                 ||
        #                           _firstType == UtilElementType::ClassInstanceMethod   ||
        #                           _firstType == UtilElementType::ClassStaticMethod     ||
        #                           _firstType == UtilElementType::Form                  ||
        #                           _firstType == UtilElementType::Report                ||
        #                           _firstType == UtilElementType::ReportTemplate        ||
        #                           _firstType == UtilElementType::ReportSectionTemplate ||
        #                           _firstType == UtilElementType::Query                 ||
        #                           _firstType == UtilElementType::Job                   ||
        #                           _firstType == UtilElementType::WebForm)))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysBPCheck):
        #                    if  (_firstType &&_firstType == UtilElementType::Job)
        #                    {
        #                        return 0;
        #                    }
        #                    if (firstNode.AOTIsOld())
        #                    {
        #                        return 0;
        #                    }
        #                    if (docNode)
        #                    {
        #                        return 0;
        #                    }
        #                    return 1;
        #
        #                case menuitemActionStr(SysSourceReplaceText):
        #                    if (!docNode &&
        #                        allowEdit &&
        #                        this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld())                            //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysCompare):
        #                    if (_firstType == UtilElementType::PrivateProject       ||
        #                        _firstType == UtilElementType::SharedProject)
        #                    {
        #                        return 0;
        #                    }
        #                    if (this.selectionCount() == 2)
        #                    {
        #                        return 1;
        #                    }
        #                    if (this.selectionCount() == 1)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysCompileForward):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld()      &&                         //Does not work for old nodes
        #                        _firstType==UtilElementType::Class)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysTreenodeCopyToCurrentLayer):
        #                    if (firstNode && firstNode.AOTIsOld() && firstNode.treeNodeType().isRootElement())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysTreeNodeApplObjectOpenNewWindow):
        #                    if (!docNode &&
        #                        anyUtilElementTypeSeleced &&
        #                        !firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysTreeNodeOpenNewWindow),
        #                     menuitemActionStr(SysTreeNodeShowProperties):
        #
        #                    if (docNode ||
        #                        firstNode.treeNodeType().id() == 27 ||    //Project nodes
        #                        firstNode.treeNodeType().id() == 29 ||
        #                        firstNode.treeNodeType().id() == 30 ||
        #                        firstNode.treeNodeType().id() == 31 )
        #                    {
        #                        return 0;
        #                    }
        #                    return 1;                                              //also for old
        #
        #                case menuitemActionStr(SysTreeNodeParentOpenNewWindow):
        #                    if (docNode ||
        #                        firstNode.treeNodeType().id() == 27 ||    //Project nodes
        #                        firstNode.treeNodeType().id() == 29 ||
        #                        firstNode.treeNodeType().id() == 30 ||
        #                        firstNode.treeNodeType().id() == 31 )
        #                    {
        #                        return 0;
        #                    }
        #                    if (!firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                // Open using in window
        #                case menuitemActionStr(SysOpenNewWindowTable):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowTable::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowExtendedType):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowExtendedType::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowEnum):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowEnum::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowSecurityKey):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowSecurityKey::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowConfigurationKey):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowConfigurationKey::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowClass):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowClass::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowForm):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowForm::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowReport):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowReport::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowMenuItem):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowMenuItem::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowFieldGroup):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowFieldGroup::verifyItem(this);
        #
        #                // old layer
        #                case menuitemActionStr(sysOpenOldSys):
        #                case menuitemActionStr(sysOpenOldSyp):
        #                case menuitemActionStr(sysOpenOldGls):
        #                case menuitemActionStr(sysOpenOldGlp):
        #                case menuitemActionStr(sysOpenOldFpk):
        #                case menuitemActionStr(sysOpenOldFpp):
        #                case menuitemActionStr(sysOpenOldSln):
        #                case menuitemActionStr(sysOpenOldSlp):
        #                case menuitemActionStr(sysOpenOldIsv):
        #                case menuitemActionStr(sysOpenOldIsp):
        #                case menuitemActionStr(sysOpenOldVar):
        #                case menuitemActionStr(sysOpenOldVap):
        #                case menuitemActionStr(sysOpenOldCus):
        #                case menuitemActionStr(sysOpenOldCup):
        #                case menuitemActionStr(sysOpenOldUsr):
        #                case menuitemActionStr(sysOpenOldUsp):
        #                    utilEntryLevel = str2enum(utilEntryLevel, subStr(menuItemName, strLen(menuItemName)-2, 3));
        #                    if (this.selectionCount() == 1 &&
        #                        oldMask & (1 << utilEntryLevel))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                // Test jobs
        #                case menuitemActionStr(SysTestToolbarOpen):
        #                    if (this.selectionCount() == 1)
        #                    {
        #                        switch (firstNode.handle())
        #                        {
        #                            case classNum(ProjectNode):
        #                            case classNum(ProjectGroupNode):
        #                                return 1;
        #
        #                            case classNum(ClassNode):
        #                                classNode = firstNode;
        #                                if (classNode &&
        #                                    (SysTestProject::implementsSysTestable(classNode.iD()) ||
        #                                     SysDictClass::isSuperclass(classNode.iD(), classNum(SysTestSuite))))
        #
        #                                {
        #                                    return 1;
        #                                }
        #                                return 0;
        #
        #                            case classNum(MemberFunction):
        #                                parentNode = firstNode.AOTparent();
        #                                if (parentNode &&
        #                                    (parentNode.handle() == classNum(ClassNode) || parentNode is ClassNode) &&
        #                                    SysTestProject::implementsSysTestable(parentNode.applObjectId()))
        #                                {
        #                                    testable = classfactory.createClass(parentNode.applObjectId(), false) as SysTestable;
        #                                    if (testable)
        #                                    {
        #                                        listEnumerator = testable.testMethods().getEnumerator();
        #                                        while (listEnumerator.moveNext())
        #                                        {
        #                                            if (listEnumerator.current() == firstNode.treeNodeName())
        #                                                return 1;
        #                                        }
        #                                    }
        #                                }
        #                                return 0;
        #                        }
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(AxdGenerateAxdQuery):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Form     ||
        #                       _firstType == UtilElementType::Report   ||
        #                       _firstType == UtilElementType::WebForm )
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(AifRegisterService):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Service)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysXppILIncrementalBuild):
        #                case menuitemActionStr(SysXppILFullBuild):
        #                    // enable for AOT root node only
        #                    return firstNode.treeNodeType().id() == 1;
        #                case menuitemActionStr(SysSecSecurityApply):
        #                    return SysSecHelper::showApplyChangesContextMenu(firstNode);
        #            }
        #    }
        #//    infolog.mayReloadMenu(true);
        #
        #    if (firstNode.AOTIsOld())
        #        return 0;
        #    return 1;
        #}
        #
      ENDSOURCE
      SOURCE #startedFrom
        #/// <summary>
        #///    Appends a <c>SysContextMenu</c> object to the input <paramref name="_menuFunctionArgs" />
        #///    parameter, unless one is already present.
        #/// </summary>
        #/// <param name="_menuFunctionArgs">
        #///    An instance of the <c>Args</c> class.
        #/// </param>
        #/// <returns>
        #///    true, if the context menu is started from a <c>SysContextMenu</c> (or a descendant class);
        #///    otherwise false.
        #/// </returns>
        #/// <remarks>
        #///    This method inquires whether the input _<paramref name="menuFunctionArgs" /> has an argument named
        #///    <c>parmObject</c>.
        #///    If it does have a <c>parmObject</c>, true is returned if the object referenced
        #///    by <c>parmObject</c> is of type <c>SysContextMenu</c> (or a descendant class).
        #///    If it does not have
        #///    a <c>parmObject</c>, this method appends <c>parmObject</c> with a <c>SysContextMenu</c> object, and
        #///    true is returned.
        #/// </remarks>
        #public static boolean startedFrom(Args _menuFunctionArgs)
        #{
        #    SysContextMenu sysContextMenu;
        #    classId cid1, cid2;
        #
        #    if (!_menuFunctionArgs)
        #        return false;
        #
        #    if (_menuFunctionArgs.parmObject())
        #    {
        #        cid1 = classIdGet(_menuFunctionArgs.parmObject());
        #        cid2 = classIdGet(sysContextMenu);
        #
        #        if (SysDictClass::isEqualOrSuperclass(cid1,cid2))
        #            return true;
        #    }
        #
        #    if (match('sysContextMenu>',_menuFunctionArgs.parm()))
        #    {
        #        sysContextMenu = new SysContextMenuAOT();
        #        _menuFunctionArgs.parmObject(sysContextMenu);
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysLabelEdit unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysLabelEdit
    PROPERTIES
      Name                #SysLabelEdit
      RunOn               #Server
      Origin              #{2D0C12BA-0000-1000-9A8F-D7A12974656C}
      LegacyId            #4794
    ENDPROPERTIES
    
    METHODS
      SOURCE #allLabelObjects
        #private void allLabelObjects()
        #{
        #    LanguageTable   languageTable;
        #
        #    labelMap = new Map(Types::String, Types::Class);
        #
        #    while select LanguageId from languageTable
        #        index Key
        #        where languageTable.LabelFile == true
        #    {
        #        labelMap.insert(languageTable.LanguageId, new SysLabel(languageTable.LanguageId));
        #    }
        #
        #    labelIterator = new MapIterator(labelMap);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysLabelEdit
        #{
        #    TmpSysLabel tmpSysLabel;
        #    SysLabel    sysLabel;
        #    Map         propertyModuleMap;
        #    Map         propertyModuleIdMap;
        #    Map         labelMap;
        #    MapIterator labelIterator;
        #    SetIterator languageSetIterator;
        #    int         hits;
        #    LabelType   likeLabel;
        #
        #    #define.version(1)
        #
        #    // Comment structure: -Property:[Value]-PropertyN:[ValueN]#[Comment]
        #    // Symbol '#' is used to end the property section.
        #
        #    #define.patternPropertyValue('\\-\\%1\\:\\%2')
        #
        #    #define.propertyPattern('\-\%1\:\%2')
        #    #define.propertyModule('Module')
        #
        #    #define.propertyEndKey('\#')
        #    #define.propertyStartKey('\-')
        #    #define.propertyValueKey('\:')
        #
        #
        #
        #}
      ENDSOURCE
      SOURCE #commentPropAdd
        #protected LabelDescription commentPropAdd(LabelDescription  _comment,
        #                                          SysPropertyName   _sysPropertyName,
        #                                          str               _propertyValue,
        #                                          str               _defaultPropertyValue)
        #{
        #    str                 oldPropertyValue;
        #    LabelDescription    ret;
        #    ;
        #    ret                 = _comment;
        #    oldPropertyValue    = this.commentPropFind(ret, _sysPropertyName);
        #
        #    if (oldPropertyValue != _propertyValue)
        #    {
        #        if (oldPropertyValue)
        #        {
        #            ret = this.commentPropRemove(ret, _sysPropertyName);
        #        }
        #
        #        if (_propertyValue && _propertyValue != _defaultPropertyValue)
        #        {
        #            if (this.commentPropExists(ret))
        #            {
        #                ret = strfmt(#propertyPattern, _sysPropertyName, any2str(_propertyValue)) + ret;
        #            }
        #            else
        #            {
        #                ret = strfmt(#propertyPattern, _sysPropertyName, any2str(_propertyValue)) + #propertyEndKey + ret;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #commentPropBuild
        #public LabelDescription commentPropBuild(LabelDescription _comment, SysLabelApplModule _sysLabelApplModule)
        #{
        #    LabelDescription ret = _comment;
        #    ;
        #    // Property Module
        #    this.commentPropModuleBuildMaps();
        #    if (propertyModuleIdMap.exists(_sysLabelApplModule))
        #    {
        #        ret = this.commentPropAdd(ret, #propertyModule, propertyModuleIdMap.lookup(_sysLabelApplModule), propertyModuleIdMap.lookup(SysLabelApplModule::None));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #commentPropExists
        #protected boolean commentPropExists(LabelDescription _comment, SysPropertyName _sysPropertyName = '')
        #{
        #    #define.patternPropertyOne( '\\-\%1\\::n*\\#')
        #    #define.patternPropertyMany('\\-\%1\\::n*\\-')
        #    #define.patternPropertyAnyOne( '<\\-:n*\\::n*\\#')
        #    #define.patternPropertyAnyMany('<\\-:n*\\::n*\\-')
        #
        #    boolean ret;
        #
        #    if (_sysPropertyName)
        #    {
        #        if (match(strfmt(#patternPropertyOne,  _sysPropertyName), _comment) ||
        #            match(strfmt(#patternPropertyMany, _sysPropertyName), _comment))
        #        {
        #            ret = true;
        #        }
        #    }
        #    else
        #    {
        #        if (match(#patternPropertyAnyOne, _comment) ||
        #            match(#patternPropertyAnyMany, _comment))
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #commentPropFind
        #protected str commentPropFind(LabelDescription _comment, SysPropertyName _sysPropertyName)
        #{
        #    str                 propertyValue;
        #    int                 startPos;
        #    int                 valuePos;
        #    int                 endPos;
        #    boolean             found;
        #    ;
        #
        #    if (this.commentPropExists(_comment, _sysPropertyName))
        #    {
        #        endPos      = strfind(_comment, #propertyEndKey, startPos, strlen(_comment));
        #        do
        #        {
        #            startPos++;
        #            startPos = strfind(_comment, #propertyStartKey, startPos, endPos);
        #
        #            if (startPos)
        #            {
        #                if (startPos < endPos)
        #                {
        #                    valuePos = strfind(_comment, #propertyValueKey, startPos, endPos);
        #
        #                    if (_sysPropertyName == substr(_comment, startPos+1, valuePos-startPos-1))
        #                    {
        #                        found    = true;
        #                        startPos = valuePos + 1;
        #                        valuePos = strfind(_comment, #propertyStartKey, startPos, endPos);
        #
        #                        if (!valuePos)
        #                        {
        #                            valuePos = endPos + 1;
        #                        }
        #
        #                        propertyValue = substr(_comment, startPos, valuePos-startPos-1);
        #                    }
        #                }
        #                else
        #                {
        #                    found = true;
        #                }
        #            }
        #            else
        #            {
        #                found = true;
        #            }
        #        }
        #        while (!found);
        #    }
        #
        #    return propertyValue;
        #}
        #
      ENDSOURCE
      SOURCE #commentPropModuleBuildMaps
        #protected void commentPropModuleBuildMaps()
        #{
        #    DictEnum            dictEnum;
        #    SysLabelApplModule  id;
        #    str                 name;
        #    int                 i;
        #
        #    if (!propertyModuleMap ||
        #        !propertyModuleIdMap)
        #    {
        #        propertyModuleMap   = new Map(Types::String, Types::Enum);
        #        propertyModuleIdMap = new Map(Types::Enum, Types::String);
        #
        #        dictEnum = new DictEnum(enumnum(SysLabelApplModule));
        #        for (i=dictEnum.values(); i >= 0; i--)
        #        {
        #            name = dictEnum.index2Symbol(i);
        #            id   = dictEnum.index2Value(i);
        #
        #            propertyModuleMap.insert(name, id);
        #            propertyModuleIdMap.insert(id, name);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #commentPropModuleFind
        #protected SysLabelApplModule commentPropModuleFind(LabelDescription _comment)
        #{
        #    SysLabelApplModule  ret;
        #    str                 propertyValue;
        #    ;
        #    propertyValue                   = this.commentPropFind(_comment, #propertyModule);
        #    if (propertyValue)
        #    {
        #        this.commentPropModuleBuildMaps();
        #
        #        if (propertyModuleMap.exists(propertyValue))
        #        {
        #            ret = propertyModuleMap.lookup(propertyValue);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #commentPropRemove
        #protected LabelDescription commentPropRemove(LabelDescription _comment, str _propertyName = '')
        #{
        #    LabelDescription ret;
        #    int              startPos;
        #    int              valuePos;
        #    int              endPos;
        #    int              propertyCnt;
        #    ;
        #    if  (_propertyName)
        #    {
        #        if (this.commentPropExists(_comment, _propertyName))
        #        {
        #            endPos      = strfind(_comment, #propertyEndKey, startPos, strlen(_comment));
        #            do
        #            {
        #                startPos = strfind(_comment, #propertyStartKey, startPos, endPos);
        #                if (startPos)
        #                {
        #                    if (startPos < endPos)
        #                    {
        #                        valuePos = strfind(_comment, #propertyValueKey, startPos, endPos);
        #                        propertyCnt++;
        #
        #                        if (_propertyName == substr(_comment, startPos+1, valuePos-startPos-1))
        #                        {
        #                            valuePos = strfind(_comment, #propertyStartKey, valuePos+1, endPos);
        #
        #                            if (valuePos)
        #                            {
        #                                ret = strdel(_comment, startPos, valuePos-startPos);
        #                            }
        #                            else
        #                            {
        #                                if (propertyCnt == 1)
        #                                {
        #                                    endPos++;
        #                                }
        #
        #                                ret = strdel(_comment, startPos, endPos-startPos);
        #                            }
        #                        }
        #                    }
        #                    else
        #                    {
        #                        ret = _comment;
        #                    }
        #                }
        #                else
        #                {
        #                    startPos = endPos;
        #                    ret      = _comment;
        #                }
        #                startPos++;
        #            }
        #            while (!ret && startPos < endPos);
        #        }
        #        else
        #        {
        #            ret = _comment;
        #        }
        #    }
        #    else
        #    {
        #        if (this.commentPropExists(_comment))
        #        {
        #            endPos      = strfind(_comment, #propertyEndKey, startPos, strlen(_comment));
        #            ret         = strdel(_comment, 1, endPos);
        #        }
        #        else
        #        {
        #            ret = _comment;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #findEqualLabelSet
        #public Set findEqualLabelSet(LanguageId _languageId, LabelType _text, LabelDescription _comment)
        #{
        #    #define.patternObsolete('<OBSOLETE')
        #    Set         labelIdSet = new Set(Types::String);
        #    SysLabel    label;
        #    LabelId     labelId;
        #    ;
        #    if (labelMap.exists(_languageId))
        #    {
        #        if (!match(#patternObsolete, _comment))
        #        {
        #            label   = labelMap.lookup(_languageId);
        #
        #            if (SysLabel::searchStringHasSpecialChars(_text))
        #            {
        #                labelId = label.searchFirst(SysLabel::seachStringBuildExactStr(SysLabel::searchStringBuildSpecialCharString(_text)));
        #                while (labelId)
        #                {
        #                    if (!strcmp(label.extractString(labelId), _text) &&
        #                        ((SysLabel::isLabelId(label.extractComment(labelId)) &&
        #                          _comment == '') ||
        #                         !strcmp(label.extractComment(labelId), _comment)))
        #                    {
        #                        labelIdSet.add(labelId);
        #                    }
        #                    labelId = label.searchNext();
        #                }
        #            }
        #            else
        #            {
        #                labelId = label.searchFirst(SysLabel::seachStringBuildExactStr(_text));
        #                while (labelId)
        #                {
        #                    if (!strcmp(label.extractString(labelId), _text) &&
        #                        ((SysLabel::isLabelId(label.extractComment(labelId)) &&
        #                          _comment == '') ||
        #                         !strcmp(label.extractComment(labelId), _comment)))
        #                    {
        #                        labelIdSet.add(labelId);
        #                    }
        #                    labelId = label.searchNext();
        #                }
        #            }
        #        }
        #    }
        #
        #    return labelIdSet;
        #}
        #
      ENDSOURCE
      SOURCE #findHits
        #public int findHits()
        #{
        #    ;
        #    return hits;
        #}
      ENDSOURCE
      SOURCE #findInsertLabel
        #public void findInsertLabel(LabelId _labelId, LanguageId _originalLanguageId = '')
        #{
        #    SysLabel            label;
        #    LabelDescription    labelDescription;
        #    LabelString         labelString;
        #    ;
        #
        #    if (_labelId &&
        #        (!likeLabel || match(likeLabel, _labelId)))
        #    {
        #        hits++;
        #
        #        if (!languageSetIterator)
        #        {
        #            languageSetIterator = new SetIterator(labelMap.keySet());
        #        }
        #
        #        languageSetIterator.begin();
        #        while (languageSetIterator.more())
        #        {
        #            if (_originalLanguageId != languageSetIterator.value())
        #            {
        #                label = labelMap.lookup(languageSetIterator.value());
        #
        #                tmpSysLabel.clear();
        #                tmpSysLabel.LabelId         = _labelId;
        #                tmpSysLabel.Language        = label.languageId();
        #
        #                if (label.exists(_labelId))
        #                {
        #                    labelString = label.extractString(_labelId);
        #
        #                    if (!SysLabel::isLabelId(labelString))
        #                    {
        #                        tmpSysLabel.Label               = labelString;
        #                        labelDescription                = label.extractComment(_labelId);
        #
        #                        tmpSysLabel.SysLabelApplModule  = this.commentPropModuleFind(labelDescription);
        #                        tmpSysLabel.Description         = this.commentPropRemove(labelDescription);
        #                    }
        #                }
        #                tmpSysLabel.insert();
        #            }
        #            languageSetIterator.next();
        #        }
        #    }
        #}
        #
        #
      ENDSOURCE
      SOURCE #findLabel
        #public LabelId findLabel(LanguageId _languageId, LabelType _text)
        #{
        #    TmpSysLabel tmp;
        #    LabelId     labelId;
        #    int         length;
        #    ;
        #    tmpSysLabel.setTmpData(tmp);
        #
        #    hits        = 0;
        #    sysLabel    = labelMap.lookup(_languageId);
        #    likeLabel   = '';
        #
        #    if (_text &&
        #        SysLabel::isLabelId(_text))
        #    {
        #        if (sysLabel.exists(_text))
        #        {
        #            labelId = _text;
        #            hits++;
        #
        #            this.findInsertLabel(labelId);
        #        }
        #        labelId = '';
        #    }
        #    else
        #    {
        #        length = strlen(_text);
        #        if (strEndsWith(_text, '*') &&
        #            (SysLabel::isLabelId(strdel(_text, length, -1)) ||
        #             SysLabel::isLabelModuleId(strdel(_text, length, -1))))
        #        {
        #            if (match( ':d>', strdel(_text, length, -1)))    // A number is specified before '*', don't request numbers must exist after given number
        #            {
        #                likeLabel = strfmt('<%1', strdel(_text, length, -1));
        #            }
        #            else                                            // A number is not specified before '*', require on eor more numbers in rest of labelId
        #            {
        #                likeLabel = strfmt('<%1:d+', strdel(_text, length, -1));
        #                likeLabel = strReplace(likeLabel, '$', '[$]');
        #            }
        #            _text     = '';
        #        }
        #
        #        labelId = sysLabel.searchFirst(_text);
        #        if (labelId)
        #        {
        #            this.findInsertLabel(labelId);
        #        }
        #    }
        #    return labelId;
        #}
      ENDSOURCE
      SOURCE #findNextLabel
        #public LabelId findNextLabel()
        #{
        #    LabelId labelId;
        #    int     timer   = timenow();
        #    ;
        #    do
        #    {
        #        labelId = sysLabel.searchNext();
        #        this.findInsertLabel(labelId);
        #    }
        #    while (labelId  &&
        #           timer + 1 > timenow());
        #
        #    return labelId;
        #}
      ENDSOURCE
      SOURCE #findResults
        #public TmpSysLabel findResults()
        #{
        #    return tmpSysLabel;
        #}
      ENDSOURCE
      SOURCE #labelDelete
        #public boolean labelDelete(LabelId _labelId, boolean prompt = true)
        #{
        #    SysLabelLog         sysLabelLog;
        #    LabelType           text;
        #    LabelDescription    comment;
        #    SysLabel            label;
        #    boolean             ok;
        #    recId               recId;
        #;
        #    if (SysLabelInterval::labelIdInInterval(_labelId, LabelIntervalStatus::Released))
        #    {
        #        error("@SYS69759");
        #    }
        #    else
        #    {
        #        if (!prompt || Box::yesNo(strfmt("@SYS69760", _labelId), DialogButton::Yes) == DialogButton::Yes)
        #        {
        #            while select tmpSysLabel index LabelIdx
        #                where tmpSysLabel.LabelId == _labelId
        #            {
        #                tmpSysLabel.delete();
        #            }
        #
        #            labelIterator.begin();
        #
        #            while (labelIterator.more())
        #            {
        #                label = labelIterator.value();
        #
        #                if (label.exists(_labelId))
        #                {
        #                    text    = label.extractString(_labelId);
        #                    comment = label.extractComment(_labelId);
        #
        #                    ok = label.delete(_labelId);
        #
        #                    if (ok &&
        #                        (text ||
        #                         comment))
        #                    {
        #                        ttsbegin;
        #
        #                        sysLabelLog.clear();
        #                        sysLabelLog.LabelId             = _labelId;
        #                        sysLabelLog.LanguageId          = label.languageId();
        #                        sysLabelLog.SysLabelLogStatus   = SysLabelLogStatus::Deleted;
        #                        sysLabelLog.LabelType           = text;
        #                        sysLabelLog.LabelDescription    = comment;
        #                        sysLabelLog.SysLabelRefRecId    = recId;
        #                        sysLabelLog.insert();
        #
        #                        if (!recId)
        #                        {
        #                            recId = sysLabelLog.RecId;
        #
        #                            sysLabelLog.SysLabelRefRecId = recId;
        #                            sysLabelLog.update();
        #                        }
        #                        ttscommit;
        #                    }
        #                }
        #                labelIterator.next();
        #            }
        #        }
        #    }
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #labelExists
        #public boolean labelExists(LanguageId _languageId, LabelId _labelId)
        #{
        #    SysLabel label = labelMap.lookup(_languageId);
        #    if (label)
        #        return label.exists(_labelId);
        #    return false;
        #}
      ENDSOURCE
      SOURCE #labelInsert
        #public LabelId labelInsert(
        #    LanguageId          _languageId,
        #    LabelType           _text,
        #    LabelDescription    _comment,
        #    SysLabelApplModule  _sysLabelApplModule,
        #    LabelModuleId       _moduleId = SysLabel::defaultModuleId())
        #{
        #    Set                 set;
        #    SysLabelLog         sysLabelLog;
        #    LabelId             labelId;
        #    SysLabel            label               = labelMap.lookup(_languageId);
        #    LabelDescription    labelDescription;
        #    LabelType           text;
        #    SysLabelFile        sysLabelFile;
        #    LabelModuleId       tmpLabelModuleId;
        #
        #    // trim off pre- and post fixed spaces
        #    if (_text)
        #    {
        #        text = Global::strLRTrim(_text);
        #    }
        #
        #    if (text ||
        #        _comment)
        #    {
        #        if (SysLabel::isLabelId(text))
        #        {
        #            throw error("@SYS88103");
        #        }
        #
        #        if (strfind(text, '\n', 1, strlen(text)) || strfind(_comment, '\n', 1, strlen(_comment)))
        #        {
        #            throw error("@SYS86595", "@SYS71620");
        #        }
        #        if (strStartsWith(_comment, '@'))
        #        {
        #            throw error("@SYS302652");
        #        }
        #
        #        labelDescription = this.commentPropBuild(_comment, _sysLabelApplModule);
        #
        #        set = this.findEqualLabelSet(_languageId, text, labelDescription);
        #
        #        if (!set.elements())
        #        {
        #            if (//!versioncontrol.ideIntegration() &&  //trud - we will always use intervals
        #                SysLabelInterval::intervalExist(_moduleId))
        #            {
        #                labelId = SysLabelInterval::nextLabelId(_moduleId, labelMap);
        #
        #                if (labelId)
        #                {
        #                    this.labelModify(_languageId, labelId, text, labelDescription, _sysLabelApplModule);
        #                }
        #            }
        #            else
        #            {
        #                if (versioncontrol.ideIntegration() &&
        #                    versioncontrol.parmSysVersionControlSystem() &&
        #                    versioncontrol.parmSysVersionControlSystem() is SysVersionControlSystemFileBased)
        #                {
        #                    sysLabelFile = SysLabelFile::newLanguageModule(_languageId, _moduleId);
        #                    tmpLabelModuleId = sysLabelFile.getTemporaryLabelFileId();
        #                    if (!tmpLabelModuleId)
        #                    {
        #                        throw error(strfmt("@SYS300003", _moduleId));
        #                    }
        #                    labelId = label.insert(text, labelDescription, tmpLabelModuleId);
        #                }
        #                else
        #                {
        #                    labelId = label.insert(text, labelDescription, _moduleId );
        #                }
        #
        #                // If we didn't get a labelId, throw an error.
        #                if (!labelId)
        #                {
        #                    throw error(strfmt("@SYS112135", text));
        #                }
        #
        #                label.searchFirst(labelId);
        #                if (SysLabel::isLabelId(labelId))
        #                {
        #                    ttsbegin;
        #
        #                    sysLabelLog.clear();
        #                    sysLabelLog.LabelId             = labelId;
        #                    sysLabelLog.LanguageId          = label.languageId();
        #                    sysLabelLog.SysLabelLogStatus   = SysLabelLogStatus::Inserted;
        #                    sysLabelLog.LabelType           = text;
        #                    sysLabelLog.LabelDescription    = labelDescription;
        #                    sysLabelLog.insert();
        #
        #                    ttscommit;
        #                }
        #                else
        #                {
        #                    labelId = '';
        #                }
        #            }
        #        }
        #        if (labelId)
        #        {
        #            this.findInsertLabel(labelId, label.languageId());
        #        }
        #    }
        #    return labelId;
        #}
        #
      ENDSOURCE
      SOURCE #labelModify
        #public boolean labelModify(
        #    LanguageId          _languageId,
        #    LabelId             _labelId,
        #    LabelType           _text,
        #    LabelDescription    _comment,
        #    SysLabelApplModule  _sysLabelApplModule,
        #    boolean             _checkUniqueness = true)
        #{
        #    Set                 set;
        #    SysLabelLogStatus   sysLabelLogStatus;
        #    SysLabelLog         sysLabelLog;
        #    SysLabel            label = labelMap.lookup(_languageId);
        #    LabelDescription    labelDescription;
        #    LabelType           text;
        #
        #    boolean             ok = false;
        #    ;
        #    // trim off pre- and post fixed spaces
        #    if (_text)
        #    {
        #        text = Global::strLRTrim(_text);
        #    }
        #
        #    if (SysLabel::isLabelId(text))
        #    {
        #        throw error("@SYS88103");
        #    }
        #    if (strfind(text, '\n', 1, strlen(text)) || strfind(_comment, '\n', 1, strlen(_comment)))
        #    {
        #        throw error("@SYS86595", _labelId );
        #    }
        #    if (strStartsWith(_comment, '@'))
        #    {
        #        throw error("@SYS302652");
        #    }
        #
        #    if (label.exists(_labelId))
        #    {
        #        sysLabelLogStatus = SysLabelLogStatus::Modified;
        #    }
        #    else
        #    {
        #        sysLabelLogStatus = SysLabelLogStatus::Inserted;
        #    }
        #
        #    labelDescription = this.commentPropBuild(_comment, _sysLabelApplModule);
        #
        #    if (text &&
        #        _labelId != text &&
        #        (strcmp(label.extractString(_labelId),  text) ||
        #         strcmp(label.extractComment(_labelId), labelDescription)))
        #    {
        #        if (_checkUniqueness)
        #        {
        #            set = this.findEqualLabelSet(_languageId, text, labelDescription);
        #
        #            if (set.elements())
        #            {
        #                throw error("@SYS76550");
        #            }
        #        }
        #
        #        if (sysLabelLogStatus != SysLabelLogStatus::Inserted &&
        #            (label.extractComment(_labelId) ||
        #             (label.extractString(_labelId) &&
        #              label.extractString(_labelId) != _labelId)))
        #        {
        #            select firstonly reverse sysLabelLog
        #                index LabelIdx order by RecId desc
        #                where sysLabelLog.LabelId    == _labelId
        #                   && sysLabelLog.LanguageId == label.languageId();
        #
        #            if (!sysLabelLog ||
        #                (sysLabelLog &&
        #                 (sysLabelLog.LabelType        != label.extractString(_labelId) ||
        #                  sysLabelLog.LabelDescription != label.extractComment(_labelId))))
        #            {
        #                ttsbegin;
        #
        #                sysLabelLog.clear();
        #                sysLabelLog.LabelId             = _labelId;
        #                sysLabelLog.LanguageId          = label.languageId();
        #                sysLabelLog.SysLabelLogStatus   = SysLabelLogStatus::Original;
        #                sysLabelLog.LabelType           = label.extractString(_labelId);
        #                sysLabelLog.LabelDescription    = label.extractComment(_labelId);
        #                sysLabelLog.insert();
        #
        #                ttscommit;
        #            }
        #        }
        #
        #        if ((!_comment ||
        #             strcmp(label.extractComment(_labelId), labelDescription)) &&
        #            SysLabelInterval::labelIdInInterval(_labelId, LabelIntervalStatus::Released))
        #        {
        #            error(strfmt("@SYS69761" + ' ' + "@SYS69762", fieldid2pname(tablenum(TmpSysLabel), fieldnum(TmpSysLabel, Description))));
        #        }
        #        else
        #        {
        #            ok = label.modify(_labelId, text, labelDescription);
        #            if (ok)
        #            {
        #                ttsbegin;
        #
        #                sysLabelLog.clear();
        #                sysLabelLog.LabelId             = _labelId;
        #                sysLabelLog.LanguageId          = label.languageId();
        #                sysLabelLog.SysLabelLogStatus   = sysLabelLogStatus;
        #                sysLabelLog.LabelType           = text;
        #                sysLabelLog.LabelDescription    = labelDescription;
        #                sysLabelLog.insert();
        #
        #                ttscommit;
        #
        #            }
        #        }
        #    }
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #labelRestore
        #public boolean labelRestore( LanguageId _languageId, LabelId _labelId, LabelType _text, LabelDescription _comment)
        #{
        #    boolean     ok;
        #
        #    if (labelMap.exists(_languageId))
        #    {
        #        ok = this.labelModify(_languageId, _labelId, _text, _comment, SysLabelApplModule::None);
        #    }
        #
        #    return ok;
        #
        #}
      ENDSOURCE
      SOURCE #new
        #void new()
        #{
        #    ;
        #    this.allLabelObjects();
        #}
      ENDSOURCE
      SOURCE #parmLabelMap
        #public Map parmLabelMap()
        #{
        #    return labelMap;
        #}
      ENDSOURCE
      SOURCE #parmLanguageSet
        #public void parmLanguageSet(Set _set)
        #{
        #    ;
        #    if (_set)
        #    {
        #        languageSetIterator = new SetIterator(_set);
        #    }
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #public boolean validateWrite(LabelType _text, LabelDescription _comment)
        #{
        #    boolean ok = true;
        #
        #    if (!_text)
        #    {
        #        ok = checkFailed("@SYS73326");
        #    }
        #
        #    //
        #    // Comment is required for all labels created by Microsoft.
        #    //
        #    if (!_comment &&
        #        currentAOLayer() <= UtilEntryLevel::slp)
        #    {
        #        ok = checkFailed("@SYS308838");
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #lastValueDataAreaId
        #static client server public dataAreaId lastValueDataAreaId()
        #{
        #    return '';
        #}
        #
      ENDSOURCE
      SOURCE #lastValueDesignName
        #static client server public identifierName lastValueDesignName()
        #{
        #    return 'Advanced';
        #}
      ENDSOURCE
      SOURCE #lastValueElementName
        #static client server public identifierName lastValueElementName()
        #{
        #    return identifierstr(SysLabelSearch);
        #}
      ENDSOURCE
      SOURCE #lastValueType
        #static client server public UtilElementType lastValueType()
        #{
        #    return UtilElementType::Form;
        #}
      ENDSOURCE
      SOURCE #lastValueUserId
        #static client server public userId lastValueUserId()
        #{
        #    return curuserid();
        #}
      ENDSOURCE
      SOURCE #lastValueVersion
        #static client server public int lastValueVersion()
        #{
        #    return #version;
        #}
      ENDSOURCE
      SOURCE #moduleIdLookup
        #public static client void moduleIdLookup(FormStringControl _formStringControl)
        #{
        #    SetIterator     setIterator;
        #    TmpSysLabel     tmpModuleId;
        #    SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tablenum(TmpSysLabel), _formStringControl, false);
        #    ;
        #
        #    setIterator = new SetIterator(SysLabel::findModules());
        #    setIterator.begin();
        #    while (setIterator.more())
        #    {
        #        tmpModuleId.clear();
        #        tmpModuleId.LabelId = setIterator.value();
        #        tmpModuleId.insert();
        #        setIterator.next();
        #    }
        #
        #    // BP deviation documented
        #    sysTableLookup.parmTmpBuffer(tmpModuleId);
        #    sysTableLookup.addLookupfield(fieldnum(TmpSysLabel, LabelId));
        #    sysTableLookup.setLabel("@SYS58384");
        #
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #validateModuleId
        #static public boolean validateModuleId(LabelModuleId _labelModuleId)
        #{
        #    boolean ok;
        #    Set     set = SysLabel::findModules();
        #
        #    if (set.in(_labelModuleId))
        #    {
        #        ok = true;
        #    }
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSecEntryPointManager unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSecEntryPointManager
    PROPERTIES
      Name                #SysSecEntryPointManager
      Origin              #{917583C9-0906-4B11-8E2A-B86AF011B3C3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysSecEntryPointManager
        #{
        #    #AOT
        #    #SysSecEntryPointManager
        #}
      ENDSOURCE
      SOURCE #AccessLevel2AccessRight
        #public static AccessRight AccessLevel2AccessRight(str _accessLevel)
        #{
        #    switch(_accessLevel)
        #    {
        #        case 'NoAccess':
        #            return AccessRight::NoAccess;
        #        case 'Read':
        #            return AccessRight::View;
        #        case 'Update':
        #            return AccessRight::Edit;
        #        case 'Create':
        #            return AccessRight::Add;
        #        case 'Correct':
        #            return AccessRight::Correction;
        #        case 'Delete':
        #        case 'Invoke':
        #            return AccessRight::Delete;
        #
        #        default:
        #            throw error(strFmt("@SDT44", _accessLevel));
        #    }
        #}
      ENDSOURCE
      SOURCE #AccessRight2AccessLevel
        #public static str AccessRight2AccessLevel(AccessRight access)
        #{
        #    switch(access)
        #    {
        #        case AccessRight::NoAccess:
        #            return 'NoAccess';
        #        case AccessRight::View:
        #            return 'Read';
        #        case AccessRight::Edit:
        #            return 'Update';
        #        case AccessRight::Add:
        #            return 'Create';
        #        case AccessRight::Correction:
        #            return 'Correct';
        #        case AccessRight::Delete:
        #            return 'Delete';
        #
        #        default:
        #            throw error(strFmt("@SDT45", access));
        #    }
        #}
      ENDSOURCE
      SOURCE #AddObjectToVersionControl
        #public static void AddObjectToVersionControl(TreeNode _nodeToAdd)
        #{
        #    DialogButton dialogButton;
        #
        #    if(versionControl && versionControl.parmSysVersionControlSystem())
        #    {
        #        dialogButton = Box::yesNoOnce(strFmt("@SDT46"),
        #                                    strFmt("@SDT47",
        #                                            _nodeToAdd.treeNodePath()), DialogButton::Yes, 'SecEntryPointAddToVCS');
        #
        #        if(dialogButton == dialogButton::Yes)
        #        {
        #            versionControl.create(_nodeToAdd);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #AppendSourceToMethod
        #public static void AppendSourceToMethod(ClassName _className, MethodName _methodName, str _sourceToInsert)
        #{
        #    #xppTexts
        #    MemberFunction method;
        #    str oldSource;
        #    str newSource;
        #    System.String clrOldSource;
        #    int endMethodPos;
        #    TreeNode classNode;
        #
        #    classNode = TreeNode::findNode(#ClassesPath).AOTfindChild(_className);
        #    if(classNode == null)
        #    {
        #        throw error(strFmt("@SDT48", _className));
        #    }
        #
        #    //If VCS enabled check if object is checked in
        #    if(versionControl && versionControl.parmSysVersionControlSystem())
        #    {
        #        if(!versionControl.allowEdit(classNode))
        #        {
        #            throw error(strFmt("@SDT49", _className));
        #        }
        #    }
        #
        #    method = classNode.AOTfindChild(_methodName);
        #    if(method == null)
        #    {
        #        throw error(strFmt("@SDT50", _className, _methodName));
        #    }
        #
        #    oldSource = method.AOTgetSource();
        #    clrOldSource = oldSource;
        #
        #    endMethodPos = clrOldSource.LastIndexOf(#methodEnd);
        #    newSource = strins(oldSource, strFmt('%1%2%3', #newline, #tab, _sourceToInsert), endMethodPos);
        #    method.AOTsetSource(newSource);
        #    method.AOTcompile();
        #    method.AOTsave();
        #}
      ENDSOURCE
      SOURCE #convertElementType
        #public static MenuItemType convertElementType(UtilElementType _elementType)
        #{
        #    switch (_elementType)
        #    {
        #        case UtilElementType::DisplayTool:
        #            return MenuItemType::Display;
        #        case UtilElementType::OutputTool:
        #            return MenuItemType::Output;
        #        case UtilElementType::ActionTool:
        #            return MenuItemType::Action;
        #
        #    }
        #    throw error(strFmt("@SDT51", _elementType));
        #}
      ENDSOURCE
      SOURCE #convertMenuItemType
        #public static SecurableType convertMenuItemType(MenuItemType _menuItemType)
        #{
        #     switch (_menuItemType)
        #    {
        #        case MenuItemType::Display:
        #            return SecurableType::MenuItemDisplay;
        #        case MenuItemType::Output:
        #            return SecurableType::MenuItemOutput;
        #        case MenuItemType::Action:
        #            return SecurableType::MenuItemAction;
        #    }
        #    throw error(strFmt("@SDT52", _menuItemType));
        #}
      ENDSOURCE
      SOURCE #DisableCurrentSysAdminAssignment
        #public server static void DisableCurrentSysAdminAssignment()
        #{
        #    SecurityUserRole userRole;
        #    SecurityRole sysAdminRole;
        #
        #    select firstOnly Recid from sysAdminRole where sysAdminRole.AotName == '-SYSADMIN-';
        #    select firstOnly forUpdate userRole where userRole.User == curUserId() &&
        #        userRole.SecurityRole == sysAdminRole.RecId;
        #
        #    if(userRole.RecId != 0)
        #    {
        #        ttsBegin;
        #        userRole.AssignmentStatus = RoleAssignmentStatus::Disabled;
        #        userRole.update();
        #        ttsCommit;
        #
        #        SysSecurity::reload(false, false, false, false);
        #    }
        #}
      ENDSOURCE
      SOURCE #DisableSysAdminAssignmentSetting
        #public static boolean DisableSysAdminAssignmentSetting(boolean _newStatus =
        #    infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #DisableSysAdminUserSetting))
        #{
        #    if(_newStatus && !infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #DisableSysAdminUserSetting))
        #    {
        #        infolog.globalCache().set(curUserId() + #SecEntryPoint, #DisableSysAdminUserSetting, #DisableSysAdminUserSetting, false);
        #    }
        #
        #    if(!_newStatus && infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #DisableSysAdminUserSetting))
        #    {
        #        infolog.globalCache().remove(curUserId() + #SecEntryPoint, #DisableSysAdminUserSetting);
        #    }
        #
        #    return _newStatus;
        #}
      ENDSOURCE
      SOURCE #EnableClientRecorder
        #public static void EnableClientRecorder()
        #{
        #    TreeNode classesNode = TreeNode::findNode(#ClassesPath);
        #    TreeNode classNode, methodNode;
        #    str serverMethodCheckSource;
        #    str menuItemInvokedSource;
        #    str classDeclarationSource;
        #
        #    classNode = classesNode.AOTfindChild(#ClientRecorderClassName);
        #    if(classNode)
        #    {
        #        throw error(strFmt("@SDT53", #ClientRecorderClassName));
        #    }
        #    classNode = classesNode.AOTadd(#ClientRecorderClassName);
        #
        #    methodNode = classNode.AOTadd('MenuItemInvoked');
        #    menuItemInvokedSource = 'public void MenuItemInvoked(UtilElementType _elementType, securableName _menuItemName)';
        #    menuItemInvokedSource += '\n{';
        #    menuItemInvokedSource += '\n    #SysSecEntryPointManager';
        #    menuItemInvokedSource +=  '\n    ';
        #    menuItemInvokedSource += '\n    if(xSession::isCLRSession())';
        #    menuItemInvokedSource +=  '\n        return;';
        #    menuItemInvokedSource +=  '\n    if(appl.globalCache().isSet(curUserId() + #SecEntryPoint, #EntryPointRecorderKey))';
        #    menuItemInvokedSource +=  '\n    {';
        #    menuItemInvokedSource +=  '\n        SysSecEntryPointManager::MarkEntryPointAsRecorded(_elementType, _menuItemName);';
        #    menuItemInvokedSource +=  '\n    }';
        #    menuItemInvokedSource +=  '\n}';
        #    methodNode.AOTsetSource(menuItemInvokedSource);
        #
        #    methodNode = classNode.AOTadd('ServerMethodCheck');
        #    serverMethodCheckSource = 'public void ServerMethodCheck(securableName className, securableChildName methodName)';
        #    serverMethodCheckSource += '\n{';
        #    serverMethodCheckSource += '\n    return;';
        #    serverMethodCheckSource += '\n\}';
        #    methodNode.AOTsetSource(serverMethodCheckSource);
        #
        #    classDeclarationSource = '// This is a framework class. Customizing this class may cause problems with future upgrades to the software.';
        #    classDeclarationSource += '\n// Deleting this class will disable the entry point recorder feature in the security development tool. A client restart is required after deleting this class.';
        #    classDeclarationSource += strFmt('\nclass %1', #ClientRecorderClassName);
        #    classDeclarationSource += '\n{';
        #    classDeclarationSource += '\n\}';
        #
        #    classNode.AOTfindChild('classDeclaration').AOTsetSource(classDeclarationSource);
        #
        #    classNode.AOTsave();
        #    classNode.AOTcompile(1);
        #
        #    //Force client restart
        #    Box::info("@SYS100403");
        #    infolog.shutDown(true);
        #}
      ENDSOURCE
      SOURCE #EnableCurrentSysAdminAssignment
        #public server static void EnableCurrentSysAdminAssignment()
        #{
        #    SecurityUserRole userRole;
        #    SecurityRole sysAdminRole;
        #    SkipAOSValidationPermission skipAOSPermission = new SkipAOSValidationPermission();
        #
        #    select firstOnly Recid from sysAdminRole where sysAdminRole.AotName == '-SYSADMIN-';
        #    select firstOnly forUpdate userRole where userRole.User == curUserId() &&
        #        userRole.SecurityRole == sysAdminRole.RecId;
        #
        #    if(userRole.RecId != 0)
        #    {
        #        unchecked(Uncheck::TableSecurityPermission)
        #        {
        #            ttsBegin;
        #            skipAOSPermission.assert();
        #            userRole.skipAosValidation(true);
        #            userRole.AssignmentStatus = RoleAssignmentStatus::Enabled;
        #            userRole.update();
        #            ttsCommit;
        #            CodeAccessPermission::revertAssert();
        #
        #            SysSecurity::reload(false, false, false, false);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #EnableFormHighlight
        #public static boolean EnableFormHighlight()
        #{
        #    SysSecEntryPointManager::AppendSourceToMethod('SysSetupFormRun', 'init', 'SysSecEntryPointManager::FormRunHook(this.form().name(), this.design());');
        #    return true;
        #}
      ENDSOURCE
      SOURCE #EnableQuickLaunch
        #public static boolean EnableQuickLaunch()
        #{
        #    SysSecEntryPointManager::AppendSourceToMethod('Info', 'workspaceWindowCreated', 'SysSecEntryPointManager::WorkSpaceWindowCreated();');
        #    return true;
        #}
      ENDSOURCE
      SOURCE #EnsureVCSDisabledForBusinessUser
        #public static void EnsureVCSDisabledForBusinessUser()
        #{
        #    if(versionControl && versionControl.parmSysVersionControlSystem() && !isDeveloper())
        #    {
        #        throw error(strFmt("@SDT54"));
        #    }
        #}
      ENDSOURCE
      SOURCE #EnvironmentHasADGroups
        #public static boolean EnvironmentHasADGroups()
        #{
        #    UserInfo userInfo;
        #
        #    select count(RecId) from userInfo
        #        where userInfo.accountType == UserAccountType::ADGroup;
        #
        #    return (userInfo.RecId != 0);
        #}
      ENDSOURCE
      SOURCE #FindOrCreateUniqueRoleForCurrentUser
        #public static TreeNode FindOrCreateUniqueRoleForCurrentUser()
        #{
        #    #AOT
        #    #Properties
        #    str roleAOTName = strFmt('%1%2', #SecGeneratedRoleAOTNamePrefix, curUserId());
        #
        #    TreeNode rolesNode = TreeNode::findNode(#SecRolesPath);
        #    TreeNode roleNode = rolesNode.AOTfindChild(roleAOTName);
        #    str label;
        #
        #    if(roleNode == null)
        #    {
        #        //Dynamically create a unique role for current user
        #        roleNode = rolesNode.AOTadd(roleAOTName);
        #        label = strFmt("@SDT55", curUserId());
        #        roleNode.AOTsetProperty(#PropertyLabel, label);
        #        roleNode.AOTsetProperty(#PropertyDescription, strFmt("@SDT56", curUserId()));
        #        info(strFmt("@SDT57", roleAOTName, label));
        #    }
        #
        #    return roleNode;
        #}
      ENDSOURCE
      SOURCE #FormRunHook
        #public static void FormRunHook(str _formName, Object    _parentControl)
        #{
        #    counter                     ctrlCnt;
        #    FormBuildcontrol            c;
        #    FormControl                 fc;
        #    FormFunctionButtonControl   formFunctionButtonControl;
        #    ClassId                     classId;
        #    Object                      formObject;
        #    FormRun                     secEntryPointFormRun;
        #
        #    if(!SysSecEntryPointManager::FormRunHookStatus())
        #    {
        #        return;
        #    }
        #
        #    if(!infolog.globalCache().isSet(curuserId() + #SecEntryPointFormKey, #SecEntryPointFormKey))
        #    {
        #        return;
        #    }
        #
        #    formObject = infolog.globalCache().get(curuserId() + #SecEntryPointFormKey, #SecEntryPointFormKey);
        #    if(formObject && formObject is FormRun)
        #    {
        #        secEntryPointFormRun = formObject as FormRun;
        #        if (!SysFormRun::hasMethod(secEntryPointFormRun, identifierStr(GetAccessRightForMenuItem)))
        #        {
        #            return;
        #        }
        #
        #        //Iterate all controls on the form
        #        for (ctrlCnt = 1; ctrlCnt <= _parentControl.controlCount(); ctrlCnt++)
        #        {
        #            c =  _parentControl.controlNum(ctrlCnt);
        #            fc = _parentControl.controlNum(ctrlCnt);
        #            if (c.isContainer())
        #            {
        #                SysSecEntryPointManager::FormRunHook(_formName, c);
        #            }
        #
        #            classId = classidget(c);
        #            switch (classId)
        #            {
        #                case classnum(FormFunctionButtonControl):
        #                case classnum(FormBuildFunctionButtonControl):
        #                    formFunctionButtonControl = _parentControl.controlNum(ctrlCnt);
        #                    if(formObject.GetAccessRightForMenuItem(formFunctionButtonControl.menuItemType(),
        #                                            formFunctionButtonControl.menuItemName()) == AccessRight::NoAccess)
        #                    {
        #                        formFunctionButtonControl.normalImage('12262');
        #                    }
        #                    break;
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #FormRunHookStatus
        #public static boolean FormRunHookStatus(boolean _newStatus =
        #    infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #FormRunHookKey))
        #{
        #    //User disables form run hook by remove key from cache
        #    if(_newStatus && !infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #FormRunHookKey))
        #    {
        #        infolog.globalCache().set(curUserId() + #SecEntryPoint, #FormRunHookKey, #FormRunHookKey, false);
        #    }
        #
        #    if(!_newStatus && infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #FormRunHookKey))
        #    {
        #        infolog.globalCache().remove(curUserId() + #SecEntryPoint, #FormRunHookKey);
        #    }
        #
        #    return _newStatus;
        #}
      ENDSOURCE
      SOURCE #GetEntryPointPermissionsForRole
        #public static server container GetEntryPointPermissionsForRole(RecId _roleId)
        #{
        #    container retValue;
        #
        #    str typeKey;
        #    SecurableName securableName;
        #    SecurableChildName securableChildName;
        #    AccessRight accessRightVar;
        #    str objectKey;
        #
        #    SecurityTaskExplodedGraph taskExplodedGraph;
        #    SecurityTaskEntryPoint taskEntryPoint;
        #    SecurityRoleTaskGrant srtGrant;
        #    SecurityRoleExplodedGraph roleExplodedGraph;
        #    SecurableObject securableObject;
        #
        #    while select maxOf(PermissionGroup), EntryPoint from taskEntryPoint
        #        group by EntryPoint
        #        join Type, Name, ChildName from securableObject
        #            group by Type, Name, ChildName
        #            where securableObject.RecId == taskEntryPoint.EntryPoint
        #        exists join roleExplodedGraph
        #            where roleExplodedGraph.SecurityRole == _roleId
        #        join RecId from srtGrant
        #                where srtGrant.SecurityRole == roleExplodedGraph.SecuritySubRole
        #        join RecId from taskExplodedGraph
        #                where taskExplodedGraph.SecurityTask == srtGrant.SecurityTask &&
        #                        taskExplodedGraph.SecuritySubTask == taskEntryPoint.SecurityTask
        #    {
        #        typeKey = SysSecEntryPointManager::GetTypeKeyForSecurableType(securableObject.Type);
        #        securableName = securableObject.Name;
        #        securableChildName = securableObject.ChildName;
        #        accessRightVar = taskEntryPoint.PermissionGroup;
        #        objectKey = strFmt('%1.%2.%3', typeKey, strLwr(securableName), strLwr(securableChildName));
        #
        #        retValue += objectKey;
        #        retValue += accessRightVar;
        #    }
        #
        #    return retValue;
        #}
        #
      ENDSOURCE
      SOURCE #GetEntryPointsContainer
        #public static server container GetEntryPointsContainer()
        #{
        #    SecurableObject securableObject;
        #    container retValue;
        #
        #    while select RecId, Type, Name, ChildName from securableObject
        #         where (securableObject.Type == SecurableType::MenuItemDisplay ||
        #                                    securableObject.Type == SecurableType::MenuItemOutput ||
        #                                    securableObject.Type == SecurableType::MenuItemAction ||
        #                                    securableObject.Type == SecurableType::ServiceOperation  ||
        #                                    securableObject.Type == SecurableType::WebUrlItem ||
        #                                    securableObject.Type == SecurableType::WebActionItem ||
        #                                    securableObject.Type == SecurableType::WebManagedContentItem)
        #    {
        #        retValue += strfmt('%1.%2.%3.%4', securableObject.RecId, enum2int(securableObject.Type), securableObject.Name, securableObject.ChildName);
        #    }
        #
        #    return retValue;
        #}
        #
      ENDSOURCE
      SOURCE #GetKeyForEntryPointNode
        #public static str GetKeyForEntryPointNode(TreeNode _entryPointNode)
        #{
        #    if(strStartsWith(_entryPointNode.treeNodePath(), #MenuItemsDisplayPath))
        #    {
        #        return strFmt('%1.%2.', #EntryPointObjectKeyDisplayMenuItem, _entryPointNode.AOTname());
        #    }
        #    else if(strStartsWith(_entryPointNode.treeNodePath(), #MenuItemsOutputPath))
        #    {
        #        return strFmt('%1.%2.', #EntryPointObjectKeyOutputMenuItem, _entryPointNode.AOTname());
        #    }
        #    else if(strStartsWith(_entryPointNode.treeNodePath(), #MenuItemsActionPath))
        #    {
        #        return strFmt('%1.%2.', #EntryPointObjectKeyActionMenuItem, _entryPointNode.AOTname());
        #    }
        #    else if(strStartsWith(_entryPointNode.treeNodePath(), #WebMenuItemsUrlPath))
        #    {
        #        return strFmt('%1.%2.', #EntryPointObjectKeyWebURLItem, _entryPointNode.AOTname());
        #    }
        #    else if(strStartsWith(_entryPointNode.treeNodePath(), #WebMenuItemsActionPath))
        #    {
        #        return strFmt('%1.%2.', #EntryPointObjectKeyWebActionItem, _entryPointNode.AOTname());
        #    }
        #    else if(strStartsWith(_entryPointNode.treeNodePath(), #WebContentItemsPath))
        #    {
        #        return strFmt('%1.%2.', #EntryPointObjectKeyWebContentItem, _entryPointNode.AOTname());
        #    }
        #    else if(strStartsWith(_entryPointNode.treeNodePath(), #ServicesPath))
        #    {
        #        if(_entryPointNode.AOTparent() != null && _entryPointNode.AOTparent().AOTname() == #ServiceOperations)
        #        {
        #            return strFmt('%1.%2.%3', #EntryPointObjectKeyServiceOperation, _entryPointNode.AOTparent().AOTparent().AOTname(), _entryPointNode.AOTname());
        #        }
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #GetKeyForEntryPointReferenceNode
        #public static str GetKeyForEntryPointReferenceNode(TreeNode _entryPointReferenceNode)
        #{
        #    #Properties
        #    str objectType = findProperty(_entryPointReferenceNode.AOTgetProperties(), #PropertyObjectType);
        #    str objectName = findProperty(_entryPointReferenceNode.AOTgetProperties(), #PropertyObjectName);
        #    str objectChildName = findProperty(_entryPointReferenceNode.AOTgetProperties(), #PropertyObjectChildName);
        #    str objectTypeKey;
        #
        #    switch(objectType)
        #    {
        #        case 'MenuItemDisplay':
        #            objectTypeKey = #EntryPointObjectKeyDisplayMenuItem;
        #            break;
        #        case 'MenuItemAction':
        #            objectTypeKey = #EntryPointObjectKeyActionMenuItem;
        #            break;
        #        case 'MenuItemOutput':
        #            objectTypeKey = #EntryPointObjectKeyOutputMenuItem;
        #            break;
        #        case 'ServiceOperation':
        #            objectTypeKey = #EntryPointObjectKeyServiceOperation;
        #            break;
        #        case 'WebActionItem':
        #            objectTypeKey = #EntryPointObjectKeyWebActionItem;
        #            break;
        #        case 'WebUrlItem':
        #            objectTypeKey = #EntryPointObjectKeyWebURLItem;
        #            break;
        #        case 'WebManagedContent':
        #            objectTypeKey = #EntryPointObjectKeyWebContentItem;
        #            break;
        #
        #        default:
        #            throw error(strFmt("@SDT58", objectType));
        #    }
        #
        #    return strFmt('%1.%2.%3', objectTypeKey, strLwr(objectName), strLwr(objectChildName));
        #}
      ENDSOURCE
      SOURCE #GetKeyForSysSecEntryPointTmp
        #public static str GetKeyForSysSecEntryPointTmp(SysSecEntryPointTmp _SysSecEntryPointTmp)
        #{
        #    #Properties
        #    str objectTypeKey;
        #
        #    objectTypeKey = SysSecEntryPointManager::GetTypeKeyForSecurableType(_SysSecEntryPointTmp.ObjectType);
        #    return strFmt('%1.%2.%3', objectTypeKey,
        #        strLwr(_SysSecEntryPointTmp.ObjectAOTName), strLwr(_SysSecEntryPointTmp.ObjectAOTChildName));
        #}
      ENDSOURCE
      SOURCE #GetLinkedFormNode
        #public static TreeNode GetLinkedFormNode(TreeNode _menuItemNode)
        #{
        #    #Properties
        #    str linkedForm;
        #    str objectType;
        #    str permissionType;
        #
        #    objectType = findProperty(_menuItemNode.AOTgetProperties(),#PropertyObjectType);
        #
        #    if(objectType == #PropertyForm)
        #    {
        #        linkedForm = findProperty(_menuItemNode.AOTgetProperties(),#PropertyObject);
        #    }
        #    else
        #    {
        #        //Let's check if there is a linked form for security
        #        permissionType = findProperty(_menuItemNode.AOTgetProperties(),#PropertyLinkedPermissionType);
        #
        #        if(permissionType == #PropertyForm)
        #        {
        #            linkedForm = findProperty(_menuItemNode.AOTgetProperties(),#PropertyLinkedPermissionObject);
        #        }
        #    }
        #
        #    if(linkedForm != '')
        #    {
        #        return TreeNode::findNode(strFmt(@'%1\%2', #FormsPath, linkedForm));
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #GetLinkedMenuItemNode
        #public static TreeNode GetLinkedMenuItemNode(TreeNode _treeNode)
        #{
        #    #Properties
        #    str       itemvalue;
        #    str       itemtype;
        #
        #    if(!_treeNode)
        #        return null;
        #
        #    itemvalue = findProperty(_treeNode.AOTgetProperties(),#PropertyMenuItemName);
        #    itemtype  = findProperty(_treeNode.AOTgetProperties(),#PropertyMenuItemType);
        #
        #    if(itemType == '')
        #    {
        #        itemtype = 'Display';
        #    }
        #
        #    if(itemvalue != '')
        #    {
        #        return SysSecEntryPointManager::GetMenuItemNode(itemtype, itemvalue);
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #GetMenuItemNode
        #public static TreeNode GetMenuItemNode(str _menuItemType, str _menuItemName)
        #{
        #    #AOT
        #    TreeNode tNode;
        #    str menuItemPath;
        #
        #    switch(_menuItemType)
        #    {
        #        case 'Display':
        #            menuItemPath = #MenuItemsDisplayPath;
        #            break;
        #        case 'Output':
        #            menuItemPath = #MenuItemsOutputPath;
        #            break;
        #        case 'Action':
        #            menuItemPath = #MenuItemsActionPath;
        #            break;
        #
        #        default:
        #            throw error(strFmt("@SDT59", _menuItemType));
        #    }
        #
        #    tNode = TreeNode::findNode(strFmt('%1\\%2', menuItemPath, _menuItemName));
        #    return tNode;
        #}
      ENDSOURCE
      SOURCE #GetNodeForSecurableType
        #public static TreeNode GetNodeForSecurableType(SecurableType _securableType, str _objectName, str _objectChildName = '')
        #{
        #    #AOT
        #    TreeNode tNode;
        #    str menuItemPath;
        #
        #    switch(_securableType)
        #    {
        #        case SecurableType::MenuItemDisplay:
        #            menuItemPath = #MenuItemsDisplayPath;
        #            tNode = TreeNode::findNode(strFmt('%1\\%2', menuItemPath, _objectName));
        #            break;
        #        case SecurableType::MenuItemOutput:
        #            menuItemPath = #MenuItemsOutputPath;
        #            tNode = TreeNode::findNode(strFmt('%1\\%2', menuItemPath, _objectName));
        #            break;
        #        case SecurableType::MenuItemAction:
        #            menuItemPath = #MenuItemsActionPath;
        #            tNode = TreeNode::findNode(strFmt('%1\\%2', menuItemPath, _objectName));
        #            break;
        #        case SecurableType::ServiceOperation:
        #            tNode = TreeNode::findNode(strFmt(#ServiceOperationPath, _objectName, _objectChildName));
        #            break;
        #        case SecurableType::WebUrlItem:
        #            menuItemPath = #WebMenuItemsUrlPath;
        #            tNode = TreeNode::findNode(strFmt('%1\\%2', menuItemPath, _objectName));
        #            break;
        #        case SecurableType::WebActionItem:
        #            menuItemPath = #WebMenuItemsActionPath;
        #            tNode = TreeNode::findNode(strFmt('%1\\%2', menuItemPath, _objectName));
        #            break;
        #        case SecurableType::WebManagedContentItem:
        #            menuItemPath = #WebContentItemsManagedPath;
        #            tNode = TreeNode::findNode(strFmt('%1\\%2', menuItemPath, _objectName));
        #            break;
        #
        #        default:
        #            throw error(strFmt("@SDT60", _securableType));
        #    }
        #
        #    return tNode;
        #}
      ENDSOURCE
      SOURCE #GetSecurableMenuItemType
        #public static SecurableType GetSecurableMenuItemType(TreeNode _menuItemNode)
        #{
        #    #AOT
        #
        #    if(_menuItemNode == null)
        #    {
        #        throw error(strFmt("@SDT61"));
        #    }
        #    if(Global::strStartsWith(_menuItemNode.treeNodePath(), #MenuItemsDisplayPath))
        #    {
        #        return SecurableType::MenuItemDisplay;
        #    }
        #
        #    if(Global::strStartsWith(_menuItemNode.treeNodePath(), #MenuItemsOutputPath))
        #    {
        #        return SecurableType::MenuItemOutput;
        #    }
        #
        #    if(Global::strStartsWith(_menuItemNode.treeNodePath(), #MenuItemsActionPath))
        #    {
        #        return SecurableType::MenuItemAction;
        #    }
        #
        #    throw error(strFmt("@SDT62", _menuItemNode.treeNodePath()));
        #}
      ENDSOURCE
      SOURCE #GetTypeKeyForSecurableType
        #public static str GetTypeKeyForSecurableType(SecurableType _type)
        #{
        #    switch(_type)
        #    {
        #        case SecurableType::MenuItemDisplay:
        #            return #EntryPointObjectKeyDisplayMenuItem;
        #        case SecurableType::MenuItemOutput:
        #            return #EntryPointObjectKeyOutputMenuItem;
        #        case SecurableType::MenuItemAction:
        #            return #EntryPointObjectKeyActionMenuItem;
        #        case SecurableType::ServiceOperation:
        #            return #EntryPointObjectKeyServiceOperation;
        #        case SecurableType::WebActionItem:
        #            return #EntryPointObjectKeyWebActionItem;
        #        case SecurableType::WebUrlItem:
        #            return #EntryPointObjectKeyWebURLItem;
        #        case SecurableType::WebManagedContentItem:
        #            return #EntryPointObjectKeyWebContentItem;
        #        default:
        #            return '';
        #    }
        #}
      ENDSOURCE
      SOURCE #IsClientRecorderEnabled
        #public server static boolean IsClientRecorderEnabled()
        #{
        #    TreeNode recorderClass = TreeNode::findNode(#ClassesPath).AOTfindChild(#ClientRecorderClassName);
        #    return (recorderClass != null);
        #}
      ENDSOURCE
      SOURCE #IsFormHighlightEnabled
        #public server static boolean IsFormHighlightEnabled()
        #{
        #    TreeNode sysSetupFormRunClassNode = TreeNode::findNode(#ClassesPath).AOTfindChild('SysSetupFormRun');
        #    TreeNode initMethodNode;
        #
        #    if(!isDeveloper())
        #    {
        #        return false;
        #    }
        #
        #    if(sysSetupFormRunClassNode != null)
        #    {
        #        sysSetupFormRunClassNode.AOTrestore();
        #        initMethodNode = sysSetupFormRunClassNode.AOTfindChild('init');
        #
        #        if(initMethodNode != null)
        #        {
        #            if(strContains(initMethodNode.AOTgetSource(), @'SysSecEntryPointManager::FormRunHook'))
        #            {
        #                return true;
        #            }
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #IsInSingleClientSessionMode
        #public server static boolean IsInSingleClientSessionMode()
        #{
        #    SysClientSessions clientSessions;
        #
        #    select count(RecId) from clientSessions where clientSessions.userId == curUserId() &&
        #                        clientSessions.clientType == SessionType::GUI &&
        #                        clientSessions.Status == SessionState::Running;
        #
        #    return (clientSessions.RecId == 1);
        #}
      ENDSOURCE
      SOURCE #IsQuickLaunchEnabled
        #public server static boolean IsQuickLaunchEnabled()
        #{
        #    TreeNode infoClassNode = TreeNode::findNode(#ClassesPath).AOTfindChild('Info');
        #    TreeNode methodNode;
        #
        #    if(!isDeveloper())
        #    {
        #        return false;
        #    }
        #
        #    if(infoClassNode != null)
        #    {
        #        infoClassNode.AOTrestore();
        #        methodNode = infoClassNode.AOTfindChild('workspaceWindowCreated');
        #
        #        if(methodNode != null)
        #        {
        #            if(strContains(methodNode.AOTgetSource(), @'SysSecEntryPointManager::WorkSpaceWindowCreated'))
        #            {
        #                return true;
        #            }
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #IsSingleServerRunning
        #public server static boolean IsSingleServerRunning()
        #{
        #    SysServerSessions serverSessions;
        #
        #    serverSessions.disableCache(true);
        #    select count(RecId) from serverSessions
        #        where serverSessions.Status == 1 && serverSessions.LoadBalance == NoYes::No;
        #
        #    return (serverSessions.RecId == 1);
        #}
      ENDSOURCE
      SOURCE #MarkEntryPointAsRecorded
        #public static void MarkEntryPointAsRecorded(UtilElementType _elementType, securableName _menuItemName)
        #{
        #    SysSecRecordedEntryPoint recordedObject;
        #    SecurableObject securableObject;
        #    MenuItemType menuItemType;
        #    SecurableType securableType;
        #
        #    menuItemType = SysSecEntryPointManager::convertElementType(_elementType);
        #    securableType = SysSecEntryPointManager::convertMenuItemType(menuItemType);
        #
        #    select firstOnly recid from securableObject
        #        where securableObject.Type == securableType &&
        #                securableObject.Name == _menuItemName &&
        #                securableObject.ChildName == '';
        #
        #    if(securableObject.RecId != 0)
        #    {
        #        ttsBegin;
        #        recordedObject.User = curUserId();
        #        recordedObject.SecurableObject = securableObject.RecId;
        #        recordedObject.SessionId = sessionId();
        #        recordedObject.insert();
        #        ttsCommit;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #MergeEntryPointRightsIntoPrivilegeNode
        #public static boolean MergeEntryPointRightsIntoPrivilegeNode(TreeNode _privilegeNode, SysSecEntryPointTmp _SysSecEntryPointTmpTable)
        #{
        #    #Properties
        #    TreeNode privilegeEntryPointsNode, privilegeEntryPointNode;
        #    TreeNode entryPointNode;
        #    TreeNodeIterator tIterator;
        #    IdentifierName entryPointName;
        #    int i = 0;
        #    str newEntryPointName;
        #    str securableObjectType;
        #    SecuritySkipFlush skipFlush = new SecuritySkipFlush();
        #
        #    if(!SysSecEntryPointManager::ObjectEditableVCS(_privilegeNode))
        #    {
        #        return false;
        #    }
        #
        #    privilegeEntryPointsNode = _privilegeNode.AOTfindChild('Entry Points');
        #
        #    if(privilegeEntryPointsNode == null)
        #    {
        #        throw error(strFmt("@SDT63"));
        #    }
        #
        #    skipFlush.set();
        #
        #    //Remove all entry points for which permission will be updated or removed
        #    tIterator = privilegeEntryPointsNode.AOTiterator();
        #    privilegeEntryPointNode = tIterator.next();
        #    while(privilegeEntryPointNode != null)
        #    {
        #        while select _SysSecEntryPointTmpTable
        #        {
        #            securableObjectType = strLwr(strFmt('%1', enum2symbol(enumnum(SecurableType), _SysSecEntryPointTmpTable.ObjectType)));
        #            if(_SysSecEntryPointTmpTable.ObjectType == SecurableType::WebManagedContentItem)
        #            {
        #                securableObjectType = 'WebManagedContent';
        #            }
        #
        #            if(strLwr(privilegeEntryPointNode.AOTgetProperty(#PropertyObjectType)) == securableObjectType &&
        #                strLwr(privilegeEntryPointNode.AOTgetProperty(#PropertyObjectName)) == strLwr(_SysSecEntryPointTmpTable.ObjectAOTName) &&
        #                strLwr(privilegeEntryPointNode.AOTgetProperty(#PropertyObjectChildName)) == strLwr(_SysSecEntryPointTmpTable.ObjectAOTChildName))
        #            {
        #                privilegeEntryPointNode.AOTdelete();
        #                break;
        #            }
        #        }
        #
        #        privilegeEntryPointNode = tIterator.next();
        #    }
        #
        #    //Drop all the entry points so new 'Name' property gets generated
        #    while select _SysSecEntryPointTmpTable where _SysSecEntryPointTmpTable.NewAccessRight != AccessRight::NoAccess
        #    {
        #        entryPointNode = SysSecEntryPointManager::GetNodeForSecurableType(
        #            _SysSecEntryPointTmpTable.ObjectType, _SysSecEntryPointTmpTable.ObjectAOTName, _SysSecEntryPointTmpTable.ObjectAOTChildName);
        #
        #        if(entryPointNode == null)
        #        {
        #            _privilegeNode.AOTrestore();
        #            throw error(strFmt("@SDT64",
        #                _SysSecEntryPointTmpTable.ObjectType, _SysSecEntryPointTmpTable.ObjectAOTName, _SysSecEntryPointTmpTable.ObjectAOTChildName));
        #        }
        #
        #        //AOTDrop does not work for service operations so use AOTAdd
        #        if(_SysSecEntryPointTmpTable.ObjectType == SecurableType::ServiceOperation)
        #        {
        #            entryPointName = strFmt('%1', _SysSecEntryPointTmpTable.ObjectAOTChildName);
        #            i = 0;
        #            newEntryPointName = entryPointName;
        #            do
        #            {
        #                i++;
        #                if (i>1)
        #                {
        #                    newEntryPointName = entryPointName + int2str(i);
        #                }
        #            } while (privilegeEntryPointsNode.AOTfindChild(newEntryPointName));
        #
        #            entryPointNode = privilegeEntryPointsNode.AOTadd(newEntryPointName);
        #            entryPointNode.AOTsetProperty(#PropertyObjectType, strFmt('%1', enum2symbol(enumnum(SecurableType), _SysSecEntryPointTmpTable.ObjectType)));
        #            entryPointNode.AOTsetProperty(#PropertyObjectName, _SysSecEntryPointTmpTable.ObjectAOTName);
        #            entryPointNode.AOTsetProperty(#PropertyObjectChildName, _SysSecEntryPointTmpTable.ObjectAOTChildName);
        #
        #            if(_SysSecEntryPointTmpTable.NewAccessRight != AccessRight::Delete)
        #            {
        #                _privilegeNode.AOTrestore();
        #                throw error(strFmt("@SDT65",
        #                                    _SysSecEntryPointTmpTable.ObjectType, _SysSecEntryPointTmpTable.ObjectAOTName,
        #                                    _SysSecEntryPointTmpTable.ObjectAOTChildName, AccessRight::Delete));
        #            }
        #            entryPointNode.AOTsetProperty(#PropertyAccessLevel, SysSecEntryPointManager::AccessRight2AccessLevel(_SysSecEntryPointTmpTable.NewAccessRight));
        #        }
        #        else if(!privilegeEntryPointsNode.AOTDrop(entryPointNode))
        #        {
        #            _privilegeNode.AOTrestore();
        #            throw error(strFmt("@SDT66",
        #                _SysSecEntryPointTmpTable.ObjectType, _SysSecEntryPointTmpTable.ObjectAOTName, _SysSecEntryPointTmpTable.ObjectAOTChildName));
        #        }
        #    }
        #
        #    //New set all the correct access levels
        #    tIterator = privilegeEntryPointsNode.AOTiterator();
        #    privilegeEntryPointNode = tIterator.next();
        #    while(privilegeEntryPointNode != null)
        #    {
        #        //Exclude service operation as we already set the access level property
        #        while select _SysSecEntryPointTmpTable where _SysSecEntryPointTmpTable.ObjectType != SecurableType::ServiceOperation
        #        {
        #            securableObjectType = strLwr(strFmt('%1', enum2symbol(enumnum(SecurableType), _SysSecEntryPointTmpTable.ObjectType)));
        #            if(_SysSecEntryPointTmpTable.ObjectType == SecurableType::WebManagedContentItem)
        #            {
        #                securableObjectType = 'WebManagedContent';
        #            }
        #
        #            if(strLwr(privilegeEntryPointNode.AOTgetProperty(#PropertyObjectType)) == securableObjectType &&
        #                strLwr(privilegeEntryPointNode.AOTgetProperty(#PropertyObjectName)) == strLwr(_SysSecEntryPointTmpTable.ObjectAOTName) &&
        #                strLwr(privilegeEntryPointNode.AOTgetProperty(#PropertyObjectChildName)) == strLwr(_SysSecEntryPointTmpTable.ObjectAOTChildName))
        #            {
        #                privilegeEntryPointNode.AOTsetProperty(#PropertyAccessLevel, SysSecEntryPointManager::AccessRight2AccessLevel(_SysSecEntryPointTmpTable.NewAccessRight));
        #                break;
        #            }
        #        }
        #
        #        privilegeEntryPointNode = tIterator.next();
        #    }
        #
        #    _privilegeNode.AOTsave();
        #
        #    skipFlush.clear();
        #    SecurityUtil::flushAll();
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #ObjectEditableVCS
        #public static boolean ObjectEditableVCS(TreeNode _node)
        #{
        #    DialogButton dialogButton;
        #
        #    if(versionControl && versionControl.parmSysVersionControlSystem())
        #    {
        #        if(!isDeveloper())
        #        {
        #            throw error(strFmt("@SDT67"));
        #        }
        #
        #        //Check if object is checked in
        #        if(!versionControl.allowEdit(_node))
        #        {
        #            //Abort if object cannot be checked out
        #            if(!versionControl.canCheckOut(_node))
        #            {
        #                error(strFmt("@SDT68"));
        #                return false;
        #            }
        #
        #            dialogButton = Box::yesNoOnce(strFmt("@SDT46"),
        #                                        strFmt("@SDT69",
        #                                                _node.treeNodePath()), DialogButton::Yes, 'SecEntryPointVCS');
        #
        #            if(dialogButton == dialogButton::Yes)
        #            {
        #                //Error is added by VCS if object cannot be checked out
        #                return versionControl.checkOut(_node);
        #            }
        #            else
        #            {
        #                return false;
        #            }
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #SkipDefaultFormRunHook
        #public static boolean SkipDefaultFormRunHook(boolean _newStatus =
        #    infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #SkipDefaultFormRunHookOnLoadFormKey))
        #{
        #    if(_newStatus && !infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #SkipDefaultFormRunHookOnLoadFormKey))
        #    {
        #        infolog.globalCache().set(curUserId() + #SecEntryPoint, #SkipDefaultFormRunHookOnLoadFormKey, #SkipDefaultFormRunHookOnLoadFormKey, false);
        #    }
        #
        #    if(!_newStatus && infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #SkipDefaultFormRunHookOnLoadFormKey))
        #    {
        #        infolog.globalCache().remove(curUserId() + #SecEntryPoint, #SkipDefaultFormRunHookOnLoadFormKey);
        #    }
        #
        #    return _newStatus;
        #}
      ENDSOURCE
      SOURCE #TreeNodeIsServiceOperation
        #public static boolean TreeNodeIsServiceOperation(TreeNode _node)
        #{
        #    return ((SysTreeNode::path2ApplObjectType(_node.treeNodePath()) == UtilElementType::Service &&
        #            _node.AOTparent() != null &&
        #            _node.AOTparent().AOTparent() != null &&
        #            _node.AOTparent().AOTparent() != null &&
        #            _node.AOTparent().AOTparent().AOTparent() != null &&
        #            _node.AOTparent().AOTparent().AOTparent().treeNodePath() == #ServicesPath));
        #}
      ENDSOURCE
      SOURCE #WorkSpaceWindowCreated
        #public static void WorkSpaceWindowCreated()
        #{
        #    TreeNode tNode;
        #    str treeNodePath;
        #
        #    if(infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey))
        #    {
        #        treeNodePath = infolog.globalCache().get(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey);
        #        infolog.globalCache().remove(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey);
        #    }
        #
        #    if(treeNodePath)
        #    {
        #        tNode = TreeNode::findNode(treeNodePath);
        #    }
        #
        #    if(tNode)
        #    {
        #        tNode.AOTrun();
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSecEntryPointManagerSetup unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSecEntryPointManagerSetup
    PROPERTIES
      Name                #SysSecEntryPointManagerSetup
      Origin              #{3794C691-C7AB-4B9B-875F-8B43AED7D64F}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysSecEntryPointManagerSetup
        #{
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    #AOT
        #    #Properties
        #    TreeNode mainMenuItemNode = TreeNode::findNode(#MenuItemsDisplayPath).AOTfindChild('SysSecRoleEntryPoint');
        #    TreeNode devMenuItemNode = TreeNode::findNode(#MenuItemsDisplayPath).AOTfindChild('SysSecRoleEntryPointDeveloper');
        #    TreeNode menuNode, node;
        #    TreeNode systemAdministrationNode = TreeNode::findNode(strFmt('%1\\%2', #MenusPath, 'SystemAdministration'));
        #    TreeNode sysContextMenuNode = TreeNode::findNode(strFmt('%1\\%2', #MenusPath, 'SysContextMenu'));
        #
        #    TreeNode findMenuItemNode(TreeNode _menuNode, str _menuItemType, str _menuItemName)
        #    {
        #        TreeNodeIterator tIterator = _menuNode.AOTiterator();
        #        TreeNode menuItemNode = tIterator.next();
        #
        #        while(menuItemNode != null)
        #        {
        #            if(findProperty(menuItemNode.AOTgetProperties(), #PropertyMenuItemType) == _menuItemType &&
        #                findProperty(menuItemNode.AOTgetProperties(), #PropertyMenuItemName) == _menuItemName)
        #            {
        #                return menuItemNode;
        #            }
        #
        #            menuItemNode = tIterator.next();
        #        }
        #        return null;
        #    }
        #
        #    if(systemAdministrationNode != null)
        #    {
        #        if(versionControl && versionControl.parmSysVersionControlSystem())
        #        {
        #            if(!versionControl.allowEdit(systemAdministrationNode))
        #            {
        #                error(strFmt("@SDT70", systemAdministrationNode.treeNodePath()));
        #            }
        #        }
        #
        #        menuNode = systemAdministrationNode.AOTfindChild('Setup');
        #        if(menuNode != null)
        #        {
        #            menuNode = menuNode.AOTfindChild('Security');
        #            if(menuNode != null)
        #            {
        #                node = findMenuItemNode(menuNode, 'Display', 'SysSecRoleEntryPoint');
        #
        #                if(node == null)
        #                {
        #                    menuNode.AOTDrop(mainMenuItemNode, findMenuItemNode(menuNode, 'Display', 'SysSecRolesEditTasks'));
        #                    systemAdministrationNode.AOTsave();
        #
        #                    node = findMenuItemNode(menuNode, 'Display', 'SysSecRoleEntryPoint');
        #                    if(node)
        #                    {
        #                        info(strFmt("@SDT71", node.AOTname(), menuNode.treeNodePath()));
        #                    }
        #                }
        #            }
        #        }
        #    }
        #
        #    if(sysContextMenuNode != null)
        #    {
        #        if(versionControl && versionControl.parmSysVersionControlSystem())
        #        {
        #            if(!versionControl.allowEdit(sysContextMenuNode))
        #            {
        #                error(strFmt("@SDT70", sysContextMenuNode.treeNodePath()));
        #            }
        #        }
        #
        #        menuNode = sysContextMenuNode.AOTfindChild('Security tools');
        #        if(menuNode)
        #        {
        #            node = findMenuItemNode(menuNode, 'Display', 'SysSecRoleEntryPointDeveloper');
        #            if(node == null)
        #            {
        #                menuNode.AOTDrop(devMenuItemNode);
        #                sysContextMenuNode.AOTsave();
        #
        #                node = findMenuItemNode(menuNode, 'Display', 'SysSecRoleEntryPointDeveloper');
        #                if(node)
        #                {
        #                    info(strFmt("@SDT71", node.AOTname(), menuNode.treeNodePath()));
        #                }
        #            }
        #        }
        #    }
        #    info(strFmt("@SDT72"));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSecurityRecorder_1CC4B7A84D53 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSecurityRecorder_1CC4B7A84D53
    PROPERTIES
      Name                #SysSecurityRecorder_1CC4B7A84D53
      Origin              #{FF92D482-771C-40FC-B321-8C43D6CE36FC}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #// Deleting this class will disable the entry point recorder feature in the security development tool. A client restart is required after deleting this class.
        #class SysSecurityRecorder_1CC4B7A84D53
        #{
        #}
      ENDSOURCE
      SOURCE #menuItemInvoked
        #public void menuItemInvoked(UtilElementType _elementType, securableName _menuItemName)
        #{
        #
        #    #SysTaskRecorderEntryPointManager
        #
        #    if(xSession::isCLRSession())
        #
        #    {
        #
        #        return;
        #
        #    }
        #
        #    if(appl.globalCache().isSet(curUserId() + #SecEntryPoint, #EntryPointRecorderKey))
        #
        #    {
        #
        #        SysTaskRecorderEntryPointManager::MarkEntryPointAsRecorded(_elementType, _menuItemName);
        #
        #    }
        #
        #    //mcl.b
        #
        #    // copied old code from ACC (before update) is restored
        #
        #    #SysSecEntryPointManager
        #
        #    if(xSession::isCLRSession())
        #
        #        return;
        #
        #    if(appl.globalCache().isSet(curUserId() + #SecEntryPoint, #EntryPointRecorderKey))
        #
        #    {
        #
        #        SysSecEntryPointManager::MarkEntryPointAsRecorded(_elementType, _menuItemName);
        #
        #    }
        #
        #    //mcl.e
        #
        #}
        #
      ENDSOURCE
      SOURCE #serverMethodCheck
        #public void serverMethodCheck(securableName className, securableChildName methodName)
        #{
        #    return;
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSetupForm unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSetupForm
    PROPERTIES
      Name                #SysSetupForm
      Extends             #Object
      RunOn               #Client
      Origin              #{2D0C19C2-0000-1000-B5DF-784D1D857570}
      LegacyId            #6594
    ENDPROPERTIES
    
    METHODS
      SOURCE #blockPersonalizationReEntry
        #/// <summary>
        #/// Blocks the user from re-entering the personalization form until they close and re-open the form
        #/// that is being personalized.
        #/// </summary>
        #private void blockPersonalizationReEntry()
        #{
        #    Object setupForm;
        #
        #    editFormRun.blockPersonalization(true);
        #
        #    setupForm = sysSetupformRun;
        #    setupForm.showWarningMessage();
        #}
      ENDSOURCE
      SOURCE #canAddToGrid
        #/// <summary>
        #/// Compare two masterObjectSets of formdatasources, if they are the same, return true; Otherwise, false;
        #/// </summary>
        #/// <param name="gridDataSource">
        #/// The data source of a form grid control
        #/// </param>
        #/// <param name="dragDataSource">
        #/// The data source of a bound field
        #/// </param>
        #/// <returns>
        #/// True if the two masterObjectSets of the formdatasources
        #/// </returns>
        #private boolean canAddToGrid(FormDataSource gridDataSource, FormDataSource dragDataSource)
        #{
        #    FormObjectSet gridObjectSet, dragObjectSet;
        #    ;
        #
        #    if(gridDataSource == null || dragDataSource == null)
        #    {
        #        return false;
        #    }
        #
        #    gridObjectSet = gridDataSource.masterObjectSet();
        #    dragObjectSet = dragDataSource.masterObjectSet();
        #    if(gridObjectSet.name() == dragObjectSet.name())
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysSetupForm extends Object
        #{
        #    #ResAppl
        #    #File
        #
        #    FormRun                     editFormRun;
        #    FormRun                     sysSetupFormRun;
        #    FormRun                     fieldFormRun;
        #
        #    FormTreeControl             formControlTree;
        #    FormTreeControl             fieldTree;
        #
        #    TmpSysTableField            tmpSysTableField;
        #
        #    UtilElements                utilElements;
        #
        #    boolean                     lockLayout;
        #
        #    ImageListAppl_Form          imageListAppl_Form;
        #    ImageListAppl_Query         imageListAppl_Query;
        #
        #    Map                         displayMethodsInFormMap;
        #
        #    Map                         tableOccurrenceMap;
        #    Map                         innerJoinedMap;
        #
        #    TreeNodeName                callerName;
        #    TreeNodePath                callerPath;
        #
        #    MenuItemName                menuItemName;
        #    TreeNodePath                menuItemPath;
        #
        #    TreeItemIdx                 dragItemIdx;
        #    TreeItemIdx                 lastParentItemIdx;
        #    TreeItemIdx                 lastItemIdx;
        #
        #    TreeItemIdx                 selectedTreeItemIdx;
        #
        #    #define.methodName('Name')
        #    #define.methodLabel('Label')
        #    #define.methodControlType('Type')
        #    #define.methodHelp('Help')
        #    #define.methodImage('Image')
        #}
        #
      ENDSOURCE
      SOURCE #dataSourceTableOccurrence
        #// AOSRunMode::client
        #private int dataSourceTableOccurrence(DataSourceNumber _dataSourceNumber)
        #{
        #    FormDataSource          formDataSource;
        #    Counter                 dataSourceCount;
        #    Map                     map;
        #    int                     i;
        #    int                     tableOccurrence;
        #
        #    if (!tableOccurrenceMap)
        #    {
        #        tableOccurrenceMap  = new Map(Types::Integer, Types::Integer);
        #        map                 = new Map(Types::Integer, Types::Integer);
        #        dataSourceCount     = editFormRun.dataSourceCount();
        #
        #        for (i = 1; i <= dataSourceCount; i++)
        #        {
        #            formDataSource = editFormRun.dataSource(i);
        #
        #            if (map.exists(formDataSource.table()))
        #            {
        #                tableOccurrence = map.lookup(formDataSource.table());
        #            }
        #            else
        #            {
        #                tableOccurrence = 0;
        #            }
        #            tableOccurrence++;
        #            map.insert(formDataSource.table(), tableOccurrence);
        #
        #            tableOccurrenceMap.insert(i, tableOccurrence);
        #        }
        #    }
        #
        #    if (tableOccurrenceMap.exists(_dataSourceNumber))
        #    {
        #        tableOccurrence = tableOccurrenceMap.lookup(_dataSourceNumber);
        #    }
        #
        #    return tableOccurrence;
        #}
      ENDSOURCE
      SOURCE #design
        #public FormDesign design()
        #{
        #    return editFormRun.design();
        #}
      ENDSOURCE
      SOURCE #designArrange
        #private void designArrange()
        #{
        #    editFormRun.resetSize();
        #    editFormRun.arrange();
        #}
      ENDSOURCE
      SOURCE #designCanAddDataField
        #public boolean designCanAddDataField(DataSourceNumber _dataSourceNumber, fieldId _fieldId)
        #{
        #    return editFormRun.design().canAddDataField(_dataSourceNumber , _fieldId);
        #}
      ENDSOURCE
      SOURCE #designCanContain
        #public boolean designCanContain(FormControl _formControl)
        #{
        #    return editFormRun.design().canContain(_formControl);
        #}
      ENDSOURCE
      SOURCE #designPackUserSetting
        #public container designPackUserSetting()
        #{
        #    return editFormRun.design().packUserSetting();
        #}
      ENDSOURCE
      SOURCE #designUnpackUserSetting
        #public boolean designUnpackUserSetting(container _pack)
        #{
        #    return editFormRun.design().unpackUserSetting(_pack);
        #}
      ENDSOURCE
      SOURCE #determineCallerName
        #public ClassName determineCallerName()
        #{
        #    #aot
        #    Object caller = editFormRun.args().caller();
        #
        #    SrsReportRunController      sdsSrsReportRunController;
        #
        #    if (caller)
        #    {
        #        switch (true)
        #        {
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(SysSetupFormRun)):
        #                callerName   = caller.name();
        #                callerPath   = #formsPath;
        #                break;
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(RunBase)):
        #                callerName   = classId2Name(classidget(caller.runBase()));
        #                callerPath   = #classesPath;
        #                break;
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(DialogRunbase)):
        #                switch (true)
        #                {
        #                    case SysDictClass::isEqualOrSuperclass(classidget(caller.runBase()), classnum(RunbaseReportStd)):
        #                        caller       = caller.runBase();
        #                        callerName   = caller.lastValueElementName();
        #                        callerPath   = #reportsPath;
        #                        break;
        #                    default:
        #                        callerName   = classId2Name(classidget(caller.runBase()));
        #                        callerPath   = #classesPath;
        #                        break;
        #                }
        #                break;
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(ReportRun)):
        #                callerName   = caller.name();
        #                callerPath   = #reportsPath;
        #                break;
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(QueryRun)):
        #                callerName   = caller.name();
        #                callerPath   = #queriesPath;
        #                break;
        #            // define caller for SysOperationDialog fix, trud -->
        #            case SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(SysOperationDialog)):
        #                caller       = caller.controller();
        #                if (SysDictClass::isEqualOrSuperclass(classidget(caller), classnum(SrsReportRunController)))
        #                {
        #                    sdsSrsReportRunController = caller;
        #                    callerName   = sdsSrsReportRunController.parmReportContract().parmRdpName();
        #                }
        #                else
        #                {
        #                    callerName   = classId2Name(classidget(caller));
        #                }
        #                callerPath   = #classesPath;
        #                break;
        #            // fix <--
        #
        #            default:
        #                callerName   = classId2Name(classidget(caller));
        #                callerPath   = #classesPath;
        #                break;
        #        }
        #
        #        if (callerName)
        #        {
        #            callerPath += #FilePathDelimiter + callerName;
        #        }
        #    }
        #
        #    return callerName;
        #}
      ENDSOURCE
      SOURCE #fieldFormRunClose
        #public void fieldFormRunClose()
        #{
        #    if (fieldFormRun)
        #    {
        #        fieldFormRun.closeCancel();
        #    }
        #}
      ENDSOURCE
      SOURCE #fieldFormRunSetFocus
        #public boolean fieldFormRunSetFocus()
        #{
        #    boolean ret;
        #
        #    if (fieldFormRun)
        #    {
        #        ret = true;
        #        fieldFormRun.setActive();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fieldTreeAddDataSource
        #private TreeItemIdx fieldTreeAddDataSource(DataSourceNumber _dataSourceNo, TreeItemIdx _parentItemIdx)
        #{
        #    FormDataSource  formDataSource;
        #    SysDictTable    sysDictTable;
        #    TreeItemIdx     treeItemIdx;
        #    str             tableOccurrenceText;
        #    LabelType       label;
        #
        #    formDataSource      = editFormRun.dataSource(_dataSourceNo);
        #
        #    sysDictTable        = new SysDictTable(formDataSource.table());
        #    tableOccurrenceText = SysQuery::tableOccurrenceText(this.dataSourceTableOccurrence(_dataSourceNo));
        #
        #    if (tableOccurrenceText)
        #    {
        #        label = strfmt('%1 %2', sysDictTable.getLabelOrName(), tableOccurrenceText);
        #    }
        #    else
        #    {
        #        label = sysDictTable.getLabelOrName();
        #    }
        #    treeItemIdx = SysFormTreeControl::addTreeItem(fieldTree, label, _parentItemIdx, _dataSourceNo, imageListAppl_Query.image(#ImageTable), true);
        #
        #    this.fieldTreeAddFields(treeItemIdx, sysDictTable);
        #
        #    return treeItemIdx;
        #}
        #
      ENDSOURCE
      SOURCE #fieldTreeAddFields
        #// AOSRunMode::client
        #private void fieldTreeAddFields(TreeItemIdx _parentItemIdx, SysDictTable _sysDictTable)
        #{
        #    FormDataSource      formDataSource;
        #    FormDataObject      formDataObject;
        #    DataSourceNumber    dataSourceNumber;
        #    SetIterator         setIterator;
        #    Struct              struct;
        #
        #    dataSourceNumber    = fieldTree.getItem(_parentItemIdx).data();
        #    formDataSource      = editFormRun.dataSource(dataSourceNumber);
        #    tmpSysTableField    = TmpSysTableField::findTableFields(tmpSysTableField, _sysDictTable.id(), formDataSource.query());
        #
        #    while select forupdate tmpSysTableField
        #        index LabelIdx
        #        where !tmpSysTableField.DataSourceNumber
        #           && tmpSysTableField.DictTableId == _sysDictTable.id()
        #    {
        #        tmpSysTableField.DataSourceNumber = dataSourceNumber;
        #        formDataObject                    = formDataSource.object(tmpSysTableField.FieldId);
        #
        #        if (formDataObject)
        #        {
        #            switch (formDataObject.allowAdd())
        #            {
        #                case FormAllowAdd::Restricted:
        #                //By default RecId isn't shown unless explicitly set to yes.
        #                if(tmpSysTableField.ExtendedFieldId == fieldId2Ext(fieldNum(Common, RecId), 1))
        #                {
        #                    break;
        #                }
        #                case FormAllowAdd::Yes:
        #                    SysFormTreeControl::addTreeItem(fieldTree, tmpSysTableField.FieldLabel, _parentItemIdx, tmpSysTableField.ExtendedFieldId, imageListAppl_Query.image(tmpSysTableField.ImageRes));
        #                    break;
        #            }
        #        }
        #        tmpSysTableField.update();
        #    }
        #
        #    // It is not possible to add display methods. at run time
        #    if (displayMethodsInFormMap.exists(formDataSource.id()) && false)
        #    {
        #        setIterator = new SetIterator(displayMethodsInFormMap.lookup(formDataSource.id()));
        #        setIterator.begin();
        #        while(setIterator.more())
        #        {
        #            struct = setIterator.value();
        #            SysFormTreeControl::addTreeItem(fieldTree,
        #                                            struct.value(#methodLabel),
        #                                            _parentItemIdx,
        #                                            struct,
        #                                            struct.value(#methodImage),
        #                                            false,
        #                                            0,
        #                                            SysFormTreeControl::findInsertAfterIdx(fieldTree, _parentItemIdx, struct.value(#methodLabel)));
        #            setIterator.next();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #fieldTreeBeginDrag
        #public boolean fieldTreeBeginDrag(int _x, int _y)
        #{
        #    boolean ret;
        #
        #    [dragItemIdx] = fieldTree.hitTest(_x, _y);
        #
        #    if (dragItemIdx &&
        #        fieldTree.getItem(dragItemIdx) &&
        #        !fieldTree.getItem(dragItemIdx).children())
        #    {
        #        ret = true;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fieldTreeBuild
        #public void fieldTreeBuild()
        #{
        #    DataSourceNumber    dataSourceNo;
        #    FormDataSource      formDataSource;
        #    TreeItemIdx         dropItemIdx;
        #    FormGridControl     formGridControl;
        #    Counter             dataSourceCount     = editFormRun.dataSourceCount();
        #
        #    fieldTree.deleteAll();
        #
        #    fieldTree.setImagelist(imageListAppl_Query.imageList());
        #    fieldTree.setStateImagelist(imageListAppl_Query.imageList());
        #
        #    dropItemIdx = formControlTree.getSelection();
        #    formGridControl = this.getNearestFormGridControl(dropItemIdx);
        #
        #    for (dataSourceNo = 1; dataSourceNo <= dataSourceCount; dataSourceNo++)
        #    {
        #        formDataSource = editFormRun.dataSource(dataSourceNo);
        #
        #        /* If the dropItem is a FormGridControl or it has FormGridControl ancestor,
        #           tables with LinkType of Delayed/Active/Passive should be restricted.
        #        */
        #        if(formGridControl != null && !this.canAddToGrid(formGridControl.dataSourceObject(), formDataSource))
        #        {
        #            continue;
        #        }
        #
        #        if (formDataSource.linkType() != FormLinkType::Passive)
        #        {
        #            this.fieldTreeAddDataSource(dataSourceNo, FormTreeAdd::Root);
        #        }
        #    }
        #
        #    if (dataSourceCount == 1)
        #    {
        #        SysFormTreeControl::expandTree(fieldTree, fieldTree.getRoot());
        #    }
        #}
      ENDSOURCE
      SOURCE #formContolCanContain
        #private boolean formContolCanContain(Object _dropControl, Object _dragControl)
        #{
        #    Object  childControl;
        #    boolean ret;
        #    Set     set;
        #    Counter controlCount;
        #    int     i;
        #
        #    if (!_dropControl)
        #    {
        #        _dropControl = editFormRun.design();
        #    }
        #
        #    if ((classidget(_dropControl) == classnum(FormDesign) || _dropControl.isContainer()) &&
        #        (classidget(_dropControl) != classnum(FormTabControl) ||
        #         classidget(_dragControl) == classnum(FormTabPageControl)))
        #    {
        #        // Grid accept groups, but only in one level (not a group in a group ...)
        #        ret          = true;
        #
        #        if (classidget(_dropControl) == classnum(FormGridControl))
        #        {
        #            if (innerJoinedMap.exists(_dropControl.dataSource()))
        #            {
        #                set = innerJoinedMap.lookup(_dropControl.dataSource());
        #            }
        #            else
        #            {
        #                set = new Set(Types::Integer);
        #            }
        #
        #            if (this.formControlIsDataBound(_dragControl) ||
        #                (classidget(_dragControl) == classnum(FormGroupControl) &&
        #                 _dragControl.dataSource() &&
        #                 _dragControl.dataGroup()))
        #            {
        #                ret = set.in(_dragControl.dataSource());
        #            }
        #            else
        #            {
        #                if (classidget(_dragControl) == classnum(FormGroupControl))
        #                {
        #                    controlCount = _dragControl.controlCount();
        #                    for (i=1; i < controlCount; i++)
        #                    {
        #                        childControl = _dragControl.controlNum(i);
        #
        #                        if (childControl.isContainer()  ||
        #                            !_dropControl.canContain(childControl))
        #                        {
        #                            ret = false;
        #                            break;
        #                        }
        #                        else
        #                        {
        #                            if (this.formControlIsDataBound(childControl))
        #                            {
        #                                if (!set.in(childControl.dataSource()))
        #                                {
        #                                    ret = false;
        #                                    break;
        #                                }
        #                            }
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #
        #        if (ret)
        #        {
        #            ret = _dropControl.canContain(_dragControl);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControl
        #public FormControl formControl(int _formControlId = 0)
        #{
        #    FormControl formControl;
        #
        #    if (_formControlId)
        #    {
        #        formControl = editFormRun.design().control(_formControlId);
        #    }
        #    else
        #    {
        #        formControl = editFormRun.selectedControl();
        #    }
        #    return formControl;
        #}
      ENDSOURCE
      SOURCE #formControlConfigurationKeys
        #public str formControlConfigurationKeys(FormControl _formControl)
        #{
        #    str                     ret;
        #    ListIterator            listIterator;
        #    DictConfigurationKey    dictConfigurationKey;
        #
        #    if (_formControl)
        #    {
        #        listIterator = new ListIterator(_formControl.configurationKeyEx());
        #        listIterator.begin();
        #        while (listIterator.more())
        #        {
        #            dictConfigurationKey = new DictConfigurationKey(listIterator.value());
        #            if (dictConfigurationKey)
        #            {
        #                if (ret)
        #                {
        #                    ret += ', ';
        #                }
        #                ret += dictConfigurationKey.label();
        #            }
        #            listIterator.next();
        #        }
        #    }
        #
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlHasUserAdjustment
        #private boolean formControlHasUserAdjustment(Object _formControl ,boolean _lookDeep = true)
        #{
        #    Object          childFormControl;
        #    Counter         controlCount;
        #    boolean         ret;
        #    int             i;
        #
        #    if (!classidget(_formControl) == classnum(FormDesign) &&
        #        _formControl.userOrgContainer())
        #    {
        #        ret = true;
        #    }
        #
        #    if (!ret)
        #    {
        #        if (_formControl.hasUserSetting())
        #        {
        #            ret = true;
        #        }
        #        else
        #        {
        #            if (_formControl.isContainer() &&
        #                _lookDeep)
        #            {
        #                controlCount = _formControl.controlCount();
        #                for (i=1; i <= controlCount; i++)
        #                {
        #                    childFormControl = _formControl.controlNum(i);
        #
        #                    if (this.formControlHasUserAdjustment(childFormControl, _lookDeep))
        #                    {
        #                        ret = true;
        #                        break;
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlIsDataBound
        #private boolean formControlIsDataBound(Object _formControl)
        #{
        #    FormControlType formControlType = SysFormRun::controlType(classidget(_formControl));
        #    boolean         ret;
        #
        #    if (formControlType == FormControlType::CheckBox ||
        #        formControlType == FormControlType::ComboBox ||
        #        formControlType == FormControlType::ListBox ||
        #        formControlType == FormControlType::RadioButton ||
        #        formControlType == FormControlType::String ||
        #        formControlType == FormControlType::StaticText ||
        #        formControlType == FormControlType::Date ||
        #        formControlType == FormControlType::Integer ||
        #        formControlType == FormControlType::Real ||
        #        formControlType == FormControlType::Time ||
        #        formControlType == FormControlType::Image ||
        #        formControlType == FormControlType::ReferenceGroup ||
        #        formControlType == FormControlType::SegmentedEntry)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlIsNameUsed
        #private boolean formControlIsNameUsed(TreeNodeName _treeNodeName, TreeItemIdx _treeItemIdx = formControlTree.getRoot())
        #{
        #    TreeItemIdx treeItemIdx = _treeItemIdx;
        #    FormControl formControl;
        #    boolean     ret;
        #
        #    while (treeItemIdx && !ret)
        #    {
        #        formControl = this.formControlTreeIdx2Control(treeItemIdx);
        #
        #        if (formControl &&
        #            formControl.name() == _treeNodeName)
        #        {
        #            ret = true;
        #            break;
        #        }
        #        else
        #        {
        #            if (formControlTree.getChild(treeItemIdx))
        #            {
        #                ret = this.formControlIsNameUsed(_treeNodeName, formControlTree.getChild(treeItemIdx));
        #            }
        #        }
        #        treeItemIdx = formControlTree.getNextSibling(treeItemIdx);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlLabel
        #public LabelType formControlLabel(FormControl _formControl, boolean _onlyLabel = false)
        #{
        #    LabelType labelText;
        #
        #    if (_formControl.labelText())
        #    {
        #        labelText = _formControl.labelText();
        #    }
        #    else
        #    {
        #        labelText = _formControl.name();
        #    }
        #
        #    if (!_onlyLabel &&
        #         _formControl.userPromptText())
        #    {
        #        labelText = strfmt('%1 (%2)', _formControl.userPromptText(), labelText);
        #    }
        #
        #    return labelText;
        #}
      ENDSOURCE
      SOURCE #formControlMove
        #private void formControlMove(TreeItemIdx _newItemIdx)
        #{
        #    FormControl     formControl;
        #    Object          parentControl;
        #    Object          inserAfterContol;
        #    Object          oldParentControl;
        #    int             formControlUserOrgContainer;
        #
        #    formControl  = this.formControlTreeIdx2Control(_newItemIdx);
        #
        #    if(!formControl)
        #        return;
        #
        #    // If control was already moved userOrgContainer is different from 0
        #    formControlUserOrgContainer = formControl.userOrgContainer();
        #
        #    if (formControl.containerId())
        #    {
        #        oldParentControl = editFormRun.design().control( formControl.containerId() );
        #        // Do not override a previous original container
        #        if (!formControlUserOrgContainer)
        #            formControlUserOrgContainer = formControl.containerId();
        #    }
        #    else
        #    {
        #        oldParentControl = editFormRun.design();
        #        // Do not override a previous original container
        #        if (!formControlUserOrgContainer)
        #            formControlUserOrgContainer = -1;
        #    }
        #
        #    if (formControlTree.getParent(_newItemIdx))
        #    {
        #        parentControl = this.formControlTreeIdx2Control(formControlTree.getParent(_newItemIdx));
        #    }
        #    else
        #    {
        #        parentControl = editFormRun.design();
        #    }
        #
        #
        #    if (formControlTree.getPrevSibling(_newItemIdx))
        #    {
        #        inserAfterContol = this.formControlTreeIdx2Control(formControlTree.getPrevSibling(_newItemIdx));
        #    }
        #
        #    parentControl.useUserLayout(true);  // useUserLayot should be called before moving controls around
        #    oldParentControl.useUserLayout(true);
        #
        #    if (inserAfterContol)
        #    {
        #         parentControl.moveControl(formControl.id(), inserAfterContol.id());
        #    }
        #    else
        #    {
        #         parentControl.moveControl(formControl.id());
        #    }
        #
        #    // now we need to set the orgContainer
        #    formControl.userOrgContainer(formControlUserOrgContainer);
        #    this.designArrange();
        #
        #    this.blockPersonalizationReEntry();
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeAddControl
        #private TreeItemIdx formControlTreeAddControl(Object _formControl, TreeItemIdx _parentIdx, int _siblingIdx = 0, boolean _userAdd = false)
        #{
        #    ImageRes        imageRes;
        #    TreeItemIdx     treeItemIdx;
        #    TreeItemIdx     insertAfterItemIdx  = _siblingIdx;
        #    ImageRes        stateImage;
        #    LabelType       labelText;
        #    FormTreeItem    formTreeItem;
        #
        #    if (!insertAfterItemIdx)
        #    {
        #        if (_parentIdx && _userAdd)
        #        {
        #            insertAfterItemIdx = FormTreeAdd::First;
        #        }
        #        else
        #        {
        #            insertAfterItemIdx = FormTreeAdd::Last;
        #        }
        #    }
        #
        #    if (_userAdd ||
        #        _formControl.markAsUserAdd())
        #    {
        #        imageRes    = imageListAppl_Form.image(#ImageExpandAll);
        #    }
        #    else
        #    {
        #        imageRes    = imageListAppl_Form.formControlType2Image(SysFormRun::controlType(classidget(_formControl)));
        #    }
        #
        #    // 'labelText' is retrieved from AOT metadata
        #    labelText   = this.formControlLabel(_formControl);
        #
        #    //BP deviation documented
        #    formTreeItem = new FormTreeItem(labelText, imageRes, _formControl.isContainer(), _formControl.id());
        #
        #    if (this.formControlHasUserAdjustment(_formControl, false ))
        #    {
        #        formTreeItem.stateBold(true);
        #    }
        #
        #    treeItemIdx = formControlTree.addItem(_parentIdx, insertAfterItemIdx, formTreeItem);
        #    stateImage  = this.formControlTreeStateImage(_formControl);
        #
        #    this.formControlTreeSetStateImage(treeItemIdx, stateImage);
        #
        #    if (_userAdd &&
        #        _parentIdx)
        #    {
        #        this.formControlTreeSetStateImage(_parentIdx, stateImage);
        #    }
        #
        #
        #    return treeItemIdx;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowDrop
        #public boolean formControlTreeAllowDrop(TreeItemIdx _dragItemIdx, TreeItemIdx _dropItemIdx, boolean _doNotCheckParent = false)
        #{
        #    FormTreeItem    dropItem,
        #                    dragItem;
        #    Object          dropControl,
        #                    dragControl;
        #    boolean         ret;
        #    FormGridControl formGridControl;
        #
        #    dropItem = formControlTree.getItem(_dropItemIdx);
        #    dragItem = formControlTree.getItem(_dragItemIdx);
        #
        #    if (dropItem)
        #    {
        #        dropControl = this.formControlTreeIdx2Control(dropItem.idx());
        #    }
        #
        #    if (dragItem)
        #    {
        #        dragControl = this.formControlTreeIdx2Control(dragItem.idx());
        #    }
        #
        #    //Check if dropControl is a container type such as FormGroupControl in a FormGridControl.
        #    //If it is, check if the dragControl can add into the FormGridControl.
        #    if(dropControl && dragControl)
        #    {
        #        formGridControl = this.getNearestFormGridControl(_dropItemIdx);
        #        if(formGridControl != null)
        #        {
        #            if(!this.canAddToGrid(formGridControl.dataSourceObject(), dragControl.dataSourceObject()))
        #            {
        #                return false;
        #            }
        #        }
        #    }
        #
        #    if (this.formControlTreeAllowUserSetup(_dropItemIdx) == FormAllowUserSetup::Yes)
        #    {
        #        if (dropControl)
        #        {
        #            if (dropControl.isContainer())
        #            {
        #                if (classidget(dropControl) != classnum(FormReferenceGroupControl))
        #                {
        #                    ret = this.formContolCanContain(dropControl, dragControl);
        #                }
        #            }
        #            else
        #            {
        #                if (formControlTree.getParent(_dropItemIdx) &&
        #                    !_doNotCheckParent)
        #                {
        #                    ret = this.formControlTreeAllowDrop(_dragItemIdx, formControlTree.getParent(_dropItemIdx));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            ret = this.designCanContain(dragControl);
        #        }
        #    }
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeAllowLeft
        #public boolean formControlTreeAllowLeft(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         prevItemIdx;
        #    TreeItemIdx         parentItemIdx;
        #    boolean             ret;
        #
        #    if (!lockLayout &&
        #        this.formControlTreeAllowMove(_treeItemIdx))
        #    {
        #        parentItemIdx   = formControlTree.getParent(_treeItemIdx);
        #        if (parentItemIdx)
        #        {
        #            prevItemIdx     = parentItemIdx;
        #            parentItemIdx   = formControlTree.getParent(parentItemIdx);
        #
        #            if (this.formControlTreeAllowDrop(_treeItemIdx, parentItemIdx, true))
        #            {
        #                ret = true;
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowMove
        #public boolean formControlTreeAllowMove(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         parentItemIdx;
        #    boolean             ret;
        #
        #    if (!lockLayout)
        #    {
        #        parentItemIdx = formControlTree.getParent(_treeItemIdx);
        #
        #        if (this.formControlTreeAllowUserMove(parentItemIdx) == FormAllowUserSetup::Yes && !this.formControlTreeNeverAllowUserMove(_treeItemIdx))
        #        {
        #            ret = true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowRemove
        #public boolean formControlTreeAllowRemove(TreeItemIdx _treeItemIdx = 0)
        #{
        #    FormControl     formControl = this.formControlTreeIdx2Control(_treeItemIdx);
        #    boolean         ret;
        #
        #    if (formControl)
        #    {
        #        ret =  formControl.markAsUserAdd();
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowRight
        #public boolean formControlTreeAllowRight(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         parentItemIdx;
        #    boolean             ret;
        #
        #    if (!lockLayout &&
        #        this.formControlTreeAllowMove(_treeItemIdx))
        #    {
        #        parentItemIdx   = formControlTree.getPrevSibling(_treeItemIdx);
        #        if (parentItemIdx &&
        #            this.formControlTreeAllowDrop(_treeItemIdx, parentItemIdx, true))
        #        {
        #            ret = true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowUserMove
        #public FormAllowUserSetup formControlTreeAllowUserMove(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         treeItemIdx = _treeItemIdx;
        #    Object              formControl;
        #    FormAllowUserSetup  formAllowUserSetup = FormAllowUserSetup::Yes;
        #
        #    if (treeItemIdx)
        #    {
        #        formControl = this.formControlTreeIdx2Control(treeItemIdx);
        #    }
        #    else
        #    {
        #        formControl = editFormRun.design();
        #    }
        #
        #    if (formControl)
        #    {
        #        switch (true)
        #        {
        #            case formControl.isUserSetupEnabled(FormAllowUserSetup::Yes):
        #                formAllowUserSetup = FormAllowUserSetup::Yes;
        #                break;
        #            case formControl.isUserSetupEnabled(FormAllowUserSetup::Restricted):
        #                formAllowUserSetup = FormAllowUserSetup::Restricted;
        #                break;
        #            default:
        #                formAllowUserSetup = FormAllowUserSetup::No;
        #                break;
        #        }
        #    }
        #    return formAllowUserSetup;
        #}
      ENDSOURCE
      SOURCE #formControlTreeAllowUserSetup
        #public FormAllowUserSetup formControlTreeAllowUserSetup(TreeItemIdx _treeItemIdx)
        #{
        #    TreeItemIdx         treeItemIdx = _treeItemIdx;
        #    Object              formControl;
        #    FormAllowUserSetup  formAllowUserSetup = FormAllowUserSetup::Yes;
        #
        #    if (treeItemIdx)
        #    {
        #        formControl = this.formControlTreeIdx2Control(treeItemIdx);
        #    }
        #    else
        #    {
        #        formControl = editFormRun.design();
        #    }
        #
        #    if (formControl)
        #    {
        #        if (!this.formControlTreeTabWithChangeOverRides(formControl))
        #        {
        #            switch (true)
        #            {
        #                case formControl.isUserSetupEnabled(FormAllowUserSetup::Yes):
        #                    formAllowUserSetup = FormAllowUserSetup::Yes;
        #                    break;
        #                case formControl.isUserSetupEnabled(FormAllowUserSetup::Restricted):
        #                    formAllowUserSetup = FormAllowUserSetup::Restricted;
        #                    break;
        #                default:
        #                    formAllowUserSetup = FormAllowUserSetup::No;
        #                    break;
        #            }
        #        }
        #        else
        #        {
        #            return FormAllowUserSetup::No;
        #        }
        #    }
        #    return formAllowUserSetup;
        #}
      ENDSOURCE
      SOURCE #formControlTreeBeginDrag
        #public boolean formControlTreeBeginDrag()
        #{
        #    boolean ret;
        #
        #    if (this.formControlTreeAllowMove(dragItemIdx))
        #    {
        #        ret = true;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeBuild
        #private void formControlTreeBuild(int _formControlId = 0,TreeItemIdx _parentIdx = 0)
        #{
        #    Counter         controlCount;
        #    int             i;
        #    TreeItemIdx     treeItemIdx;
        #    boolean         hasChildrenUserAdjust;
        #    Object          formControl;
        #    Object          formGroupControl;
        #    Set             set;
        #    Struct          struct;
        #
        #    if (_formControlId)
        #    {
        #        formGroupControl = editFormRun.design().control(_formControlId);
        #    }
        #    else
        #    {
        #        formGroupControl = editFormRun.design();
        #    }
        #
        #    controlCount            = formGroupControl.controlCount();
        #    hasChildrenUserAdjust   = false;
        #
        #    for (i = 1; i <= controlCount; i++)
        #    {
        #        formControl = formGroupControl.controlNum(i);
        #
        #        if (formControl.allowSysSetup())
        #        {
        #            if (this.formControlIsDataBound(formControl))
        #            {
        #                if (formControl.dataSource())
        #                {
        #                    if (!formControl.dataField() && formControl.dataMethod())
        #                    {
        #                        if (!displayMethodsInFormMap.exists(formControl.dataSource()))
        #                        {
        #                            displayMethodsInFormMap.insert(formControl.dataSource(), new Set(Types::Class));
        #                        }
        #
        #                        set = displayMethodsInFormMap.lookup(formControl.dataSource());
        #
        #                        struct = new Struct(Types::String,  #methodName,
        #                                            Types::Enum,    #methodControlType,
        #                                            Types::String,  #methodLabel,
        #                                            Types::String,  #methodHelp,
        #                                            Types::Integer, #methodImage);
        #
        #                        struct.value(#methodName,        formControl.dataMethod());
        #                        struct.value(#methodControlType, SysFormRun::controlType(classidget(formControl)));
        #                        struct.value(#methodHelp,        formControl.helpText());
        #                        struct.value(#methodImage,       imageListAppl_Query.image(#ImageField));
        #
        #                        if (formControl.handle() != classnum(FormStaticTextControl))
        #                        {
        #                            //struct.value(#methodLabel, formControl.label());
        #                            // Start
        #                            struct.value(#methodLabel, formControl.labeltext());
        #                            // Stop
        #                        }
        #
        #                        set.add(struct);
        #                    }
        #                }
        #            }
        #
        #            treeItemIdx = this.formControlTreeAddControl(formControl, _parentIdx);
        #            if (formControl.isContainer())
        #            {
        #                this.formControlTreeBuild(formControl.id(), treeItemIdx);
        #            }
        #            if (this.formControlHasUserAdjustment(formControl, false ))
        #            {
        #                hasChildrenUserAdjust = true;
        #            }
        #
        #            if (editFormRun && editFormRun.selectedControl() && formControl.id() == editFormRun.selectedControl().id())
        #            {
        #                selectedTreeItemIdx = treeItemIdx;
        #            }
        #        }
        #    }
        #
        #    if (hasChildrenUserAdjust)
        #    {
        #        this.formControlTreeUpdateStatus(_parentIdx, true);
        #    }
        #    formControlTree.select(formControlTree.getRoot());
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeControl2Idx
        #public int formControlTreeControl2Idx(int _formControlId, TreeItemIdx _treeItemIdx = formControlTree.getRoot())
        #{
        #    TreeItemIdx     treeItemIdx = _treeItemIdx;
        #    TreeItemIdx     foundItemIdx;
        #    FormTreeItem    formTreeItem;
        #    FormControl     formControl;
        #
        #    while (treeItemIdx &&
        #           !foundItemIdx)
        #    {
        #        formTreeItem    =  formControlTree.getItem(treeItemIdx);
        #
        #        if (formTreeItem)
        #        {
        #            formControl     =  this.formControlTreeIdx2Control(treeItemIdx);
        #            if (_formControlId == formControl.id())
        #            {
        #                foundItemIdx =  treeItemIdx;
        #            }
        #            else
        #            {
        #                if (formTreeItem.children() &&
        #                    formControlTree.getChild(treeItemIdx))
        #                {
        #                    foundItemIdx = this.formControlTreeControl2Idx(_formControlId ,formControlTree.getChild(treeItemIdx));
        #                }
        #            }
        #        }
        #        treeItemIdx = formControlTree.getNextSibling(treeItemIdx);
        #    }
        #
        #    return foundItemIdx;
        #}
      ENDSOURCE
      SOURCE #formControlTreeDragOver
        #public FormDrag formControlTreeDragOver(FormTreeControl _dragSource, int _x, int _y)
        #{
        #    TreeItemIdx treeItemIdx;
        #    TreeItemIdx parentItemIdx;
        #    FormDrag    formDrag        = FormDrag::None;
        #
        #    [treeItemIdx] = formControlTree.hitTest(_x,_y);
        #
        #    if (treeItemIdx &&
        #        !this.formControlTreeNeverAllowUserMove(dragItemIdx) &&
        #        !this.formControlTreeNeverAllowUserAdd(treeItemIdx))
        #    {
        #        if (_dragSource.equal(formControlTree))
        #        {
        #            if (treeItemIdx == dragItemIdx ||
        #                SysFormTreeControl::isParent(_dragSource, treeItemIdx, dragItemIdx))
        #            {
        #                formDrag = FormDrag::None;
        #            }
        #            else
        #            {
        #                if (this.formControlTreeAllowDrop(dragItemIdx, treeItemIdx))
        #                {
        #                    this.formControlTreeDragOverHilite(treeItemIdx);
        #                    formDrag = FormDrag::Move;
        #                }
        #                else
        #                {
        #                    parentItemIdx = formControlTree.getParent(treeItemIdx);
        #                    if (this.formControlTreeAllowDrop(dragItemIdx, parentItemIdx))
        #                    {
        #                        this.formControlTreeDragOverHilite(parentItemIdx, treeItemIdx);
        #                        formDrag = FormDrag::Move;
        #                    }
        #                }
        #            }
        #        }
        #        else
        #        {
        #            if (_dragSource.equal(fieldTree))
        #            {
        #                if (this.formControlTreeUserAllowAdd(treeItemIdx, dragItemIdx))
        #                {
        #                    this.formControlTreeDragOverHilite(treeItemIdx);
        #                    formDrag = FormDrag::Copy;
        #                }
        #                else
        #                {
        #                    parentItemIdx = formControlTree.getParent(treeItemIdx);
        #                    if (this.formControlTreeUserAllowAdd(parentItemIdx, dragItemIdx))
        #                    {
        #                        this.formControlTreeDragOverHilite(parentItemIdx, treeItemIdx);
        #                        formDrag = FormDrag::Copy;
        #                    }
        #                }
        #            }
        #        }
        #    }
        #
        #    if (formDrag == FormDrag::None)
        #    {
        #        this.formControlTreeDragOverHilite();
        #    }
        #
        #    return formDrag;
        #}
      ENDSOURCE
      SOURCE #formControlTreeDragOverHilite
        #public void formControlTreeDragOverHilite(TreeItemIdx _parentItemIdx = 0, TreeItemIdx _treeItemIdx = 0)
        #{
        #    if (_treeItemIdx)
        #    {
        #        lastItemIdx = _treeItemIdx;
        #    }
        #    else
        #    {
        #        lastItemIdx = _parentItemIdx;
        #    }
        #
        #    if (lastItemIdx)
        #    {
        #        formControlTree.setInsertMark(lastItemIdx, true);
        #    }
        #    else
        #    {
        #        if (lastParentItemIdx)
        #        {
        #            formControlTree.setInsertMark(formControlTree.getChild(lastParentItemIdx), false);
        #        }
        #        else
        #        {
        #            formControlTree.setInsertMark(0, false);
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeDrop
        #public void formControlTreeDrop(FormTreeControl _dragSource, TreeItemIdx _dropItemIdx)
        #{
        #    FormTreeItem    formTreeItem;
        #    TreeItemIdx     parentItemIdx;
        #    TreeItemIdx     inserAfterIdx;
        #    boolean         allowDrop;
        #
        #    if (_dropItemIdx &&
        #        !this.formControlTreeNeverAllowUserMove(dragItemIdx) &&
        #        !this.formControlTreeNeverAllowUserAdd(_dropItemIdx))
        #    {
        #        formTreeItem = formControlTree.getItem(_dropItemIdx);
        #
        #        if (formTreeItem)
        #        {
        #            if (_dragSource.equal(formControlTree))
        #            {
        #                if (this.formContolCanContain(this.formControlTreeIdx2Control(_dropItemIdx),
        #                                              this.formControlTreeIdx2Control(dragItemIdx)) &&
        #                    (formTreeItem.stateExpanded() ||
        #                     !formControlTree.getChild(_dropItemIdx)) ||
        #                     !this.formContolCanContain(this.formControlTreeIdx2Control(formControlTree.getParent(_dropItemIdx)),
        #                                                this.formControlTreeIdx2Control(dragItemIdx)))
        #                {
        #                    parentItemIdx = _dropItemIdx;
        #                    inserAfterIdx = FormTreeAdd::First;
        #                }
        #                else
        #                {
        #                    parentItemIdx = formControlTree.getParent(_dropItemIdx);
        #                    inserAfterIdx = _dropItemIdx;
        #                }
        #
        #                if (parentItemIdx != dragItemIdx &&
        #                    !SysFormTreeControl::isParent(_dragSource, parentItemIdx, dragItemIdx))
        #                {
        #                    allowDrop = this.formControlTreeAllowDrop(dragItemIdx, parentItemIdx);
        #                    if (!allowDrop)
        #                    {
        #                        inserAfterIdx = parentItemIdx;
        #                        parentItemIdx = formControlTree.getParent(parentItemIdx);
        #                        allowDrop     = this.formControlTreeAllowDrop(dragItemIdx, parentItemIdx);
        #                    }
        #
        #                    if (allowDrop)
        #                    {
        #                        this.formControlTreeMove(parentItemIdx, dragItemIdx, inserAfterIdx);
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                if (_dragSource.equal(fieldTree))
        #                {
        #                    if (this.formControlTreeUserAllowAdd(parentItemIdx, dragItemIdx))
        #                    {
        #                        this.formControlTreeUserAdd(dragItemIdx, parentItemIdx, inserAfterIdx);
        #                    }
        #                    else
        #                    {
        #                        inserAfterIdx = parentItemIdx;
        #                        parentItemIdx = formControlTree.getParent(parentItemIdx);
        #                        if (this.formControlTreeUserAllowAdd(parentItemIdx, dragItemIdx))
        #                        {
        #                            this.formControlTreeUserAdd(dragItemIdx, parentItemIdx, inserAfterIdx);
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    this.formControlTreeDragOverHilite();
        #}
      ENDSOURCE
      SOURCE #formControlTreeExpand
        #private void formControlTreeExpand()
        #{
        #    if (!selectedTreeItemIdx)
        #        return;
        #
        #    formControlTree.select(selectedTreeItemIdx);
        #    SysFormTreeControl::expandTree(formControlTree, selectedTreeItemIdx, 1);
        #}
      ENDSOURCE
      SOURCE #formControlTreeIdx2Control
        #public FormControl formControlTreeIdx2Control(TreeItemIdx _treeItemIdx)
        #{
        #    FormControl     formControl;
        #    FormTreeItem    formTreeItem;
        #
        #    formTreeItem = formControlTree.getItem(_treeItemIdx);
        #
        #    if (formTreeItem &&
        #        formTreeItem.data())
        #    {
        #        formControl = editFormRun.design().control(formTreeItem.data());
        #    }
        #
        #    return formControl;
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeMouseDown
        #public void formControlTreeMouseDown(int _x, int _y, int _button)
        #{
        #    if (_button == 1)
        #    {
        #        [dragItemIdx] = formControlTree.hitTest(_x, _y);
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeMove
        #private void formControlTreeMove(TreeItemIdx _parentItemIdx, TreeItemIdx _treeItemIdx, TreeItemIdx _insertAfterItemIdx)
        #{
        #    TreeItemIdx treeItemIdx;
        #    Set         set;
        #    SetIterator setIterator;
        #    int         formControlId;
        #    FormControl fcontrol;
        #    Set         itemIdxSet = new Set(Types::Integer);
        #
        #    formControlId   = this.formControlTreeIdx2Control(_treeItemIdx).id();
        #
        #    itemIdxSet.add(_treeItemIdx);
        #    set             = SysFormTreeControl::moveTreeItem(formControlTree,  itemIdxSet, formControlTree, _parentItemIdx, _insertAfterItemIdx);
        #
        #
        #    setIterator     = new SetIterator(set);
        #
        #    setIterator.begin();
        #    while (setIterator.more())
        #    {
        #        treeItemIdx = setIterator.value();
        #
        #        fcontrol = this.formControlTreeIdx2Control(treeItemIdx);
        #        if (fcontrol && fcontrol.id() == formControlId)
        #        {
        #            break;
        #        }
        #        setIterator.next();
        #    }
        #    formControlTree.select(treeItemIdx);
        #    this.formControlMove(treeItemIdx);
        #}
      ENDSOURCE
      SOURCE #formControlTreeMoveLeft
        #public void formControlTreeMoveLeft()
        #{
        #    TreeItemIdx treeItemIdx     = formControlTree.getSelection();
        #    TreeItemIdx prevItemIdx;
        #    TreeItemIdx parentItemIdx;
        #
        #    if (!lockLayout)
        #    {
        #        parentItemIdx   = formControlTree.getParent(treeItemIdx);
        #        if (parentItemIdx)
        #        {
        #            prevItemIdx     = parentItemIdx;
        #            parentItemIdx   = formControlTree.getParent(parentItemIdx);
        #
        #            if (this.formControlTreeAllowDrop(treeItemIdx, parentItemIdx))
        #            {
        #                this.formControlTreeMove(parentItemIdx, treeItemIdx, prevItemIdx);
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeMoveRight
        #public void formControlTreeMoveRight()
        #{
        #    TreeItemIdx treeItemIdx     = formControlTree.getSelection();
        #    TreeItemIdx parentItemIdx;
        #
        #    if (!lockLayout)
        #    {
        #        parentItemIdx   = formControlTree.getPrevSibling(treeItemIdx);
        #        if (this.formControlTreeAllowDrop(treeItemIdx, parentItemIdx))
        #        {
        #            this.formControlTreeMove(parentItemIdx, treeItemIdx, FormTreeAdd::Last);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeMoveVertical
        #public void formControlTreeMoveVertical(boolean _upDown)
        #{
        #    TreeItemIdx     selectionIdx           = formControlTree.getSelection();
        #
        #    if (selectionIdx)
        #    {
        #        SysFormTreeControl::moveVertical(formControlTree, _upDown);
        #        selectionIdx = formControlTree.getSelection();
        #        this.formControlMove(selectionIdx);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeNeverAllowUserAdd
        #/// <summary>
        #/// Determines whether the user cannot add a control to the control that is represented by the
        #/// specified tree index.
        #/// </summary>
        #/// <param name="_controlIdx">
        #/// The tree index of the control.
        #/// </param>
        #/// <returns>
        #/// true if the user can never add a control to the control; otherwise, false.
        #/// </returns>
        #public boolean formControlTreeNeverAllowUserAdd(TreeItemIdx _controlIdx)
        #{
        #    FormControl     dropControl, dropControlParent;
        #    boolean         neverAllowAdd = false;
        #
        #    dropControl = this.formControlTreeIdx2Control(_controlIdx);
        #
        #    if (dropControl)
        #    {
        #        if ((classidget(dropControl) == classnum(FormReferenceGroupControl)) ||
        #            (classidget(dropControl) == classnum(FormActionPaneControl)))
        #        {
        #            neverAllowAdd = true;
        #        }
        #        else
        #        {
        #            dropControlParent = dropControl.parentControl();
        #            if (dropControlParent &&
        #                    ((classidget(dropControlParent) == classnum(FormReferenceGroupControl)) ||
        #                     (classidget(dropControlParent) == classnum(FormActionPaneControl))))
        #            {
        #                neverAllowAdd = true;
        #            }
        #        }
        #    }
        #
        #    return neverAllowAdd;
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeNeverAllowUserMove
        #/// <summary>
        #/// Determines whether the user cannot move the control that is represented by the specified tree index.
        #/// </summary>
        #/// <param name="_controlIdx">
        #/// The tree index of the control.
        #/// </param>
        #/// <returns>
        #/// true if the user can never move the control; otherwise, false.
        #/// </returns>
        #public boolean formControlTreeNeverAllowUserMove(TreeItemIdx _controlIdx)
        #{
        #    FormControl     dropControl, dropControlParent;
        #    boolean         neverAllowAdd = false;
        #
        #    dropControl = this.formControlTreeIdx2Control(_controlIdx);
        #
        #    if (dropControl)
        #    {
        #        dropControlParent = dropControl.parentControl();
        #        if (dropControlParent && classidget(dropControlParent) == classnum(FormReferenceGroupControl))
        #        {
        #            neverAllowAdd = true;
        #        }
        #    }
        #
        #    return neverAllowAdd;
        #}
      ENDSOURCE
      SOURCE #formControlTreeSetStateImage
        #private boolean formControlTreeSetStateImage(TreeItemIdx _treeItemIdx, ImageRes _stateImage)
        #{
        #    FormTreeItem formTreeItem;
        #    boolean      ret;
        #
        #    if (_stateImage)
        #    {
        #        ret = true;
        #    }
        #    formTreeItem = formControlTree.getItem(_treeItemIdx);
        #    formTreeItem.overlayImage(_stateImage);
        #    formControlTree.setItem(formTreeItem);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formControlTreeStateImage
        #private ImageRes formControlTreeStateImage(Object _formControl)
        #{
        #    TreeItemIdx treeItemIdx;
        #    ImageRes    imageRes;
        #
        #    treeItemIdx = this.formControlTreeControl2Idx(_formControl.id());
        #
        #    switch (this.formControlTreeAllowUserSetup(treeItemIdx))
        #    {
        #        case FormAllowUserSetup::No:
        #            imageRes = #ImageOverlayRedLock;
        #            break;
        #        case FormAllowUserSetup::Restricted:
        #            imageRes = #ImageOverlayYellowLock;
        #            break;
        #        default:
        #            break;
        #    }
        #
        #    if (imageRes)
        #    {
        #        imageRes = imageListAppl_Form.image(imageRes);
        #    }
        #
        #    return imageRes;
        #}
      ENDSOURCE
      SOURCE #formControlTreeTabWithChangeOverRides
        #public boolean formControlTreeTabWithChangeOverRides(formControl _control)
        #{
        #
        #    if (classidget(_control) == classnum(FormTabControl))
        #    {
        #        return this.formTabControlHasChangeOverrides(_control);
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #formControlTreeUpdateStatus
        #public void formControlTreeUpdateStatus(TreeItemIdx _treeItemIdx = formControlTree.getRoot(), boolean _forceAdjustStatus = false)
        #{
        #    boolean         hasAdjustments;
        #    FormTreeItem    formTreeItem    = formControlTree.getItem(_treeItemIdx);
        #    Object          formControl     = this.formControlTreeIdx2Control(_treeItemIdx);
        #    TreeItemIdx     parentIdx;
        #    LabelType       labelText;
        #
        #    if (formTreeItem &&
        #        formControl)
        #    {
        #        hasAdjustments = (_forceAdjustStatus ||
        #                          this.formControlHasUserAdjustment(formControl));
        #
        #        // 'labelText' is retrieved from AOT metadata
        #        labelText      = this.formControlLabel(formControl);
        #
        #        formTreeItem.stateBold(hasAdjustments);
        #
        #        //BP deviation documented
        #        formTreeItem.text(labelText);
        #
        #        formControlTree.setItem(formTreeItem);
        #    }
        #
        #    parentIdx = formControlTree.getParent(_treeItemIdx);
        #    if (parentIdx)
        #    {
        #        this.formControlTreeUpdateStatus(parentIdx, (_forceAdjustStatus || hasAdjustments));
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeUserAdd
        #public FormControl formControlTreeUserAdd(TreeItemIdx _dragItemIdx, TreeItemIdx _parentItemIdx = formControlTree.getSelection(), TreeItemIdx _insertAfterItemIdx = 0)
        #{
        #    Object          newControl,
        #                    insertAfterControl;
        #    FormTreeItem    dragItem;
        #    FormDataSource  formDataSource;
        #    Object          parentControl;
        #    fieldId         fieldId;
        #    TreeItemIdx     insertAfterItemIdx  = _insertAfterItemIdx;
        #    TreeItemIdx     parentItemIdx       = _parentItemIdx;
        #    TreeNodeName    treeNodeName;
        #    Struct          struct;
        #    int             i;
        #
        #    if (!this.formControlTreeUserAllowAdd(parentItemIdx, _dragItemIdx) &&
        #        parentItemIdx)
        #    {
        #        insertAfterItemIdx  = parentItemIdx;
        #        parentItemIdx       = formControlTree.getParent(insertAfterItemIdx);
        #    }
        #
        #    if (this.formControlTreeUserAllowAdd(parentItemIdx, _dragItemIdx))
        #    {
        #        if (formControlTree.getItem(parentItemIdx))
        #        {
        #            parentControl = this.formControlTreeIdx2Control(parentItemIdx);
        #
        #            if (parentControl &&
        #                !parentControl.isContainer())
        #            {
        #                insertAfterItemIdx  = parentItemIdx;
        #                parentItemIdx       = formControlTree.getParent(insertAfterItemIdx);
        #                parentControl       = this.formControlTreeIdx2Control(parentItemIdx);
        #            }
        #        }
        #
        #        if (!parentControl)
        #        {
        #            parentControl = this.design();
        #        }
        #
        #        if (parentControl)
        #        {
        #            parentControl.useUserLayout(true);
        #
        #            if (insertAfterItemIdx)
        #            {
        #                insertAfterControl = this.formControlTreeIdx2Control(insertAfterItemIdx);
        #            }
        #            dragItem        = fieldTree.getItem(_dragItemIdx);
        #
        #            formDataSource  = editFormRun.dataSource(fieldTree.getItem(fieldTree.getParent(_dragItemIdx)).data());
        #
        #            if (typeof(dragItem.data()) == Types::Integer)
        #            {
        #                fieldId         = dragItem.data();
        #                newControl      = parentControl.addDataField(formDataSource.id(), fieldId, insertAfterControl);
        #            }
        #            else
        #            {
        #                if (typeof(dragItem.data()) == Types::Class)
        #                {
        #                    struct          = dragItem.data();
        #                    i               = 0;
        #                    do
        #                    {
        #                        i++;
        #                        treeNodeName    = strfmt('%1_%2_%3', curuserid(), i, struct.value(#methodName));
        #                    }
        #                    while(this.formControlIsNameUsed(treeNodeName));
        #
        #                    newControl = parentControl.addControl(struct.value(#methodControlType), treeNodeName, insertAfterControl);
        #                    newControl.dataSource(formDataSource.id());
        #                    newControl.dataMethod(struct.value(#methodName));
        #                    newControl.label(struct.value(#methodLabel));
        #                    newControl.helpText(struct.value(#methodHelp));
        #                }
        #            }
        #
        #            if (newControl)
        #            {
        #                newControl.markAsUserAdd(true);
        #                this.formControlTreeAddControl(newControl, parentItemIdx, insertAfterItemIdx, true);
        #                formControlTree.expand(parentItemIdx, FormTreeExpand::Expand);
        #
        #                this.blockPersonalizationReEntry();
        #            }
        #        }
        #    }
        #
        #    this.formControlTreeDragOverHilite();
        #
        #    return newControl;
        #}
      ENDSOURCE
      SOURCE #formControlTreeUserAllowAdd
        #private boolean formControlTreeUserAllowAdd(TreeItemIdx _dropItemIdx, TreeItemIdx _dragItemIdx)
        #{
        #    FormTreeItem    dropItem,dragItem;
        #    Object          dropControl;
        #    fieldId         fieldId;
        #    FormDataSource  formDataSource;
        #    FormGridControl formGridControl;
        #    boolean         ret;
        #
        #    dropItem = formControlTree.getItem(_dropItemIdx);
        #    dragItem = fieldTree.getItem(_dragItemIdx);
        #
        #    if (dragItem &&
        #        !dragItem.children() &&
        #        !this.formControlTreeNeverAllowUserAdd(_dropItemIdx) &&
        #        !this.formControlTreeNeverAllowUserMove(_dragItemIdx) &&
        #        this.formControlTreeAllowUserSetup(_dropItemIdx) == FormAllowUserSetup::Yes)
        #    {
        #        switch (typeof(dragItem.data()))
        #        {
        #            case Types::Integer:
        #                fieldId         = dragItem.data();
        #                formDataSource  = editFormRun.dataSource(fieldTree.getItem(fieldTree.getParent(_dragItemIdx)).data());
        #                if (dropItem)
        #                {
        #                    dropControl = this.formControlTreeIdx2Control(dropItem.idx());
        #                }
        #
        #                if (dropControl)
        #                {
        #                    if (dropControl.isContainer())
        #                    {
        #                        if (dropControl.canAddDataField(formDataSource.id(), fieldId) &&
        #                           classidget(dropControl) != classnum(FormReferenceGroupControl))
        #                        {
        #                            ret = true;
        #                        }
        #                        else
        #                        {
        #                            ret = false;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    if (this.designCanAddDataField(formDataSource.id(), fieldId))
        #                    {
        #                        ret = true;
        #                    }
        #                    else
        #                    {
        #                        ret = false;
        #                    }
        #                }
        #                break;
        #            case Types::Class:
        #                formDataSource  = editFormRun.dataSource(fieldTree.getItem(fieldTree.getParent(_dragItemIdx)).data());
        #                if (dropItem)
        #                {
        #                    dropControl = this.formControlTreeIdx2Control(dropItem.idx());
        #                }
        #
        #                if (dropControl)
        #                {
        #                    if (dropControl.isContainer() &&
        #                        classidget(dropControl) != classnum(FormTabControl) &&
        #                        classidget(dropControl) != classnum(FormReferenceGroupControl))
        #                    {
        #                        ret = true;
        #                    }
        #                }
        #                else
        #                {
        #                    ret = true;
        #                }
        #                break;
        #        }
        #    }
        #
        #    if(ret == true)
        #    {
        #
        #        if(dropControl == null)
        #        {
        #            dropControl = this.formControlTreeIdx2Control(_dropItemIdx);
        #        }
        #        formDataSource = editFormRun.dataSource(fieldTree.getItem(fieldTree.getParent(_dragItemIdx)).data());
        #
        #        // If the drop control is a formgrid, we need check if the drag and drop control have the same data source
        #        formGridControl = dropControl as FormGridControl;
        #        if(formGridControl != null)
        #        {
        #            if(!this.canAddToGrid(formGridControl.dataSourceObject(), formDataSource))
        #            {
        #                ret = false;
        #            }
        #        }
        #
        #        //When add a field to a form, we always need check whether the field is in a group by query
        #        if(!this.isDragFieldInGroupBy(formDataSource, fieldId))
        #        {
        #            ret = false;
        #        }
        #    }
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #formControlTreeUserRemove
        #public void formControlTreeUserRemove(TreeItemIdx _treeItemIdx = 0)
        #{
        #    TreeItemIdx     treeItemIdx     = _treeItemIdx;
        #    TreeItemIdx     parentItemIdx;
        #    FormTreeItem    formTreeItem;
        #    Object          formControl;
        #
        #    if (!treeItemIdx)
        #    {
        #        treeItemIdx = formControlTree.getSelection();
        #    }
        #
        #    if (treeItemIdx)
        #    {
        #        formTreeItem = formControlTree.getItem(treeItemIdx);
        #
        #        if (formTreeItem)
        #        {
        #            formControl = this.formControlTreeIdx2Control(formTreeItem.idx());
        #            if (formControl)
        #            {
        #                editFormRun.design().removeControl(formControl.id());
        #                editFormRun.arrange();
        #
        #                parentItemIdx = formControlTree.getParent(formTreeItem.idx());
        #                formControlTree.delete(formTreeItem.idx());
        #
        #                formControl = this.formControlTreeIdx2Control(parentItemIdx);
        #                this.formControlTreeUpdateStatus(parentItemIdx);
        #
        #                this.blockPersonalizationReEntry();
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #formControlTreeVisible
        #public void formControlTreeVisible(boolean _visible)
        #{
        #    FormControl formControl;
        #    TreeItemIdx treeItemIdx = formControlTree.getSelection();
        #
        #    if (treeItemIdx)
        #    {
        #        formControl = this.formControlTreeIdx2Control(treeItemIdx);
        #
        #        editFormRun.resetSize();
        #        formControl.userHide(_visible);
        #
        #        this.formControlTreeUpdateStatus(treeItemIdx);
        #    }
        #}
      ENDSOURCE
      SOURCE #formTabControlHasChangeOverrides
        #private boolean formTabControlHasChangeOverrides(FormTabControl _control)
        #{
        #    if (classidget(_control) == classnum(FormTabControl))
        #    {
        #
        #        if (_control.hasControlPositionOverride())
        #        {
        #            return true;
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #getCallerName
        #public ClassName getCallerName()
        #{
        #    return callerName;
        #}
      ENDSOURCE
      SOURCE #getCallerPath
        #public TreeNodePath getCallerPath()
        #{
        #    return callerPath;
        #}
      ENDSOURCE
      SOURCE #getElementCreatedBy
        #public userId getElementCreatedBy()
        #{
        #    userId userId;
        #    if (utilElements)
        #    {
        #        userId = utilElements.CreatedBy;
        #    }
        #    return userId;
        #}
      ENDSOURCE
      SOURCE #getElementCreatedDateTime
        #public UTCDateTime getElementCreatedDateTime()
        #{
        #    UTCDateTime createdDateTime;
        #    if (utilElements)
        #    {
        #        createdDateTime = utilElements.CreatedDateTime;
        #    }
        #    return createdDateTime;
        #}
      ENDSOURCE
      SOURCE #getElementModifiedBy
        #public userId getElementModifiedBy()
        #{
        #    userId userId;
        #    if (utilElements)
        #    {
        #        userId = utilElements.ModifiedBy;
        #    }
        #    return userId;
        #}
      ENDSOURCE
      SOURCE #getElementModifiedDateTime
        #public UTCDateTime getElementModifiedDateTime()
        #{
        #    UTCDateTime modifiedDateTime;
        #    if (utilElements)
        #    {
        #        modifiedDateTime = utilElements.ModifiedDateTime;
        #    }
        #    return modifiedDateTime;
        #}
      ENDSOURCE
      SOURCE #getFormName
        #public FormName getFormName()
        #{
        #    return editFormRun.name();
        #}
      ENDSOURCE
      SOURCE #getFormRun
        #public FormRun getFormRun()
        #{
        #    return editFormRun;
        #}
      ENDSOURCE
      SOURCE #getMenuItemName
        #public MenuItemName getMenuItemName()
        #{
        #    return menuItemName;
        #}
      ENDSOURCE
      SOURCE #getMenuItemPath
        #public TreeNodePath getMenuItemPath()
        #{
        #    return menuItemPath;
        #}
      ENDSOURCE
      SOURCE #getNearestFormGridControl
        #/// <summary>
        #/// This function is to get the nearest FormGridControl of a drop item.
        #/// It is used when a item is added or dragged into a FormControl container.
        #/// </summary>
        #/// <param name="_dropItemIdx">
        #/// Index of drop item
        #/// </param>
        #/// <returns>
        #/// If the dropItem is a FormGridControl, return the FormGridControl.
        #/// Or if it has a FormGridControl ancestor, return the FormGridControl ancestor,  otherwise return null.
        #/// </returns>
        #
        #private FormGridControl getNearestFormGridControl(TreeItemIdx _dropItemIdx)
        #{
        #    Object              dropControl         = this.formControlTreeIdx2Control(_dropItemIdx);
        #    FormGridControl     formGridControl     = dropControl as FormGridControl;
        #    TreeItemIdx         itemIdx             = _dropItemIdx;
        #    ;
        #
        #    while(formGridControl == null)
        #    {
        #        itemIdx = formControlTree.getParent(itemIdx);
        #        dropControl = this.formControlTreeIdx2Control(itemIdx);
        #
        #        if(dropControl)
        #        {
        #            formGridControl = dropControl as FormGridControl;
        #        }
        #        else
        #        {
        #            //did not find FormGridControl ancestor
        #            return null;
        #        }
        #    }
        #    return formGridControl;
        #}
      ENDSOURCE
      SOURCE #init
        #public void init()
        #{
        #    #aot
        #
        #    Object          caller          = editFormRun.args().caller();
        #
        #    this.innerJoinedMapBuild();
        #
        #    select utilElements where
        #        utilElements.RecordType == UtilElementType::Form &&
        #        utilElements.Name       == editFormRun.name();
        #
        #    formControlTree.setImagelist(imageListAppl_Form.imageList());
        #
        #    this.DetermineCallerName();
        #
        #    menuItemName    = editFormRun.args().menuItemName();
        #
        #    if (menuItemName)
        #    {
        #        menuItemPath = #MenuItemsPath + #FilePathDelimiter + enum2str(editFormRun.args().menuItemType()) + #AOTDelimiter + menuItemName;
        #    }
        #
        #    formControlTree.deleteAll();
        #    this.formControlTreeBuild();
        #    this.formControlTreeExpand();
        #}
        #
      ENDSOURCE
      SOURCE #innerJoinedMapBuild
        #private void innerJoinedMapBuild()
        #{
        #    FormDataSource      formDataSource;
        #    DataSourceNumber    dataSourceNo;
        #    Counter             dataSourceCount     = editFormRun.dataSourceCount();
        #    Set                 set;
        #
        #    innerJoinedMap = new Map(Types::Integer, Types::Class);
        #
        #    for (dataSourceNo = 1; dataSourceNo <= dataSourceCount; dataSourceNo++)
        #    {
        #        formDataSource = editFormRun.dataSource(dataSourceNo);
        #
        #        if (!innerJoinedMap.exists(formDataSource.id()))
        #        {
        #            set =  new Set(Types::Integer);
        #            set.add(formDataSource.id());
        #
        #            innerJoinedMap.insert(formDataSource.id(), set);
        #        }
        #        set = innerJoinedMap.lookup(formDataSource.id());
        #
        #        if (formDataSource.joinSource() &&
        #            formDataSource.linkType() == FormLinkType::InnerJoin)
        #        {
        #            set.add(formDataSource.joinSource());
        #
        #            if (!innerJoinedMap.exists(formDataSource.joinSource()))
        #            {
        #                set =  new Set(Types::Integer);
        #                set.add(formDataSource.id());
        #
        #                innerJoinedMap.insert(formDataSource.joinSource(), set);
        #            }
        #            set = innerJoinedMap.lookup(formDataSource.joinSource());
        #            set.add(formDataSource.id());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #isDragFieldInGroupBy
        #/// <summary>
        #/// Determine whether the field is in a group by query data source
        #/// </summary>
        #/// <param name="dragDataSource">
        #/// The data source that needs do check
        #/// </param>
        #/// <param name="dragExtendFieldId">
        #/// The extend id of the field that needs do check
        #/// </param>
        #/// <returns>
        #/// True if the query data source doesn't contain group by or the field is in the group by list;
        #/// False if the field is not in the group by list
        #/// </returns>
        #private boolean isDragFieldInGroupBy(FormDataSource dragDataSource, FieldId dragExtendFieldId)
        #{
        #    Query query;
        #    int groupByFieldCount;
        #    int groupByFieldIndex;
        #    QueryGroupByField queryGroupByField;
        #    QueryBuildFieldList qbfl;
        #    int fieldIndex;
        #    SelectionField selectionField;
        #    ;
        #
        #    if(dragDataSource == null)
        #    {
        #        return false;
        #    }
        #
        #    query = dragDataSource.query();
        #    if(query ==null)
        #    {
        #        return false;
        #    }
        #
        #    groupByFieldCount = query.groupByFieldCount();
        #    if(groupByFieldCount == 0)
        #    {
        #        return true;
        #    }
        #
        #    for(groupByFieldIndex = 1; groupByFieldIndex <= groupByFieldCount; groupByFieldIndex++)
        #    {
        #        queryGroupByField = query.groupByField(groupByFieldIndex);
        #        if(queryGroupByField.dataSource().table() == dragDataSource.table())
        #        {
        #            // Check if the field is in group by field list
        #            if(queryGroupByField.fieldID() == fieldExt2Id(dragExtendFieldId))
        #            {
        #                return true;
        #            }
        #
        #            // check if the field is in aggregate field list
        #            qbfl = query.dataSourceTable(dragDataSource.table()).fields();
        #            for(fieldIndex = 1; fieldIndex <= qbfl.fieldCount(); fieldIndex++)
        #            {
        #                selectionField = qbfl.fieldKind(fieldIndex);
        #                if(qbfl.field(fieldIndex) == fieldExt2Id(dragExtendFieldId)
        #                && (selectionField == SelectionField::Avg || selectionField == SelectionField::Max
        #                   || selectionField == SelectionField::Min|| selectionField == SelectionField::Sum || selectionField == SelectionField::Count)
        #                  )
        #                {
        #                    return true;
        #                }
        #            }
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(FormRun _editFormRun, FormRun _sysSetupformRun)
        #{
        #    super();
        #
        #    editFormRun = _editformRun;
        #    sysSetupformRun = _sysSetupformRun;
        #
        #    displayMethodsInFormMap     = new Map(Types::Integer, Types::Class);
        #
        #    imageListAppl_Form          = new ImageListAppl_Form();
        #    imageListAppl_Query         = new ImageListAppl_Query();
        #}
      ENDSOURCE
      SOURCE #parmFieldForm
        #public void parmFieldForm(FormRun _formRun)
        #{
        #    fieldFormRun = _formRun;
        #}
      ENDSOURCE
      SOURCE #parmFieldTree
        #public void parmFieldTree(FormTreeControl _formTreeControl)
        #{
        #    fieldTree = _formTreeControl;
        #}
      ENDSOURCE
      SOURCE #parmFormControlTree
        #public void parmFormControlTree(FormTreeControl _formTreeControl)
        #{
        #    formControlTree = _formTreeControl;
        #}
      ENDSOURCE
      SOURCE #parmLockLayout
        #public void parmLockLayout(boolean _lockLayout)
        #{
        #    lockLayout = _lockLayout;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysTreeNode unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysTreeNode
    PROPERTIES
      Name                #SysTreeNode
      Extends             #SysVersionControllableBase
      Origin              #{2D0B0423-0000-1000-08FA-71D18165654E}
      LegacyId            #1059
    ENDPROPERTIES
    
    METHODS
      SOURCE #allowCheckIn
        #public boolean allowCheckIn(SysVersionControlSettings _settings)
        #{
        #    SysCompilationResultProvider compilerOutput;
        #    SysVersionControlUserInterfaceProvider uiProvider;
        #    TmpCompilerOutput   tmpCompilerOutput;
        #    Args                args;
        #    SysBPParameters     bpParameters;
        #    boolean             ret = !SysTreeNode::isUnwanted(treeNode);
        #    SysSourceNameWash   sysSourceNameWash;
        #    TreeNodeTraverser   traverser;
        #    TreeNode            child;
        #    int                 line;
        #
        #    if (_settings.parmRunTitleCaseUpdate())
        #    {
        #        line = infologLine();
        #        sysSourceNameWash = new SysSourceNameWash();
        #
        #        traverser = new TreeNodeTraverser(treeNode);
        #        while (traverser.next())
        #        {
        #            child = traverser.currentNode();
        #
        #            if (SysTreeNode::hasSource(child) &&
        #                !SysTreeNode::isSourceText(child))
        #            {
        #                sysSourceNameWash.replaceNode(child);
        #            }
        #        }
        #        treeNode.AOTsave();
        #        infolog.clear(line);
        #    }
        #
        #    compilerOutput = infolog.compilerOutput() as SysCompilationResultProvider;
        #
        #    if (compilerOutput)
        #    {
        #        uiProvider = versioncontrol.parmUserInterfaceProvider();
        #
        #        if (_settings.parmGateCompileErrors() != SysVersionControlGateSetting::Accept ||
        #            _settings.parmGateCompileWarnings() != SysVersionControlGateSetting::Accept ||
        #            _settings.parmGateCompileToDos() != SysVersionControlGateSetting::Accept)
        #        {
        #            SysCompilerOutput::setCompilerTarget(SysCompilerTarget::CompilerDialog);
        #            xUserInfo::compilerWarningLevel(CompilerWarningLevel::Level4);
        #            SysCompilerOutput::updateParm();
        #
        #            treeNode.AOTcompile();
        #
        #            if (_settings.parmGateCompileErrors() != SysVersionControlGateSetting::Accept &&
        #                compilerOutput.errorCount())
        #            {
        #                tmpCompilerOutput = compilerOutput.compilerOutput();
        #
        #                select firstonly tmpCompilerOutput
        #                    where tmpCompilerOutput.TreeNodePath like SysCompilerOutput::buildLikePath(treeNode.treeNodePath())
        #                       && tmpCompilerOutput.SysCompilerSeverity == SysCompilerSeverity::Error
        #                       && tmpCompilerOutput.SysCompilerOutputTab == SysCompilerOutputTab::Error;
        #
        #                if (tmpCompilerOutput)
        #                {
        #                    if (_settings.parmGateCompileErrors() == SysVersionControlGateSetting::Prompt)
        #                    {
        #                        warning(strFmt("@SYS86011",treeNode.treeNodePath()));
        #                    }
        #                    else
        #                    {
        #                        ret = checkFailed(strFmt("@SYS86011",treeNode.treeNodePath()));
        #                    }
        #                }
        #            }
        #            if (_settings.parmGateCompileWarnings() != SysVersionControlGateSetting::Accept &&
        #                compilerOutput.warningCount())
        #            {
        #                tmpCompilerOutput = compilerOutput.compilerOutput();
        #
        #                select firstonly tmpCompilerOutput
        #                    where tmpCompilerOutput.TreeNodePath like SysCompilerOutput::buildLikePath(treeNode.treeNodePath())
        #                       && (tmpCompilerOutput.SysCompilerSeverity == SysCompilerSeverity::WarningLevel1
        #                        || tmpCompilerOutput.SysCompilerSeverity == SysCompilerSeverity::WarningLevel2
        #                        || tmpCompilerOutput.SysCompilerSeverity == SysCompilerSeverity::WarningLevel3)
        #                       && tmpCompilerOutput.SysCompilerOutputTab == SysCompilerOutputTab::Error;
        #
        #                if (tmpCompilerOutput)
        #                {
        #                    if (_settings.parmGateCompileWarnings() == SysVersionControlGateSetting::Prompt)
        #                    {
        #                        warning(strFmt("@SYS86012",treeNode.treeNodePath()));
        #                    }
        #                    else
        #                    {
        #                        ret = checkFailed(strFmt("@SYS86012",treeNode.treeNodePath()));
        #                    }
        #                }
        #            }
        #            if (_settings.parmGateCompileToDos() != SysVersionControlGateSetting::Accept &&
        #                compilerOutput.toDoCount())
        #            {
        #                tmpCompilerOutput = compilerOutput.compilerOutput();
        #
        #                select firstonly tmpCompilerOutput
        #                    where tmpCompilerOutput.TreeNodePath like SysCompilerOutput::buildLikePath(treeNode.treeNodePath())
        #                       && tmpCompilerOutput.SysCompilerOutputTab == SysCompilerOutputTab::ToDo;
        #
        #                if (tmpCompilerOutput)
        #                {
        #                    if (_settings.parmGateCompileToDos() == SysVersionControlGateSetting::Prompt)
        #                    {
        #                        warning(strFmt("@SYS86013",treeNode.treeNodePath()));
        #                    }
        #                    else
        #                    {
        #                        ret = checkFailed(strFmt("@SYS86013",treeNode.treeNodePath()));
        #                    }
        #                }
        #            }
        #        }
        #
        #        if (_settings.parmGateBestPracticeErrors() != SysVersionControlGateSetting::Accept)
        #        {
        #            bpParameters.initValue();
        #            bpParameters.WarningLevel = SysBPWarningLevel::Error;
        #
        #            args = new Args();
        #            args.object(treeNode);
        #            args.record(bpParameters);
        #
        #            SysBPCheck::main(args);
        #
        #            if (compilerOutput.bestPracticesCount())
        #            {
        #                tmpCompilerOutput = compilerOutput.compilerOutput();
        #
        #                select firstonly tmpCompilerOutput
        #                    where tmpCompilerOutput.TreeNodePath like SysCompilerOutput::buildLikePath(treeNode.treeNodePath())
        #                       && tmpCompilerOutput.SysCompilerOutputTab == SysCompilerOutputTab::BestPractices;
        #
        #                if (tmpCompilerOutput)
        #                {
        #                    if (_settings.parmGateBestPracticeErrors() == SysVersionControlGateSetting::Prompt)
        #                    {
        #                        warning(strFmt("@SYS86014",treeNode.treeNodePath()));
        #                    }
        #                    else
        #                    {
        #                        ret = checkFailed(strFmt("@SYS86014",treeNode.treeNodePath()));
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    else
        #    {
        #        throw error(strFmt("@SYS111250", this.name()));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControlSettings _settings)
        #{
        #    //
        #    // Allow create is always allowed, even for unwanted objects.
        #    // SysTreenode::isUnwanted(treenode)
        #    //
        #    // This is because of the vcs state machine. If allowCreate returns
        #    // false it means the object is already created.
        #    //
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowLockDuringCheckIn
        #public boolean allowLockDuringCheckIn(SysVersionControlSettings _settings)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowMultipleCheckout
        #public boolean allowMultipleCheckout(SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #aotGetPropertiesExt
        #public Struct aotGetPropertiesExt()
        #{
        #    return this.parmTreeNode().AOTgetPropertiesExt();
        #}
      ENDSOURCE
      SOURCE #canCreate
        #/// <summary>
        #/// Checks whether an item can be created in the source control.
        #/// </summary>
        #/// <returns>
        #/// true if item can be created in the source control; otherwise, false.
        #/// </returns>
        #public boolean canCreate()
        #{
        #    UtilEntryLevel currentLayer = Global::currentAOLayer();
        #    if (SysTreeNode::isUnwanted(this.parmTreeNode()))
        #    {
        #        error(strFmt("@SYS85681", this.parmTreeNode().treeNodePath()));
        #        return false;
        #    }
        #
        #    if (!SysTreeNode::existsInLayer(this.parmTreeNode(), currentLayer))   // check if sub-elements' layer is in layer mask
        #    {
        #        error(strFmt("@SYS127511", this.parmTreeNode().treeNodePath(), currentLayer));
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canMergeDeleteSubnodes
        #public boolean canMergeDeleteSubnodes(SysComparable _top, SysCompareContextProvider _context)
        #{
        #    TreeNode topTreenode;
        #    SysTreeNode top = _top as SysTreeNode;
        #    TreeNode firstChild;
        #    #TreeNodeSysNodeType
        #    topTreenode = top.parmTreeNode();
        #
        #    if (topTreenode &&
        #        topTreenode.treeNodeType().isRootElement() &&
        #        topTreenode.treeNodeType().isUtilElement())
        #    {
        #        if (this.isListOfChildrenFixed())
        #        {
        #            return false;
        #        }
        #
        #        // Visual Studio Projects and SSRS Report not supported
        #        if (topTreenode is VSProjectNode || topTreenode is SSRSReportConceptNode)
        #        {
        #            return false;
        #        }
        #
        #        //
        #        // Methods can always be deleted
        #        //
        #        firstChild = treeNode.AOTfirstChildEx(true);
        #        if (firstChild && SysTreeNode::hasSource(firstChild))
        #        {
        #            return true;
        #        }
        #
        #        //
        #        // Only types containing children are listed below
        #        //
        #        switch (topTreenode.utilElement().RecordType)
        #        {
        #            case UtilElementType::ExtendedType:
        #            case UtilElementType::DataSet:
        #            case UtilElementType::Enum:
        #            case UtilElementType::Form:
        #            case UtilElementType::Menu:
        #            case UtilElementType::Perspective:
        #            case UtilElementType::Query:
        #            case UtilElementType::Class:
        #            case UtilElementType::Report:
        #            case UtilElementType::ReportTemplate:
        #            case UtilElementType::ReportSectionTemplate:
        #            case UtilElementType::Service:
        #            case UtilElementType::Table:
        #            case UtilElementType::TableCollection:
        #            case UtilElementType::TableMap:
        #//            case UtilElementType::ViewQuery: Not supported
        #            case UtilElementType::WebForm:
        #//            case UtilElementType::WebModule: Not supported
        #            case UtilElementType::WebMenu:
        #            case UtilElementType::WebControl:
        #//            case UtilElementType::WorkflowTemplate: Not supported
        #//            case UtilElementType::WorkflowTask: Not supported
        #//            case UtilElementType::WorkflowCategory: Not supported
        #//            case UtilElementType::WorkflowApproval: Not supported
        #
        #            // Security Nodes
        #            case UtilElementType::SecCodePermission:
        #            case UtilElementType::SecDuty:
        #            case UtilElementType::SecPrivilege:
        #            case UtilElementType::SecProcessCycle:
        #            case UtilElementType::SecRole:
        #                return true;
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canMergeInsertSubnodes
        #public boolean canMergeInsertSubnodes(SysComparable _top, SysCompareContextProvider _context)
        #{
        #    SysTreeNode top = _top as SysTreeNode;
        #    TreeNode topTreenode;
        #    TreeNode firstchild;
        #    int     type;
        #
        #    topTreenode = top.parmTreeNode();
        #
        #       // return true;
        #
        #    if (topTreenode &&
        #        topTreenode.treeNodeType().isRootElement() &&
        #        topTreenode.treeNodeType().isUtilElement())
        #    {
        #        if (this.isListOfChildrenFixed())
        #        {
        #            return false;
        #        }
        #        //trud -->
        #        type = treeNode.treeNodeType().id();
        #        if ((type == 167 || type == 213) ||
        #            topTreenode.utilElement().RecordType == UtilElementType::Enum ||
        #            type == 411)
        #        {
        #            return true;
        #        }
        #        //trud <--
        #
        #        // Visual Studio Projects and SSRS report nodes not supported
        #        if (topTreenode is VSProjectNode || topTreenode is SSRSReportConceptNode)
        #        {
        #            return false;
        #        }
        #
        #        //
        #        // Methods can always be inserted
        #        //
        #        firstchild = treeNode.AOTfirstChildEx(true);
        #        if (firstchild && SysTreeNode::hasSource(firstchild))
        #        {
        #            return true;
        #        }
        #
        #        //
        #        // Only types containing children are listed below
        #        //
        #        switch (topTreenode.utilElement().RecordType)
        #        {
        #//            case UtilElementType::ExtendedType:           //Drop not available in extended data types
        #            case UtilElementType::DataSet:
        #//            case UtilElementType::Enum:                   //Drop in enums only supported for drag and drop on the same parent
        #            case UtilElementType::Form:
        #            case UtilElementType::Menu:
        #            case UtilElementType::Perspective:
        #            case UtilElementType::Query:
        #            case UtilElementType::Class:
        #            case UtilElementType::Report:
        #            case UtilElementType::ReportTemplate:
        #            case UtilElementType::ReportSectionTemplate:
        #            case UtilElementType::Service: //Not supported
        #//            case UtilElementType::Table:                  //Drop not available in tables
        #            case UtilElementType::TableCollection:
        #            case UtilElementType::TableMap:
        #//            case UtilElementType::ViewQuery: Not supported
        #            case UtilElementType::WebForm:
        #//            case UtilElementType::WebModule: Not supported
        #//            case UtilElementType::WebMenu: Not supported
        #//            case UtilElementType::WebControl: Not supported
        #//            case UtilElementType::WorkflowTemplate: Not supported
        #//            case UtilElementType::WorkflowTask: Not supported
        #//            case UtilElementType::WorkflowCategory: Not supported
        #//            case UtilElementType::WorkflowApproval: Not supported
        #
        #            // Security Nodes
        #            case UtilElementType::SecCodePermission:
        #            case UtilElementType::SecDuty:
        #            case UtilElementType::SecPrivilege:
        #            case UtilElementType::SecProcessCycle:
        #            case UtilElementType::SecRole:
        #                return true;
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #cit_dropNode
        #boolean cit_dropNode(TreeNode _parentNodeInAot, TreeNode _source, TreeNode _after = null)
        #{
        #    #Properties
        ##define.NT_DBDELETEACTIONLIST( 167)
        ##define.NT_DBDELETEACTION( 213)
        #    TreeNode            newTreeNode;
        #    boolean             ret = true;
        #    int                 type = _parentNodeInAot.treeNodeType().id();
        #    MemberFunction      memberFunction;
        #    str                 elementName;
        #    //MenuItem            menuItem, menuItemNew;
        #    //TreeNodePath        tmpPath;
        #    ;
        #    if (//type == #NT_FORMFIELDLAYOUT ||
        #    type == 411 )
        #    {
        #        return _parentNodeInAot.AOTDrop(_source, _after);
        #    }
        #    if (type == #NT_DBDELETEACTIONLIST || type == #NT_DBDELETEACTION )
        #    {
        #        this.cit_dropNode2DeleteAction(_parentNodeInAot, _source, _after);
        #        ret = true;
        #    }
        #    else
        #    {
        #        if (type == 209)
        #        {
        #            elementName = _source.treeNodeName();
        #            _parentNodeInAot.AOTadd(elementName);
        #
        #            if (! newTreeNode)
        #            {
        #                newTreeNode = _parentNodeInAot.AOTfindChild(elementName);
        #            }
        #
        #            if (newTreeNode)
        #            {
        #                newTreeNode.AOTsetProperties(_source.AOTgetProperties());
        #                if (SysTreeNode::hasSource(newTreeNode))
        #                {
        #                    memberFunction = _source;
        #                    newTreeNode.AOTsetSource(_source.AOTgetSource(), memberFunction.isStatic());
        #                }
        #            }
        #
        #        }
        #    else
        #    {
        #        ret = _parentNodeInAot.AOTDrop(_source, _after);
        #    }
        #    }
        #        /*
        #    if (type == #NT_DBTYPEELEMENTLIST)
        #    {
        #        elementName = 'El' + _source.AOTgetProperty('Index');
        #    }
        #    else
        #    {
        #        elementName = _source.treeNodeName();
        #    }
        #
        #    while (strFind(elementName, ':', 1, strLen(elementName)))
        #    {
        #        elementName = strDel(elementName, 1, strFind(elementName, ':', 1, strLen(elementName)));
        #    }
        #
        #    switch (type)
        #    {
        #        case #NT_DBDELETEACTIONLIST,
        #             #NT_DBDELETEACTION :
        #            this.cit_dropNode2DeleteAction(_parentNodeInAot, _source, _after);
        #            break;
        #
        #        case #NT_DBFIELDLIST :
        #            tmpPath = SysTreeNode::getPath(_parentNodeInAot);
        #            newTreeNode = this.cit_dropNode2FieldList(_source, _after);
        #            _parentNodeInAot = TreeNode::findNode(tmpPath);
        #            info('Выполните повторное сравнение объекта для отображения созданного поля'); //TODO: Сделать обновление формы сравнения, чтобы не падало
        #            break;
        #
        #        case #NT_DBREFERENCE,
        #             #NT_DBTYPEREFERENCELIST:
        #            newTreeNode = _parentNodeInAot.AOTaddSubNode(_source.sysNodeType());
        #            break;
        #
        #        case #NT_FORMFIELDLAYOUT,
        #             #NT_DBFIELDGROUP:
        #            return _parentNodeInAot.AOTDrop(_source, _after);
        #
        #        case #NT_MENU:
        #            if (hasProperty(_source.AOTgetProperties(), #PropertyLabel))
        #            {
        #                throw error("В настоящий момент добавление подменю не реализовано. Добавить можно только пункты меню");
        #            }
        #            else
        #            {
        #                newTreeNode = _parentNodeInAot.AOTaddSubNode(1);
        #                if (_after)
        #                {
        #                    newTreeNode.AOTMove(_parentNodeInAot, _after);
        #                }
        #                menuItem    = _source;
        #                menuItemNew = newTreeNode;
        #                menuItemNew.menuItemType(menuItem.menuItemType());
        #                menuItemNew.menuItemName(menuItem.menuItemName());
        #                menuItemNew.parameters(menuItem.parameters());
        #                menuItemNew.shortCut(menuItem.shortCut());
        #                menuItemNew.webTarget(menuItem.webTarget());
        #                menuItemNew.isDisplayedInContentArea(menuItem.isDisplayedInContentArea());
        #            }
        #            return true;
        #
        #        default :
        #            _parentNodeInAot.AOTadd(elementName);
        #    }
        #
        #    if (! newTreeNode)
        #    {
        #        newTreeNode = _parentNodeInAot.AOTfindChild(elementName);
        #    }
        #
        #    if (newTreeNode)
        #    {
        #        newTreeNode.AOTsetProperties(_source.AOTgetProperties());
        #        if (SysTreeNode::hasSource(newTreeNode))
        #        {
        #            memberFunction = _source;
        #            newTreeNode.AOTsetSource(_source.AOTgetSource(), memberFunction.isStatic());
        #        }
        #    }
        #*/
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #cit_dropNode2DeleteAction
        #void cit_dropNode2DeleteAction(TreeNode _parentNodeInAot, TreeNode _source, TreeNode _after = null)
        #{
        #    TreeNode        newTreeNode;
        #    str          s;
        #    s = _source.AOTgetProperties(false, false, false);
        #    newTreeNode = _parentNodeInAot.AOTadd('UNKNOWN');
        #    //s = _source.AOTgetProperties();
        #
        #    newTreeNode.AOTsetProperties(s);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysTreeNode extends SysVersionControllableBase implements SysMergeable
        #{
        #    #define.TableColor("#FF9900")
        #    #define.ClassColor("#008000")
        #    #define.SpecialMarkupStart('Â·')
        #    #define.SpecialMarkupEnd('Â°')
        #    #file
        #
        #    TreeNode    treeNode;
        #    List        comparableTextList;
        #    SysUpgradeTreenodeStratMatch   matchStrategy;
        #
        #    #define.TextSource(1)
        #    #define.TextProperties(2)
        #    #define.TextSubNodes(3)
        #}
        #
      ENDSOURCE
      SOURCE #comparableName
        #public str comparableName()
        #{
        #    str name = treeNode.treeNodePath();
        #
        #    if (! name)
        #        name = treeNode.AOTname();
        #
        #    if (!treeNode.treeNodeType().isLayerAware())
        #    {
        #        return name;
        #    }
        #
        #    if (treeNode.AOTIsOld())
        #    {
        #        return strFmt('%1 (old %2)', name, treeNode.AOTLayer());
        #    }
        #    return strFmt('%1 (%2)', name, treeNode.AOTLayer());
        #}
        #
      ENDSOURCE
      SOURCE #comparableTextList
        #public List comparableTextList( SysComparable _top,
        #                                SysCompareContextProvider _context,
        #                                SysComparable _matchingNode = null)
        #{
        #    SysTreeNode top, matchingNode;
        #    top = _top as SysTreeNode;
        #    matchingNode = _matchingNode as SysTreeNode;
        #
        #    if (comparableTextList)
        #        return comparableTextList;
        #
        #    comparableTextList = new List(Types::Record);
        #
        #    if (treeNode)
        #    {
        #        this.comparableTextListCode( top, _context);
        #        this.comparableTextListProperties( top, _context, matchingNode); // maybe use Id from _matchingNode
        #        this.comparableTextListSubnodes(top, _context);
        #    }
        #
        #    return comparableTextList;
        #}
      ENDSOURCE
      SOURCE #comparableTextListCode
        #protected void comparableTextListCode(  SysTreeNode _top, SysCompareContextProvider _context)
        #{
        #    str source;
        #    str header;
        #    SysCodeCoverageCompareContext ccContext;
        #    boolean canInsertAndDelete;
        #
        #    if (SysTreeNode::hasSource(treeNode))
        #    {
        #        if (SysTreeNode::isSourceText(treeNode))
        #        {
        #            source = treeNode.AOTgetSource();
        #            //Format the page definition xml so that it is comparable
        #            if (treeNode.treeNodeType().isUtilElement() &&
        #                treeNode.utilElement().RecordType == UtilElementType::WebPageDef)
        #            {
        #                source = sysEPWebPageDefinition::getComparablePageDefinitionXml(source);
        #            }
        #        }
        #        else
        #        {
        #            source = SysUtil::unpackSource(treeNode.AOTgetSource());
        #        }
        #
        #        if (source)
        #        {
        #            if (_context && _context is SysCodeCoverageCompareContext)
        #            {
        #                ccContext = _context as SysCodeCoverageCompareContext;
        #                [source, header] = ccContext.splitHeaderFromSource(source);
        #            }
        #
        #            // Visual Studio Project or SSRS report nodes not supported
        #            canInsertAndDelete = !(treeNode is VSProjectFileNode || treeNode is SSRSReportConceptNode);
        #
        #            comparableTextList.addEnd(SysComparableTmpText::newText(source, header, #TextSource,
        #                true,   // supportWhiteSpace
        #                false,  // alternatingLines
        #                false,  // isSubNodes
        #                canInsertAndDelete,   // partialDelete
        #                canInsertAndDelete,   // partialInsert
        #                canInsertAndDelete,   // completeDelete
        #                canInsertAndDelete)); // completeInsert
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #comparableTextListProperties
        #protected void comparableTextListProperties( SysTreeNode _top,
        #                                SysCompareContextProvider _context,
        #                                SysTreeNode _matchingNode)
        #{
        #
        #    str properties;
        #    int idxmatch;
        #    int id;
        #    #Properties
        #    str readOnlyProperties;
        #    SysTreenodeCompareContext treeNodeContext = _context as SysTreenodeCompareContext;
        #
        #
        #str addReadOnlyProperty(str _propertyName)
        #{
        #    if (this.hasProperty(_propertyName) &&
        #        this.isPropertyReadOnly(_propertyName) &&
        #        (!_matchingNode ||
        #          (_matchingNode.hasProperty(_propertyName) &&
        #           _matchingNode.isPropertyReadOnly(_propertyName)))) //The property must also be readonly for the matching node
        #    {
        #        return strFmt('  %1%2#%3\n', _propertyName, strRep(' ', 20-strLen(_propertyName)), treeNode.AOTgetProperty(_propertyName));
        #    }
        #    return '';
        #}
        #
        #    // don't include invisible and readOnly properties
        #    properties = treeNode.AOTgetProperties(false, false);
        #
        #    // remove the first line from the string properties, remove PROPERTIES.
        #    idxmatch = strScan(properties,'\n',1, strLen(properties));
        #    properties = subStr(properties, idxMatch+1, strLen(properties));
        #
        #    // remove the last line from the string properties, remove ENDPROPERTIES.
        #    idxmatch = strScan(properties,'\n',strLen(properties)-2, -strLen(properties));
        #    if (idxmatch)
        #        properties = subStr(properties, 1, idxMatch-1);
        #    else
        #        properties = ''; // there was no \n before ENDPROPERTIES.
        #
        #    //
        #    // Don't remove the name property. Renamed fields and tables are not included in the upgrade project if name is removed
        #    //
        #    if (SysTreeNode::hasID(treeNode) &&
        #        (!treeNodeContext || !treeNodeContext.parmSuppressIDinProperties()))
        #    {
        #        id = treeNode.applObjectId();
        #        if (id == 0 && _matchingNode)
        #        {
        #            // use ID from corresponding node
        #            // (e.g. from field in SYS if we are importing an XPO file where the fields have no IDs)
        #            id = _matchingNode.parmTreeNode().applObjectId();
        #        }
        #
        #        readOnlyProperties = strFmt('  Id                  #%1\n', id);
        #
        #        //
        #        // These properties are protected
        #        //
        #        readOnlyProperties += addReadOnlyProperty(#PropertyConfigurationKey);
        #        readOnlyProperties += addReadOnlyProperty(#PropertyParentKey);
        #        readOnlyProperties += addReadOnlyProperty(#PropertyLicenseCode);
        #
        #        comparableTextList.addEnd(SysComparableTmpText::newText(readOnlyProperties, "@SYS120839", #TextProperties,
        #            false,  // supportWhiteSpace
        #            true)); // alternatingLines
        #
        #        comparableTextList.addEnd(SysComparableTmpText::newText(properties, "@SYS10344", #TextProperties,
        #            false,  // supportWhiteSpace
        #            true,   // alternatingLines
        #            false,  // isSubNodes
        #            false,  // partialDelete
        #            true,   // partialInsert, (allow properties to be overwritten)
        #            true)); // completeDelete. Complete means the entire node
        #    }
        #    else
        #    {
        #        if (treeNode.treeNodeType().isModelElement())
        #        {
        #            //If the name propety is read-only, it should still be displayed
        #            readOnlyProperties = addReadOnlyProperty(#PropertyName);
        #            if (readOnlyProperties)
        #            {
        #                comparableTextList.addEnd(SysComparableTmpText::newText(readOnlyProperties, "@SYS120839", #TextProperties,
        #                    false,  // supportWhiteSpace
        #                    true)); // alternatingLines
        #            }
        #        }
        #
        #        if (properties)
        #        {
        #            comparableTextList.addEnd(SysComparableTmpText::newText(properties, "@SYS10344", #TextProperties,
        #                false,  // supportWhiteSpace
        #                true,   // alternatingLines
        #                false,  // isSubNodes
        #                false,  // partialDelete
        #                true,   // partialInsert
        #                true,   // completeDelete
        #                true)); // completeInsert
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #comparableTextListSubnodes
        #protected void comparableTextListSubnodes(SysTreeNode _top,
        #    SysCompareContextProvider _context)
        #{
        #    str children;
        #    SysComparableEnumerator enumComparable;
        #    SysComparable tmp;
        #    SysTreeNode tmpTreeNode;
        #    Set set;
        #    SetEnumerator setEnum;
        #    SysTreenodeEnumerator enum;
        #    SysTreenodeCompareContext nodeCompareContext = _context as SysTreenodeCompareContext;
        #
        #    UtilEntryLevel curAotLayer = currentAOLayer();
        #
        #    // When hiding nodes, do not include subnodes in the list
        #    if (_context &&
        #        _context.parmShowDifferencesOnly() &&
        #        (_context.parmSuppressNodesOnlyIn1() ||
        #         _context.parmSuppressNodesOnlyIn2()))
        #    {
        #        return;
        #    }
        #
        #    enumComparable = this.getEnumerator();
        #    enum = enumComparable as SysTreenodeEnumerator;
        #
        #    if (this.hasOrdering())
        #    {
        #        //Maintain current order
        #        while (enum.moveNext())
        #        {
        #            tmp = enum.current();
        #
        #            if (tmp is SysTreeNode)
        #            {
        #                tmpTreeNode = tmp as SysTreeNode;
        #                if (!tmpTreeNode.parmTreeNode().AOTIncludeInCompare())
        #                {
        #                    continue;
        #                }
        #
        #                // only nodes for current layer.
        #                if (this.compareCurrentLayerOnly(nodeCompareContext, tmpTreeNode, curAotLayer))
        #                {
        #                    continue;
        #                }
        #            }
        #
        #            children += '  '+tmp.name()+'\n';
        #        }
        #    }
        #    else
        #    {
        #        //Sort alphabetically
        #        set = new Set(Types::String);
        #        while (enum.moveNext())
        #        {
        #            tmp = enum.current();
        #
        #            if (tmp is SysTreeNode)
        #            {
        #                tmpTreeNode = tmp as SysTreeNode;
        #                if (!tmpTreeNode.parmTreeNode().AOTIncludeInCompare())
        #                {
        #                    continue;
        #                }
        #
        #                // only nodes for current layer.
        #                if (this.compareCurrentLayerOnly(nodeCompareContext, tmpTreeNode, curAotLayer))
        #                {
        #                    continue;
        #                }
        #            }
        #
        #            set.add(tmp.name());
        #        }
        #        setEnum = set.getEnumerator();
        #        while (setEnum.moveNext())
        #        {
        #            children += '  '+setEnum.current()+'\n';
        #        }
        #    }
        #    comparableTextList.addEnd(SysComparableTmpText::newText(children, "@SYS120840", #TextSubnodes,
        #        false,      // supportWhiteSpace
        #        false,      // alternatingLines
        #        true,       // isSubNodes
        #        true,       // partial delete   - callback to canMergeDeleteSubnodes may overrule this
        #        true,       // partial insert   - callback to canMergeInsertSubnodes may overrule this
        #        false,      // complete delete
        #        false));    // complete insert
        #}
      ENDSOURCE
      SOURCE #compareCurrentLayerOnly
        #private boolean compareCurrentLayerOnly(SysTreenodeCompareContext _nodeCompareContext, SysTreeNode _sysTreeNode, UtilEntryLevel _curAotLayer)
        #{
        #    if (_nodeCompareContext != null && _nodeCompareContext.parmCurrentLayerOnly())
        #    {
        #        if (SysTreeNode::existsInLayer(_sysTreeNode.parmTreeNode(), _curAotLayer))
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #delete
        #void delete()
        #{
        #;
        #    treeNode.AOTdelete();
        #}
      ENDSOURCE
      SOURCE #fileExtension
        #Filename fileExtension()
        #{
        #    return #xpo;
        #}
      ENDSOURCE
      SOURCE #findMatchingComparable
        #public SysComparable findMatchingComparable(SysComparable _findOneLikeThisOne)
        #{
        #    SysTreenode sysTreeNode;
        #
        #    if (!treeNode)
        #    {
        #        return null;
        #    }
        #
        #    if (!matchStrategy)
        #    {
        #        matchStrategy = SysUpgradeTreenodeStratMatch::newTreenode(this.parmTreeNode());
        #    }
        #
        #    sysTreeNode = _findOneLikeThisOne as SysTreeNode;
        #    return matchStrategy.findMatchingNode(this, sysTreeNode);
        #}
      ENDSOURCE
      SOURCE #forceSynchronize
        #public boolean forceSynchronize()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fromFile
        #public void fromFile(FilenameOpen _filename)
        #{
        #    #AOTExport
        #    SysImportElements sysImportElements = new SysImportElements();
        #    ;
        #
        #    sysImportElements.reset();
        #    sysImportElements.parmImportAot(true);
        #    sysImportElements.newFile(_filename);
        #    sysImportElements.import(#impRemoveExcess | #ImpIgnoreCheckStatus);
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysComparableEnumerator getEnumerator()
        #{
        #    if (SysTreeNode::isProject(treeNode))
        #        return null;
        #
        #    return SysTreenodeEnumerator::newTreenode(treeNode);
        #}
      ENDSOURCE
      SOURCE #getOriginalSysTreenode
        #public SysTreeNode getOriginalSysTreenode()
        #{
        #    TreeNode original = this.getOriginalTreenode();
        #
        #    if (original)
        #        return SysTreeNode::newTreeNode(original);
        #
        #    return null;
        #}
        #
      ENDSOURCE
      SOURCE #getOriginalTreenode
        #public TreeNode getOriginalTreenode()
        #{
        #    TreeNode node = this.parmTreeNode();
        #    UtilEntryLevel layer;
        #    int infologLine = infologLine();
        #    try
        #    {
        #        layer = SysTreeNode::getHighestLayer(node);
        #        if (layer > UtilEntryLevel::sys)
        #        {
        #            return SysTreeNode::nodeInLayer(node, layer - 1, false, true);
        #        }
        #    }
        #    catch (Exception::Error)
        #    {
        #        // We get here when node is not found in old
        #        infolog.clear(infologLine);
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getProperty
        #public anytype getProperty(str _propertyName)
        #{
        #    if (this.hasProperty(_propertyName))
        #        return this.parmTreeNode().AOTgetProperty(_propertyName);
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getVCSModelId
        #/// <summary>
        #/// Gets the model ID, which is used to construct the file name path in the version control system.
        #/// </summary>
        #/// <returns>
        #/// The model ID.
        #/// </returns>
        #public ModelId getVCSModelId()
        #{
        #    #SysModelStore
        #
        #    if (VersionControl::modelQueryable(treeNode) &&
        #        treeNode.treeNodeType().isLayerAware())
        #    {
        #        if (treeNode.AOTLayer() == currentAOLayer()) // Only return the model based filename if the node exists in current layer
        #        {
        #            return treeNode.AOTGetModel();
        #        }
        #
        #        // Check if sub elements exists in the current layer
        #        else if (SysTreeNode::existsInLayer(treeNode, currentAOLayer()))
        #        {
        #            // Get the first model from the subelements, since subelements exists in current layer but root element doesn't
        #            if (treeNode.treeNodeType().isRootElement() &&
        #                treeNode.treeNodeType().isUtilElement())
        #            {
        #                return SysTreeNode::getFirstModelIdFromSubElements(treeNode.utilIdElement().Name, treeNode.utilIdElement().RecordType);
        #            }
        #        }
        #    }
        #
        #    return #ModelId_Undefined;
        #}
      ENDSOURCE
      SOURCE #getWrappedTreeNode
        #public TreeNode getWrappedTreeNode()
        #{
        #    return treeNode;
        #}
      ENDSOURCE
      SOURCE #hasOrdering
        #public boolean hasOrdering()
        #{
        #    #TreeNodeSysNodeType
        #
        #    if (!this.parmTreeNode())
        #    {
        #        return true;
        #    }
        #
        #    // Code based on section 13.1.2 Conflict detection in 'Code Upgrade Tool Enhancements' functional specification
        #
        #    switch (this.parmTreeNode().treeNodeType().id())
        #    {
        #        case #NT_MEMBERFUNCLIST:        // */Methods
        #
        #        case #NT_CLASS:                 // /Classes
        #
        #        case #NT_DBFIELDGROUPLIST:      // /Data Dictionary/Tables/MyTable/Field Groups
        #        case #NT_DBDELETEACTIONLIST:    // /Data Dictionary/Tables/MyTable/DeleteActions
        #
        #        case #NT_FORMOBJECTBANK:        // /Forms/MyForm/Data Sources/
        #        case #NT_FORMDATASOURCEPOOL:    // /Forms/MyForm/Data Sources/table1
        #        case #NT_FORMFIELDLIST:         // /Forms/MyForm/Data Sources/table1/Fields
        #        case #NT_FORMBUILDDERIVEDDATASOURCECOLLECTION: // /Forms/MyForm/Data Sources/table1/Derived data sources
        #        case #NT_FORMBUILDREFERENCEDATASOURCECOLLECTION: // /Forms/MyForm/Data Sources/table1/Reference data sources
        #
        #        // Security permission collections. The order of their children doesn't matter
        #        case #NT_SECTASKMENUITEMLISTNODE:
        #        case #NT_SECTASKTABLELISTNODE:
        #        case #NT_SECTASKMETHODLISTNODE:
        #        case #NT_SECTASKSERVICELISTNODE:
        #        case #NT_SECTASKDEPENDENTLISTNODE:
        #        case #NT_SECTASKWEBMENUITEMLISTNODE:
        #        case #NT_SECTASKWEBCONTENTLISTNODE:
        #        case #NT_SECPERMISSIONGROUPLISTNODE:
        #        case #NT_SECPERMISSIONLISTNODE:
        #        case #NT_SECASSOCIATEDFORMLISTNODE:
        #        case #NT_SECASSOCIATEDWEBCONTROLLISTNODE:
        #        case #NT_SECASSOCIATEDWEBCONTROLNODE:
        #        case #NT_SECASSOCIATEDOBJECTLISTNODE:
        #        case #NT_SECCODEPERMISSIONLISTNODE:
        #        case #NT_SECASSOCIATEDCODELISTNODE:
        #        case #NT_SECASSOCIATEDREPORTLISTNODE:
        #        case #NT_SECENTRYPOINTLISTNODE:
        #
        #            return false;
        #
        #        case #NT_FORMDESIGN:            // This node type is shared between Design and DesignList
        #            if (this.parmTreeNode().treeNodeName() == 'DesignList') // /Forms/MyForm/Designs/DesignList
        #            {
        #                return false;
        #            }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #hasProperty
        #public boolean hasProperty(str _propertyName)
        #{
        #    Struct propertiesStruct;
        #    int propertyCount;
        #
        #    ;
        #    propertiesStruct = this.parmTreeNode().AOTgetPropertiesExt(_propertyName);
        #
        #    if (propertiesStruct)
        #        propertyCount = propertiesStruct.valueIndex(1);
        #
        #    return (propertyCount == 1);
        #}
      ENDSOURCE
      SOURCE #isListOfChildrenFixed
        #protected boolean isListOfChildrenFixed()
        #{
        #    #TreeNodeSysNodeType
        #    TreeNode firstChild;
        #
        #    if (!treeNode)
        #        return false;
        #
        #    firstChild = treeNode.AOTfirstChildEx(true);
        #
        #    //
        #    // Does the node only contain one child named: "Methods"
        #    //
        #    if (firstChild &&
        #        firstChild.treeNodeType().id() == #NT_MEMBERFUNCLIST &&
        #        firstChild.AOTnextSibling() == null)
        #    {
        #        return true;
        #    }
        #
        #    switch (treeNode.treeNodeType().id())
        #    {
        #        case #NT_QEBLOCK:               //... Datasources\MyDataSource
        #        case #NT_QEFIELDLIST:           //... Datasources\MyDataSource\Fields
        #        case #NT_QEBLOCKLIST:           //MyView\Datasources\MyDataSource
        #        case #NT_FORMDATASOURCEPOOL:    //MyForm\Datasources\MyDataSource
        #        case #NT_FORMDATAFIELD:         //MyForm\Datasources\MyDataSource\MyField
        #        case #NT_PERSPECTIVEFIELDLIST:  //MyPerspective\Tables\MyTable\Fields
        #        case #NT_QEDEPENDENTOBJECTS:    //MyQuery\Dependent Objects
        #        case #NT_QECOMPOSITEQUERY:      //MyQuery\Composite Query
        #            return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isNewNameValid
        #/// <summary>
        #/// Indicates whether the new name of the element is valid.
        #/// </summary>
        #/// <param name="_newName">
        #/// The new name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the new name is valid.
        #/// </returns>
        #/// <remarks>
        #/// This method is called before renaming the element.
        #/// </remarks>
        #public boolean isNewNameValid(str _newName)
        #{
        #    Set unwantedNames;
        #    SetEnumerator senum;
        #
        #    if (versioncontrol.parmSysVersionControlSystem() == null)
        #    {
        #        return true;
        #    }
        #
        #    // Unwanted names are checked only for root-elements
        #    if (this.parmTreeNode().treeNodeType().isRootElement())
        #    {
        #        // Check unwanted names first
        #        unwantedNames = versioncontrol.parmSysVersionControlSystem().parmUnwantedObjectNames();
        #        senum = unwantedNames.getEnumerator();
        #        while(senum.moveNext())
        #        {
        #            if(match(senum.current(), _newName))
        #            {
        #                error(strFmt("@SYS85681", _newName));
        #                return false;
        #            }
        #        }
        #
        #        // Check if the owner is valid
        #        if (!versioncontrol.parmSysVersionControlSystem().verifyOwnerPrefix(_newName))
        #        {
        #            return false;
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isPropertyReadOnly
        #public boolean isPropertyReadOnly(str _propertyName)
        #{
        #    Struct configKeyStruct;
        #    Array configKeyArray;
        #
        #    if (this.hasProperty(_propertyName))
        #    {
        #        configKeyStruct = treeNode.AOTgetPropertiesExt(_propertyName);
        #        configKeyArray = configKeyStruct.value('PropertyInfo');
        #        configKeyStruct = configKeyArray.value(1);
        #        if (!configKeyStruct.value('AllowEdit'))
        #        {
        #            return true;
        #        }
        #        return false;
        #    }
        #    throw error(strFmt("@SYS120841", this.name(), _propertyName));
        #}
      ENDSOURCE
      SOURCE #mergeDeleteSubnode
        #public void mergeDeleteSubnode(
        #    SysComparable               _topComparable,
        #    SysCompareContextProvider _context,
        #    SysComparable               _nodeToDelete)
        #{
        #    TreeNode nodeInAotToDelete;
        #    TreeNode parentNodeInAot;
        #    SysTreeNode topComparable, nodeToDelete;
        #    ;
        #    topComparable = _topComparable as SysTreeNode;
        #    nodeToDelete = _nodeToDelete as SysTreeNode;
        #
        #    if (_nodeToDelete &&
        #        treeNode &&
        #        TreeNode::isNodeReferenceValid(treeNode))
        #    {
        #        parentNodeInAot = TreeNode::findNode(SysTreeNode::getPath(treeNode));
        #        if (parentNodeInAot)
        #        {
        #            nodeInAotToDelete = parentNodeInAot.AOTfindChild(nodeToDelete.parmTreeNode().treeNodeName());
        #
        #            if (nodeInAotToDelete)
        #            {
        #                nodeInAotToDelete.AOTdelete();
        #
        #                treeNode = parentNodeInAot;
        #
        #                //Clear cached information
        #                comparableTextList = null;
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #mergeInsertSubnode
        #public void mergeInsertSubnode(
        #    SysComparable             _topComparable,
        #    SysCompareContextProvider _context,
        #    SysComparable               _nodeToInsert)
        #{
        #    TreeNode previousSourceNode, previousNode;
        #    TreeNode sourceNode;
        #    boolean result;
        #    TreeNode parentNodeInAot;
        #    SysTreeNode nodeToInsert;
        #    ;
        #    nodeToInsert = _nodeToInsert as SysTreeNode;
        #
        #    if (_nodeToInsert &&
        #        treeNode &&
        #        TreeNode::isNodeReferenceValid(treeNode))
        #    {
        #        parentNodeInAot = TreeNode::findNode(SysTreeNode::getPath(treeNode));
        #        if (parentNodeInAot)
        #        {
        #            sourceNode = nodeToInsert.parmTreeNode();
        #            previousSourceNode = sourceNode.AOTprevious();
        #
        #            while (!previousNode && previousSourceNode)
        #            {
        #                previousNode       = parentNodeInAot.AOTfindChild(previousSourceNode.treeNodeName());
        #                previousSourceNode = previousSourceNode.AOTprevious();
        #            }
        #
        #            // We get here e.g. if treeNode is the form design node. If previousNode=Null node is inserted last, it should be first.
        #            if (! previousNode)
        #                previousNode = parentNodeInAot;
        #            /*
        #            result = parentNodeInAot.AOTDrop(sourceNode, previousNode);
        #            */
        #            result = this.cit_dropNode(parentNodeInAot, sourceNode, previousNode);
        #
        #            if (result)
        #            {
        #                // node was successfully dropped
        #                previousSourceNode = null;
        #                previousNode       = null;
        #                sourceNode         = null;
        #
        #                //Clear cached information
        #                comparableTextList = null;
        #
        #                treeNode = parentNodeInAot;
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #mergeText
        #public void mergeText(
        #    str _newText,
        #    SysComparableTmpText _originalText)
        #{
        #    #properties
        #    str propertyName;
        #    str propertyValue;
        #    int hashPos;
        #    int len;
        #    SysTreeNode sysNodeInAot;
        #    TreeNode nodeInAot = this.mergeTextNode();
        #    boolean changeMade;
        #
        #//
        #// Remove the special markup tags
        #//
        #str removeSpecialMarkup(str _text)
        #{
        #    str output = _text;
        #    int end;
        #
        #    int start = strFind(output, #SpecialMarkupStart,1,strLen(output));
        #    while (start)
        #    {
        #        end = strFind(output,#SpecialMarkupEnd,start,strLen(output));
        #        if (!end)
        #            break;
        #
        #        output = strDel(output,start,(end + 1) - start);
        #        start = strFind(output,#SpecialMarkupStart,1,strLen(output));
        #    }
        #    return output;
        #}
        #
        #    if (nodeInAot)
        #    {
        #        switch (_originalText.Type)
        #        {
        #            case #TextSource:
        #                if (!_newText)
        #                    _newText = '\n';
        #
        #                nodeInAot.AOTsetSource(_newText);
        #                changeMade = true;
        #                break;
        #
        #            case #TextProperties:
        #
        #                len = strLen(_newText);
        #                hashPos = strScan(_newText, '#', 1, len+1);
        #
        #                if (hashPos>1)
        #                {
        #                    propertyName = subStr(_newText,1,hashPos-1);
        #                    propertyName = strLTrim(strRTrim(propertyName));
        #                    sysNodeInAot = SysTreeNode::newTreeNode(nodeInAot);
        #
        #                    if (propertyName &&
        #                        propertyName != #propertyId &&
        #                        propertyName != #propertyName &&
        #                        sysNodeInAot.hasProperty(propertyName) &&
        #                        !sysNodeInAot.isPropertyReadOnly(propertyName))
        #                    {
        #                        propertyValue = subStr(_newText, hashPos+1, len - hashPos);
        #                        propertyValue = removeSpecialMarkup(propertyValue);
        #                        propertyValue = strRem(propertyValue, '\n'); // Remove new lines
        #                        propertyValue = strLTrim(strRTrim(propertyValue)); // Remove leading+trailing spaces
        #
        #                        // AOTsetProperty() does invoke the kernel's propChanged methods,
        #                        // so e.g. setting property enumValue will set property useEnumValue to true
        #                        try
        #                        {
        #                            nodeInAot.AOTsetProperty(propertyName, propertyValue);
        #                            changeMade = true;
        #                        }
        #                        catch
        #                        {
        #                            // Surface the property validation error
        #                            exceptionTextFallThrough();
        #                        }
        #                    }
        #                }
        #                break;
        #        }
        #
        #        if (changeMade)
        #        {
        #            treeNode = nodeInAot;
        #
        #            //Clear cached information
        #            comparableTextList = null;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #mergeTextNode
        #protected TreeNode mergeTextNode()
        #{
        #    return TreeNode::findNode(treeNode.treeNodePath());
        #}
      ENDSOURCE
      SOURCE #name
        #public str name()
        #{
        #    #TreeNodeSysNodeType
        #    str name = treeNode.treeNodeName();
        #
        #    //
        #    // The AOT has non-unique names under Forms\MyForm\Data Sources\MyDataSource\Fields
        #    // Workaround the issue by appending "(Field group)" to field group nodes.
        #    //
        #    if (treeNode.treeNodeType().id() == #NT_FORMFIELDGROUP)
        #    {
        #        name += ' (Field group)';
        #    }
        #
        #    return name;
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #;
        #}
      ENDSOURCE
      SOURCE #onCheckOut
        #public void onCheckOut()
        #{
        #}
      ENDSOURCE
      SOURCE #onComparableFocus
        #public void onComparableFocus()
        #{
        #}
      ENDSOURCE
      SOURCE #onComparableSelected
        #public void onComparableSelected()
        #{
        #    TreeNode potentialTreenode;
        #
        #    if (!treeNode.AOTIsOld() && treeNode.treeNodeType().isGetNodeInLayerSupported())
        #    {
        #        //
        #        // Reread the node from the AOT
        #        //
        #        potentialTreenode = SysTreeNode::copyNode(SysTreeNode::getNode(treeNode));
        #
        #        //
        #        // Ensure the node has the same layer and same path
        #        //
        #        if (potentialTreenode &&
        #            potentialTreenode.AOTLayer() == treeNode.AOTLayer() &&
        #            potentialTreenode.treeNodePath() == treeNode.treeNodePath())
        #        {
        #            treeNode = potentialTreenode;
        #        }
        #    }
        #
        #    //
        #    // Clear the cache
        #    // When the second compare is started the cache has to be clear as the
        #    // cached values are depending on the other comparable (i.e. matching node)
        #    //
        #    comparableTextList = null;
        #}
      ENDSOURCE
      SOURCE #onUndoCheckOut
        #public void onUndoCheckOut()
        #{
        #}
      ENDSOURCE
      SOURCE #parmTreeNode
        #public TreeNode parmTreeNode(TreeNode _treeNode = treeNode)
        #{
        #    ;
        #    treeNode = _treeNode;
        #    return treeNode;
        #}
      ENDSOURCE
      SOURCE #preAddAction
        #/// <summary>
        #/// Executes an action before an add operation.
        #/// </summary>
        #public void preAddAction()
        #{
        #}
      ENDSOURCE
      SOURCE #preCheckInUpdate
        #boolean preCheckInUpdate(Filename _filename, SysVersionControlSettings _settings)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #suppressIDPropertyDuringCompare
        #/// <summary>
        #/// Controls whether a comparison will include the ID property.
        #/// </summary>
        #/// <returns>
        #/// true if the ID property must be suppressed during the comparison; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// The suppression occurs for all tree nodes in the comparison, if one or more of the top tree nodes
        #/// in the compare returns true when this method is called.
        #/// </remarks>
        #public boolean suppressIDPropertyDuringCompare()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #toFile
        #public boolean toFile(FilenameSave _filename, boolean _creating = false)
        #{
        #    #AOTExport
        #    #AOT
        #
        #    ProjectNode projectNode;
        #    TreeNode    treenodeToExport = treeNode;
        #    int         flags;
        #
        #    if (classIdGet(treeNode) == classNum(ProjectNode) ||
        #        strStartsWith(treeNode.treeNodePath(), #ProjectPath))
        #    {
        #        projectNode      = treeNode;
        #        treenodeToExport = projectNode.loadForInspection();
        #        flags            = #expProjectOnly;
        #    }
        #
        #    // This code runs on the client side only
        #    //BP deviation documented
        #    treenodeToExport.treeNodeExport(_filename, #export | #expKeepIds | #expLayer | flags);
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    return this.parmTreeNode().toString();
        #}
      ENDSOURCE
      SOURCE #versionControlFilePath
        #public Filename versionControlFilePath(boolean _currentLayer = true)
        #{
        #    str path = SysTreeNode::treeNodePath2FilePath(treeNode.treeNodePath());
        #    UtilEntryLevel layer;
        #
        #    if (_currentLayer)
        #    {
        #        layer = currentAOLayer();
        #    }
        #    else
        #    {
        #        if (treeNode.treeNodeType().isLayerAware() && treeNode.AOTIsPersisted())
        #        {
        #            layer = treeNode.AOTLayer();
        #        }
        #        else
        #        {
        #            layer = currentAOLayer();
        #        }
        #    }
        #
        #    return strFmt("%1%2", layer, path);
        #}
      ENDSOURCE
      SOURCE #versionControlItemPath
        #SysVersionControlItemPath versionControlItemPath()
        #{
        #    if (treeNode)
        #        return treeNode.treeNodePath();
        #    return '';
        #}
      ENDSOURCE
      SOURCE #aotStructApplObjectPathMap
        #public static client server Map aotStructApplObjectPathMap()
        #{
        #    Map map = classfactory.globalCache().get(classStr(SysTreeNode), funcName(), null);
        #    SysModelMetaDataConcept concept;
        #    Enumerator enumerator;
        #
        #    if (!map)
        #    {
        #        map = new Map(Types::Integer, Types::String);
        #        enumerator = SysModelMetaData::newFromCache().getEnumeratorConcepts();
        #
        #        while (enumerator.moveNext())
        #        {
        #            concept = enumerator.current();
        #            map.insert(map.elements() + 1, concept.parmCollectionPath());
        #        }
        #        classfactory.globalCache().set(classStr(SysTreeNode), funcName(), map);
        #    }
        #    return map;
        #}
      ENDSOURCE
      SOURCE #applObjectName
        #/*
        #    Returns the name of the application object for the specified path
        #    Return type will normally be IdentifierName, but some name in the AOT are actually longer!
        #*/
        #public client server static TreeNodePath applObjectName(TreeNodePath _path)
        #{
        #    return SysTreeNode::pathName(SysTreeNode::applObjectPath(_path));
        #}
      ENDSOURCE
      SOURCE #applObjectPath
        #/*
        #    this method returns the path to the application object, for any supplied path, below the application object.
        #    If an application object path, or anything higher, are supplied, blank is returned.
        #    So this method returns the parent application object path.
        #*/
        #public client server static TreeNodePath applObjectPath(TreeNodePath _path)
        #{
        #    Set set = SysTreeNode::applObjectPathSet();
        #    TreeNodePath subpath, prevSubPath;
        #    int pos;
        #    #AOT
        #
        #    // A collection node is passed
        #    if (set.in(_path))
        #        return '';
        #
        #    // Find last \
        #    pos = strFind(_path, '\\', strLen(_path), minInt());
        #    if (!pos)
        #        return '';
        #
        #    do
        #    {
        #        // Peal off from the end, until a collection path is reached
        #        subpath = subStr(_path, 1, pos-1);
        #        if (set.in(subpath))
        #        {
        #            if (prevSubPath)
        #            {
        #                // Last subpath was the root element
        #                return prevSubPath;
        #            }
        #            // A root element was passsed
        #            return _path;
        #        }
        #        prevSubPath = subpath;
        #        pos = strFind(_path, '\\', pos-1, minInt());
        #    }
        #    while (subpath);
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #applObjectPathDoublePathDelimitersMap
        #public static client server Map applObjectPathDoublePathDelimitersMap()
        #{
        #    Map           map;
        #    SetEnumerator setEnumerator;
        #
        #    map = classfactory.globalCache().get(classStr(SysTreeNode), funcName(), null);
        #
        #    if (!map)
        #    {
        #        map         = new Map(Types::String, Types::String);
        #
        #        setEnumerator = SysTreeNode::applObjectPathSet().getEnumerator();
        #
        #        while (setEnumerator.moveNext())
        #        {
        #            map.insert(setEnumerator.current(), SysTreeNode::duplicatePathDelimiters(setEnumerator.current()));
        #        }
        #
        #        classfactory.globalCache().set(classStr(SysTreeNode), funcName(), map);
        #    }
        #
        #    return map;
        #}
      ENDSOURCE
      SOURCE #applObjectPathSet
        #public client server static Set applObjectPathSet()
        #{
        #    Set set = classfactory.globalCache().get(classStr(SysTreeNode), funcName(), null);
        #
        #    if (!set)
        #    {
        #        set = SysTreeNode::applObjectPathTypeMap().keySet();
        #        classfactory.globalCache().set(classStr(SysTreeNode), funcName(), set);
        #    }
        #
        #    return set;
        #}
      ENDSOURCE
      SOURCE #applObjectPathTypeMap
        #public static Map applObjectPathTypeMap()
        #{
        #    Map map = classfactory.globalCache().get(classStr(SysTreeNode), funcName(), null);
        #    SysModelMetaDataConcept concept;
        #    Enumerator enumerator;
        #
        #    if (!map)
        #    {
        #        map = new Map(Types::String, Types::Enum);
        #        enumerator = SysModelMetaData::newFromCache().getEnumeratorConcepts();
        #        while (enumerator.moveNext())
        #        {
        #            concept = enumerator.current();
        #            map.insert(concept.parmCollectionPath(), concept.parmUtilElementType());
        #        }
        #        classfactory.globalCache().set(classStr(SysTreeNode), funcName(), map);
        #    }
        #
        #    return map;
        #}
      ENDSOURCE
      SOURCE #applObjectTypePathMap
        #public static Map applObjectTypePathMap()
        #{
        #    #aot
        #    Map map = classfactory.globalCache().get(classStr(SysTreeNode), funcName(), null);
        #    MapEnumerator enumerator;
        #    Map reverseMap;
        #
        #    if (!map)
        #    {
        #        map = new Map(Types::Enum, Types::String);
        #        reverseMap = SysTreeNode::applObjectPathTypeMap();
        #        enumerator = reverseMap.getEnumerator();
        #
        #        // Reverse the key-value mapping
        #        while (enumerator.moveNext())
        #        {
        #            map.insert(enumerator.currentValue(), enumerator.currentKey());
        #        }
        #
        #        classfactory.globalCache().set(classStr(SysTreeNode), funcName(), map);
        #    }
        #
        #    return map;
        #}
      ENDSOURCE
      SOURCE #canEdit
        #public static boolean canEdit(TreeNode _treeNode)
        #{
        #    return _treeNode && conFind(SysTreeNode::treeNodesWithSource() + classNum(ClassNode),
        #                   _treeNode.handle());
        #}
      ENDSOURCE
      SOURCE #codeIsSource
        #/// <summary>
        #/// This function checks whether the <c>UtilElementType</c> class that is passed has a text source in
        #/// the node.
        #/// </summary>
        #/// <param name="_utilElementType">
        #/// The <paramref name="_utilElementType" /> parameter for the node.
        #/// </param>
        #/// <returns>
        #/// true if the node contains text; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// The name of this function is misleading because the source may not be code and this returns false
        #/// if X++ source is passed.
        #/// </remarks>
        #static boolean codeIsSource(UtilElementType _utilElementType)
        #{
        #    boolean ret;
        #
        #    switch (_utilElementType)
        #    {
        #        case UtilElementType::WebSourceFile:
        #        case UtilElementType::WebPageDef:
        #        case UtilElementType::WebStaticFile:
        #        case UtilElementType::WebControl:
        #        case UtilElementType::VSProject_Analysis:
        #        case UtilElementType::VSProject_AXModel:
        #        case UtilElementType::VSProject_CSharp:
        #        case UtilElementType::VSProject_VB:
        #        case UtilElementType::VSProject_Web:
        #        case UtilElementType::SSRSReport:
        #        case UtilElementType::SSRSReportDataSource:
        #        case UtilElementType::SSRSReportLayoutTemplate:
        #        case UtilElementType::SSRSReportListStyleTemplate:
        #        case UtilElementType::SSRSReportMatrixStyleTemplate:
        #        case UtilElementType::SSRSReportPieChartStyleTemplate:
        #        case UtilElementType::SSRSReportTableStyleTemplate:
        #        case UtilElementType::SSRSReportXYChartStyleTemplate:
        #            ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysTreeNode construct()
        #{
        #    return new SysTreeNode();
        #}
        #
      ENDSOURCE
      SOURCE #copyNode
        #/*
        #    This method returns a copy of a treenode.
        #    The copy can be modified in any way - it is not saved nor shown in AOT
        #*/
        #public static TreeNode copyNode(TreeNode treeNode)
        #{
        #    TreeNode copyNode;
        #    int infologLine = infologLine();
        #
        #    try
        #    {
        #        if (treeNode &&
        #            treeNode.treeNodeType().isGetNodeInLayerSupported() &&
        #            treeNode.treeNodeType().isLayerAware())
        #        {
        #            copyNode = treeNode.getNodeInLayer(SysTreeNode::getHighestLayer(treeNode, treeNode.AOTIsOld()), treeNode.AOTIsOld());
        #        }
        #    }
        #    catch (Exception::Error)
        #    {
        #        // We get here when node is not found, i.e. mask = 0
        #        infolog.clear(infologLine);
        #        return null;
        #    }
        #    return copyNode;
        #}
      ENDSOURCE
      SOURCE #createProject
        #static TreeNode createProject(
        #    identifierName _projectName,
        #    ProjectSharedPrivate _type = ProjectSharedPrivate::ProjPrivate)
        #{
        #    ProjectListNode parentTreenode = (_type == ProjectSharedPrivate::ProjShared ? SysTreeNode::getSharedProject() : SysTreeNode::getPrivateProject());
        #    ProjectNode projectNode;
        #    ;
        #
        #    if (!parentTreenode.AOTfindChild(_projectName))
        #         parentTreenode.AOTadd(_projectName);
        #
        #    projectNode = parentTreenode.AOTfindChild(_projectName);
        #
        #    return projectNode.getRunNode();
        #}
      ENDSOURCE
      SOURCE #duplicatePathDelimiters
        #static TreeNodePath duplicatePathDelimiters(TreeNodePath _treeNodePath)
        #{
        #    int startPos = 1;
        #    int length   = strLen(_treeNodePath);
        #    int foundPos;
        #    ;
        #
        #    foundPos    = strFind(_treeNodePath, #FilePathDelimiter, startPos, length - startPos + 1);
        #
        #    while (foundPos)
        #    {
        #        _treeNodePath   = strIns(_treeNodePath, #FilePathDelimiter, foundPos);
        #        length++;
        #        startPos    = foundPos + 2;
        #        foundPos    = strFind(_treeNodePath, #FilePathDelimiter, startPos, length - startPos + 1);
        #    }
        #
        #    return _treeNodePath;
        #}
      ENDSOURCE
      SOURCE #existsInLayer
        #/// <summary>
        #/// Checks whether an item exists in the given layer
        #/// </summary>
        #/// <param name="_node">The tree node instance.</param>
        #/// <param name="_layer">The layer.</param>
        #/// <returns>true if an item exists in the given layer; otherwise, false.</returns>
        #public static boolean existsInLayer(TreeNode _node, UtilEntryLevel _layer)
        #{
        #    return SysTreeNode::isNodeInLayer(_node, _layer) ||
        #    (_node && (_node.applObjectLayerMask() & (1 << _layer))); // check if sub-elements' layer is in layer mask
        #}
      ENDSOURCE
      SOURCE #findMatchingOriginal
        #public static SysTreeNode findMatchingOriginal(  SysTreeNode _original,
        #                                                 SysTreeNode _theirs,
        #                                                 SysTreeNode _currentOrYours,
        #                                                 SysTreeNode _currentOrYoursChild) // find the corresponding _originalChild
        #{
        #    SysComparable childOriginal;
        #    SysComparable childTheirs;
        #    SysComparable childCurrentOrYours;
        #    TreeNodePath treenodePathCurrent;
        #    TreeNodePath treenodePathCurrentChild;
        #    TreeNode treenodeCurrentChild;
        #    int pos;
        #
        #    SysTreeNode matchingOriginal;
        #
        #    // All arguments must be non null
        #    if (!_original ||
        #        !_theirs ||
        #        !_currentOrYours ||
        #        !_currentOrYoursChild)
        #    {
        #        return null;
        #    }
        #
        #    //
        #    // Have we reached the right node ?
        #    // Current must be the same path as current child - as they are the same nodes
        #    //
        #    if (_currentOrYours.parmTreeNode().treeNodePath() == _currentOrYoursChild.parmTreeNode().treeNodePath())
        #        return _original;
        #
        #    //
        #    // Require direct name match in current (per the success above)
        #    //
        #    treenodePathCurrent = _currentOrYours.parmTreeNode().treeNodePath();
        #    treenodePathCurrentChild = _currentOrYoursChild.parmTreeNode().treeNodePath();
        #
        #    // Isolate the name of the next child
        #    treenodePathCurrentChild = subStr(treenodePathCurrentChild, strLen(treenodePathCurrent)+2, maxInt());
        #
        #    // Find the next '\'
        #    pos = strFind(treenodePathCurrentChild, '\\', 1, strLen(treenodePathCurrentChild));
        #    if (pos == 0)
        #    {
        #        // This is a leaf node, so include the rest of the path
        #        pos = maxInt();
        #    }
        #    treenodePathCurrentChild = subStr(treenodePathCurrentChild, 1, pos-1);
        #
        #    treenodeCurrentChild = _currentOrYours.parmTreeNode().AOTfindChild(treenodePathCurrentChild);
        #    if (treenodeCurrentChild && treenodePathCurrentChild)
        #    {
        #        childCurrentOrYours = SysTreeNode::newTreeNode(treenodeCurrentChild);
        #
        #        childOriginal = _original.findMatchingComparable(childCurrentOrYours);
        #        childTheirs   = _theirs.findMatchingComparable(childCurrentOrYours);
        #
        #        if  (childOriginal && childTheirs)
        #        {
        #            matchingOriginal = SysTreeNode::findMatchingOriginal(childOriginal as SysTreeNode, childTheirs as SysTreeNode, childCurrentOrYours as SysTreeNode, _currentOrYoursChild);
        #
        #            if (matchingOriginal)
        #                return matchingOriginal;
        #        }
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #findNodeInLayer
        #static TreeNode findNodeInLayer(UtilElementType type,
        #                                identifierName  name,
        #                                int             parentId,
        #                                UtilEntryLevel  layer,
        #                                boolean         forceLayer = true,
        #                                boolean         old        = false,
        #                                int             id         = 0)
        #{
        #    UtilElements utilElement;
        #    TreeNode treeNode;
        #    utilElement.RecordType  = type;
        #    utilElement.Name        = name;
        #    utilElement.ParentId    = parentId;
        #
        #    treeNode = TreeNode::findNode(xUtilElements::getNodePathRough(utilElement));
        #    if (!treeNode)
        #    {
        #        treeNode = infolog.getNode(type, name, parentId, id, layer, forceLayer, 0x10000, old);
        #    }
        #    return SysTreeNode::nodeInLayer(treeNode, layer, forceLayer, old);
        #}
      ENDSOURCE
      SOURCE #getFirstModelIdFromSubElements
        #/// <summary>
        #/// Finds the first child element in the specified layer and retrieves the model ID for the model to
        #/// which that element belongs.
        #/// </summary>
        #/// <param name="_name">
        #/// The name of the element for which model information is required.
        #/// </param>
        #/// <param name="_type">
        #/// The type of element for which model information is required.
        #/// </param>
        #/// <param name="_layer">
        #/// The layer to query.
        #/// </param>
        #/// <returns>
        #/// A model ID for the child element; otherwise, the <c>#ModelId_Undefined</c> value.
        #/// </returns>
        #public static server modelId getFirstModelIdFromSubElements(identifierName _name, UtilElementType _type, UtilEntryLevel _layer = currentAOLayer())
        #{
        #    #SysModelStore
        #
        #    SysModelElement rootElement;
        #    SysModelElementData rootData;
        #    SysModelElement subElement;
        #    SysModelElementData subData;
        #    SysModelLayer rootlayer;
        #    SysModelLayer subLayer;
        #
        #    select firstOnly1 RecId from rootElement
        #        where rootElement.Name == _name
        #           && rootElement.ElementType == _type
        #        join firstOnly1 Layer from rootData
        #            where rootData.ModelElement == rootElement.RecId
        #        join firstOnly1 Layer from rootlayer
        #            where rootlayer.Layer < _layer
        #               && rootlayer.RecId == rootData.Layer
        #        join firstOnly1 RecId from subElement
        #            where subElement.RootModelElement == rootElement.RecId
        #        join firstOnly1 ModelId from subData
        #            where subData.ModelElement == subElement.RecId
        #        join firstOnly1 Layer from subLayer
        #            where subLayer.Layer == _layer
        #               && subLayer.RecId == subData.Layer
        #               && subLayer.RecId > rootData.Layer;
        #
        #    return subData.ModelId ? subData.ModelId : #ModelId_Undefined;
        #}
      ENDSOURCE
      SOURCE #getHighestLayer
        #/// <summary>
        #/// Gets the highest layer in which the tree node exists.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The tree node to check.
        #/// </param>
        #/// <param name="_old">
        #/// A Boolean value that indicates whether the layer from the base line model store is to be returned;
        #/// optional.
        #/// </param>
        #/// <returns>
        #/// The highest layer.
        #/// </returns>
        #/// <remarks>
        #/// This method aggregates the layer information for sub-nodes.For example, if a root node exists in
        #/// the SYS layer and has a subnode in the USR layer, the USR layer is returned.If the tree node is not
        #/// layer aware, the parents of the node will be visited to find the layer.
        #/// </remarks>
        #/// <exception cref="M:Exception::Error">
        #/// No layer can be found.
        #/// </exception>
        #public static UtilEntryLevel getHighestLayer(TreeNode _treeNode, boolean _old = false)
        #{
        #    int mask;
        #    int i = 1 << enumCnt(UtilEntryLevel);
        #    UtilEntryLevel layer = enumCnt(UtilEntryLevel);
        #    TreeNode treeNode = _treeNode;
        #
        #    while (treeNode && !treeNode.treeNodeType().isLayerAware())
        #    {
        #        treeNode = treeNode.AOTparent();
        #    }
        #
        #    if (treeNode)
        #    {
        #        mask = _old ? _treeNode.applObjectOldLayerMask() : _treeNode.applObjectLayerMask();
        #
        #        while (i)
        #        {
        #            if (bitTest(mask, i))
        #            {
        #                return layer;
        #            }
        #            i = i >> 1;
        #            layer--;
        #        }
        #    }
        #    throw error(strFmt("@SYS323334", funcName(), _treeNode ? _treeNode.toString() : identifierStr(null)));
        #}
      ENDSOURCE
      SOURCE #getLayer
        #/// <summary>
        #/// Gets a layer of a specified tree node.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The tree node of which to find a layer.
        #/// </param>
        #/// <returns>
        #/// A layer of the tree node.
        #/// </returns>
        #/// <remarks>
        #/// If the tree node is not layer aware the parents of the node will be visited to find the layer of
        #/// the node.
        #/// </remarks>
        #/// <exception cref="M:Exception::Error">
        #/// No layer was found.
        #/// </exception>
        #static UtilEntryLevel getLayer(TreeNode _treeNode)
        #{
        #    TreeNode treeNode = _treeNode;
        #
        #    while (treeNode && !treeNode.treeNodeType().isLayerAware())
        #    {
        #        treeNode = treeNode.AOTparent();
        #    }
        #
        #    if (treeNode)
        #    {
        #        return treeNode.AOTLayer();
        #    }
        #
        #    throw error(strFmt("@SYS323334", funcName(), _treeNode ? _treeNode.toString() : identifierStr(null)));
        #}
      ENDSOURCE
      SOURCE #getLayeredNode
        #/// <summary>
        #/// Gets the version of a <c>Treenode</c> class from the layer stack.
        #/// </summary>
        #/// <param name="treeNode">
        #/// The <c>Treenode</c> class to retrieve the tree node from.
        #/// </param>
        #/// <param name="n">
        #/// The level in the layer stack to retrieve; 0 is the highest, 1 is the second highest, and so on.
        #/// </param>
        #/// <param name="old">
        #/// A Boolean value that indicates whether to retrieve old tree nodes.
        #/// </param>
        #/// <returns>
        #/// The tree node from the requested position in the layer stack.
        #/// </returns>
        #/// <remarks>
        #/// It is the consumers responsibility to free the memory consumed by the returned tree node.If a
        #/// requested version does not exist, null will be returned.
        #/// </remarks>
        #/*
        #    ex 1:                ex 2:
        #        USR  0               VAR  0
        #        DIS  1               SYS  1
        #        SYP  2                   >1  NULL
        #        SYS  3
        #            >3  NULL
        #*/
        #static TreeNode getLayeredNode(
        #    TreeNode treeNode,
        #    int n,
        #    boolean old = false)
        #{
        #    TreeNode        highestLayerNode = TreeNode::findNode(SysTreeNode::getPath(treeNode));
        #    Map             maskMap;
        #
        #    if (!highestLayerNode)
        #        highestLayerNode = treeNode;
        #
        #    maskMap = SysTreeNode::getLayeredNodeMap(highestLayerNode, old);
        #
        #    //
        #    // Does a layered version exist?
        #    //
        #    if (maskMap.elements()-1 >= n) // n is zero based
        #    {
        #        return SysTreeNode::nodeInLayer(highestLayerNode, maskMap.lookup(n), true, old);
        #    }
        #    return null;
        #}
        #
      ENDSOURCE
      SOURCE #getLayeredNodeMap
        #/// <summary>
        #/// Builds a map with the layer stack.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The <c>Treenode</c> object from which to retrieve the map.
        #/// </param>
        #/// <param name="_old">
        #/// A Boolean value that indicates whether old tree nodes are to be retrieved; optional.
        #/// </param>
        #/// <returns>
        #/// The map.
        #/// </returns>
        #/*
        #    ex 1:                ex 2:
        #        USR  0               VAR  0
        #        DIS  1               SYS  1
        #        SYP  2                   >1  NULL
        #        SYS  3
        #            >3  NULL
        #*/
        #static public Map getLayeredNodeMap(
        #    TreeNode _treeNode,
        #    boolean _old = false)
        #{
        #    TreeNode        highestLayerNode;
        #    TreeNode        parentNode;
        #    Map             map = new Map(Types::Integer, Types::Enum);
        #
        #void layerMask2Map(int _mask)
        #{
        #
        #    int i = 1 << enumCnt(UtilEntryLevel) ;
        #    UtilEntryLevel level = enumCnt(UtilEntryLevel);
        #
        #    while (i)
        #    {
        #        if (bitTest(_mask, i))
        #            map.insert(map.elements(), level);
        #        i = i >> 1;
        #        level--;
        #    }
        #}
        #    if (!_treenode)
        #        return map;
        #
        #    highestLayerNode = TreeNode::findNode(SysTreeNode::getPath(_treeNode));
        #
        #    if (!highestLayerNode)
        #        highestLayerNode = _treeNode;
        #
        #    //
        #    // Find the parent node, that can provide a layer mask
        #    //
        #    parentNode = highestLayerNode;
        #    while (parentNode &&
        #          !parentNode.treeNodeType().isLayerAware() &&
        #          !parentNode.treeNodeType().isGetNodeInLayerSupported())
        #    {
        #        parentNode = parentNode.AOTparent();
        #    }
        #
        #    //
        #    // No parent means no layer mask, thus unable to return a layered node. E.g. for '\\Classes'
        #    //
        #    if (!parentNode)
        #    {
        #        return map; // Return empty map
        #    }
        #
        #    //
        #    // Get the right maskMap
        #    //
        #    if (_old)
        #    {
        #        layerMask2Map(parentNode.applObjectOldLayerMask());
        #    }
        #    else
        #    {
        #        layerMask2Map(parentNode.applObjectLayerMask());
        #    }
        #
        #    return map;
        #}
        #
      ENDSOURCE
      SOURCE #getNode
        #static TreeNode getNode(TreeNode _node)
        #{
        #    #AOT
        #    ProjectNode projectNode;
        #    TreeNode tmpNode;
        #
        #    if (_node &&
        #        !_node.AOTIsOld())
        #    {
        #        tmpNode = TreeNode::findNode(SysTreeNode::getPath(_node));
        #    }
        #
        #    //
        #    // Projects from the project view needs to expanded
        #    //
        #    projectNode = tmpNode as ProjectNode;
        #    if (projectNode)
        #    {
        #        tmpNode = projectNode.getRunNode();
        #    }
        #
        #    if (!tmpNode ||
        #        (tmpNode.treeNodePath() == #AOTRootPath && _node.treeNodePath() != #AOTRootPath)) //getPath couldn't resolve properly
        #    {
        #        tmpNode = _node;
        #    }
        #    return tmpNode;
        #}
      ENDSOURCE
      SOURCE #getPath
        #static TreeNodePath getPath(TreeNode _node)
        #{
        #    UtilElements utilElementFromNode;
        #
        #    TreeNodePath treeNodePath;
        #    TreeNode parent;
        #    TreeNode child;
        #
        #    //validate arguments before using them
        #    if (_node == null)
        #    {
        #        return '';
        #    }
        #
        #    if (TreeNode::findNode(_node.treeNodePath()))
        #    {
        #        return _node.treeNodePath();
        #    }
        #
        #    if (_node.treeNodeType().isUtilElement())
        #    {
        #        utilElementFromNode = _node.utilElement();
        #        treeNodePath = xUtilElements::getNodePathRough(utilElementFromNode);
        #
        #        if (! treeNodePath)
        #        {
        #            // sometimes TreeNode::findNode() cannot find existing nodes
        #            parent = _node.AOTparent();
        #
        #            if (parent)
        #            {
        #                child = parent.AOTfindChild(_node.treeNodeName());
        #
        #                if (child)
        #                {
        #                    treeNodePath = child.treeNodePath();
        #                }
        #            }
        #        }
        #        return treeNodePath;
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getPrivateProject
        #static ProjectListNode getPrivateProject()
        #{
        #    TreeNode treeNode;
        #    ;
        #
        #    treeNode = infolog.projectRootNode();
        #    treeNode = treeNode.AOTfirstChildEx(true);
        #
        #    return treeNode;
        #}
      ENDSOURCE
      SOURCE #getRootElement
        #/// <summary>
        #/// Gets the root element of a tree node.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The tree node of which to find the root element.
        #/// </param>
        #/// <returns>
        #/// The tree node that represents the root element.
        #/// </returns>
        #static public TreeNode getRootElement(TreeNode _treeNode)
        #{
        #    TreeNode rootElement = _treeNode;
        #
        #    while (rootElement &&
        #           !rootElement.treeNodeType().isRootElement())
        #    {
        #        rootElement = rootElement.AOTparent();
        #    }
        #
        #    return rootElement;
        #}
      ENDSOURCE
      SOURCE #getRootElementPath
        #/// <summary>
        #/// Gets the path of the root element of a tree node.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The tree node of which to find the path of the root element.
        #/// </param>
        #/// <returns>
        #/// The path of the root element.
        #/// </returns>
        #static public TreeNodePath getRootElementPath(TreeNode _treeNode)
        #{
        #    return SysTreeNode::applObjectPath(_treeNode.treeNodePath());
        #}
      ENDSOURCE
      SOURCE #getSharedProject
        #static ProjectListNode getSharedProject()
        #{
        #    TreeNode treeNode;
        #    ;
        #
        #    treeNode = infolog.projectRootNode();
        #    treeNode = treeNode.AOTfirstChildEx(true);
        #    treeNode = treeNode.AOTnextSibling();
        #
        #    return treeNode;
        #}
      ENDSOURCE
      SOURCE #getVCSControllableElement
        #/// <summary>
        #/// Returns the VCS controllable element for a tree node.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The tree node for which to find the VCS controllable element.
        #/// </param>
        #/// <returns>
        #/// The tree node that represents the VCS controllable element.
        #/// </returns>
        #public static TreeNode getVCSControllableElement(TreeNode _treeNode)
        #{
        #    TreeNode controllableElement = _treeNode;
        #
        #    while (controllableElement &&
        #           !controllableElement.treeNodeType().isVCSControllableElement())
        #    {
        #        controllableElement = controllableElement.AOTparent();
        #    }
        #
        #    return controllableElement;
        #}
      ENDSOURCE
      SOURCE #hasID
        #static boolean hasID(TreeNode _treeNode)
        #{
        #    //validate arguments before using them
        #    if (_treeNode == null || !_treeNode.treeNodeType().isUtilElement())
        #    {
        #        return false;
        #    }
        #
        #    return xUtilElements::hasID(_treeNode.utilElement().RecordType);
        #}
      ENDSOURCE
      SOURCE #hasLegacyID
        #/// <summary>
        #/// Indicates whether the specified tree node is expected to have a legacy ID.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The tree node to check.
        #/// </param>
        #/// <returns>
        #/// true if the tree node is expected to have a legacy ID; otherwise false.
        #/// </returns>
        #public static boolean hasLegacyID(TreeNode _treeNode)
        #{
        #    //validate arguments before using them
        #    if (_treeNode == null || !_treeNode.treeNodeType().isUtilElement())
        #    {
        #        return false;
        #    }
        #
        #    return (_treeNode.utilElement().RecordType!=UtilElementType::TableFullTextIndex) && SysTreeNode::hasID(_treeNode);
        #}
      ENDSOURCE
      SOURCE #hasSource
        #/// <summary>
        #/// This functions checks whether the <paramref name="_treeNode" /> parameter that is passed has X++
        #/// code or any text source in the node.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The <c>TreeNode</c> object.
        #/// </param>
        #/// <returns>
        #/// true if the node contains X++ or a text source; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called by various utilities like compare, wash, or scan to inspect the source.
        #/// </remarks>
        #static boolean hasSource(TreeNode _treeNode)
        #{
        #    //validate arguments before using them
        #    if (_treeNode == null)
        #        return false;
        #
        #    switch (_treeNode.handle())
        #    {
        #        case classNum(MemberFunction),
        #             classNum(Job),
        #             classNum(webStaticFileNode),
        #             classNum(VSProjectFileNode),
        #             classNum(DocNode):
        #            return true;
        #    }
        #
        #    if (_treeNode.treeNodeType().isUtilElement() &&
        #        SysTreeNode::codeIsSource(_treeNode.utilElement().RecordType))
        #    {
        #        return true;
        #    }
        #
        #    if (SysTreeNode::isProject(_treeNode))
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isNodeInLayer
        #static boolean isNodeInLayer(TreeNode treeNode, UtilEntryLevel layer, boolean old = treeNode ? treeNode.AOTIsOld() : false)
        #{
        #    if (treeNode &&
        #        treeNode.AOTLayers(old).in(layer))
        #    {
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isNodeInPatchLayer
        #static boolean isNodeInPatchLayer(TreeNode treeNode)
        #{
        #    if (treeNode && treeNode.treeNodeType().isLayerAware())
        #        return SysTreeNode::isPatchLayer(treeNode.AOTLayer());
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isPatchLayer
        #static boolean isPatchLayer(UtilEntryLevel layer)
        #{
        #    switch (layer)
        #    {
        #        case UtilEntryLevel::syp:
        #        case UtilEntryLevel::glp:
        #        case UtilEntryLevel::fpp:
        #        case UtilEntryLevel::slp:
        #        case UtilEntryLevel::isp:
        #        case UtilEntryLevel::vap:
        #        case UtilEntryLevel::cup:
        #        case UtilEntryLevel::usp:
        #            return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isProject
        #static public boolean isProject(TreeNode _treeNode)
        #{
        #    #TreeNodeSysNodeType
        #    //validate arguments before using them
        #    if (_treeNode == null)
        #        return false;
        #    return _treeNode.treeNodeType().id() == #NT_PROJECT_NODE;
        #}
      ENDSOURCE
      SOURCE #isSourceText
        #/// <summary>
        #/// Indicates whether the specified <c>UtilElementType</c> object has a text source in the node.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// A <c>TreeNode</c> object.
        #/// </param>
        #/// <returns>
        #/// true if the node contains any text; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method returns false for any X++ source code.
        #/// </remarks>
        #static boolean isSourceText(TreeNode _treeNode)
        #{
        #    if (_treeNode is VSProjectFileNode)
        #    {
        #        return true;
        #    }
        #
        #    //validate arguments before using them
        #    if (_treeNode == null || !_treeNode.treeNodeType().isUtilElement())
        #        return false;
        #
        #    switch (_treeNode.handle())
        #    {
        #        case classNum(DocNode):
        #            return true;
        #    }
        #
        #    if (SysTreeNode::codeIsSource(_treeNode.utilElement().RecordType))
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isType
        #static boolean isType(TreeNode _treeNode)
        #{
        #    #TreeNodeSysNodeType
        #
        #    //validate parameters before using them
        #    if (_treeNode == null)
        #        return false;
        #
        #    switch (_treeNode.treeNodeType().id())
        #    {
        #        case #NT_DBTABLE:
        #        case #NT_DBMAP:
        #        case #NT_DBVIEW:
        #        case #allExtendedDataTypes:
        #        case #NT_DBENUMTYPE:
        #        case #NT_CLASS:
        #        case #SysNodeTypeSystemTable:
        #        case #SysNodeTypeSystemType:
        #        case #SysNodeTypeSystemEnum:
        #        case #SysNodeTypeSystemClass:
        #            return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isUnwanted
        #public static boolean isUnwanted(TreeNode _treeNode)
        #{
        #    UtilElements utilElements;
        #
        #    if (_treeNode.treeNodeType().isUtilElement())
        #    {
        #        utilElements = xUtilElements::findTreeNode(_treeNode, true);
        #        if (utilElements.Name)
        #        {
        #            return xUtilElements::isUnwantedObject(utilElements);
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #modelElement2Path
        #/// <summary>
        #/// Constructs a treenode path for a model element.
        #/// </summary>
        #/// <param name="_element">
        #/// The model element.
        #/// </param>
        #/// <returns>
        #/// The treenode path
        #/// </returns>
        #/// <remarks>
        #/// This method may cause database queries.Consider using the
        #/// <c>SysTreeNode::modelElement2RootElementPath</c> method when you only require the root element path.
        #/// </remarks>
        #public static TreeNodePath modelElement2Path(SysModelElement _element)
        #{
        #    if (_element.RecId == _element.RootModelElement)
        #    {
        #        return SysTreeNode::modelElement2RootElementPath(_element);
        #    }
        #
        #    //
        #    // Go to the Server to construct the path
        #    //
        #    return SysTreeNode::modelElementRecId2Path(_element.RecId);
        #}
      ENDSOURCE
      SOURCE #modelElement2RootElementPath
        #/// <summary>
        #/// Constructs the treenode path of a root element for a model element.
        #/// </summary>
        #/// <param name="_modelElement">
        #/// The model element.
        #/// </param>
        #/// <returns>
        #/// The treenode path.
        #/// </returns>
        #public static TreeNodePath modelElement2RootElementPath(SysModelElement _modelElement)
        #{
        #    SysModelElement rootModelElement;
        #    UtilElements utilElements;
        #
        #    if (_modelElement.RecId == _modelElement.RootModelElement)
        #    {
        #        rootModelElement = _modelElement;
        #    }
        #    else
        #    {
        #        select firstOnly1 Name, ParentId, ElementType from rootModelElement
        #            where rootModelElement.RecId == _modelElement.RootModelElement;
        #    }
        #
        #    utilElements.Name = rootModelElement.Name;
        #    utilElements.ParentId = rootModelElement.ParentId;
        #    utilElements.RecordType = rootModelElement.ElementType;
        #
        #    return xUtilElements::getNodePathRough(utilElements);
        #}
      ENDSOURCE
      SOURCE #modelElementRecId2Path
        #private static server TreeNodePath modelElementRecId2Path(ModelElementRecid _elementId)
        #{
        #    SysModelElement modelElement;
        #    SysModelElementType elementType;
        #    TreeNodePath path;
        #
        #    select firstOnly modelElement
        #        where modelElement.RecId == _elementId
        #        join elementType
        #            where elementType.RecId == modelElement.ElementType;
        #
        #    if (!modelElement || !elementType)
        #    {
        #        throw error(error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    if (modelElement.RecId == modelElement.RootModelElement)
        #    {
        #        return SysTreeNode::modelElement2RootElementPath(modelElement);
        #    }
        #
        #    path = SysTreeNode::modelElementRecId2Path(modelElement.ParentModelElement)+'\\';
        #    path += elementType.TreeNodeName ?
        #            elementType.TreeNodeName+'\\' : '';
        #
        #    switch (elementType.RecId)
        #    {
        #        case CLRInterop::getAnyTypeForObject(Microsoft.Dynamics.AX.Framework.Tools.ModelManagement.ElementType::FormDataSources):
        #            path += 'Data sources';
        #            break;
        #
        #        case CLRInterop::getAnyTypeForObject(Microsoft.Dynamics.AX.Framework.Tools.ModelManagement.ElementType::SecurityPermissionSet):
        #            if (modelElement.Name == 'Permissions')
        #            {
        #                path = subStr(path,1,strlen(path)-1); //Remove trailing '\'
        #            }
        #            else
        #            {
        #                path += modelElement.Name;
        #            }
        #            break;
        #
        #        default:
        #            path += modelElement.Name;
        #            break;
        #    }
        #
        #    return path;
        #}
      ENDSOURCE
      SOURCE #newTreeNode
        #/// <summary>
        #/// Creates a new <c>SysTreeNode</c> instance.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// A <c>TreeNode</c> instance.
        #/// </param>
        #/// <returns>
        #/// The new <c>SysTreeNode</c> instance.
        #/// </returns>
        #public static SysTreeNode newTreeNode(TreeNode _treeNode)
        #{
        #    SysTreeNode sysTreeNode;
        #
        #    if (_treeNode is VSProjectNode)
        #    {
        #        sysTreeNode = new SysTreeNodeVSProject();
        #    }
        #    else if (_treeNode is VSItemNode)
        #    {
        #        sysTreeNode = new SysTreeNodeVSItem();
        #    }
        #    else
        #    {
        #        sysTreeNode = SysTreeNode::construct();
        #    }
        #
        #    sysTreeNode.parmTreeNode(_treeNode);
        #    return sysTreeNode;
        #}
      ENDSOURCE
      SOURCE #newTreeNodePath
        #public static SysTreeNode newTreeNodePath(TreeNodePath _treeNodePath)
        #{
        #    return SysTreeNode::newTreeNode(TreeNode::findNode(_treeNodePath));
        #}
      ENDSOURCE
      SOURCE #nodeInLayer
        #/// <summary>
        #/// Retrieves the specified tree node in the specified layer.
        #/// </summary>
        #/// <param name="_treeNode">
        #/// The tree node.
        #/// </param>
        #/// <param name="_layer">
        #/// The layer.
        #/// </param>
        #/// <param name="_forceLayer">
        #/// A Boolean value that indicates that tree nodes from the provided layer are accepted.
        #/// </param>
        #/// <param name="_old">
        #/// A Boolean value that indicates whether a version of the tree node from the old model store is
        #/// requested.
        #/// </param>
        #/// <returns>
        #/// The tree node from the specified layer.
        #/// </returns>
        #/// <remarks>
        #/// If the requested tree node is the same version as the supplied tree node, it is returned so that
        #/// the parent information is not lost.
        #/// </remarks>
        #static TreeNode nodeInLayer(TreeNode       _treeNode,
        #                            UtilEntryLevel _layer,
        #                            boolean        _forceLayer = true,
        #                            boolean        _old        = false)
        #{
        #    int requestedLayer;
        #    TreeNode tmp;
        #    TreeNode parent;
        #    TreeNode parentGetNode;
        #    Stack stack;
        #    #define.invalidLayer(255)
        #
        #UtilEntryLevel getLayer(TreeNode _node)
        #{
        #    Set layers;
        #    int layer;
        #
        #    if (!_node.treeNodeType().isLayerAware())
        #    {
        #        return #invalidLayer;
        #    }
        #
        #    layers = SysTreeNode::getLayeredNodeMap(_node, _old).valueSet();
        #
        #    for (layer = _layer; layer >=0; layer--)
        #    {
        #        if (layers.in(layer))
        #        {
        #            return layer;
        #        }
        #    }
        #    return #invalidLayer;
        #}
        #
        #
        #    if (!_treeNode)
        #        return null;
        #
        #    //
        #    // Find first parent that supports getNodeInlayer and layers.
        #    //
        #    stack = new Stack();
        #    parent = _treeNode;
        #    while (parent &&
        #           !(parent.treeNodeType().isGetNodeInLayerSupported() &&
        #             parent.treeNodeType().isLayerAware()))
        #    {
        #        stack.push([parent.treeNodeName()]);
        #        parent = parent.AOTparent();
        #    }
        #
        #    if (!parent)
        #        return null;
        #
        #    requestedLayer = _forceLayer ? _layer : getLayer(parent);
        #
        #    if (requestedLayer != #invalidLayer)
        #    {
        #        //
        #        // Parent found - now find the right child again.
        #        //
        #        parentGetNode = parent.getNodeInLayer(requestedLayer, _old);
        #        tmp = parentGetNode;
        #        while (tmp && stack.qty())
        #        {
        #            tmp = tmp.AOTfindChild(conPeek(stack.pop(),1));
        #        }
        #
        #        //
        #        // If tmp is not found, or tmp's path is incomplete
        #        // return _treenode if it matches criteria.
        #        //
        #        if (_treeNode.AOTIsOld() == _old &&
        #            SysTreeNode::getLayer(_treeNode) == requestedLayer &&       // To preserve path
        #            (!tmp || !TreeNode::findNode(SysTreeNode::getPath(tmp)))    // Is the path from the copy invalid?
        #           )
        #        {
        #            if (parentGetNode &&
        #                parentGetNode.treeNodeType().isConsumingMemory())
        #            {
        #                //Tmp is not used, so release memory consumed by the local variable parentGetNode - as the caller cannot do it
        #                parentGetNode.treeNodeRelease();
        #            }
        #            return _treeNode;
        #        }
        #        else
        #        {
        #            if (tmp == null &&
        #                parentGetNode &&
        #                parentGetNode.treeNodeType().isConsumingMemory())
        #            {
        #                //Tmp is null, so release memory consumed by the local variable parentGetNode - as the caller cannot do it
        #                parentGetNode.treeNodeRelease();
        #            }
        #            return tmp;
        #        }
        #    }
        #    return null;
        #}
        #
      ENDSOURCE
      SOURCE #numOfLayers
        #static int numOfLayers(TreeNode treeNode, boolean old = false, boolean includePatchLayers = true)
        #{
        #    int counter;
        #    SetEnumerator enum;
        #
        #    //validate parameters before using them
        #    if (treeNode == null)
        #        return -1;
        #
        #    enum = treeNode.AOTLayers(old).getEnumerator();
        #
        #    while (enum.moveNext())
        #    {
        #        if ( includePatchLayers || !SysTreeNode::isPatchLayer(enum.current()))
        #        {
        #            counter++;
        #        }
        #    }
        #    return counter;
        #}
      ENDSOURCE
      SOURCE #path2ApplObjectName
        #public static TreeNodeName path2ApplObjectName(TreeNodePath _treeNodePath)
        #{
        #    return SysTreeNode::applObjectName(_treeNodePath);
        #}
      ENDSOURCE
      SOURCE #path2ApplObjectType
        #public static UtilElementType path2ApplObjectType(TreeNodePath _treeNodePath)
        #{
        #    #AOT
        #    #define.struct('\\\\:a.*\\\\:a')
        #    #define.structElement('\\\\:a')
        #    #define.startWith('<')
        #
        #    UtilElementType utilElementType;
        #    boolean         found;
        #    TreeNodePath    parentPath;
        #    MapIterator     mapIterator = new MapIterator(SysTreeNode::applObjectPathTypeMap());
        #    Map             map         = SysTreeNode::applObjectPathDoublePathDelimitersMap();
        #
        #    mapIterator.begin();
        #    while (mapIterator.more() &&
        #           (!found ||
        #            (map.exists(parentPath) &&
        #             match(#startWith + map.lookup(parentPath) + #struct, _treeNodePath))))
        #    {
        #        if (match(#startWith + map.lookup(mapIterator.key()) + #struct, _treeNodePath))
        #        {
        #            parentPath      = mapIterator.key();
        #            utilElementType = mapIterator.value();
        #            found           = true;
        #        }
        #        else
        #        {
        #            if (match(#startWith + map.lookup(mapIterator.key()) + #structElement, _treeNodePath))
        #            {
        #                parentPath      = mapIterator.key();
        #                utilElementType = mapIterator.value();
        #                found           = true;
        #            }
        #        }
        #        mapIterator.next();
        #    }
        #
        #    return utilElementType;
        #}
      ENDSOURCE
      SOURCE #path2Image
        #public static client server ImageRes path2Image(TreeNodePath _treeNodePath)
        #{
        #    Map path2Image = SysModelMetaData::newFromCache().path2ImageMap();
        #    #ResAppl
        #
        #    if (path2Image.exists(_treeNodePath))
        #    {
        #        return path2Image.lookup(_treeNodePath);
        #    }
        #    return #imageFolder;
        #}
      ENDSOURCE
      SOURCE #path2ProjectGroupNodeType
        #public static GroupNodeType path2ProjectGroupNodeType(TreeNodePath _treeNodePath)
        #{
        #    #AOT
        #    #define.struct('\\\\:a.')
        #    #define.startWith('<')
        #
        #    GroupNodeType   groupNodeType = GroupNodeType::All;
        #    boolean         found;
        #    TreeNodePath    parentPath;
        #    Map             groupNodeTypeMap    = SysTreeNode::pathProjectGroupNodeTypeMap();
        #    Map             map;
        #    MapIterator     mapIterator;
        #
        #    if (groupNodeTypeMap.exists(_treeNodePath))
        #    {
        #        groupNodeType = groupNodeTypeMap.lookup(_treeNodePath);
        #    }
        #    else
        #    {
        #        map                 = SysTreeNode::pathDoublePathDelimitersMap();
        #        mapIterator         = new MapIterator(groupNodeTypeMap);
        #
        #        mapIterator.begin();
        #        while (mapIterator.more() &&
        #               (!found ||
        #                (map.exists(parentPath) &&
        #                 match(#startWith + map.lookup(parentPath) + #struct, _treeNodePath))))
        #        {
        #            if (mapIterator.key() == _treeNodePath)
        #            {
        #                parentPath      = mapIterator.key();
        #                groupNodeType   = mapIterator.value();
        #                found           = true;
        #            }
        #            else
        #            {
        #                if (match(#startWith + map.lookup(mapIterator.key()) + #struct, _treeNodePath))
        #                {
        #                    parentPath      = mapIterator.key();
        #                    groupNodeType   = mapIterator.value();
        #                    found           = true;
        #                }
        #            }
        #            mapIterator.next();
        #        }
        #    }
        #
        #    return groupNodeType;
        #}
      ENDSOURCE
      SOURCE #pathDoublePathDelimitersMap
        #private static client server Map pathDoublePathDelimitersMap()
        #{
        #    Map         map;
        #    MapIterator mapIterator;
        #    ;
        #    if (isRunningOnServer())
        #    {
        #        map = appl.globalCache().get(classStr(SysTreeNode), funcName(), null);
        #    }
        #    else
        #    {
        #        map = infolog.globalCache().get(classStr(SysTreeNode), funcName(), null);
        #    }
        #
        #    if (!map)
        #    {
        #        map         = new Map(Types::String, Types::String);
        #
        #        mapIterator = new MapIterator(SysTreeNode::pathProjectGroupNodeTypeMap());
        #        mapIterator.begin();
        #        while (mapIterator.more())
        #        {
        #            map.insert(mapIterator.key(), SysTreeNode::duplicatePathDelimiters(mapIterator.key()));
        #            mapIterator.next();
        #        }
        #
        #        if (isRunningOnServer())
        #        {
        #            appl.globalCache().set(classStr(SysTreeNode), funcName(), map);
        #        }
        #        else
        #        {
        #            infolog.globalCache().set(classStr(SysTreeNode), funcName(), map);
        #        }
        #    }
        #
        #    return map;
        #}
      ENDSOURCE
      SOURCE #pathName
        #/*
        #    returns the name as a treeNode returns in treeNodeName (treeNodeName is a protected method name)
        #    given a path
        #*/
        #
        #static TreeNodePath pathName(TreeNodePath _path)
        #{
        #    int length = strLen(_path);
        #    ;
        #    return subStr(_path, strFind(_path, '\\', length, -length) + 1, length);
        #}
      ENDSOURCE
      SOURCE #pathParent
        #/*
        #    returns the path-only part of a treeNode path, i.e. the tree node path without the name.
        #    This is equivalent to the tree node path of the parent,
        #    given a tree node path.
        #*/
        #
        #static TreeNodePath pathParent(TreeNodePath _path)
        #{
        #    int length = strLen(_path);
        #    ;
        #    return subStr(_path, 1, strFind(_path, '\\', length, -length) - 1);
        #}
      ENDSOURCE
      SOURCE #pathProjectGroupNodeTypeMap
        #public static Map pathProjectGroupNodeTypeMap()
        #{
        #    return SysModelMetaData::newFromCache().path2GroupNodeTypeMap();
        #}
      ENDSOURCE
      SOURCE #refreshAll
        #public static void refreshAll()
        #{
        #    Enumerator enumerator = SysModelMetaData::newFromCache().getEnumeratorConcepts();
        #    SysModelMetaDataConcept concept;
        #    TreeNode treeNode;
        #
        #    while (enumerator.moveNext())
        #    {
        #        concept = enumerator.current();
        #
        #        treeNode = TreeNode::findNode(concept.parmCollectionPath());
        #        if (treeNode)
        #        {
        #            treeNode.AOTrefresh();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #supportsGranularVcsOperations
        #/// <summary>
        #/// Returns true if the granular source control operations are supported on the given tree node path
        #/// </summary>
        #/// <param name="_treeNodePath">The tree node path of the node.</param>
        #/// <returns>true if the granular source control operations are supported on the tree-node path; otherwise, false.</returns>
        #public static boolean supportsGranularVcsOperations(TreeNodePath _treeNodePath)
        #{
        #    #AOT
        #
        #    // Only Visual Studio Projects supports granular source control operations (on the file level).
        #    return strStartsWith(_treeNodePath, #VSProjectsPath);
        #}
      ENDSOURCE
      SOURCE #treeNodePath2FilePath
        #static public FilePath treeNodePath2FilePath(TreeNodePath _treeNodePath)
        #{
        #    #AOT
        #    str name;
        #    str path;
        #    int i;
        #
        #    if (strStartsWith(_treeNodePath, #SystemDocPath))
        #    {
        #        i = strFind(_treeNodePath, '\\', strLen(_treeNodePath), -maxInt());
        #        path = subStr(_treeNodePath, 1, i);
        #        name = subStr(_treeNodePath, i+1, maxInt());
        #        name = strReplace(name, '*', strFmt('#%1', char2num('*',1)));
        #        name = strReplace(name, '?', strFmt('#%1', char2num('?',1)));
        #        name = strReplace(name, '.', strFmt('#%1', char2num('.',1)));
        #        name = strReplace(name, ':', strFmt('#%1', char2num(':',1)));
        #        name = strReplace(name, '\\', strFmt('#%1', char2num('\\',1)));
        #        name = strReplace(name, '/', strFmt('#%1', char2num('/',1)));
        #        name = strReplace(name, '^', strFmt('#%1', char2num('^',1)));
        #        name = strReplace(name, '<', strFmt('#%1', char2num('<',1)));
        #        name = strReplace(name, '>', strFmt('#%1', char2num('>',1)));
        #        name = strReplace(name, '|', strFmt('#%1', char2num('|',1)));
        #        name = strReplace(name, '@', strFmt('#%1', char2num('@',1)));
        #        name = strReplace(name, '#', strFmt('#%1', char2num('#',1)));
        #
        #        path += name;
        #    }
        #    else if (strStartsWith(_treeNodePath, #VSProjectsPath))
        #    {
        #        path = SysTreeNodeVSItem::treeNodePath2FilePath(_treeNodePath);
        #    }
        #    else
        #    {
        #        path = _treeNodePath;
        #    }
        #    return path;
        #}
      ENDSOURCE
      SOURCE #treeNodesWithSource
        #static container treeNodesWithSource()
        #{
        #    return [classNum(MemberFunction), classNum(Job), classNum(DocNode)];
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysTreenodeCompareContext unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysTreenodeCompareContext
    PROPERTIES
      Name                #SysTreenodeCompareContext
      RunOn               #Client
      Origin              #{2D1903BB-0000-1000-4AC3-13E30BFE5CFD}
      LegacyId            #955
    ENDPROPERTIES
    
    METHODS
      SOURCE #caption
        #public str caption()
        #{
        #    return "@SYS53419";
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysTreeNodeCompareContext implements SysCompareContextProvider, SysSaveable
        #{
        #    TreeNode treeNode1, treeNode2;
        #    str      default1, default2;
        #
        #    SysTreeNode sysTreeNode1, sysTreeNode2;
        #
        #    SysTreeNode sysTreeNodeTopOriginal; // often oldSys, these variables are set to non null if highest and second highest layer is compared
        #    SysTreeNode sysTreeNodeTopTheirs;   // often newSys
        #    SysTreeNode sysTreeNodeTopCurrent;  // often newUsr
        #    SysTreeNode sysTreeNodeTopYours;    // often oldUsr
        #
        #    SysMergeDirection   mergeDirection;
        #
        #    TreeNode            saveTopComparable1;
        #    TreeNode            saveTopComparable2;
        #
        #    ClassName           source1; // ClassName corresponding to origin of topComparable1 (~Standard,Old,VCS,...)
        #    ClassName           source2;
        #
        #    boolean             suppressWhitespace;
        #    boolean             caseSensitive;
        #    boolean             showlineNumbers;
        #    boolean             showDifferencesOnly;
        #
        #    boolean             suppressNodesOnlyIn1;
        #    boolean             suppressNodesOnlyIn2;
        #
        #    boolean             suppressIDinProperties;
        #
        #    boolean             currentLayerOnly;
        #
        ##define.CurrentVersion(3)
        ##define.version1(1)
        ##localmacro.CurrentList
        #    source1,
        #    source2,
        #    suppressWhitespace,
        #    caseSensitive,
        #    showlineNumbers,
        #    showDifferencesOnly
        ##endmacro
        #
        #    #define.SpecialMarkupStart('·')
        #    #define.SpecialMarkupEnd('°')
        #
        #}
      ENDSOURCE
      SOURCE #comparableItemDefault
        #public str comparableItemDefault(SysCompareType _type)
        #{
        #    switch (_type)
        #    {
        #        case SysCompareType::Text1:
        #            return default1;
        #
        #        case SysCompareType::Text2:
        #            return default2;
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #comparableList
        #public List comparableList(SysCompareType _type)
        #{
        #    List list;
        #
        #    switch (_type)
        #    {
        #        case SysCompareType::Text1:
        #            if (sysTreeNode1 && classIdGet(sysTreeNode1) != classNum(SysTreeNode))
        #            {
        #                list = new List(Types::Class);
        #                list.addEnd(sysTreeNode1);
        #            }
        #            else if (treeNode1)
        #            {
        #                list = this.comparableListTreenode(_type, treeNode1);
        #            }
        #            break;
        #
        #        case SysCompareType::Text2:
        #            if (sysTreeNode2 && classIdGet(sysTreeNode2) != classNum(SysTreeNode))
        #            {
        #                list = new List(Types::Class);
        #                list.addEnd(sysTreeNode2);
        #            }
        #            else if (treeNode2)
        #            {
        #                list = this.comparableListTreenode(_type, treeNode2);
        #            }
        #            break;
        #    }
        #
        #    //
        #    // If it is the same treenode, then detect and use default values (selection in combobox)
        #    //
        #    if (treeNode1 &&
        #        treeNode2 &&
        #        treeNode1.treeNodePath() == treeNode2.treeNodePath())
        #    {
        #        this.detectDefaultItem(list, _type);
        #    }
        #    return list;
        #}
      ENDSOURCE
      SOURCE #comparableListTreenode
        #protected List comparableListTreenode(SysCompareType _type, TreeNode _treeNode)
        #{
        #    int            maskNew;
        #    int            maskOld;
        #    List           list = new List(Types::Class);
        #    UtilEntryLevel layer;
        #    int            i;
        #    SysVersionControlTmpItem item;
        #    TreeNode        treeNodeNew;
        #    UtilIdElements  utilElement;
        #    TreeNode        treeNodeSameNameDiffId;
        #    int             infologLine;
        #    int             line;
        #    UtilIdElements  utilElementFromNode;
        #
        #    if (!_treeNode.treeNodeType().isLayerAware())
        #    {
        #        return list;
        #    }
        #
        #    if (_treeNode.AOTIsOld())
        #    {
        #        // find treeNode in New (= not in the Old directory)
        #        treeNodeNew = SysTreeNode::getLayeredNode(_treeNode, 0, false /* not Old */);
        #
        #        if (treeNodeNew &&
        #            treeNodeNew.treeNodePath() != infolog.rootNode().treeNodePath())
        #        {
        #            _treeNode = treeNodeNew;
        #            maskNew = _treeNode.applObjectLayerMask();
        #            maskOld = _treeNode.applObjectOldLayerMask();
        #        }
        #        else
        #        {
        #            maskOld = _treeNode.applObjectLayerMask();
        #        }
        #    }
        #    else
        #    {
        #        maskNew = _treeNode.applObjectLayerMask();
        #        maskOld = _treeNode.applObjectOldLayerMask();
        #    }
        #
        #    // add usp, usr, ..., syp, sys
        #    for (i = enumCnt(UtilEntryLevel)-1; i>=0; i--)
        #    {
        #        if (maskNew & (1 << i))
        #        {
        #            layer = i;
        #            list.addEnd(SysTreeNodeDelayLoaded::newTreeNode(_treeNode, layer));
        #        }
        #    }
        #
        #    // Add nodes with the same name but different Id
        #    // Design decision: we will only make this check in Standard, we will not report name/Id problems in Old during compare
        #    if (SysTreeNode::hasID(_treeNode) && _treeNode.treeNodeType().isUtilElement())
        #    {
        #        utilElementFromNode = _treeNode.utilIdElement();
        #        while select utilElement
        #            order by UtilLevel
        #            where  utilElement.RecordType == utilElementFromNode.RecordType
        #                && utilElement.ParentId   == utilElementFromNode.ParentId
        #                && utilElement.Name       == utilElementFromNode.Name
        #                && utilElement.Id         != utilElementFromNode.Id // is sometimes the sys Id even if the tree node is shown as <name>(usr) in AOT/project
        #        {
        #            treeNodeSameNameDiffId = infolog.getNode(   utilElement.RecordType,
        #                                                        utilElement.Name,
        #                                                        utilElement.ParentId,
        #                                                        UtilFileType::Application,
        #                                                        utilElement.UtilLevel,
        #                                                        true);
        #            if (treeNodeSameNameDiffId)
        #            {
        #                list.addEnd(SysTreeNode::newTreeNode(treeNodeSameNameDiffId));
        #            }
        #            else
        #            {
        #                if (_type == SysCompareType::Text1) // avoid that the name/Id problem is reported for both text1 and text2
        #                {
        #                    setPrefix(xUtilIdElements::description(utilElement));
        #
        #                    warning("@SYS111257");
        #
        #                    xUtilIdElements::checkForNameIdConflict(utilElement);
        #                }
        #            }
        #        }
        #    }
        #
        #    // add usp(Old), usr(Old), ..., syp(Old), sys(Old)
        #    for (i=enumCnt(UtilEntryLevel)-1; i>=0; i--)
        #    {
        #        if (maskOld & (1 << i))
        #        {
        #            layer = i;
        #            list.addEnd(SysTreeNodeVirtualOld::newTreeNode(_treeNode, layer));
        #        }
        #    }
        #
        #    if (_type==SysCompareType::Text2 &&
        #        SysTreenodeUpgrade::isUpgradePossible(_treeNode) &&
        #        !SysTreeNode::isPatchLayer(currentAOLayer()))
        #    {
        #        list.addEnd(SysTreeNodeVirtualUpgraded::newTreeNode(_treeNode));
        #    }
        #
        #    if (versioncontrol.ideIntegration() && _treeNode.treeNodeType().isRootElement())
        #    {
        #        // don't write in the infoLog if it was not possible to get the history
        #        infologLine = infologLine();
        #        item.setTmpData(versioncontrol.getItemHistory(SysTreeNode::newTreeNode(_treeNode)));
        #        infolog.clear(infologLine);
        #
        #        while select item
        #            order by ChangeNumber desc, Version asc
        #        {
        #            line++;
        #
        #            // show the 20 newest revisions and the oldest one
        #            if (line<=20 || item.Version == 1)
        #                list.addEnd(SysTreeNodeVirtualVCS::newVCSItem(item));
        #        }
        #    }
        #
        #    if (_type==SysCompareType::Text2 &&
        #        !SysTreeNode::isSourceText(_treeNode) &&
        #        _treeNode.treeNodeType().isGetNodeInLayerSupported())
        #    {
        #        list.addEnd(SysTreeNodeVirtualWashed::newTreeNode(_treeNode));
        #    }
        #
        #    return list;
        #}
      ENDSOURCE
      SOURCE #detectDefaultItem
        #protected void detectDefaultItem(List _list, SysCompareType _type)
        #{
        #    ListEnumerator listEnum = _list.getEnumerator();
        #    SysComparable comparable;
        #
        #    while (listEnum.moveNext())
        #    {
        #        comparable = listEnum.current();
        #
        #        switch (_type)
        #        {
        #            case SysCompareType::Text1:
        #                if (classId2Name(classIdGet(comparable)) == source1)
        #                {
        #                    default1 = comparable.comparableName();
        #                    return;
        #                }
        #                break;
        #
        #            case SysCompareType::Text2:
        #                if (classId2Name(classIdGet(comparable)) == source2)
        #                {
        #                    default2 = comparable.comparableName();
        #                    return;
        #                }
        #                break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #findMatchingOriginal
        #protected SysTreeNode findMatchingOriginal(SysTreeNode _currentOrYours)
        #{
        #    if (sysTreeNodeTopCurrent)
        #        return SysTreeNode::findMatchingOriginal(sysTreeNodeTopOriginal, sysTreeNodeTopTheirs, sysTreeNodeTopCurrent, _currentOrYours);
        #
        #    return SysTreeNode::findMatchingOriginal(sysTreeNodeTopOriginal, sysTreeNodeTopTheirs, sysTreeNodeTopYours, _currentOrYours);
        #}
      ENDSOURCE
      SOURCE #initParmDefault
        #/*
        #This method is called when no SysLastValue record can be found in xSysLastValue.GetLast()
        #*/
        #public void initParmDefault()
        #{
        #    source1 = '';
        #    source2 = '';
        #    suppressWhitespace = false;
        #    caseSensitive = false;
        #    showlineNumbers = false;
        #    showDifferencesOnly = true;
        #}
      ENDSOURCE
      SOURCE #lastValueDataAreaId
        #public DataAreaId lastValueDataAreaId()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #lastValueDesignName
        #public IdentifierName lastValueDesignName()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #lastValueElementName
        #public IdentifierName lastValueElementName()
        #{
        #    return classId2Name(classIdGet(this));
        #}
      ENDSOURCE
      SOURCE #lastValueType
        #public UtilElementType lastValueType()
        #{
        #    return UtilElementType::Class;
        #}
      ENDSOURCE
      SOURCE #lastValueUserId
        #public UserId lastValueUserId()
        #{
        #    return curUserId();
        #}
      ENDSOURCE
      SOURCE #manipulateResult
        #// Insert values from Original into the _result container
        #public container manipulateResult(  container _result,
        #                                    SysComparableTmpText _text1,
        #                                    SysComparableTmpText _text2,
        #                                    SysComparable _comparable1,
        #                                    SysComparable _comparable2
        #                                    )
        #{
        #    #properties
        #
        #    // copied from SysTreenode class declaration
        #    #define.TextProperties(2)
        #
        #    int length;
        #    SysCompareType type;
        #    int i;
        #    str nameAndHash;
        #    str propertyName;
        #    str propertyValue;
        #    str decoratedPropertyValue;
        #    str originalValue;
        #
        #    SysTreeNode treenode;
        #    SysTreeNode treenodeHighest;
        #    SysTreeNode original;
        #
        #    SysUpgradeTreenode yourOrTheirsChild;
        #
        #    if (! sysTreeNodeTopOriginal)
        #        return _result; // there is no original, not possible to insert original values into _result
        #
        #    // One of _comparable1,_comparable2 must be from highest layer (since there is an original)
        #    // Find out which one of them
        #
        #    if (sysTreeNodeTopCurrent)
        #    {
        #        treenodeHighest = sysTreeNodeTopCurrent;
        #    }
        #    else if (sysTreeNodeTopYours)
        #    {
        #        treenodeHighest = sysTreeNodeTopYours;
        #    }
        #
        #    // Create a SysUpgradeTreenode - we need the treenode path from it to find the original
        #    if (_comparable1 is SysTreeNode)
        #    {
        #        treenode = _comparable1 as SysTreeNode;
        #        yourOrTheirsChild = SysUpgradeTreenode::newTreeNode(treenode.parmTreeNode());
        #    }
        #    else if (_comparable2 is SysTreeNode)
        #    {
        #        treenode = _comparable2 as SysTreeNode;
        #        yourOrTheirsChild = SysUpgradeTreenode::newTreeNode(treenode.parmTreeNode());
        #    }
        #    else
        #    {
        #        return _result;
        #    }
        #
        #    if (_text1.Type == #TextProperties)
        #    {
        #        length = conLen(_result);
        #
        #        for(i=1; i<=length; i++)
        #        {
        #            [type, nameAndHash, propertyName, propertyValue] = this.manipulateResultExtractData(conPeek(_result, i));
        #
        #            decoratedPropertyValue = this.manipulateResultDecorateProperty(propertyName, propertyValue);
        #            if (decoratedPropertyValue != propertyValue)
        #            {
        #                _result = conPoke(_result, i, [type, strFmt('%1%2\n', nameAndHash, decoratedPropertyValue)]);
        #            }
        #
        #            if (type == SysCompareType::Identical ||
        #                type == SysCompareType::Text2)
        #            {
        #                // Find original
        #                if (! original)
        #                {
        #                    original = this.findMatchingOriginal(yourOrTheirsChild);
        #
        #                    if (! original)
        #                        return _result;
        #                }
        #
        #                if (propertyName != #propertyId && original.hasProperty(propertyName))
        #                {
        #                    originalValue = original.parmTreeNode().AOTgetProperty(propertyName);
        #
        #                    if (originalValue != propertyValue ||
        #                        type == SysCompareType::Text2)
        #                    {
        #                        _result = conIns(_result, i+1,
        #                                        [SysCompareType::TextOriginal,
        #                                        strFmt('%1%2 %4font face=arial color=gray size=0.9m%5[Original value from Old %3]%4/font%5\n',
        #                                            nameAndHash,
        #                                            this.manipulateResultDecorateProperty(propertyName, originalValue),
        #                                            SysTreeNode::getLayer(sysTreeNodeTopOriginal.parmTreeNode()),
        #                                            #specialMarkupStart,
        #                                            #specialMarkupEnd)
        #                                        ]
        #                                        );
        #
        #                        i++;
        #                        length++;
        #                    }
        #                }
        #            }
        #        }
        #    }
        #
        #    return _result;
        #}
      ENDSOURCE
      SOURCE #manipulateResultDecorateProperty
        #protected str manipulateResultDecorateProperty(str _propertyName, str _propertyValue)
        #{
        #    str decoratedPropertyValue = _propertyValue;
        #
        #    if (SysLabel::isLabelId(_propertyValue))
        #    {
        #        decoratedPropertyValue = strFmt('%3a title="%1"%4%2%3/a%4', SysLabel::labelId2String(_propertyValue), _propertyValue, #SpecialMarkupStart, #SpecialMarkupEnd);
        #    }
        #
        #    return decoratedPropertyValue;
        #}
      ENDSOURCE
      SOURCE #manipulateResultExtractData
        #protected container manipulateResultExtractData(container _data)
        #{
        #    SysCompareType type;
        #    str nameValue;
        #    int hashPos;
        #    str propertyName;
        #    str propertyValue;
        #
        #    [type, nameValue] = _data;
        #
        #    hashPos = strScan(nameValue, '#', 1, strLen(nameValue)+1);
        #    if (hashPos)
        #    {
        #        propertyName = subStr(nameValue,1,hashPos-1);
        #        propertyName = strLTrim(strRTrim(propertyName));
        #
        #        // propertyName can be null, e.g. for array properties nameValue can be e.g. '  #0 '
        #        if (propertyName)
        #        {
        #            propertyValue = subStr(nameValue,hashPos+1, strLen(nameValue) - hashPos);
        #
        #            if (strEndsWith(propertyValue, '\n')) //Remove trailing new-line
        #                propertyValue = subStr(propertyValue, 1, strLen(propertyValue) - 1);
        #
        #            propertyValue = strLRTrim(propertyValue);
        #        }
        #    }
        #    return [type, subStr(nameValue, 1, hashPos), propertyName, propertyValue];
        #}
      ENDSOURCE
      SOURCE #mergeDirection
        #public SysMergeDirection mergeDirection(
        #    SysComparable _topComparable1,
        #    SysComparable _topComparable2)
        #{
        #
        #boolean isTopLayer(int _mask, UtilEntryLevel _layer)
        #{
        #    int i;
        #
        #    for (i=enumCnt(UtilEntryLevel); i>_layer; i--)
        #    {
        #        if (bitTest(_mask, 1 << i))
        #        {
        #            //Exists in a higher layer
        #            return false;
        #        }
        #    }
        #
        #    if (bitTest(_mask, 1 << _layer))
        #    {
        #        //Exists in the requested layer
        #        return true;
        #    }
        #
        #    return false;
        #}
        #
        #
        #boolean isNodeEditable(SysTreeNode _sysTreeNode)
        #{
        #    TreeNode node = _sysTreeNode ? _sysTreeNode.parmTreeNode(): null;
        #    TreeNode nodeInAot; //Is always highest layers, as it is found through aot path
        #
        #    if (node &&
        #        !node.AOTIsOld() &&
        #        !(_sysTreeNode is SysTreeNodeVirtual))
        #    {
        #        nodeInAot = TreeNode::findNode(SysTreeNode::getPath(node));
        #
        #        if (nodeInAot &&
        #            nodeInAot.treeNodeType().isLayerAware() &&
        #            isTopLayer(nodeInAot.applObjectLayerMask(), node.AOTLayer())     && //Is node in highest layer
        #            versioncontrol.allowEdit(SysTreeNode::getRootElement(nodeInAot)))
        #        {
        #            return true;
        #        }
        #    }
        #    return false;
        #}
        #    // Has the side effect that it sets sysTreenodeTopCurrent if appropriate
        #    this.setSysTreenodeTopVars(_topComparable1 as SysTreeNode, _topComparable2 as SysTreeNode);
        #
        #    if (isNodeEditable(_topComparable1 as SysTreeNode))
        #    {
        #
        #        mergeDirection = SysMergeDirection::TextA;
        #        return mergeDirection;
        #    }
        #
        #    if (isNodeEditable(_topComparable2 as SysTreeNode))
        #    {
        #
        #        mergeDirection = SysMergeDirection::TextB;
        #        return mergeDirection;
        #    }
        #
        #    return SysMergeDirection::None;
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    xSysLastValue::getLast(this);
        #}
      ENDSOURCE
      SOURCE #onCompareStart
        #public void onCompareStart(
        #    SysComparable _topComparable1,
        #    SysComparable _topComparable2)
        #{
        #    SysTreeNode topComparable1 = (_topComparable1 as SysTreeNode);
        #    SysTreeNode topComparable2 = (_topComparable2 as SysTreeNode);
        #
        #    // AOT design forces us to keep reference to the top TreeNode
        #    // to be preserved at all times. SysTreeNode.onComparableFocus
        #    // could break this condition
        #    saveTopComparable1 = topComparable1.parmTreeNode();
        #    saveTopComparable2 = topComparable2.parmTreeNode();
        #
        #    source1 = classId2Name(classIdGet(_topComparable1));
        #    source2 = classId2Name(classIdGet(_topComparable2));
        #
        #    //
        #    // If it is the same treenode, then save the selection
        #    //
        #    if (treeNode1 &&
        #        treeNode2 &&
        #        treeNode1.treeNodePath() == treeNode2.treeNodePath())
        #    {
        #        xSysLastValue::saveLast(this);
        #    }
        #
        #    // Virtual treenode are created from non-AOT source, e.g. XPO files
        #    // and may not have the ID property set. In this case we should suppress it.
        #    if (topComparable1.suppressIDPropertyDuringCompare() ||
        #        topComparable2.suppressIDPropertyDuringCompare())
        #    {
        #        suppressIDinProperties = true;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #onContextMenu
        #public void onContextMenu(
        #    int _hwnd,
        #    SysComparable _comparable1,
        #    SysComparable _comparable2,
        #    SysComparable _topComparable1,
        #    SysComparable _topComparable2)
        #{
        #    SysTreeNode comparable1 = _comparable1 as SysTreeNode;
        #    SysTreeNode comparable2 = _comparable2 as SysTreeNode;
        #
        #    SysContextMenuCompare contextMenu = new SysContextMenuCompare(comparable1 ? comparable1.parmTreeNode() : null ,
        #                                                                  comparable2 ? comparable2.parmTreeNode() : null);
        #
        #    PopupMenu popupMenu  = new PopupMenu(_hwnd);
        #    PopupMenu subMenu    = contextMenu.buildMenu(_hwnd, popupMenu);
        #    PopupMenu menu1      = new PopupMenu(_hwnd, popupMenu);
        #    PopupMenu menu2      = new PopupMenu(_hwnd, popupMenu);
        #    int       newWindow1;
        #    int       newWindow2;
        #    int       edit1;
        #    int       edit2;
        #    int       property1;
        #    int       property2;
        #    int       sel;
        #    TreeNode  node1 = comparable1 ? comparable1.parmTreeNode() : null;
        #    TreeNode  node2 = comparable2 ? comparable2.parmTreeNode() : null;
        #    ;
        #
        #    if (node1)
        #    {
        #        newWindow1 = menu1.insertItem("@SYS53405");
        #        if (SysTreeNode::hasSource(node1))
        #            edit1 = menu1.insertItem("@SYS453");
        #        property1 = menu1.insertItem("@SYS10344");
        #        popupMenu.insertPopupMenu(_topComparable1.comparableName(), menu1);
        #    }
        #
        #    if (node2)
        #    {
        #        newWindow2 = menu2.insertItem("@SYS53405");
        #        if (SysTreeNode::hasSource(node2))
        #            edit2 = menu2.insertItem("@SYS453");
        #        property2  = menu2.insertItem("@SYS10344");
        #        popupMenu.insertPopupMenu(_topComparable2.comparableName(), menu2);
        #    }
        #
        #    popupMenu.insertBreak();
        #    popupMenu.insertPopupMenu("@SYS28637", subMenu);
        #    sel = popupMenu.draw();
        #
        #    if (!contextMenu.runMenu(sel, contextMenu))
        #    {
        #        switch (sel)
        #        {
        #            case newWindow1:
        #                node1.AOTnewWindow();
        #                break;
        #            case newWindow2:
        #                node2.AOTnewWindow();
        #                break;
        #            case edit1:
        #                node1.AOTedit();
        #                break;
        #            case edit2:
        #                node2.AOTedit();
        #                break;
        #            case property1:
        #                node1.AOTshowProperties();
        #                break;
        #            case property2:
        #                node2.AOTshowProperties();
        #                break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #onDeleteTopNode
        #void onDeleteTopNode(SysComparable _nodeToDelete)
        #{
        #    TreeNode nodeToDeleteInAOT;
        #    SysTreeNode nodeToDelete = _nodeToDelete as SysTreeNode;
        #
        #    if (_nodeToDelete)
        #    {
        #        nodeToDeleteInAOT = TreeNode::findNode(SysTreeNode::getPath(nodeToDelete.parmTreeNode()));
        #        nodeToDeleteInAOT.AOTdelete();
        #    }
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return [#CurrentVersion,#CurrentList];
        #}
      ENDSOURCE
      SOURCE #parmCaseSensitive
        #public boolean parmCaseSensitive(boolean value = caseSensitive)
        #{
        #;
        #    caseSensitive = value;
        #    return caseSensitive;
        #}
      ENDSOURCE
      SOURCE #parmCurrentLayerOnly
        #public boolean parmCurrentLayerOnly(boolean _currentLayerOnly = currentLayerOnly)
        #{
        #    currentLayerOnly = _currentLayerOnly;
        #    return currentLayerOnly;
        #}
      ENDSOURCE
      SOURCE #parmShowDifferencesOnly
        #public boolean parmShowDifferencesOnly(boolean value = showDifferencesOnly)
        #{
        #;
        #    showDifferencesOnly = value;
        #    return showDifferencesOnly;
        #}
      ENDSOURCE
      SOURCE #parmShowLineNumbers
        #public boolean parmShowLineNumbers(boolean value = showlineNumbers)
        #{
        #    showlineNumbers = value;
        #    return showlineNumbers;
        #}
      ENDSOURCE
      SOURCE #parmSource1
        #public ClassName parmSource1(ClassName _source1 = source1)
        #{
        #    source1 = _source1;
        #
        #    return source1;
        #}
      ENDSOURCE
      SOURCE #parmSource2
        #public ClassName parmSource2(ClassName _source2 = source1)
        #{
        #    source2 = _source2;
        #
        #    return source2;
        #}
      ENDSOURCE
      SOURCE #parmSuppressIDinProperties
        #public boolean parmSuppressIDinProperties()
        #{
        #    return suppressIDinProperties;
        #}
        #
      ENDSOURCE
      SOURCE #parmSuppressNodesOnlyIn1
        #public boolean parmSuppressNodesOnlyIn1(boolean value = suppressNodesOnlyIn1)
        #{
        #    suppressNodesOnlyIn1 = value;
        #    return value;
        #}
      ENDSOURCE
      SOURCE #parmSuppressNodesOnlyIn2
        #public boolean parmSuppressNodesOnlyIn2(boolean value = suppressNodesOnlyIn2)
        #{
        #    suppressNodesOnlyIn2 = value;
        #    return value;
        #}
      ENDSOURCE
      SOURCE #parmSuppressWhitespace
        #public boolean parmSuppressWhitespace(boolean value = suppressWhitespace)
        #{
        #;
        #    suppressWhitespace = value;
        #    return suppressWhitespace;
        #}
      ENDSOURCE
      SOURCE #parmSysTreenode1
        #public SysTreeNode parmSysTreenode1(SysTreeNode _sysTreenode1 = sysTreenode1)
        #{
        #    ;
        #    sysTreenode1 = _sysTreenode1;
        #
        #    return sysTreenode1;
        #}
        #
      ENDSOURCE
      SOURCE #parmSysTreenode2
        #public SysTreeNode parmSysTreenode2(SysTreeNode _sysTreenode2 = sysTreenode2)
        #{
        #    ;
        #    sysTreenode2 = _sysTreenode2;
        #
        #    return sysTreenode2;
        #}
        #
      ENDSOURCE
      SOURCE #parmTreeNode1
        #public TreeNode parmTreeNode1(TreeNode _treeNode1 = treeNode1)
        #{
        #    ;
        #    treeNode1 = _treeNode1;
        #
        #    return treeNode1;
        #}
        #
      ENDSOURCE
      SOURCE #parmTreenode2
        #public TreeNode parmTreenode2(TreeNode _treenode2 = treenode2)
        #{
        #    ;
        #    treenode2 = _treenode2;
        #
        #    return treenode2;
        #}
        #
      ENDSOURCE
      SOURCE #setSysTreenodeTopVars
        #protected void setSysTreenodeTopVars(SysTreeNode _treeNode1, SysTreeNode _treeNode2)
        #{
        #    // If
        #    //    _treeNode1 or _treeNode2 is from highest layer, old or new  (= Yours or Current)
        #    // And
        #    //    _treeNode2 or _treeNode1 is from second higest layer, new   (= Theirs)
        #    // Then
        #    //     set the variables sysTreenodeTop... to Theirs/Yours/Current/Original
        #
        #    SysTreeNode nodeHighest;        // The one of _treeNode 1 or 2 from highest layer
        #    SysTreeNode nodeSecondHighest;  // The theirs candidate, the other one of the _treeNode 2 or 1
        #    Map         layerMap;
        #
        #    UtilEntryLevel layerHighest;
        #    UtilEntryLevel layerSecondHighest;
        #
        #    UtilEntryLevel layer1;
        #    UtilEntryLevel layer2;
        #
        #    boolean highestIsOld;
        #
        #    // clear all sysTreenodeTop... variables
        #    sysTreeNodeTopTheirs  = null;
        #    sysTreeNodeTopYours = null;
        #    sysTreeNodeTopCurrent = null;
        #    sysTreeNodeTopOriginal = null;
        #
        #    if (_treeNode1==null || _treeNode2==null)
        #        return;
        #
        #    if (_treeNode1 is SysTreeNodeVirtual ||
        #        _treeNode2 is SysTreeNodeVirtual)
        #    {
        #        //Virtual treenodes are generated from XPO files, and layer information is void
        #        return;
        #    }
        #
        #    if (_treeNode1 &&
        #        _treeNode1.parmTreeNode() &&
        #        (_treeNode1.parmTreeNode().treeNodeType().isUtilElement() == false ||
        #         _treeNode1.parmTreeNode().treeNodeType().isLayerAware() == false))
        #    {
        #        return;
        #    }
        #
        #    if (_treeNode2 &&
        #        _treeNode2.parmTreeNode() &&
        #        (_treeNode2.parmTreeNode().treeNodeType().isUtilElement() == false ||
        #         _treeNode2.parmTreeNode().treeNodeType().isLayerAware() == false))
        #    {
        #        return;
        #    }
        #
        #    layer1 = _treeNode1.parmTreeNode().AOTLayer();
        #    layer2 = _treeNode2.parmTreeNode().AOTLayer();
        #    if (layer1 > layer2)
        #    {
        #        nodeHighest         = _treeNode1;
        #        layerHighest        = layer1;
        #
        #        nodeSecondHighest   = _treeNode2;
        #        layerSecondHighest  = layer2;
        #    }
        #    else if (layer1 < layer2)
        #    {
        #        nodeHighest         = _treeNode2;
        #        layerHighest        = layer2;
        #
        #        nodeSecondHighest   = _treeNode1;
        #        layerSecondHighest  = layer1;
        #    }
        #    else
        #    {
        #        return;
        #    }
        #
        #    if (nodeSecondHighest.parmTreeNode().AOTIsOld())
        #    {
        #        // the theirs candidate is from old, so it is not 'theirs'
        #        return;
        #    }
        #
        #    // check if nodeHighest and nodeSecondHighest have same name/type
        #    if (nodeHighest.name() != nodeSecondHighest.name() ||
        #        nodeSecondHighest.parmTreeNode().utilElement().RecordType != nodeSecondHighest.parmTreeNode().utilElement().RecordType)
        #    {
        #        return; // is not the same name and type
        #    }
        #
        #    // check if nodeHighest really is from highest layer (old or new)
        #    highestIsOld = nodeHighest.parmTreeNode().AOTIsOld();
        #    if (!SysTreeNode::getLayeredNodeMap(nodeHighest.parmTreeNode(), highestIsOld).exists(0 /*highest*/))
        #        return;
        #
        #    // check if nodeSecondHighest really is from second highest layer (new only)
        #    layerMap = SysTreeNode::getLayeredNodeMap(nodeHighest.parmTreeNode());
        #    if (!layerMap.exists(1 /* secondHighest*/))
        #        return; // there is no second highest
        #
        #    if (layerMap.lookup(1 /* secondHighest*/) != layerSecondHighest)
        #        return; // second highest is a different layer than the compare target
        #
        #    sysTreeNodeTopTheirs  = nodeSecondHighest;
        #
        #    if (highestIsOld)
        #        sysTreeNodeTopYours = nodeHighest;
        #    else
        #        sysTreeNodeTopCurrent = nodeHighest;
        #
        #    sysTreeNodeTopOriginal = nodeHighest.getOriginalSysTreenode();
        #}
      ENDSOURCE
      SOURCE #showTreePane
        #public boolean showTreePane()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportDeleteWhenIdentical
        #public boolean supportDeleteWhenIdentical()
        #{
        #    if (sysTreeNodeTopCurrent && // often newUsr
        #        sysTreeNodeTopTheirs)    // often newSys
        #    {
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass)
        #{
        #    int version     = RunBase::getVersion(packedClass);
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList] = packedClass;
        #            return true;
        #        default :
        #            return false;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysTreenodeCompareContext construct()
        #{
        #    return new SysTreenodeCompareContext();
        #}
        #
      ENDSOURCE
      SOURCE #main
        #static void main(Args args)
        #{
        #    SysVersionControlTmpItem  callerItem;
        #    SysVersionControlTmpItem  firstMarkedItem, secondMarkedItem;
        #    FormDataSource            formDataSource;
        #    SysCompareContextProvider context;
        #
        #    if (SysContextMenu::startedFrom(args))
        #    {
        #        SysTreenodeCompareContext::startCompareFromContextMenu(args.parmObject(), args.parm());
        #    }
        #    else
        #    {
        #        if (SysDictClass::isEqualOrSuperclass(classIdGet(args.object()), classNum(TreeNode)))
        #        {
        #            context = SysTreenodeCompareContext::newTreenode(args.object());
        #            SysCompare::startCompareOfContextProvider(context);
        #        }
        #        else
        #        {
        #            if (args &&
        #                args.record() &&
        #                args.record() is SysVersionControlTmpItem)
        #            {
        #                callerItem = args.record() as SysVersionControlTmpItem;
        #                formDataSource = callerItem.dataSource();
        #
        #                if (formDataSource)
        #                {
        #                    firstMarkedItem = formDataSource.getFirst(true) as SysVersionControlTmpItem;
        #
        #                    if (firstMarkedItem)
        #                    {
        #                        secondMarkedItem = formDataSource.getNext() as SysVersionControlTmpItem;
        #                        context = SysVersionControlTmpItem::compareContext(firstMarkedItem, secondMarkedItem);
        #                        SysCompare::startCompareOfContextProvider(context);
        #                        return;
        #                    }
        #                }
        #
        #                context = SysVersionControlTmpItem::compareContext(callerItem);
        #                SysCompare::startCompareOfContextProvider(context);
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #newSysTreeNode
        #public static SysTreenodeCompareContext newSysTreeNode(
        #    SysTreeNode _sysTreeNode1,
        #    SysTreeNode _sysTreeNode2 = null)
        #{
        #    SysTreenodeCompareContext context = SysTreenodeCompareContext::construct();
        #    boolean needLayerAwareComparison = false;
        #    UtilEntryLevel curAotLayer = currentAOLayer();
        #
        #    context.parmSysTreenode1(_sysTreeNode1);
        #    context.parmSysTreenode2(_sysTreeNode2);
        #
        #    context.parmTreeNode1(_sysTreeNode1 ? _sysTreeNode1.parmTreeNode() : null);
        #    context.parmTreenode2(_sysTreeNode2 ? _sysTreeNode2.parmTreeNode() : null);
        #
        #    if (_sysTreeNode1 != null && _sysTreeNode1.parmTreeNode() != null &&
        #        _sysTreeNode2 != null && _sysTreeNode2.parmTreeNode() != null)
        #    {
        #        if ((_sysTreeNode1 is SysTreeNodeDelayLoaded && _sysTreeNode2 is SysTreeNodeVirtualVCS) ||
        #            (_sysTreeNode2 is SysTreeNodeDelayLoaded && _sysTreeNode1 is SysTreeNodeVirtualVCS))
        #        {
        #            if (SysTreeNode::existsInLayer(_sysTreeNode1.parmTreeNode(), curAotLayer) &&
        #                SysTreeNode::existsInLayer(_sysTreeNode2.parmTreeNode(), curAotLayer))
        #            {
        #                needLayerAwareComparison = true;
        #            }
        #        }
        #    }
        #
        #    context.parmCurrentLayerOnly(needLayerAwareComparison);
        #
        #    return context;
        #}
      ENDSOURCE
      SOURCE #newTreenode
        #public static SysTreenodeCompareContext newTreenode(
        #    TreeNode _treeNode,
        #    TreeNode _treeNode2 = _treeNode)
        #{
        #    SysTreenodeCompareContext context = SysTreenodeCompareContext::construct();
        #    ;
        #    context.parmTreeNode1(_treeNode);
        #    context.parmTreenode2(_treeNode2);
        #    return context;
        #}
      ENDSOURCE
      SOURCE #startCompareFromContextMenu
        #static public SysCompare startCompareFromContextMenu(SysContextMenu _contextMenu,
        #                                                        str _parmName = '') //trud
        #{
        #    SysTreenodeCompareContext context;
        #
        #    if (_contextMenu.selectionCount() == 1)
        #    {
        #        context = SysTreenodeCompareContext::newTreenode(_contextMenu.first());
        #    }
        #    if (strScan(_parmName,'old', 1, 60))
        #    {
        #        context.parmSource1(classstr(SysTreeNodeVirtualOld));
        #        context.parmSource2(classstr(SysTreeNodeVirtualOld));
        #    }
        #    else
        #    //if (strScan(_parmName,'new', 1, 60) )
        #    {
        #        context.parmSource1(classstr(SysTreeNodeVirtual));
        #        context.parmSource2(classstr(SysTreeNodeVirtual));
        #    }
        #
        #    if (_contextMenu.selectionCount() == 2)
        #    {
        #        context = SysTreenodeCompareContext::newTreenode(_contextMenu.first(), _contextMenu.next());
        #    }
        #
        #    if (context)
        #        return SysCompare::startCompareOfContextProvider(context);
        #
        #    return null;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysTreeNodeVirtualVCS unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysTreeNodeVirtualVCS
    PROPERTIES
      Name                #SysTreeNodeVirtualVCS
      Extends             #SysTreeNodeVirtual
      Origin              #{2D1503CA-0000-1000-432F-1228C23A286F}
      LegacyId            #970
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysTreeNodeVirtualVCS extends SysTreeNodeVirtual
        #{
        #    SysVersionControlTmpItem vcsItem;
        #}
      ENDSOURCE
      SOURCE #comparableName
        #public str comparableName()
        #{
        #    if (vcsItem.ChangeNumber &&
        #        vcsItem.ChangeNumber != vcsItem.Version)
        #    {
        #        return strfmt('%1 (Version %2 - %3) %4', vcsItem.itemPathUsingObjectName(), vcsItem.Version, vcsItem.ChangeNumber, vcsItem.VCSDate);
        #    }
        #    return strfmt('%1 (Version %2) %3', vcsItem.itemPathUsingObjectName(), vcsItem.Version, vcsItem.VCSDate);
        #}
      ENDSOURCE
      SOURCE #onComparableSelected
        #public void onComparableSelected()
        #{
        #;
        #    treeNode = vcsItem.getVirtualTreenode();
        #}
      ENDSOURCE
      SOURCE #parmVCSItem
        #public SysVersionControlTmpItem parmVCSItem(SysVersionControlTmpItem _vcsItem = vcsItem)
        #{
        #    ;
        #    vcsItem.data(_vcsItem);
        #
        #    return vcsItem;
        #}
        #
      ENDSOURCE
      SOURCE #construct
        #public static SysTreeNodeVirtualVCS construct()
        #{
        #    return new SysTreeNodeVirtualVCS();
        #}
        #
      ENDSOURCE
      SOURCE #newVCSItem
        #public static SysTreeNodeVirtualVCS newVCSItem(SysVersionControlTmpItem _item)
        #{
        #    SysTreeNodeVirtualVCS sysTreeNodeVirtual = SysTreeNodeVirtualVCS::construct();
        #    ;
        #    sysTreeNodeVirtual.parmVCSItem(_item);
        #
        #    return sysTreeNodeVirtual;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysWorkflowHelper unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysWorkflowHelper
    PROPERTIES
      Name                #SysWorkflowHelper
      RunOn               #Server
      Origin              #{2D110783-0000-1000-BD17-172E284FCA39}
      LegacyId            #1923
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysWorkflowHelper
        #{
        #}
      ENDSOURCE
      SOURCE #createInstance
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_className">
        #/// A <c>className</c> value.
        #/// </param>
        #/// <param name="_classId">
        #/// A <c>classId</c> value.
        #/// </param>
        #/// <param name="_isInterface">
        #/// A Boolean value.
        #/// </param>
        #/// <returns>
        #/// An instance of the <c>Object</c> class.
        #/// </returns>
        #public server static Object createInstance(
        #    className _className,
        #    classId _classId,
        #    boolean _isInterface = true)
        #{
        #    classId classId;
        #    SysDictClass dictClass;
        #    Object instance;
        #
        #    setPrefix(classStr(SysWorkflowHelper) + '-' + staticMethodStr(SysWorkflowHelper, createInstance));
        #
        #    // Get class Id from class name
        #    classId = className2Id(_className);
        #    try
        #    {
        #        // Create the object
        #        dictClass = new SysDictClass(classId);
        #        if (_isInterface && !dictClass.isImplementing(_classId))
        #        {
        #            // Unable to create provider object
        #            throw error(strFmt("@SYS106825", _className) + strFmt("%1 %2 %3", _className, _classId, _isInterface)  );
        #        }
        #        else if (!_isInterface && !dictClass.isExtending(_classId))
        #        {
        #            // Unable to create provider object
        #            throw error(strFmt("@SYS106825", _className) + strFmt("%1 %2 %3", _className, _classId, _isInterface));
        #        }
        #        instance = dictClass.makeObject();
        #    }
        #    catch
        #    {
        #        // Unable to create provider object
        #        throw error(strFmt("@SYS106825", _className) + strFmt("%1 %2 %3", _className, _classId, _isInterface));
        #    }
        #
        #    return instance;
        #}
      ENDSOURCE
      SOURCE #findDelegate
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_userId">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <param name="_configTable">
        #/// A <c>WorkflowVersionTable</c> record.
        #/// </param>
        #/// <param name="_delegatedUsers">
        #/// A set.
        #/// </param>
        #/// <returns>
        #/// A <c>userId</c> value.
        #/// </returns>
        #private static userId findDelegate(WorkflowUser _userId, WorkflowVersionTable _configTable, Set _delegatedUsers)
        #{
        #    WorkflowWorkItemDelegationParameters delegationParameters;
        #    WorkflowTrackingMessage trackingMessage;
        #    userId delegateUser, delegateUserReturn;
        #    SetEnumerator userEnumerator;
        #    utcdatetime delegateDate = DateTimeUtil::utcNow();
        #    str users;
        #    boolean delegationParameterFound = false;
        #
        #    while select
        #        Type,
        #        DelegateTo,
        #        CategoryName,
        #        ConfigurationSequenceNumber
        #    from delegationParameters where
        #            delegationParameters.User == _userId && delegationParameters.Enabled == NoYes::Yes &&
        #            delegationParameters.FromDate < delegateDate && delegationParameters.ToDate > delegateDate
        #    {
        #        switch (delegationParameters.Type)
        #        {
        #            case WorkflowWorkItemDelegationType::All:
        #                delegateUser = delegationParameters.DelegateTo;
        #                delegationParameterFound = true;
        #                break;
        #            case WorkflowWorkItemDelegationType::Category:
        #                if (delegationParameters.CategoryName == _configTable.workflowTable().CategoryName)
        #                {
        #                    delegateUser = delegationParameters.DelegateTo;
        #                    delegationParameterFound = true;
        #                }
        #                break;
        #            case WorkflowWorkItemDelegationType::Configuration:
        #                if (delegationParameters.ConfigurationSequenceNumber == _configTable.workflowTable().SequenceNumber)
        #                {
        #                    delegateUser = delegationParameters.DelegateTo;
        #                    delegationParameterFound = true;
        #                }
        #                break;
        #            default:
        #                throw error(strFmt("@SYS122124", enum2str(delegationParameters.Type)));
        #        }
        #
        #        if (delegateUser)
        #        {
        #            if (_delegatedUsers.in(delegateUser))
        #            {
        #                userEnumerator = _delegatedUsers.getEnumerator();
        #                while(userEnumerator.moveNext())
        #                {
        #                    if (!users)
        #                    {
        #                        users = userEnumerator.current();
        #                    }
        #                    else
        #                    {
        #                        users = users + '->' +  userEnumerator.current();
        #                    }
        #                }
        #                users = users + '->' +  delegateUser;
        #                trackingMessage = strFmt("@SYS122125", users);
        #                throw error(trackingMessage);
        #            }
        #            else
        #            {
        #                _delegatedUsers.add(delegateUser);
        #                delegateUserReturn = SysWorkflowHelper::findDelegate(delegateUser, _configTable, _delegatedUsers);
        #
        #                if(delegateUserReturn)
        #                {
        #                    delegateUser = delegateUserReturn;
        #                }
        #            }
        #        }
        #
        #        // found candidate delegation record, break out of loop
        #        if (delegationParameterFound)
        #        {
        #            break;
        #        }
        #    }
        #    return delegateUser;
        #}
      ENDSOURCE
      SOURCE #getClassFactory
        #public client server static ClassFactory getClassFactory()
        #{
        #    if (!classfactory)
        #    {
        #        classfactory = new ClassFactory();
        #    }
        #
        #    return classfactory;
        #}
      ENDSOURCE
      SOURCE #getCompanyId
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_companyId">
        #/// A <c>CompanyId</c> value.
        #/// </param>
        #/// <returns>
        #/// A <c>CompanyId</c> value.
        #/// </returns>
        #public static CompanyId getCompanyId(
        #    CompanyId _companyId)
        #{
        #    return _companyId != '' && strCmp(_companyId, curext()) != 0 ? _companyId : curext();
        #}
      ENDSOURCE
      SOURCE #getConfigDataChangeEventHandler
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_templateName">
        #/// A <c>workflowTypeName</c> value.
        #/// </param>
        #/// <returns>
        #/// An instance of the <c>WorkflowConfigDataChangeEventHandler</c> class.
        #/// </returns>
        #public static WorkflowConfigDataChangeEventHandler getConfigDataChangeEventHandler(workflowTypeName _templateName)
        #{
        #    SysDictWorkflowType sysDictWorkflowTemplate = SysDictWorkflowType::newTypeName(_templateName);
        #    SysDictClass            sysDictClass;
        #    ;
        #
        #    if (sysDictWorkflowTemplate && sysDictWorkflowTemplate.configDataChangeEventHandler())
        #    {
        #        sysDictClass = new SysDictClass(className2Id(sysDictWorkflowTemplate.configDataChangeEventHandler()));
        #        if (sysDictClass.isImplementing(classNum(WorkflowConfigDataChangeEventHandler)))
        #            return SysWorkflowHelper::getClassFactory().createClass(className2Id(sysDictWorkflowTemplate.configDataChangeEventHandler()));
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getDateTime
        #/// <summary>
        #/// Converts a <c>utcdatetime</c> value to a <c>System.DateTime</c> value.
        #/// </summary>
        #/// <param name="xppDateTime">
        #/// The <c>utcdatetime</c> to convert.
        #/// </param>
        #/// <returns>
        #/// A <c>System.DateTime</c> value.
        #/// </returns>
        #public static System.DateTime getDateTime(utcdatetime xppDateTime)
        #{
        #    int dtyear;
        #    int dtmonth;
        #    int dtday;
        #    int dthour;
        #    int dtmin;
        #
        #    dtyear = DateTimeUtil::year(xppDateTime);
        #    dtmonth = DateTimeUtil::month(xppDateTime);
        #    dtday = DateTimeUtil::day(xppDateTime);
        #    dthour = DateTimeUtil::hour(xppDateTime);
        #    dtmin = DateTimeUtil::minute(xppDateTime);
        #
        #    return new System.DateTime(dtyear, dtmonth, dtday, dthour, dtmin, 0, System.DateTimeKind::Utc);
        #}
      ENDSOURCE
      SOURCE #getDefaultLanguageId
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_workflowTemplateName">
        #/// A <c>workflowTypeName</c> value.
        #/// </param>
        #/// <returns>
        #/// A <c>LanguageId</c> value.
        #/// </returns>
        #public server static LanguageId getDefaultLanguageId(
        #    workflowTypeName _workflowTemplateName)
        #{
        #    SysDictWorkflowType template = SysDictWorkflowType::newTypeName(_workflowTemplateName);
        #    LanguageId languageId;
        #    UserInfo userInfo;
        #    ;
        #
        #    if (template != null)
        #    {
        #        switch (template.associationType())
        #        {
        #            case WorkflowAssociationType::Global:
        #            case WorkflowAssociationType::Other:
        #                languageId = SystemParameters::find().SystemLanguageId;
        #                break;
        #
        #            case WorkflowAssociationType::Company:
        #                languageId = CompanyInfo::languageId();
        #                break;
        #        }
        #    }
        #    else
        #        languageId = SystemParameters::find().SystemLanguageId;
        #
        #    if (!languageId)
        #    {
        #        select Language from userInfo
        #            where userInfo.Id == curUserId();
        #        languageId = userInfo.Language;
        #    }
        #
        #    return languageId;
        #}
      ENDSOURCE
      SOURCE #getDelegate
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_user">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <param name="_configTable">
        #/// A <c>WorkflowVersionTable</c> record.
        #/// </param>
        #/// <returns>
        #/// A <c>WorkflowUser</c> value.
        #/// </returns>
        #public server static WorkflowUser getDelegate(
        #    WorkflowUser _user,
        #    WorkflowVersionTable _configTable)
        #{
        #
        #    userId delegateUser;
        #    Set delegatedUsers = new Set(Types::String);
        #
        #    delegatedUsers.add(_user);
        #    delegateUser = SysWorkflowHelper::findDelegate(_user, _configTable, delegatedUsers);
        #
        #    return strLen(delegateUser) > 0 ? delegateUser : _user;
        #}
      ENDSOURCE
      SOURCE #getDirPartyFromUserId
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_workflowUser">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <returns>
        #/// A <c>DirPartyRecId</c> value.
        #/// </returns>
        #public static DirPartyRecId getDirPartyFromUserId(WorkflowUser _workflowUser)
        #{
        #    DirPersonUser userRelationsTable;
        #    ;
        #
        #    userRelationsTable = DirPersonUser::find(_workflowUser);
        #
        #    if ((userRelationsTable.RecId == 0) || (!userRelationsTable.PersonParty))
        #        throw error(strFmt("@SYS122672", _workflowUser));
        #
        #    return userRelationsTable.PersonParty;
        #}
      ENDSOURCE
      SOURCE #getDirPartyNameFromUserId
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_userId">
        #/// A <c>userId</c> value.
        #/// </param>
        #/// <returns>
        #/// A <c>DirPartyName</c> value.
        #/// </returns>
        #public static DirPartyName getDirPartyNameFromUserId(userId _userId)
        #{
        #    DirPartyName        partyName;
        #    DirPersonUser       userRelationsTable;
        #    ;
        #
        #    if (_userId)
        #    {
        #        userRelationsTable = DirPersonUser::find(_userId);
        #
        #        if (userRelationsTable.RecId && userRelationsTable.PersonParty)
        #            partyName = DirPartyTable::findRec(userRelationsTable.PersonParty).Name;
        #
        #        if (!partyName)
        #            partyName = _userId;
        #    }
        #
        #    return partyName;
        #}
      ENDSOURCE
      SOURCE #getDocument
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_workflowContext">
        #/// An instance of the <c>WorkflowContext</c> class.
        #/// </param>
        #/// <param name="_templateName">
        #/// A <c>workflowTypeName</c> value.
        #/// </param>
        #/// <param name="_user">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <returns>
        #/// A <c>Common</c> record.
        #/// </returns>
        #public server static Common getDocument(
        #    WorkflowContext _workflowContext,
        #    workflowTypeName _templateName,
        #    WorkflowUser _user = curUserId())
        #{
        #    UserInfo userInfo;
        #    Common rec;
        #    container args;
        #    container result = [rec];
        #    container recContainer;
        #    RunAsPermission permission;
        #
        #    select firstonly Enable from userInfo where userInfo.Id == _user;
        #    if (userInfo && userInfo.Enable)
        #    {
        #        args = [_workflowContext.pack(), _templateName];
        #
        #        // Only perform a RunAs if user is different then current user
        #        if (_user == curUserId())
        #        {
        #            result = SysWorkflowHelper::getDocumentAsUser(args);
        #        }
        #        else
        #        {
        #            // BP deviation documented
        #            permission = new RunAsPermission(_user);
        #            permission.assert();
        #
        #            // Need use the runas method; we want to run as the user where as the worklflowRunAs runs as the execution account
        #            // BP deviation documented
        #            result = runAs(_user, classNum(SysWorkflowHelper), staticMethodStr(SysWorkflowHelper, getDocumentAsUser), args);
        #            CodeAccessPermission::revertAssert();
        #        }
        #
        #        // unpack the rec id
        #        [recContainer] = result;
        #        rec = con2Buf(recContainer);  // con2Buf() needed to support unpacking buffers participating in SC/sc hierarchies
        #    }
        #
        #    return rec;
        #}
      ENDSOURCE
      SOURCE #getDocumentAsUser
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_args">
        #/// A container.
        #/// </param>
        #/// <returns>
        #/// A container.
        #/// </returns>
        #private static container getDocumentAsUser(
        #    container _args)
        #{
        #    QueryRun queryRun;
        #    Common rec;
        #    container packedWorkflowContext;
        #    WorkflowContext workflowContext;
        #    workflowTypeName templateName;
        #    ;
        #
        #    [packedWorkflowContext, templateName] = _args;
        #    workflowContext = WorkflowContext::create(packedWorkflowContext);
        #
        #    queryRun = SysWorkflowHelper::getDocumentQueryRun(workflowContext, templateName);
        #
        #    rec = queryRun.get(workflowContext.parmTableId());
        #    return [buf2Con(rec)];  // buf2Con() needed to support packing buffers participating in SC/sc hierarchies
        #}
      ENDSOURCE
      SOURCE #getDocumentQueryRun
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_workflowContext">
        #/// An instance of the <c>WorkflowContext</c> class.
        #/// </param>
        #/// <param name="_templateName">
        #/// A <c>workflowTypeName</c> value.
        #/// </param>
        #/// <returns>
        #/// An instance of the <c>QueryRun</c> class.
        #/// </returns>
        #public server static QueryRun getDocumentQueryRun(
        #    WorkflowContext _workflowContext,
        #    workflowTypeName _templateName)
        #{
        #    QueryRun queryRun;
        #    QueryBuildRange queryBuildRange;
        #    Query query;
        #    WorkflowDocument workflowDocument;
        #    SysDictWorkflowType workflowTemplate;
        #    WorkflowVersionTable versionTable;
        #
        #    try
        #    {
        #        workflowTemplate = new SysDictWorkflowType(_templateName);
        #    }
        #    catch
        #    {
        #        throw error(strFmt("@SYS106830", versionTable.workflowTable().TemplateName));
        #    }
        #
        #    workflowDocument = SysWorkflowHelper::createInstance(workflowTemplate.document(), classNum(WorkflowDocument), false);
        #    query = workflowDocument.getQuery();
        #    if (!query)
        #    {
        #        throw error("@SYS96001");
        #    }
        #
        #    queryBuildRange = SysQuery::findOrCreateRange(query.dataSourceNo(1), fieldNum(Common, RecId));
        #    queryBuildRange.value(int642str(_workflowContext.parmRecId()));
        #
        #    queryRun = new QueryRun(query);
        #    queryRun.allowCrossCompany(query.allowCrossCompany());
        #    changecompany(SysWorkflowHelper::getCompanyId(_workflowContext.parmCompanyId()))
        #    {
        #        queryRun.next();
        #    }
        #
        #    return queryRun;
        #}
      ENDSOURCE
      SOURCE #getInfoLogMessage
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_line">
        #/// An Integer value.
        #/// </param>
        #/// <returns>
        #/// A <c>WorkflowFaultMessage</c> value.
        #/// </returns>
        #public server static WorkflowFaultMessage getInfoLogMessage(int _line)
        #{
        #    System.Exception clrException;
        #    str message;
        #    str clrExMsg;
        #    str seperator = ' ';
        #    int i;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    // BP deviation documented
        #    clrException = CLRInterop::getLastException();
        #    if (clrException != null)
        #    {
        #        error(clrException.get_Message());
        #        clrException = clrException.get_InnerException();
        #
        #        i = infologLine() - 1;
        #        if (i > _line)
        #        {
        #            clrExMsg = clrException.get_Message();
        #            message = strFmt('%1\n%2', infolog.text(i), clrExMsg);
        #        }
        #        else
        #        {
        #        message = clrException.get_Message();
        #    }
        #    }
        #    else
        #    {
        #        // get the current line
        #        message = SysInfologMessageStruct::construct(infolog.text(infologLine())).message();
        #        // append the inner messages
        #        for (i = infologLine() - 1; i > _line; i--)
        #        {
        #            message += seperator + SysInfologMessageStruct::construct(infolog.text(i)).message();
        #        }
        #    }
        #    CodeAccessPermission::revertAssert();
        #
        #    return message;
        #}
      ENDSOURCE
      SOURCE #getLocalizedLabelText
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_labelText">
        #/// A String value.
        #/// </param>
        #/// <param name="_user">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <returns>
        #/// A String value.
        #/// </returns>
        #public server static str getLocalizedLabelText(str _labelText, WorkflowUser _user)
        #{
        #    UserInfo userInfoTable;
        #    str text;
        #    ;
        #
        #    select Language from userInfoTable where userInfoTable.Id == _user;
        #    if (userInfoTable.RecId != 0)
        #    {
        #        // try user's language
        #        text = SysLabel::labelId2String2(_labelText, userInfoTable.Language);
        #        if (strLen(text) == 0)
        #        {
        #            // default to the company language
        #            text = SysLabel::labelId2String2(_labelText, CompanyInfo::languageId());
        #        }
        #    }
        #    else
        #    {
        #        text = SysLabel::labelId2String2(_labelText, CompanyInfo::languageId());
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #getNotificationSubject
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_level">
        #/// A <c>WorkflowNotificationLevel</c> enumeration value.
        #/// </param>
        #/// <param name="_type">
        #/// A <c>WorkflowNotificationType</c> enumeration value.
        #/// </param>
        #/// <param name="_user">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <returns>
        #/// A <c>EventSubject</c> value.
        #/// </returns>
        #private server static EventSubject getNotificationSubject(
        #    WorkflowNotificationLevel _level,
        #    WorkflowNotificationType _type,
        #    WorkflowUser _user)
        #{
        #    EventSubject subject;
        #
        #    switch (_level)
        #    {
        #        case WorkflowNotificationLevel::Workflow:
        #            switch (_type)
        #            {
        #                case WorkflowNotificationType::Started:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122081"), _user);
        #                    break;
        #                case WorkflowNotificationType::Completed:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122082"), _user);
        #                    break;
        #                case WorkflowNotificationType::Error:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122083"), _user);
        #                    break;
        #                case WorkflowNotificationType::UnrecoverableError:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122084"), _user);
        #                    break;
        #                case WorkflowNotificationType::Canceled:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122085"), _user);
        #                    break;
        #                default:
        #                    throw error(strFmt("@SYS122121", enum2str(_type)));
        #            }
        #            break;
        #        case WorkflowNotificationLevel::Approval:
        #            switch (_type)
        #            {
        #                case WorkflowNotificationType::Started:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122094"), _user);
        #                    break;
        #                case WorkflowNotificationType::Completed:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122097"), _user);
        #                    break;
        #                case WorkflowNotificationType::Denied:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122100"), _user);
        #                    break;
        #                case WorkflowNotificationType::ChangeRequested:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122096"), _user);
        #                    break;
        #                case WorkflowNotificationType::Return:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122095"), _user);
        #                    break;
        #                default:
        #                    throw error(strFmt("@SYS122121", enum2str(_type)));
        #            }
        #            break;
        #        case WorkflowNotificationLevel::Task:
        #            switch (_type)
        #            {
        #                case WorkflowNotificationType::Started:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122086"), _user);
        #                    break;
        #                case WorkflowNotificationType::Completed:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122097"), _user);
        #                    break;
        #                case WorkflowNotificationType::Denied:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122092"), _user);
        #                    break;
        #                case WorkflowNotificationType::ChangeRequested:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122096"), _user);
        #                    break;
        #                case WorkflowNotificationType::Return:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122095"), _user);
        #                    break;
        #                default:
        #                    throw error(strFmt("@SYS122121", enum2str(_type)));
        #            }
        #            break;
        #        case WorkflowNotificationLevel::ApprovalWorkItem:
        #            switch (_type)
        #            {
        #                case WorkflowNotificationType::Completed:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122097"), _user);
        #                    break;
        #                case WorkflowNotificationType::Delegated:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122098"), _user);
        #                    break;
        #                case WorkflowNotificationType::Escalated:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122099"), _user);
        #                    break;
        #                default:
        #                    throw error(strFmt("@SYS122121", enum2str(_type)));
        #            }
        #            break;
        #        case WorkflowNotificationLevel::TaskWorkItem:
        #            switch (_type)
        #            {
        #                case WorkflowNotificationType::Completed:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122089"), _user);
        #                    break;
        #                case WorkflowNotificationType::Delegated:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122090"), _user);
        #                    break;
        #                case WorkflowNotificationType::Escalated:
        #                    subject = SysWorkflowHelper::getLocalizedLabelText(literalStr("@SYS122091"), _user);
        #                    break;                default:
        #                    throw error(strFmt("@SYS122121", enum2str(_type)));
        #            }
        #            break;
        #        default:
        #            throw error(strFmt("@SYS122122", enum2str(_level)));
        #    }
        #
        #    return subject;
        #}
      ENDSOURCE
      SOURCE #getPartitionKey
        #/// <summary>
        #///    Microsoft internal use only.
        #/// </summary>
        #/// <returns>A string value.</returns>
        #public static str getPartitionKey()
        #{
        #    return getcurrentpartition();
        #}
      ENDSOURCE
      SOURCE #getUserIdFromDirParty
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_party">
        #/// A <c>DirPartyRecId</c> value.
        #/// </param>
        #/// <returns>
        #/// A <c>WorkflowUser</c> value.
        #/// </returns>
        #public static WorkflowUser getUserIdFromDirParty(DirPartyRecId _party)
        #{
        #    DirPersonUser userRelationsTable;
        #
        #    select User from userRelationsTable where userRelationsTable.PersonParty == _party;
        #
        #    if (userRelationsTable.RecId == 0)
        #        throw error(strFmt("@SYS122673", _party));
        #
        #    return userRelationsTable.User;
        #}
      ENDSOURCE
      SOURCE #getWorkflowEmailId
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_versionTable">
        #/// A <c>WorkflowVersionTable</c> record.
        #/// </param>
        #/// <param name="workflowAssociationType">
        #/// A <c>WorkflowAssociationType</c> enumeration value.
        #/// </param>
        #/// <returns>
        #/// A <c>SysEmailId</c> value.
        #/// </returns>
        #public server static SysEmailId getWorkflowEmailId(WorkflowVersionTable _versionTable, WorkflowAssociationType workflowAssociationType)
        #{
        #    SysEmailId emailId;
        #
        #    if (_versionTable.WorkItemEmailId)
        #    {
        #        emailId = _versionTable.WorkItemEmailId;
        #    }
        #    else
        #    {
        #        switch (workflowAssociationType)
        #        {
        #            case WorkflowAssociationType::Global:
        #            case WorkflowAssociationType::Other:
        #                emailId = SysWorkflowParameters::find().WorkItemEmailId;
        #                break;
        #
        #            case WorkflowAssociationType::Company:
        #                changeCompany(_versionTable.WorkflowTable().DataArea)
        #                {
        #                    emailId = WorkflowParameters::find().WorkItemEmailId;
        #                }
        #                break;
        #        }
        #    }
        #    return emailId;
        #}
      ENDSOURCE
      SOURCE #getWorkflowMessageText
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_action">
        #/// A <c>SysUtilElementName</c> value.
        #/// </param>
        #/// <param name="_tableId">
        #/// A table ID.
        #/// </param>
        #/// <param name="_recId">
        #/// A record ID.
        #/// </param>
        #/// <param name="_user">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <param name="_workflowTemplateName">
        #/// A <c>workflowTypeName</c> value.
        #/// </param>
        #/// <returns>
        #/// A <c>LanguageTxtText</c> value.
        #/// </returns>
        #public server static LanguageTxtText getWorkflowMessageText(
        #    SysUtilElementName  _action,
        #    tableId _tableId,
        #    recId _recId,
        #    WorkflowUser _user,
        #    workflowTypeName _workflowTemplateName)
        #{
        #    WorkflowMessageText messageTextTable;
        #    UserInfo userInfoTable;
        #    LanguageTxtText messageText = '';
        #
        #    select Language from userInfoTable where userInfoTable.Id == _user;
        #    if (userInfoTable.RecId != 0)
        #    {
        #        // try user's language
        #        messageTextTable = WorkflowMessageText::find(_action, _tableId, _recId, userInfoTable.Language);
        #        if (messageTextTable.RecId == 0)
        #        {
        #            // get default language
        #            messageTextTable = WorkflowMessageText::find(_action, _tableId, _recId, SysWorkflowHelper::getDefaultLanguageId(_workflowTemplateName));
        #        }
        #    }
        #    else
        #    {
        #        messageTextTable = WorkflowMessageText::find(_action, _tableId, _recId, SysWorkflowHelper::getDefaultLanguageId(_workflowTemplateName));
        #    }
        #
        #    if (messageTextTable.RecId != 0)
        #    {
        #        messageText = messageTextTable.Txt;
        #    }
        #    else
        #    {
        #        //Check if message exists (without any language filter)
        #        if(WorkflowMessageText::findAnyLanguage(_action, _tableId, _recId).RecId != 0)
        #        {
        #            //Message exists but not in the user-specific or default language
        #            throw error("@SYS345066");
        #        }
        #    }
        #
        #    return messageText;
        #}
      ENDSOURCE
      SOURCE #internalSendNotifications
        #/// <summary>
        #///    Microsoft internal use only.
        #/// </summary>
        #/// <param name="_context">An instance of the <c>SysWorkflowNotificationContext</c> class.</param>
        #private server static void internalSendNotifications(
        #    SysWorkflowNotificationContext _context)
        #{
        #    WorkflowVersionTable configTable;
        #    WorkflowElementTable elementTable;
        #    WorkflowConfigNotification configNotification;
        #    WorkflowConfigNotificationSettings notificationSettings;
        #    WorkflowAssociationType workflowAssociationType;
        #    EventNotificationWorkflow notification;
        #    SysWorkflowElement workflowElement;
        #    SysDictWorkflowType sysDictWorkflowTemplate;
        #    LanguageTxtText messageText = '';
        #    menuItemName menuItemName = '';
        #    WorkflowDocument workflowDocument;
        #    DataSourceName dataSourceName;
        #    EventSubject subject;
        #    Common documentData;
        #    tableId tableId;
        #    recId recId;
        #    Query query;
        #    SysWorkflowUsers users;
        #    SysWorkflowDocument sysWorkflowDocument;
        #    SysEmailId emailId;
        #    int i;
        #    int line = infologLine();
        #    WorkflowElementName elementName;
        #    WorkflowElementType elementType;
        #
        #    setPrefix(classStr(SysWorkflowHelper) + '-' + staticMethodStr(SysWorkflowHelper, internalSendNotifications));
        #
        #    try
        #    {
        #        if (_context.parmIsElement())
        #        {
        #            elementTable = WorkflowElementTable::find(_context.parmNotificationId());
        #            if (!elementTable)
        #            {
        #                throw error("@SYS106828");
        #            }
        #            tableId = elementTable.TableId;
        #            recId = elementTable.RecId;
        #            configNotification = elementTable.getNotification();
        #
        #            workflowElement = SysWorkflowElement::newElementTable(elementTable);
        #            if (!workflowElement)
        #            {
        #                throw error(strFmt("@SYS110280", elementTable.ElementType, elementTable.ElementName));
        #            }
        #
        #            elementName = workflowElement.elementTable().ElementName;
        #            elementType = workflowElement.elementTable().ElementType;
        #
        #            menuItemName = workflowElement.documentMenuItem();
        #            configTable = elementTable.workflowVersionTable();
        #            workflowDocument = SysWorkflowHelper::getClassFactory().createClass(className2Id(workflowElement.document()));
        #            if (!workflowDocument)
        #            {
        #                throw error("@SYS108554");
        #            }
        #
        #            if (strLen(menuItemName) > 0)
        #            {
        #                dataSourceName = workflowElement.documentFormDatasourceName();
        #            }
        #        }
        #        else
        #        {
        #            configTable = WorkflowVersionTable::find(_context.parmNotificationId());
        #            if (!configTable)
        #            {
        #                throw error("@SYS111590");
        #            }
        #            tableId = configTable.TableId;
        #            recId = configTable.RecId;
        #            configNotification = configTable.getNotification();
        #
        #            sysDictWorkflowTemplate = new SysDictWorkflowType(configTable.workflowTable().TemplateName);
        #            if (!sysDictWorkflowTemplate)
        #            {
        #                    throw error(strFmt("@SYS106830", configTable.workflowTable().TemplateName));
        #            }
        #
        #            workflowDocument = SysWorkflowHelper::getClassFactory().createClass(className2Id(sysDictWorkflowTemplate.document()));
        #            if (!workflowDocument)
        #            {
        #                throw error("@SYS108554");
        #            }
        #
        #            menuItemName = sysDictWorkflowTemplate.documentMenuItem();
        #
        #            if (strLen(menuItemName) > 0)
        #            {
        #                dataSourceName = sysDictWorkflowTemplate.documentFormDatasourceName();
        #            }
        #        }
        #
        #        query = workflowDocument.getQuery();
        #        if (!query)
        #        {
        #            throw error("@SYS96001");
        #        }
        #
        #        notificationSettings = configNotification.getNotification(_context.parmAction());
        #        if (notificationSettings && notificationSettings.parmEnabled() == NoYes::Yes)
        #        {
        #            users = SysWorkflowParticipantProvider::resolveParticipants(
        #                _context.parmWorkflowContext(),
        #                notificationSettings.parmAssignTo(),
        #                configTable,
        #                _context.parmOriginator(),
        #                _context.parmNotificationId());
        #
        #            sysDictWorkflowTemplate = SysDictWorkflowType::newTypeName(configTable.workflowTable().TemplateName);
        #            workflowAssociationType = sysDictWorkflowTemplate.associationType();
        #            emailId = SysWorkflowHelper::getWorkflowEmailId(configTable, sysDictWorkflowTemplate.associationType());
        #
        #            for (i = 1; i <= users.getCount(); i++)
        #            {
        #                try
        #                {
        #                    documentData.clear();
        #                    // verify that the user has access to the data - does a runas
        #                    sysWorkflowDocument = SysWorkflowDocument::newDocument(
        #                        _context.parmWorkflowContext(),
        #                        configTable.workflowTable().TemplateName,
        #                        users.getUser(i));
        #                    sysWorkflowDocument.parmDisplayMenuItem(menuItemName);
        #                    documentData = sysWorkflowDocument.getDocument();
        #                }
        #                catch
        #                {
        #                    SysWorkflowHelper::writeEventLogEntry(strFmt("@SYS136742", _context.parmWorkflowInstanceNumber(), strFmt("@SYS126833", SysWorkflowHelper::getInfoLogMessage(line))));
        #                    infolog.clear(infologLine() -1);
        #                }
        #
        #                if (!documentData)
        #                {
        #                    continue;
        #                }
        #
        #                subject = SysWorkflowHelper::getNotificationSubject(_context.parmNotificationLevel(), _context.parmNotificationType(), users.getUser(i));
        #                notification = EventNotificationWorkflow::newInfoNoDrillDown(
        #                    users.getUser(i),
        #                    subject,
        #                    emailId,
        #                    null,
        #                    '',
        #                    true); // the user's access has already been verified
        #
        #                messageText = SysWorkflowHelper::getWorkflowMessageText(
        #                    _context.parmAction(),
        #                    tableId,
        #                    recId,
        #                    users.getUser(i),
        #                    configTable.workflowTable().TemplateName);
        #
        #                notification.parmMessage(WorkflowDocumentField::substitutePlaceholderAsUser(
        #                    users.getUser(i),
        #                    _context.parmWorkflowContext().parmCompanyId(),
        #                    _context.parmWorkflowContext().parmTableId(),
        #                    _context.parmWorkflowContext().parmRecId(),
        #                    configTable.workflowTable().TemplateName,
        #                    configTable.Owner,
        #                    _context.parmOriginator(),
        #                    users.getUser(i),
        #                    messageText,
        #                    _context.parmWorkflowContext().parmWorkflowCorrelationId(),
        #                    elementName,
        #                    elementType));
        #
        #                // get the record if does not exist
        #                notification.parmRecord(documentData);
        #                if (strLen(dataSourceName) > 0)
        #                {
        #                    notification.parmDataSourceName(dataSourceName);
        #                }
        #
        #                if (strLen(menuItemName) > 0)
        #                {
        #                    notification.parmMenuFunction(new MenuFunction(menuItemName, MenuItemType::Display));
        #                }
        #
        #                if (_context.parmIsDueDate())
        #                {
        #                    notification.parmDueDateTime(DateTimeUtil::date(_context.parmDueDate()));
        #                }
        #
        #                try
        #                {
        #                    notification.create(workflowAssociationType != WorkflowAssociationType::Company);
        #                }
        #                catch
        #                {
        #                    SysWorkflowHelper::writeEventLogEntry(strFmt("@SYS136742", _context.parmWorkflowInstanceNumber(), strFmt("@SYS126833", SysWorkflowHelper::getInfoLogMessage(line))));
        #                    infolog.clear(infologLine() -1);
        #                }
        #            }
        #        }
        #    }
        #    catch
        #    {
        #        SysWorkflowHelper::writeEventLogEntry(strFmt("@SYS136742", _context.parmWorkflowInstanceNumber(), strFmt("@SYS126833", SysWorkflowHelper::getInfoLogMessage(line))));
        #        infolog.clear(infologLine() -1);
        #    }
        #}
      ENDSOURCE
      SOURCE #sendNotifications
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_context">
        #/// An instance of the <c>SysWorkflowNotificationContext</c> class.
        #/// </param>
        #/// <param name="_allowTransaction">
        #/// A Boolean value.
        #/// </param>
        #public server static void sendNotifications(
        #    SysWorkflowNotificationContext _context,
        #    boolean _allowTransaction = false)
        #{
        #
        #    setPrefix(classStr(SysWorkflowHelper) + '-' + staticMethodStr(SysWorkflowHelper, sendNotifications));
        #
        #    if (!_allowTransaction && appl.ttsLevel() != 0)
        #    {
        #        throw error("@SYS340316");
        #    }
        #    else
        #    {
        #        SysWorkflowHelper::internalSendNotifications(_context);
        #    }
        #}
      ENDSOURCE
      SOURCE #sendPushNotification
        #/// <summary>
        #/// Makes an asynchronus call that creates a connection to the notification hub on the service bus
        #/// and sends the notification message to the appropriate user.
        #/// </summary>
        #/// <param name="_recipient">
        #/// The user ID to notify.
        #/// </param>
        #/// <param name="_sender">
        #/// The user ID of the notifier.
        #/// </param>
        #/// <param name="_subject">
        #/// The subject to include in the notification message.
        #/// </param>
        #/// <param name="_body">
        #/// The body to include in the notification message.
        #/// </param>
        #/// <param name="_workItemTable">
        #/// <c>WorkflowWorkItemTable</c> record of the work item where the source of the message.
        #/// </param>
        #/// <param name="_launchArgs">
        #/// The arguments that will be passed as a context to the notification.
        #/// </param>
        #/// <param name="_sendTileUpdate">
        #/// true if the toast message will reflect on the tile; otherwise, false.
        #/// </param>
        #public static void sendPushNotification(UserId                  _recipient,
        #                                        UserId                  _sender,
        #                                        Description             _subject,
        #                                        Description             _body,
        #                                        WorkflowWorkItemTable   _workItemTable,
        #                                        str                     _launchArgs = '',
        #                                        boolean                 _sendTileUpdate = true)
        #{
        #    SysWindowsAzureNotificationDataContract dataContract = new SysWindowsAzureNotificationDataContract();
        #    SysWindowsAzureNotificationController   controller = new SysWindowsAzureNotificationController();
        #
        #    if ((_workItemTable.Status == WorkflowWorkItemStatus::Pending ||
        #        _workItemTable.Status == WorkflowWorkItemStatus::Delegated) &&
        #        (_workItemTable.Type == WorkflowWorkItemType::WorkItem ||
        #        _workItemTable.Type == WorkflowWorkItemType::Escalated ||
        #        _workItemTable.Type == WorkflowWorkItemType::FinalApprover))
        #    {
        #        dataContract.parmSender(_sender);
        #        dataContract.parmRecipient(_recipient);
        #        dataContract.parmSubject(_subject);
        #        dataContract.parmBody(_body);
        #        dataContract.parmLaunchArgs(_launchArgs);
        #        dataContract.parmSendTileUpdate(_sendTileUpdate);
        #        dataContract.parmModule(SysWindowsAppModule::Approvals);
        #        controller.setDataContract(dataContract);
        #        controller.parmAlwaysInitializeAndValidateOnServer(true);
        #        controller.parmLoadFromSysLastValue(false);
        #        controller.run();
        #    }
        #}
      ENDSOURCE
      SOURCE #userHasPermission
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_workflowContext">
        #/// An instance of the <c>WorkflowContext</c> class.
        #/// </param>
        #/// <param name="_templateName">
        #/// A <c>workflowTypeName</c> value.
        #/// </param>
        #/// <param name="_actionMenuName">
        #/// A <c>menuItemName</c> value.
        #/// </param>
        #/// <param name="_displayMenuName">
        #/// A <c>menuItemName</c> value.
        #/// </param>
        #/// <param name="_user">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <returns>
        #/// A Boolean value.
        #/// </returns>
        #public server static boolean userHasPermission(
        #    WorkflowContext _workflowContext,
        #    workflowTypeName _templateName,
        #    menuItemName _actionMenuName,
        #    menuItemName _displayMenuName,
        #    WorkflowUser _user)
        #{
        #    UserInfo userInfo;
        #    container args;
        #    container result;
        #    boolean permission = false;
        #
        #    args = [_workflowContext.pack(), _templateName, _actionMenuName, _displayMenuName, _user];
        #
        #    // Only perform a RunAs if user is different then current user
        #    if (_user == curUserId())
        #    {
        #        result = SysWorkflowHelper::userHasPermissionAsUser(args);
        #    }
        #    else
        #    {
        #        select firstonly Enable from userInfo where userInfo.Id == _user;
        #        if (userInfo && userInfo.Enable)
        #        {
        #            // BP deviation documented
        #            new RunAsPermission(_user).assert();
        #            // Need use the runas method; we want to run as the user where as the worklflowRunAs runs as the execution account
        #            // BP deviation documented
        #            result = runAs(_user, classNum(SysWorkflowHelper), staticMethodStr(SysWorkflowHelper, userHasPermissionAsUser), args, _workflowContext.parmCompanyId());
        #            CodeAccessPermission::revertAssert();
        #        }
        #    }
        #    [permission] = result;
        #    return permission;
        #}
      ENDSOURCE
      SOURCE #userHasPermissionAsUser
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_args">
        #/// A container.
        #/// </param>
        #/// <returns>
        #/// A container.
        #/// </returns>
        #private server static container userHasPermissionAsUser(
        #    container _args)
        #{
        #    Common rec;
        #    container args;
        #    container result;
        #    container packedWorkflowContext;
        #    container recContainer;
        #    UserInfo userInfo;
        #    SysDictMenu sysDictMenu;
        #    menuItemName actionMenuName;
        #    menuItemName displayMenuName;
        #    workflowTypeName templateName;
        #    userId userId;
        #    boolean permission = false;
        #
        #    [packedWorkflowContext, templateName, actionMenuName, displayMenuName, userId] = _args;
        #    args = [packedWorkflowContext, templateName];
        #
        #    // verify action menu
        #    sysDictMenu = SysDictMenu::newMenuItem(actionMenuName, MenuItemType::Action);
        #    select firstonly Enable from userInfo where userInfo.Id == userId;
        #    permission = userInfo.Enable && Global::hasMenuItemAccess(actionMenuName, MenuItemType::Action);
        #
        #    if (!permission)
        #    {
        #        return [permission];
        #    }
        #
        #     // verify display menu
        #    sysDictMenu = SysDictMenu::newMenuItem(displayMenuName, MenuItemType::Display);
        #    permission = userInfo.Enable && Global::hasMenuItemAccess(displayMenuName, MenuItemType::Display);
        #
        #    if (!permission)
        #    {
        #        return [permission];
        #    }
        #
        #    result = SysWorkflowHelper::getDocumentAsUser(args);
        #
        #    [recContainer] = result;
        #    rec = con2Buf(recContainer); // con2Buf() needed to support unpacking buffers participating in SC/sc hierarchies
        #    if (rec.RecId != 0)
        #    {
        #        permission = true;
        #    }
        #    else
        #    {
        #        permission = false;
        #    }
        #
        #    return [permission];
        #}
      ENDSOURCE
      SOURCE #verifyActivationPermission
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_submittingUser">
        #/// A <c>WorkflowUser</c> value.
        #/// </param>
        #/// <param name="_workflowConfigTable">
        #/// A <c>WorkflowVersionTable</c> record.
        #/// </param>
        #/// <param name="_activatingFromWeb">
        #/// A <c>NoYes</c> enumeration value.
        #/// </param>
        #public static void verifyActivationPermission(WorkflowUser _submittingUser, WorkflowVersionTable _workflowConfigTable, NoYes _activatingFromWeb)
        #{
        #}
      ENDSOURCE
      SOURCE #writeEventLogEntry
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_message">
        #/// A String value.
        #/// </param>
        #public server static void writeEventLogEntry(str _message)
        #{
        #    System.Diagnostics.EventLog ev;
        #    System.Boolean sourceExists;
        #    System.Diagnostics.EventLogEntryType entryType;
        #    System.String msg;
        #    #Workflow
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #    // BP deviation documented
        #    sourceExists = System.Diagnostics.EventLog::SourceExists(#EventLogSourceName, #EventLogLocalMachineName);
        #    if (sourceExists)
        #    {
        #        // BP deviation documented
        #        ev = new System.Diagnostics.EventLog(#EventLogName, #EventLogLocalMachineName, #EventLogSourceName);
        #        try
        #        {
        #            // BP deviation documented
        #            entryType = CLRInterop::parseClrEnum(#EventLogEntryType, #EventLogEntryTypeError);
        #            msg = _message;
        #            // BP deviation documented
        #            ev.WriteEntry(msg, entryType);
        #        }
        #        catch
        #        {
        #            exceptionTextFallThrough();
        #        }
        #        if (ev != null)
        #        {
        #            // BP deviation documented
        #            ev.Close();
        #        }
        #    }
        #
        #    CodeAccessPermission::revertAssert();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #DEVEnumCreator
  PROPERTIES
    Name                #DEVEnumCreator
    Origin              #{E9B7343E-A1AA-45F8-8F5E-7CB37772E2A3}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #addDefaultProperties
      #private void addDefaultProperties(Map   _propertiesMap)
      #{
      #    ;
      #    _propertiesMap.insert('IsDefault', '0');
      #}
    ENDSOURCE
    SOURCE #createEnum
      ##AOT
      #void createEnum()
      #{
      #    //CIT_SysStringHelper     sysStringHelper  = new CIT_SysStringHelper();
      #    int                     i;
      #    //CIT_SysStringHelper     sysStringHelper2 ;
      #    TreeNode                treeNodeEnum;
      #    TreeNode                treeNodeDim;
      #    Struct          propertiesExt;
      #    Map             mapNewPropertyValues;
      #    str     enumLabel, enumElementName;
      #
      #    container   sysStringHelper, sysStringHelper2;
      #    ;
      #    sysStringHelper = this.splitString(EnumTextEdit.text(), '\n');
      #
      #    treeNodeEnum    = TreeNode::findNode(#BaseEnumsPath);
      #    treeNodeEnum    = treeNodeEnum.AOTfindChild(EnumName.text());
      #    if (! treeNodeEnum)
      #    {
      #        throw error(strFmt("Enum %1 not found", EnumName.text() ));
      #    }
      #
      #
      #    for (i = 1; i <= conLen(sysStringHelper); i++)
      #    {
      #        //sysStringHelper2 = new CIT_SysStringHelper();
      #        sysStringHelper2 = this.splitString(conPeek(sysStringHelper, i), Separator.text(), 2);
      #
      #        enumLabel       = strlrtrim(conPeek(sysStringHelper2, 1));
      #        enumElementName = strlrtrim(conPeek(sysStringHelper2, 2));
      #
      #        treeNodeEnum.AOTadd(enumElementName);
      #
      #        treeNodeDim = treeNodeEnum.AOTfindChild(enumElementName);
      #
      #        propertiesExt = treeNodeDim.AOTgetPropertiesExt();
      #
      #        mapNewPropertyValues = this.getNewPropertiesMap();
      #        mapNewPropertyValues.insert('Label',        enumLabel);
      #       // mapNewPropertyValues.insert('EnumValue',    strfmt("%1", this.enumValue()));
      #
      #        this.setTreeNodePropertyExt(propertiesExt, mapNewPropertyValues);
      #        treeNodeDim.AOTsetPropertiesExt(propertiesExt);
      #   //     info(strFmt("%1 - %2", strlrtrim(sysStringHelper2.splitGetElement(1)),
      #   //                            strlrtrim(sysStringHelper2.splitGetElement(2))));
      #    }
      #
      #    treeNodeEnum.AOTsave();
      #
      #
      #}
    ENDSOURCE
    SOURCE #getNewPropertiesMap
      #private Map getNewPropertiesMap()
      #{
      #    return new Map(Types::String, Types::String);
      #}
    ENDSOURCE
    SOURCE #setTreeNodePropertyExt
      #private void setTreeNodePropertyExt(
      #    Struct  _propertiesExt,
      #    Map     _newProperties
      #    )
      #{
      #    Counter     propertiesCount;
      #    Array       propertyInfoArray;
      #    Struct      propertyInfo;
      #    str         propertyValue;
      #    int         i;
      #    ;
      #
      #    this.addDefaultProperties(_newProperties);
      #
      #    propertiesCount     = _propertiesExt.value('Entries');
      #    propertyInfoArray   = _propertiesExt.value('PropertyInfo');
      #
      #    for (i = 1; i <= propertiesCount; i++)
      #    {
      #        propertyInfo = propertyInfoArray.value(i);
      #
      #        if (_newProperties.exists(propertyInfo.value('Name')))
      #        {
      #            propertyValue = _newProperties.lookup(propertyInfo.value('Name'));
      #            propertyInfo.value('Value', propertyValue);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #splitString
      #container splitString(str  _string, str _char, int _desiredElementCount = 0, boolean  _allowRepeatDelimier = false)
      #{
      #    str  currentSymbol;
      #    int  i;
      #
      #    container       splitData;
      #    ;
      #    splitData = connull();
      #
      #    if (! _allowRepeatDelimier)
      #    {
      #        splitData = str2con_RU(_string, _char);
      #    }
      #    else
      #    {
      #        for (i = 1; i <= strlen(_string); i++)
      #        {
      #            if ((substr(_string, i, 1) == _char))
      #            {
      #                if (currentSymbol)
      #                {
      #                    splitData       += currentSymbol;
      #                    currentSymbol   = '';
      #                }
      #                continue;
      #            }
      #            else
      #            {
      #                currentSymbol += subStr(_string, i, 1);
      #            }
      #        }
      #        if (currentSymbol)
      #        {
      #            splitData       += currentSymbol;
      #            currentSymbol   = '';
      #        }
      #    }
      #
      #    if (_desiredElementCount)
      #    {
      #        if (conLen(splitData) != _desiredElementCount)
      #        {
      #            throw error(StrFmt("Number of elements in string %1 separated by %2 should be %3",
      #                               _string, _char, _desiredElementCount));
      #        }
      #    }
      #    return splitData;
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
      Caption             #Enum element creator
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EnumGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          ElementPosition     #1073741822
          HierarchyParent     #EnumGroup
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #CreateButton
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroup
          Text                #Create
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.createEnum();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EnumName
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Group
          Label               #Enum Name
          ExtendedDataType    
            ARRAY 
              #IdentifierName
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EnumTextEdit
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #EnumGroup
          Label               #Label - name
          ExtendedDataType    
            ARRAY 
              #Notes
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Separator
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #Group
          Text                #|
          Label               #Separator
          ExtendedDataType    
            ARRAY 
              #char
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #DEVRunBaseBuilder
  PROPERTIES
    Name                #DEVRunBaseBuilder
    Origin              #{E6E46DB6-09C8-4CDE-A2B9-12FC4810AE39}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #//EVO RunBaseBuilder
      #public class FormRun extends ObjectRun
      #{
      #    SysElementName      rbName;
      #    ClassDescription    rbClassDescription;
      #    SysElementName      rbUseAOTQuery;
      #
      #    boolean             showQueryValues;
      #    boolean             showDefaultButton;
      #    boolean             showClearButton;
      #
      #    boolean             isTable;
      #
      #    #define.CurrentVersion(3)
      #    #define.version1(1)
      #    #localmacro.CurrentList
      #        rbName,
      #        rbClassDescription,
      #        rbUseAOTQuery,
      #        showQueryValues,
      #        showDefaultButton,
      #        showClearButton,
      #        isTable
      #    #endmacro
      #
      #    #define.newLine("\n")
      #}
    ENDSOURCE
    SOURCE #addParmMethods
      #void addParmMethods(TreeNode _classNode)
      #{
      #    //Source      source;
      #    TreeNode    methodTreeNode;
      #    ;
      #
      #    while select devRunBaseBuilderVars
      #      order by LineNum
      #    {
      #        methodTreeNode = _classNode.AOTadd('parm' + devRunBaseBuilderVars.Name);
      #
      #        methodTreeNode.AOTsetSource(element.srcParmMethod( devRunBaseBuilderVars.Type,
      #                                                           devRunBaseBuilderVars.Name,
      #                                                           devRunBaseBuilderVars.ParmName,
      #                                                           devRunBaseBuilderVars.Name), false);
      #    }
      #}
    ENDSOURCE
    SOURCE #addParmMethodsContract
      #void addParmMethodsContract(TreeNode _classNode)
      #{
      #    //Source      source;
      #    TreeNode    methodTreeNode;
      #    int i;
      #    ;
      #
      #    while select devRunBaseBuilderVars
      #      order by LineNum
      #    {
      #        methodTreeNode = _classNode.AOTadd('parm' + devRunBaseBuilderVars.Name);
      #        i++;
      #        methodTreeNode.AOTsetSource(element.srcParmMethodContract(i), false);
      #    }
      #}
    ENDSOURCE
    SOURCE #buildRunBase
      #void buildRunBase()
      #{
      #    TreeNode    classNode;
      #    TreeNode    methodTreeNode;
      #    ;
      #
      #    // 1. Add class
      #    classNode = TreeNode::findNode('\\Classes');
      #
      #    if (!classNode)
      #        throw error('An error occured while building the class');
      #
      #    classNode = classNode.AOTadd(rbName);
      #
      #    if (!classNode)
      #        throw error('An error occured while building the class');
      #    if (! CreateContract.checked())
      #    {
      #        // 2. Add method Construct
      #        methodTreeNode = classNode.AOTadd('construct');
      #        methodTreeNode.AOTsetSource(this.srcConstruct(), true);
      #
      #        // 3. Add method Main
      #        methodTreeNode = classNode.AOTadd('main');
      #        methodTreeNode.AOTsetSource(this.srcMain(), true);
      #
      #        // 4. Add method Description
      #        methodTreeNode = classNode.AOTadd('description');
      #        methodTreeNode.AOTsetSource(this.srcDescription(), true);
      #
      #        // 5. Add parm methods
      #        this.addParmMethods(classNode);
      #
      #        // 4. Add method GetFromDialog
      #        methodTreeNode = classNode.AOTadd('getFromDialog');
      #        methodTreeNode.AOTsetSource(this.srcGetFromDialog(), false);
      #
      #        // 5. Add method ClassDeclaration
      #        methodTreeNode = classNode.AOTfindChild('ClassDeclaration');
      #        methodTreeNode.AOTsetSource(this.srcClassDeclaration(), false);
      #
      #        // 6. Add method pack()
      #        methodTreeNode = classNode.AOTadd('pack');
      #        methodTreeNode.AOTsetSource(this.srcPack(), false);
      #
      #        // 7. Add method unpack()
      #        methodTreeNode = classNode.AOTadd('unpack');
      #        methodTreeNode.AOTsetSource(this.srcUnpack(), false);
      #
      #        // 8. Add method initQuery()
      #        if (rbUseAOTQuery)
      #        {
      #            methodTreeNode = classNode.AOTadd('initQuery');
      #            methodTreeNode.AOTsetSource(this.srcInitQuery(), false);
      #        }
      #        // 9. Add method initParmDefault()
      #        methodTreeNode = classNode.AOTadd('initParmDefault');
      #        methodTreeNode.AOTsetSource(this.srcInitParmDefault(), false);
      #
      #        //10. Add method dialog()
      #        methodTreeNode = classNode.AOTadd('dialog');
      #        methodTreeNode.AOTsetSource(this.srcDialog(), false);
      #
      #        //11. Add method dialog()
      #        if (rbUseAOTQuery)
      #        {
      #            methodTreeNode = classNode.AOTadd('queryRun');
      #            methodTreeNode.AOTsetSource(this.srcQueryRun(), false);
      #        }
      #        //12. Add method showQueryValues()
      #        if (showQueryValues)
      #        {
      #            methodTreeNode = classNode.AOTadd('showQueryValues');
      #            methodTreeNode.AOTsetSource(this.srcShowQueryValues(), false);
      #        }
      #
      #        //13. Add method showDefaultButton()
      #        if (showDefaultButton)
      #        {
      #            methodTreeNode = classNode.AOTadd('showDefaultButton');
      #            methodTreeNode.AOTsetSource(this.srcShowDefaultButton(), false);
      #        }
      #
      #        //14. Add method showQueryValues()
      #        if (showClearButton)
      #        {
      #            methodTreeNode = classNode.AOTadd('showClearButton');
      #            methodTreeNode.AOTsetSource(this.srcShowClearButton(), false);
      #        }
      #
      #        //16. Add method run()
      #        methodTreeNode = classNode.AOTadd('run');
      #        methodTreeNode.AOTsetSource(this.srcRun(), false);
      #    }
      #    else
      #    {
      #        // 5. Add parm methods
      #        this.addParmMethodsContract(classNode);
      #
      #        // 5. Add method ClassDeclaration
      #        methodTreeNode = classNode.AOTfindChild('ClassDeclaration');
      #        methodTreeNode.AOTsetSource(this.srcClassDeclarationContract(), false);
      #    }
      #    classNode.AOTsave();
      #    classNode.AOTcompile();
      #    classNode.AOTrestore();
      #    classNode.AOTnewWindow();
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    super();
      #
      #    xSysLastValue::saveLast(this);
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    super();
      #
      #    startLengthyOperation();
      #
      #    this.buildRunBase();
      #
      #    endLengthyOperation();
      #}
    ENDSOURCE
    SOURCE #editIsTable
      #edit boolean editIsTable(boolean _set, boolean _isTable)
      #{
      #    if (_set)
      #    {
      #        isTable = _isTable;
      #    }
      #
      #    return  isTable;
      #}
      #
    ENDSOURCE
    SOURCE #editRBClassDescription
      #edit ClassDescription editRBClassDescription(boolean _set, ClassDescription _rbClassDescription)
      #{
      #    if (_set)
      #    {
      #        rbClassDescription = _rbClassDescription;
      #    }
      #
      #    return  rbClassDescription;
      #}
      #
    ENDSOURCE
    SOURCE #editRBName
      #edit SysElementName editRBName(boolean _set, SysElementName _rbName)
      #{
      #    if (_set)
      #    {
      #        rbName = _rbName;
      #    }
      #
      #    return  rbName;
      #}
      #
    ENDSOURCE
    SOURCE #editRBUseAOTQuery
      #edit SysElementName editRBUseAOTQuery(boolean _set, SysElementName _rbUseAOTQuery)
      #{
      #    if (_set)
      #    {
      #        rbUseAOTQuery = _rbUseAOTQuery;
      #    }
      #
      #    return  rbUseAOTQuery;
      #}
      #
    ENDSOURCE
    SOURCE #editShowClearButton
      #edit boolean editShowClearButton(boolean _set, boolean _showClearButton)
      #{
      #    if (_set)
      #    {
      #        showClearButton = _showClearButton;
      #    }
      #
      #    return  showClearButton;
      #}
      #
    ENDSOURCE
    SOURCE #editShowDefaultButton
      #edit boolean editShowDefaultButton(boolean _set, boolean _showDefaultButton)
      #{
      #    if (_set)
      #    {
      #        showDefaultButton = _showDefaultButton;
      #    }
      #
      #    return showDefaultButton;
      #}
      #
    ENDSOURCE
    SOURCE #editShowQueryValues
      #edit boolean editShowQueryValues(boolean _set, boolean _showQueryValues)
      #{
      #    if (_set)
      #    {
      #        showQueryValues = _showQueryValues;
      #    }
      #
      #    return  showQueryValues;
      #}
      #
    ENDSOURCE
    SOURCE #initParmDefault
      #public void initParmDefault()
      #{
      #
      #}
    ENDSOURCE
    SOURCE #lastValueDataAreaId
      #public dataAreaId lastValueDataAreaId()
      #{
      #    return curExt();
      #}
    ENDSOURCE
    SOURCE #lastValueDesignName
      #public identifiername lastValueDesignName()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #lastValueElementName
      #public identifiername lastValueElementName()
      #{
      #    return classId2Name(classIdGet(this));
      #}
    ENDSOURCE
    SOURCE #lastValueType
      #public UtilElementType lastValueType()
      #{
      #    return UtilElementType::Form;
      #}
    ENDSOURCE
    SOURCE #lastValueUserId
      #public userId lastValueUserId()
      #{
      #    return curUserId();
      #}
    ENDSOURCE
    SOURCE #pack
      #public container pack()
      #{
      #    //container   fmtRecord;
      #    ;
      #    /*
      #    while select devRunBaseBuilderVars
      #    {
      #        fmtRecord += [buf2con(devRunBaseBuilderVars)];
      #    }
      #    */
      #    return [#CurrentVersion, #CurrentList];// + [fmtRecord];
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    super();
      #    xSysLastValue::getLast(this);
      #
      #    devRunBaseBuilderVars_ds.executeQuery();
      #}
    ENDSOURCE
    SOURCE #srcClassDeclaration
      #Source srcClassDeclaration()
      #{
      #    Source      source;
      #    ;
      #
      #    #define.SysQueryRun('QueryRun')
      #    #define.queryRun('queryRun')
      #
      #    if (CreateContract.checked())
      #    {
      #        source += strFmt('[DataContractAttribute]')                                               + #newLine;
      #    }
      #
      #    source += strFmt('class %1 extends RunBaseBatch', rbName)                                               + #newLine;
      #
      #    source += strFmt('{')                                                                                   + #newLine;
      #
      #    while select devRunBaseBuilderVars
      #      order by LineNum
      #    {
      #        source += strFmt('    %1%3 %2;', devRunBaseBuilderVars.Type, devRunBaseBuilderVars.Name,
      #                            strRep(' ', 22 - strLen(devRunBaseBuilderVars.Type)))   + #newLine;
      #    }
      #
      #    source += #newLine;
      #
      #    source += strFmt('    %1            %2;', #SysQueryRun, #queryRun)                                      + #newLine;
      #
      #    source += #newLine;
      #
      #    while select devRunBaseBuilderVars
      #      order by LineNum
      #        where devRunBaseBuilderVars.IsExternalTable == false
      #    {
      #        source += strFmt('    DialogField            %1;', devRunBaseBuilderVars.DlgName)                   + #newLine;
      #    }
      #
      #    source += #newLine + #newLine;
      #
      #    source += strFmt('    #define.CurrentVersion(1)')                                               + #newLine;
      #    source += strFmt('    #localmacro.CurrentList')                                                 + #newLine;
      #
      #    while select devRunBaseBuilderVars
      #      order by LineNum
      #         where devRunBaseBuilderVars.IsExternalTable == false
      #    {
      #        source += strFmt('        %1,', devRunBaseBuilderVars.Name)                                 + #newLine;
      #    }
      #
      #    source = strdel(source, strlen(source) - 1, 1); // delete last comma
      #
      #    source += strFmt('    #endmacro')                                                               + #newLine;
      #    source += strFmt('}')                                                                           + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcClassDeclarationContract
      #Source srcClassDeclarationContract()
      #{
      #    Source      source;
      #    str     lastGroup;
      #    int         curCount;
      #    ;
      #
      #    #define.SysQueryRun('SysQueryRun')
      #    #define.queryRun('queryRun')
      #
      #    source += strFmt('[DataContractAttribute')                                             ;
      #
      #    while select devRunBaseBuilderVars
      #        order by LineNum
      #        where devRunBaseBuilderVars.ContractGroupName2
      #    {
      #        if (lastGroup != devRunBaseBuilderVars.ContractGroupName2)
      #        {
      #            curCount++;
      #            source +=  #newLine + strFmt(', SysOperationGroupAttribute(\'%1\',"%2","%3")', devRunBaseBuilderVars.ContractGroupName2, devRunBaseBuilderVars.ContractGroupLabel2, curCount);
      #        }
      #        lastGroup = devRunBaseBuilderVars.ContractGroupName2;
      #    }
      #    source += strFmt(']')                                               + #newLine;
      #
      #    source += strFmt('class %1', rbName)                                               + #newLine;
      #
      #    source += strFmt('{')                                                                                   + #newLine;
      #
      #    while select devRunBaseBuilderVars
      #      order by LineNum
      #    {
      #        source += strFmt('    %1            %2;', devRunBaseBuilderVars.Type, devRunBaseBuilderVars.Name)   + #newLine;
      #    }
      #
      #    source += #newLine;
      #
      #    source += strFmt('}')                                                                           + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcConstruct
      #Source srcConstruct()
      #{
      #    Source  source;
      #    ;
      #
      #    source = new XppSource().constructMethod(rbName);
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcDescription
      #Source srcDescription()
      #{
      #    Source      source;
      #    ;
      #
      #    source += strFmt('static ClassDescription description()')                           + #newLine;
      #    source += strFmt('{')                                                               + #newLine;
      #    source += strFmt('    ;')                                                           + #newLine + #newLine;
      #
      #    source += strFmt('    return "%1";', rbClassDescription )                           + #newLine;
      #    source += strFmt('}');
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcDialog
      #Source srcDialog()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public Object dialog()')                                                          + #newLine;
      #    source += strFmt('{')                                                                               + #newLine;
      #    source += strFmt('    DialogRunbase       dialog = super();')                                       + #newLine;
      #    source += strFmt('    ;')                                                                           + #newLine + #newLine;
      #
      #    while select devRunBaseBuilderVars
      #      order by LineNum
      #        where devRunBaseBuilderVars.IsExternalTable == false
      #    {
      #
      #        if (devRunBaseBuilderVars.OverwriteLabels)
      #        {
      #            source += strFmt('    %1%6 = dialog.addFieldValue(extendedtypestr(%2), %3, "%4", "%5");', devRunBaseBuilderVars.DlgName,
      #                                                                                           devRunBaseBuilderVars.Type,
      #                                                                                           devRunBaseBuilderVars.Name,
      #                                                                                           devRunBaseBuilderVars.Label,
      #                                                                                           devRunBaseBuilderVars.LabelHelp,
      #                                                                                           strRep(' ', 26 - strLen(devRunBaseBuilderVars.DlgName))
      #                                                                                           ) + #newLine;
      #        }
      #        else
      #        {
      #            source += strFmt('    %1%4 = dialog.addFieldValue(extendedtypestr(%2), %3);', devRunBaseBuilderVars.DlgName,
      #                                                                                       devRunBaseBuilderVars.Type,
      #                                                                                       devRunBaseBuilderVars.Name,
      #                                                                                       strRep(' ', 26 - strLen(devRunBaseBuilderVars.DlgName))
      #                                                                                       ) + #newLine;
      #        }
      #    }
      #
      #    source += #newLine;
      #    source += strFmt('    return dialog;')                                                              + #newLine;
      #    source += strFmt('}')                                                                               + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcGetFromDialog
      #Source srcGetFromDialog()
      #{
      #    Source      source;
      #    ;
      #
      #    source += strFmt('public boolean getFromDialog()')                                                  + #newLine;
      #    source += strFmt('{')                                                                               + #newLine;
      #    source += strFmt('    ;')                                                                           + #newLine + #newLine;
      #
      #    while select devRunBaseBuilderVars
      #        order by LineNum
      #        where devRunBaseBuilderVars.IsExternalTable == false
      #    {
      #        source += strFmt('    %1%3 = %2.value();', devRunBaseBuilderVars.Name, devRunBaseBuilderVars.DlgName,
      #                            strRep(' ', 18 - strLen(devRunBaseBuilderVars.Name))
      #                            ) + #newLine;
      #    }
      #
      #    source += #newLine;
      #
      #    source += strFmt('    return super();')                                                             + #newLine;
      #    source += strFmt('}')                                                                               + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcInitParmDefault
      #Source srcInitParmDefault()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public void initParmDefault()')                       + #newLine;
      #    source += strFmt('{')                                                   + #newLine;
      #    source += strFmt('    ;')                                               + #newLine + #newLine;
      #    if (rbUseAOTQuery)
      #    {
      #        source += strFmt('    this.initQuery();')                               + #newLine + #newLine;
      #    }
      #    source += strFmt('    super();')                                        + #newLine;
      #    source += strFmt('}')                                                   + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcInitQuery
      #Source srcInitQuery()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public void initQuery()')                                                                         + #newLine;
      #    source += strFmt('{')                                                                                               + #newLine;
      #    if (isTable)
      #    {
      #        source += strFmt('    Query                   query = new Query();') + #newLine;
      #        source += strFmt('    QueryBuildDataSource    qbds = query.addDataSource(tablenum(%1));', rbUseAOTQuery) + #newLine;
      #        source += strFmt('    QueryBuildRange         qBR;') + #newLine;
      #        source += strFmt('    ;') + #newLine;
      #        source += strFmt('    ')  + #newLine;
      #        source += strFmt('    qBR = SysQuery::findOrCreateRange(qbds, fieldnum(%1, RecId));', rbUseAOTQuery) + #newLine;
      #        source += strFmt('    qBR.status(RangeStatus::HIDDEN);  ') + #newLine;
      #    }
      #    else
      #    {
      #        source += strFmt('    Query   query = new Query(%1);', rbUseAOTQuery ? strFmt('querystr(%1)', rbUseAOTQuery) : '')  + #newLine;
      #        source += strFmt('    ;')                                                                                           + #newLine + #newLine;
      #
      #
      #    }
      #    source += strFmt('    queryRun = new QueryRun(query);') + #newLine;
      #    source += strFmt('}')      + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcMain
      #Source srcMain()
      #{
      #    Source      source;
      #    ;
      #
      #    source += strFmt('public static void main(Args _args)')                                                 + #newLine;
      #    source += strFmt('{')                                                                                   + #newLine;
      #    source += strFmt('    %1    runObject = %1::construct();', rbName)                                             + #newLine;
      #
      #    devRunBaseBuilderVars.clear();
      #    select devRunBaseBuilderVars
      #      order by LineNum
      #      where devRunBaseBuilderVars.IsExternalTable;
      #    if (devRunBaseBuilderVars.RecId && showQueryValues)
      #    {
      #        source += strFmt('    QueryBuildDataSource  qbds;')                    + #newLine;
      #    }
      #
      #    source += strFmt('    ;')                                                                               + #newLine + #newLine;
      #
      #    if (devRunBaseBuilderVars.RecId)
      #    {
      #        source += strFmt('    if (_args.record().TableId != tablenum(%1))', devRunBaseBuilderVars.Type)       + #newLine;
      #        source += strFmt('    {')       + #newLine;
      #        source += strFmt('        throw error(Error::missingRecord(funcname()));')       + #newLine;
      #        source += strFmt('    }')       + #newLine;
      #
      #        source += strFmt('    runObject.%1(_args.record());', devRunBaseBuilderVars.ParmName) + #newLine;
      #
      #        if (showQueryValues)
      #        {
      #            source += strFmt('    if (_args && _args.record().TableId == tablenum(%1))' , devRunBaseBuilderVars.Type)       + #newLine;
      #            source += strFmt('    {')       + #newLine;
      #            source += strFmt('        qbds = runObject.queryRun().query().dataSourceTable(tablenum(%1));' , devRunBaseBuilderVars.Type)       + #newLine;
      #            source += strFmt('        qbds.clearRanges();')       + #newLine;
      #            source += strFmt('        qbds.addRange(fieldnum(%1, RecId)).value(queryValue(runObject.%2().RecId));', devRunBaseBuilderVars.Type,  devRunBaseBuilderVars.ParmName) + #newLine;
      #            source += strFmt('        //runObject.parmIsDisableUnpackQuery(true);')       + #newLine;
      #            source += strFmt('    }')       + #newLine;
      #        }
      #    }
      #
      #    source += strFmt('    if (runObject.prompt())', rbName)                                                        + #newLine;
      #    source += strFmt('    {')                                                                               + #newLine;
      #    source += strFmt('        runObject.run();', rbName)                                                           + #newLine;
      #    source += strFmt('    }')                                                                               + #newLine;
      #    source += strFmt('}')                                                                                   + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcPack
      #Source srcPack()
      #{
      #    Source      source;
      #    ;
      #
      #    source += strFmt('public container pack()')                                             + #newLine;
      #    source += strFmt('{')                                                                   + #newLine;
      #    source += strFmt('    ;')                                                               + #newLine + #newLine;
      #    if (rbUseAOTQuery)
      #    {
      #        source += strFmt('    return [#CurrentVersion, #CurrentList, queryRun.pack()];')        + #newLine;
      #    }
      #    else
      #    {
      #        source += strFmt('    return [#CurrentVersion, #CurrentList];')        + #newLine;
      #    }
      #    source += strFmt('}')                                                                   + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcParmMethod
      #Source srcParmMethod(SysElementName _type, SysElementName _name, SysElementName _parmName, SysElementName _varName)
      #{
      #    Source      source;
      #    ;
      #
      #    source += strFmt('public %1 %2(%1 _%3 = %3)', _type, _parmName, _varName)   + #newLine;
      #    source += strFmt('{')                                                       + #newLine;
      #    source += strFmt('    ;')                                                   + #newLine + #newLine;
      #
      #    source += strFmt('    %1 = _%1;',  _varName)                                + #newLine + #newLine;
      #
      #    source += strFmt('    return %1;', _varName)                                + #newLine;
      #    source += strFmt('}')                                                       + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcParmMethodContract
      #Source srcParmMethodContract(int _lineNum)
      #{
      #    Source      source;
      #    ;
      #    //SysOperationControlVisibilityAttribute(false)
      #    source += strFmt('[')+ #newLine;
      #    source += strFmt("    DataMemberAttribute('%1'),", devRunBaseBuilderVars.Name) + #newLine;
      #    if (devRunBaseBuilderVars.OverwriteLabels)
      #    {
      #        if (devRunBaseBuilderVars.label)
      #            source += strFmt("    SysOperationLabelAttribute(literalStr(\"%1\")),", devRunBaseBuilderVars.label) + #newLine;
      #        if (devRunBaseBuilderVars.LabelHelp)
      #            source += strFmt("    SysOperationHelpTextAttribute(literalStr(\"%1\")),", devRunBaseBuilderVars.LabelHelp) + #newLine;
      #    }
      #    if (devRunBaseBuilderVars.ContractGroupName2)
      #    {
      #        source += strFmt("    SysOperationGroupMemberAttribute('%1'),", devRunBaseBuilderVars.ContractGroupName2) + #newLine;
      #    }
      #    source += strFmt("    SysOperationDisplayOrderAttribute('%1')", _lineNum) + #newLine;
      #    source += strFmt(']')+ #newLine;
      #
      #
      #    source += strFmt("public %1 %2(%1 _%3 = %3)", devRunBaseBuilderVars.Type, devRunBaseBuilderVars.ParmName, devRunBaseBuilderVars.Name)   + #newLine;
      #    source += strFmt("{")                                                       + #newLine;
      #    source += strFmt("    ;")                                                   + #newLine + #newLine;
      #
      #    source += strFmt("    %1 = _%1;",  devRunBaseBuilderVars.Name)                                + #newLine + #newLine;
      #
      #    source += strFmt("    return %1;", devRunBaseBuilderVars.Name)                                + #newLine;
      #    source += strFmt("}")                                                       + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcQueryRun
      #Source srcQueryRun()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public QueryRun queryRun()')                          + #newLine;
      #    source += strFmt('{')                                                   + #newLine;
      #    source += strFmt('    ;')                                               + #newLine + #newLine;
      #
      #    source += strFmt('    return queryRun;')                                + #newLine;
      #    source += strFmt('}')                                                   + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcRun
      #Source srcRun()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public void run()')                                   + #newLine;
      #    source += strFmt('{')                                                   + #newLine;
      #    if (showQueryValues && rbUseAOTQuery && isTable)
      #    {
      #        source += strFmt('    int                     processedCounter;')   + #newLine;
      #        source += strFmt('    QueryBuildDataSource    qBDS;')               + #newLine;
      #        source += strFmt('    %1             %2;', rbUseAOTQuery, this.strFirstLower(rbUseAOTQuery))        + #newLine;
      #        source += strFmt('    ;')                                            + #newLine;
      #        source += strFmt('    qBDS = queryRun.query().dataSourceTable(tableNum(%1));', rbUseAOTQuery) + #newLine;
      #        source += strFmt('    SysQuery::findOrCreateRange(qBDS, fieldnum(%1, RecId)).value(queryValue(""));', rbUseAOTQuery) + #newLine;
      #        source += strFmt('')                                                                   + #newLine;
      #        source += strFmt('    this.progressInit(RunBase::getDescription(classIdGet(this)),')   + #newLine;
      #        source += strFmt('                      SysQuery::countTotal(queryRun),')              + #newLine;
      #        source += strFmt('                      #AviSearch);')                                 + #newLine;
      #        source += strFmt('    ')                                                               + #newLine;
      #        source += strFmt('    while (queryRun.next())')                                        + #newLine;
      #        source += strFmt('    {')                                                              + #newLine;
      #        source += strFmt('        %1 = queryRun.get(tablenum(%2));', this.strFirstLower(rbUseAOTQuery), rbUseAOTQuery) + #newLine;
      #        source += strFmt('') + #newLine;
      #        source += strFmt('        processedCounter++;') + #newLine;
      #        source += strFmt('        progress.incCount();') + #newLine;
      #        source += strFmt('') + #newLine;
      #        source += strFmt('    }') + #newLine;
      #        source += strFmt('    info(strfmt("%1 record(s) processed", processedCounter));') + #newLine;
      #
      #    }
      #    else
      #    {
      #        source += strFmt('    ;')                                               + #newLine + #newLine;
      #        source += strFmt('    if (! this.validate())')                          + #newLine;
      #        source += strFmt('    {')                                               + #newLine;
      #        source += strFmt('        throw error("");')                            + #newLine;
      #        source += strFmt('    }')                                               + #newLine + #newLine;
      #
      #        source += strFmt('    try')                                             + #newLine;
      #        source += strFmt('    {')                                               + #newLine;
      #        source += strFmt('        ttsbegin;')                                   + #newLine + #newLine;
      #
      #        source += strFmt('        ttscommit;')                                  + #newLine;
      #        source += strFmt('    }')                                               + #newLine;
      #        source += strFmt('    catch (exception::DeadLock)')                     + #newLine;
      #        source += strFmt('    {')                                               + #newLine;
      #        source += strFmt('        retry;')                                      + #newLine;
      #        source += strFmt('    }')                                               + #newLine;
      #    }
      #
      #    source += strFmt('}')                                                   + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcShowClearButton
      #Source srcShowClearButton()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public boolean showClearButton()')                    + #newLine;
      #    source += strFmt('{')                                                   + #newLine;
      #    source += strFmt('    ;')                                               + #newLine + #newLine;
      #
      #    source += strFmt('    return true;')                                    + #newLine;
      #    source += strFmt('}')                                                   + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcShowDefaultButton
      #Source srcShowDefaultButton()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public boolean showDefaultButton()')                  + #newLine;
      #    source += strFmt('{')                                                   + #newLine;
      #    source += strFmt('    ;')                                               + #newLine + #newLine;
      #
      #    source += strFmt('    return true;')                                    + #newLine;
      #    source += strFmt('}')                                                   + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcShowQueryValues
      #Source srcShowQueryValues()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public boolean showQueryValues()')                    + #newLine;
      #    source += strFmt('{')                                                   + #newLine;
      #    source += strFmt('    ;')                                               + #newLine + #newLine;
      #
      #    source += strFmt('    return true;')                                    + #newLine;
      #    source += strFmt('}')                                                   + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #srcUnpack
      #Source srcUnpack()
      #{
      #    Source  source;
      #    ;
      #
      #    source += strFmt('public boolean unpack(container _packedClass)')                           + #newLine;
      #    source += strFmt('{')                                                                       + #newLine;
      #    source += strFmt('    Version    version = RunBase::getVersion(_packedClass);')             + #newLine;
      #    if (rbUseAOTQuery)
      #    {
      #        source += strFmt('    container  queryCon;')                                                + #newLine;
      #    }
      #    source += strFmt('    ;')                                                                   + #newLine + #newLine;
      #
      #    source += strFmt('    switch (version)')                                                    + #newLine;
      #    source += strFmt('    {')                                                                   + #newLine;
      #    source += strFmt('        case #CurrentVersion:')                                           + #newLine;
      #    if (rbUseAOTQuery)
      #    {
      #        source += strFmt('            [version,#CurrentList,queryCon] = _packedClass;')             + #newLine;
      #        source += strFmt('            if (SysQuery::isPackedOk(queryCon))')                         + #newLine;
      #        source += strFmt('            {')                                                           + #newLine;
      #        source += strFmt('                queryRun = new QueryRun(queryCon);')                      + #newLine;
      #        source += strFmt('            }')                                                           + #newLine;
      #        source += strFmt('            else')                                                        + #newLine;
      #        source += strFmt('            {')                                                           + #newLine;
      #        source += strFmt('                this.initQuery();')                                       + #newLine;
      #        source += strFmt('            }')                                                           + #newLine;
      #    }
      #    else
      #    {
      #        source += strFmt('            [version,#CurrentList] = _packedClass;')             + #newLine;
      #    }
      #    source += strFmt('            break;')                                                      + #newLine;
      #    source += strFmt('        default:')                                                        + #newLine;
      #    source += strFmt('            return false;')                                               + #newLine;
      #    source += strFmt('    }')                                                                   + #newLine + #newLine;
      #
      #    source += strFmt('    return true;')                                                        + #newLine;
      #    source += strFmt('}')                                                                       + #newLine;
      #
      #    return source;
      #}
    ENDSOURCE
    SOURCE #strFirstLower
      #str strFirstLower(str _s)
      #{
      #    ;
      #    return strlwr(substr(_s, 1, 1)) + substr(_s, 2, strlen(_s));
      #}
    ENDSOURCE
    SOURCE #udpateDesign
      #void udpateDesign()
      #{
      #    ;
      #
      #    DEVRunBaseBuilderVars_ds.object(fieldnum(DEVRunBaseBuilderVars, Label)).enabled(DEVRunBaseBuilderVars.OverwriteLabels);
      #    DEVRunBaseBuilderVars_ds.object(fieldnum(DEVRunBaseBuilderVars, LabelHelp)).enabled(DEVRunBaseBuilderVars.OverwriteLabels);
      #}
    ENDSOURCE
    SOURCE #unpack
      #public boolean unpack(container packedClass)
      #{
      #    Version     version     = runbase::getVersion(packedClass);
      #    //container   fmtRecord;
      #    ;
      #
      #    switch (version)
      #    {
      #        case #CurrentVersion:
      #            //[version, #CurrentList, fmtRecord] = packedClass;
      #            [version, #CurrentList] = packedClass;
      #            break;
      #        default:
      #            return false;
      #    }
      #    /*
      #    while (conlen(fmtRecord))
      #    {
      #        devRunBaseBuilderVars.clear();
      #        con2buf(conpeek(fmtRecord, 1), devRunBaseBuilderVars);
      #        devRunBaseBuilderVars.insert();
      #
      #        fmtRecord = condel(fmtRecord, 1, 1);
      #    }
      #    */
      #    return true;
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #DEVRunBaseBuilderVars
          Table               #DEVRunBaseBuilderVars
          Index               #LineNumIdx
          CounterField        #LineNum
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD Type
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    ;
                #    DEVRunBaseBuilderVars::lookupVarTypes(_formControl);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD OverwriteLabels
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    element.udpateDesign();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    element.udpateDesign();
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #RunBase class builder
      TitleDatasource     #DEVRunBaseBuilderVars
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup1
          Left                #Auto (right)
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroup
          ArrangeWhen         #Auto
          ArrangeMethod       #Horizontal, flush right
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Group
          DataSource          #DEVRunBaseBuilderVars
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #AdditionalProperties
          ElementPosition     #1840700268
          HierarchyParent     #GroupProperties
          DataSource          #DEVRunBaseBuilderVars
          DataGroup           #AdditionalProperties
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ButtonGroup
          Left                #Auto (right)
          ElementPosition     #1610612733
          ArrangeMethod       #Horizontal, flush right
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ContractGroup
          ElementPosition     #1533916890
          HierarchyParent     #GroupProperties
          Caption             #Contract group
          DataSource          #DEVRunBaseBuilderVars
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #GroupVarList
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupProperties
          ElementPosition     #1610612733
          HierarchyParent     #VariableGroup
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupQuery
          ElementPosition     #1879048185
          HierarchyParent     #ParametersGroup
          Caption             #@SYS25531
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupVarList
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #VariableGroup
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Labels
          ElementPosition     #1227133512
          HierarchyParent     #GroupProperties
          Caption             #@SYS25058
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MoveButtos
          ElementPosition     #1073741822
          HierarchyParent     #GroupVarList
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ParametersGroup
          Width               #Column width
          ElementPosition     #536870911
          Caption             #@SYS7764
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VariableGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          Caption             #Variables
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonUp
          ElementPosition     #1073741822
          HierarchyParent     #MoveButtos
          Text                #@SYS35112
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    DEVRunBaseBuilderVars save = devRunBaseBuilderVars.moveUp(devRunBaseBuilderVars);
            #    ;
            #
            #    super();
            #
            #    if (save)
            #    {
            #        devRunBaseBuilderVars_ds.research();
            #        devRunBaseBuilderVars_ds.findRecord(save);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #DownButton
          ElementPosition     #1610612733
          HierarchyParent     #MoveButtos
          Text                #@SYS35113
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    DEVRunBaseBuilderVars cur = devRunBaseBuilderVars.moveDown(devRunBaseBuilderVars);
            #    ;
            #
            #    super();
            #
            #    if (cur)
            #    {
            #        devRunBaseBuilderVars_ds.research();
            #        devRunBaseBuilderVars_ds.findRecord(cur);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #CreateContract
          AutoDeclaration     #Yes
          ElementPosition     #1610612730
          HierarchyParent     #ParametersGroup
          Label               #Create data contract
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #DEVRunBaseBuilder_VarOverloadLabels
          ElementPosition     #858993458
          HierarchyParent     #Labels
          Label               #Overwrite EDT labels
          DataSource          #DEVRunBaseBuilderVars
          DataField           #OverwriteLabels
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #editshowClearButton
          ElementPosition     #1073741820
          HierarchyParent     #ParametersGroup
          Label               #Show clear button
          DataMethod          #editshowClearButton
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #editshowDefaultButton
          ElementPosition     #1342177275
          HierarchyParent     #ParametersGroup
          Label               #Show default button
          DataMethod          #editshowDefaultButton
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #editshowQueryValues
          ElementPosition     #1717986916
          HierarchyParent     #GroupQuery
          Label               #Show query values
          DataMethod          #editshowQueryValues
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #IsTableCheckBox
          ElementPosition     #1288490187
          HierarchyParent     #GroupQuery
          Label               #Is table
          DataMethod          #editIsTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonCancel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup1
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonOK
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup1
          Command             #263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DEVRunBaseBuilder_Name
          ElementPosition     #1610612733
          HierarchyParent     #Grid
          DataSource          #DEVRunBaseBuilderVars
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DEVRunBaseBuilder_Type
          ElementPosition     #1073741822
          HierarchyParent     #Grid
          DataSource          #DEVRunBaseBuilderVars
          DataField           #Type
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DEVRunBaseBuilder_VarDlgName
          ElementPosition     #613566756
          HierarchyParent     #GroupProperties
          Label               #DialogField name
          DataSource          #DEVRunBaseBuilderVars
          DataField           #DlgName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DEVRunBaseBuilder_VarLabel
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #Labels
          Label               #@SYS25058
          DataSource          #DEVRunBaseBuilderVars
          DataField           #Label
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DEVRunBaseBuilder_VarLabelHelp
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #Labels
          Label               #@SYS14501
          DataSource          #DEVRunBaseBuilderVars
          DataField           #LabelHelp
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DEVRunBaseBuilder_VarParmName
          ElementPosition     #920350134
          HierarchyParent     #GroupProperties
          Label               #Parm method name
          DataSource          #DEVRunBaseBuilderVars
          DataField           #ParmName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DEVRunBaseBuilderVars_ContractGroupLabel2
          ElementPosition     #1610612733
          HierarchyParent     #ContractGroup
          DataSource          #DEVRunBaseBuilderVars
          DataField           #ContractGroupLabel2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DEVRunBaseBuilderVars_ContractGroupName2
          ElementPosition     #1073741822
          HierarchyParent     #ContractGroup
          DataSource          #DEVRunBaseBuilderVars
          DataField           #ContractGroupName2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #editrbClassDescription
          ElementPosition     #805306365
          HierarchyParent     #ParametersGroup
          Label               #@SYS41042
          DataMethod          #editrbClassDescription
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #editrbName
          ElementPosition     #536870910
          HierarchyParent     #ParametersGroup
          Label               #@SYS24724
          DataMethod          #editrbName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #editrbUseAOTQuery
          ElementPosition     #858993458
          HierarchyParent     #GroupQuery
          Label               #Use AOT Query
          DataMethod          #editrbUseAOTQuery
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    ;
            #    DEVRunBaseBuilderVars::lookupAOTQuery(this);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #DEVSysTraceExecPlan
  PROPERTIES
    Name                #DEVSysTraceExecPlan
    Origin              #{EBE22A02-2479-40E4-A0EE-4B7209BD55C8}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #class FormRun extends ObjectRun
      #{
      #    FormTreeItem        formTreeItem;
      #    SysFormSplitter_Y   formSplitter;
      #    Imagelist           ilist;
      #    Imagelist           slist;
      #
      #    SysTraceTableSQL    traceRecord;
      #}
    ENDSOURCE
    SOURCE #init
      #void init()
      #{
      #    SysSqlShowPlan           showPlan = new SysSqlShowPlan();
      #    SQLFormatting            sqlFormatting = SQLFormatting::construct();
      #    SysTraceTableSQLExecPlan sysTraceTableSQLExecPlan;
      #    ;
      #
      #    super();
      #
      #    info.text("Misc. info about the statement");
      #
      #    if (this.args().dataset() == tablenum(SysTraceTableSQL))
      #    {
      #        traceRecord = this.args().record();
      #        sQuery.text( SQLFormatting.formatSQL(traceRecord.Statement));
      #
      #        showPlan.setStatement(traceRecord.Statement);
      #        select sysTraceTableSQLExecPlan where sysTraceTableSQLExecPlan.TraceRecId == traceRecord.RecId;
      #        showPlan.setPlan(sysTracetableSQLExecPlan.ExecutionPlan);
      #    }
      #
      #    this.initDesign();
      #
      #    showPlan.unpackPlan(planTree);
      #    formSplitter = new SysFormSplitter_Y(splitter,statement,this);
      #}
    ENDSOURCE
    SOURCE #initDesign
      #void initDesign()
      #{
      #    ilist = new Imagelist( Imagelist::smallIconWidth() , Imagelist::smallIconHeight() );
      #    sList = new Imagelist( Imagelist::smallIconWidth() , Imagelist::smallIconHeight() );
      #
      #    #define.Table(814)
      #    #define.Exclamation(928)
      #    #define.TableWithX(920)
      #
      #    slist.add( new Image() ); // index 0 not used in statelist
      #    slist.add( new Image(#Table));
      #    slist.add( new Image(#Exclamation));
      #    slist.add( new Image(#TableWithX));
      #
      #    iList.add( new Image(#Table));
      #    iList.add( new Image(#Exclamation));
      #    ilist.add( new Image(#TableWithX));
      #
      #    planTree.setImagelist( iList );
      #    planTree.setStateImagelist( sList );
      #
      #    planTree.prefColumnSize(450,220);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS74551
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1789569705
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ExecPlan
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          Caption             #@SYS73676
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Splitter
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #5
          AlignControl        #Yes
          ElementPosition     #715827882
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #public int mouseDown(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    int ret;
            #
            #    ret = super(_x, _y, _button, _ctrl, _shift);
            #
            #    return formSplitter.mouseDown( _x,_y,_button,_ctrl,_shift );
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #public int mouseMove(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    int ret;
            #
            #    ret = super(_x, _y, _button, _ctrl, _shift);
            #
            #    return formSplitter.mouseMove( _x,_y,_button,_ctrl,_shift );
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #public int mouseUp(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    int ret;
            #
            #    ret = super(_x, _y, _button, _ctrl, _shift);
            #    return formSplitter.mouseUp( _x,_y,_button,_ctrl,_shift );
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Statement
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #357913941
          Caption             #@SYS73679
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #bNewPlan
          AutoDeclaration     #Yes
          HelpText            #Click this to have the DB server calculate the plan for the current query.
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroup
          Text                #Calculate new plan
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysSqlShowPlan  showPlan = new SysSqlShowPlan();
            #    super();
            #    showPlan.setStatement(sQuery.text());
            #    showPlan.packPlan(true);
            #    showPlan.unpackPlan(planTree);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Info
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          Skip                #Yes
          ElementPosition     #1431655764
          ShowLabel           #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #sQuery
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          VerticalSpacing     #0
          HelpText            #The SQL statement for which the execution plan is to be calculated.
          ElementPosition     #1431655764
          HierarchyParent     #Statement
          MultiLine           #Yes
          ShowLabel           #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #PlanTree
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #ExecPlan
        ENDPROPERTIES
        
        METHODS
          SOURCE #selectionChanged
            #void selectionChanged(FormTreeItem oldItem, FormTreeItem newItem, FormTreeSelect how)
            #{
            #    SysSqlShowPlanItem  showPlanItem;
            #    ;
            #    showPlanItem = newItem.data();
            #    info.text(showPlanItem.getMisc());
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #DEVTableBuilder
  PROPERTIES
    Name                #DEVTableBuilder
    Origin              #{194E1362-6DC4-4FFE-A4A6-8B094DD608E4}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #//EVO RunBaseBuilder
      #public class FormRun extends ObjectRun
      #{
      #    SysElementName      tableName;
      #    NotesLine           tableLabel;
      #    SysElementName      tableVarName;
      #
      #    boolean             isCreateTable;
      #
      #    TreeNode    tableNode;
      #    ProjectNode project;
      #    TreeNode    startedFrom;
      #    #AOT
      #    #define.descriptionField("Description")
      #    #Properties
      #    str indexName;
      #
      #    DEVTableBuilderVars      tableKeyFieldVar;
      #
      #
      #    SysElementName      formName;
      #    NotesLine           formLabel;
      #    NotesLine           formHelp;
      #    boolean             isCreateForm;
      #
      #    #define.CurrentVersion(3)
      #    #localmacro.CurrentList
      #        tableName,
      #        tableLabel,
      #        tableVarName,
      #        isCreateTable,
      #        formName,
      #        formLabel,
      #        formHelp,
      #        isCreateForm
      #    #endmacro
      #
      #    #define.newLine("\n")
      #}
    ENDSOURCE
    SOURCE #addFieldsToGroup
      #private void addFieldsToGroup(str _groupName)
      #{
      #    DEVTableBuilderVars      tableBuilderVars;
      #    ;
      #    while select tableBuilderVars
      #        order by LineNum
      #    {
      #        DEVWizard::table_addFieldToGroup(tableNode, _groupName, tableBuilderVars.Name);
      #    }
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    super();
      #
      #    xSysLastValue::saveLast(this);
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    super();
      #
      #    startLengthyOperation();
      #
      #    project = DEVWizard::getWizardResults();
      #
      #    if (isCreateTable)
      #    {
      #        this.doTableCreate();
      #    }
      #    if (isCreateForm)
      #    {
      #        this.createForm();
      #        this.createMenuItem();
      #    }
      #
      #    endLengthyOperation();
      #}
    ENDSOURCE
    SOURCE #createForm
      #private void createForm()
      #{
      #    #DictField
      #    TreeNode                curTreeNode;
      #    TreeNode                formlist = infolog.findNode(#FormsPath);
      #    FormBuildDataSource     formDataSource;
      #    FormBuildDesign         formDesign;
      #    FormBuildTabControl     formTab;
      #    FormBuildTabPageControl formTabPage;
      #    FormBuild               formBuild;
      #    FormBuildGridControl    formGrid;
      #
      #    FormBuildActionPaneControl    formActionPaneControl;
      #    FormBuildActionPaneTabControl    formActionPaneTabControl;
      #
      #    FormBuildButtonGroupControl     buttonGroupControl;
      #
      #    FormBuildCommandButtonControl       commandButtonControl;
      #
      #    FormBuildGroupControl    formGroupControl;
      #
      #    DictField               dictField;
      #    FieldId                 primaryIndexFieldId;
      #    DictTable               common = new DictTable(tablenum(Common));
      #    int                     i;
      #    TreeNode                fieldGroup;
      #    FormBuildGroupControl   formGroup;
      #    Form                    formNode;
      #    DEVPropertyMap  propertyMap = new DEVPropertyMap();
      #    DictTable           dictTable = new DictTable(tablename2id(tableName));
      #    ;
      #    /*
      #    formBuild = new FormBuild(formName);
      #    formNode  = formBuild.form();
      #    formNode.AOTfirstChild();
      #
      #    formNode.save();
      #
      #    formlist.AOTrefresh();
      #    */
      #    formNode = formlist.AOTadd(formName);
      #    formNode.AOTsave();
      #    formlist.AOTrefresh();
      #
      #    //formlist.AOTadd(formName);
      #
      #    formNode = formlist.AOTfindChild(formName);
      #    formNode.AOTsave();
      #    // add DS
      #    curTreeNode = formNode.AOTfindChild('Data Sources');
      #    curTreeNode.AOTadd(tableName);
      #    formdataSource = formNode.dataSource(1);
      #    propertyMap.setNode(infolog.findNode(formNode.treeNodePath() + '\\Data Sources\\' + tableName));
      #
      #
      #    // Add design
      #    formDesign = formNode.design();
      #    formDesign.caption(formLabel);
      #    formDesign.columns(1);
      #    formDesign.widthMode(FormWidth::ColumnWidth);
      #    formDesign.heightMode(FormHeight::ColumnHeight);
      #    formDesign.titleDatasource(tableName);
      #    formDesign.saveSize(true);
      #    formDesign.style(FormStyle::SimpleList);
      #
      #
      #    formActionPaneControl = formDesign.addControl(FormControlType::ActionPane, 'ActionPane');
      #    formActionPaneControl.style(1);
      #    formActionPaneControl.dataSource(1);
      #
      #    formActionPaneTabControl = formActionPaneControl.addControl(FormControlType::ActionPaneTab, 'ActionPaneTab');
      #    buttonGroupControl = formActionPaneTabControl.addControl(FormControlType::ButtonGroup, 'RecordBasics');
      #    commandButtonControl = buttonGroupControl.addControl(FormControlType::CommandButton, 'NewButton');
      #    commandButtonControl.command(260);
      #    commandButtonControl.imageLocation(2);
      #    commandButtonControl.normalImage('11045');
      #    commandButtonControl.buttonDisplay(4);
      #    commandButtonControl = buttonGroupControl.addControl(FormControlType::CommandButton, 'DeleteButton');
      #    commandButtonControl.command(2832);
      #    commandButtonControl.imageLocation(2);
      #    commandButtonControl.normalImage('10121');
      #    commandButtonControl.buttonDisplay(4);
      #    commandButtonControl.saveRecord(false);
      #    commandButtonControl.text('@' + 'SYS14425');
      #
      #    /*
      #    if (formRun.parmCreateTab())
      #    {
      #        formTab = formDesign.addControl(FormControlType::TAB, 'Tab');
      #        formTab.columns(1);
      #        formTab.widthMode(FormWidth::ColumnWidth);
      #        formTab.heightMode(FormHeight::ColumnHeight);
      #        formTab.dataSource(dictTable.name());
      #
      #        for (i = 1 ; i <= formRun.parmTabNum() ;i++)
      #        {
      #            formTabPage = formTab.addControl(FormControlType::TABPAGE, strFmt('TabPage%1', i));
      #            formTabPage.caption(strFmt('TabPage %1 Title', i));
      #            formTabPage.widthMode(FormWidth::ColumnWidth);
      #            formTabPage.heightMode(FormHeight::ColumnHeight);
      #            formTabPage.dataSource(dictTable.name());
      #        }
      #        formTabPage = formTab.controlNum(1);
      #        formtabPage.caption(formRun.parmFirstTabLabel());
      #        formtabPage.name('Overview');
      #        formGrid = formTabPage.addControl(FormControlType::GRID, 'Grid');
      #    }
      #    else
      #      */
      #    {
      #        formGroupControl = formDesign.addControl(FormControlType::Group, 'GridContainer');
      #        formGroupControl.style(2);
      #
      #        formGrid = formGroupControl.addControl(FormControlType::GRID, 'Grid');
      #    }
      #
      #    formGrid.widthMode(FormWidth::ColumnWidth);
      #    formGrid.heightMode(FormHeight::ColumnHeight);
      #    formGrid.dataSource(tableName);
      #
      #    //trud  -->
      #    fieldGroup = treenode::findNode('\\data dictionary\\tables\\'+tableName+'\\Field Groups\\' + 'Overview');
      #    if (fieldGroup)
      #    {
      #        formGroup = formGrid.addControl(FormControlType::Group,  strFmt('Grid_%1', 'Overview'));
      #        formGroup.dataSource(formDataSource.name());
      #        formGroup.dataGroup('Overview');
      #    }
      #    else
      #    {
      #        if (dictTable.primaryIndex())
      #        {
      #            primaryIndexFieldId = dictTable.indexObject(dictTable.primaryIndex()).field(1);
      #            for (i = 1; i <= dictTable.fieldCnt(); i++)
      #            {
      #                if (dictTable.fieldCnt2Id(i) == primaryIndexFieldId)
      #                {
      #                    formGrid.addDataField(formDataSource.id(), primaryIndexFieldId);
      #                    break;
      #                }
      #            }
      #        }
      #
      #        for (i = 1; i <= dictTable.fieldCnt(); i++)
      #        {
      #            dictField = dictTable.fieldObject(dictTable.fieldCnt2Id(i));
      #            if (! (common.fieldName2Id(dictField.name()) || primaryIndexFieldId == dictField.id()))
      #            {
      #                formGrid.addDataField(formDataSource.id(), dictField.id());
      #            }
      #        }
      #    }
      #    formNode.AOTsave();
      #    project.addUtilNode(UtilElementType::Form, formNode.name());
      #}
    ENDSOURCE
    SOURCE #createMenuItem
      #private void createMenuItem()
      #{
      #    TreeNode    menuItems = infolog.findNode(#MenuItemsDisplayPath);
      #    MenuItem    menuItem;
      #
      #    DEVPropertyMap  propertyMap = new DEVPropertyMap();
      #
      #    ;
      #
      #    menuItems.AOTadd(formName);
      #    menuItem = menuItems.AOTfindChild(formName);
      #    menuItem.AOTsave();
      #
      #    propertyMap.setNode(menuItem);
      #    propertyMap.setProperty(#PropertyLabel,             formLabel);
      #    propertyMap.setProperty(#PropertyHelpText,          formHelp);
      #    propertyMap.setProperty(#PropertyClass,             'Form');
      #    propertyMap.setProperty(#PropertyObject,            formName);
      #    propertyMap.setProperty(#PropertyNeededAccessLevel, 'View', true);
      #    menuItem.AOTsave();
      #
      #    project.addUtilNode(UtilElementType::DisplayTool, menuItem.name());
      #    project.AOTSave();
      #}
    ENDSOURCE
    SOURCE #createTable
      #private void createTable()
      #{
      #    DEVPropertyMap  propertyMap = new DEVPropertyMap();
      #    TreeNode            tablesNode = infolog.findNode(#TablesPath);
      #    TreeNode            indexNode;
      #    str                 source;
      #    str                 varKeyField;
      #    TreeNode            fieldGroup;
      #
      #
      #
      #    DEVTableBuilderVars      tableBuilderVars;
      #
      #    ;
      #    select firstOnly tableKeyFieldVar
      #        order by LineNum
      #        where tableKeyFieldVar.IsPrimary;
      #    if (tableKeyFieldVar.RecId)
      #    {
      #        indexName       = tableKeyFieldVar.Name + 'Idx';
      #    }
      #
      #    // 1. Create table
      #    tablesNode.AOTadd(tableName);
      #    tableNode = tablesNode.AOTfindChild(tableName);
      #    tableNode.AOTsave();
      #
      #    // 2. Create fields
      #    while select tableBuilderVars
      #        order by LineNum
      #    {
      #        propertyMap.setNode(DEVWizard::table_addField(tableNode, tableBuilderVars.Name, DEVWizard::getBaseType(tableBuilderVars.Type)));
      #        propertyMap.setProperty(#PropertyExtendedDataType, tableBuilderVars.Type, true);
      #
      #        if (tableBuilderVars.LabelHelp)
      #        {
      #            propertyMap.setProperty(#PropertyHelpText, tableBuilderVars.LabelHelp);
      #        }
      #        if (tableBuilderVars.Label)
      #        {
      #            propertyMap.setProperty(#PropertyLabel, tableBuilderVars.Label);
      #        }
      #        if (tableBuilderVars.Mandatory || tableBuilderVars.IsPrimary)
      #        {
      #            propertymap.setProperty(#PropertyMandatory, #PropertyValueYes);
      #            if (tableBuilderVars.IsPrimary)
      #            {
      #                propertyMap.setProperty(#PropertyAllowEdit, #PropertyValueNo);
      #            }
      #        }
      #        propertyMap.save();
      #    }
      #
      #    tableNode.AOTsave();
      #
      #    //2.5 trud - add OverView group
      #    fieldGroup = infolog.findNode(tableNode.treeNodePath() + '\\Field Groups\\' + 'Overview');
      #    if (! fieldGroup)
      #    {
      #        infolog.findNode(tableNode.treeNodePath() + '\\Field Groups').AOTadd('Overview');
      #        fieldGroup = infolog.findNode(tableNode.treeNodePath() + '\\Field Groups\\' + 'Overview');
      #    }
      #    propertyMap.setNode(fieldGroup);
      #    propertyMap.setProperty(#PropertyLabel, "@SYS9039", true);
      #    this.addFieldsToGroup('Overview');
      #
      #    // 3. add field to groups
      #    this.addFieldsToGroup(#PropertyAutoReport);
      #    this.addFieldsToGroup('AutoLookup');
      #
      #    // 4. Methods
      #
      #    tableNode.AOTsave();
      #
      #
      #    // 5. Индексы
      #    if (indexName)
      #    {
      #        indexNode = DEVWizard::table_addIndex(tableNode, indexName);
      #        tableNode.AOTsave();
      #
      #        while select tableKeyFieldVar
      #            order by LineNum desc
      #            where tableKeyFieldVar.IsPrimary
      #        {
      #            DEVWizard::index_addField(indexNode, tableKeyFieldVar.Name);
      #        }
      #
      #        propertyMap.setNode(indexNode);
      #        propertyMap.setProperty(#PropertyAllowDuplicates, #PropertyValueNo, true);
      #        propertyMap.setProperty('AlternateKey', 'Yes', true);
      #
      #        tableNode.AOTsave();
      #
      #        // find()
      #        source = this.template_method_find(tableName, indexName);
      #
      #        DEVWizard::AOTelement_addMethod(tableNode, 'find', source, true);
      #        tableNode.AOTsave();
      #    }
      #
      #    propertyMap.finalize();
      #}
    ENDSOURCE
    SOURCE #doTableCreate
      #private void doTableCreate()
      #{
      #
      #    ;
      #
      #
      #    this.createTable();
      #    DEVWizard::reexportNode(infolog.findNode(#TablesPath + '\\' + tableName));
      #
      #    this.setTableProps();
      #    project.addUtilNode(UtilElementType::Table, tableName);
      #
      #    select count(RecId) from tableKeyFieldVar
      #        where tableKeyFieldVar.IsPrimary;
      #    if (tableKeyFieldVar.RecId == 1)
      #    {
      #        select firstOnly tableKeyFieldVar
      #            where tableKeyFieldVar.IsPrimary;
      #        DEVWizard::edt_addRefTable(infolog.findNode(#ExtendedDataTypesPath + '\\' + tableKeyFieldVar.Type), tableName, tableKeyFieldVar.Name);
      #        project.addUtilNode(UtilElementType::ExtendedType, tableKeyFieldVar.Type);
      #    }
      #}
    ENDSOURCE
    SOURCE #editformHelp
      #public edit NotesLine editformHelp(
      #    boolean _set,
      #    NotesLine _formHelp
      #    )
      #{
      #    if (_set)
      #    {
      #        formHelp = _formHelp;
      #    }
      #    return  formHelp;
      #}
    ENDSOURCE
    SOURCE #editformLabel
      #public edit NotesLine editformLabel(
      #    boolean _set,
      #    NotesLine _formLabel
      #    )
      #{
      #    if (_set)
      #    {
      #        formLabel = _formLabel;
      #    }
      #    return  formLabel;
      #}
    ENDSOURCE
    SOURCE #editformName
      #public edit SysElementName editformName(
      #    boolean _set,
      #    SysElementName _formName
      #    )
      #{
      #    if (_set)
      #    {
      #        formName = _formName;
      #    }
      #    return  formName;
      #}
    ENDSOURCE
    SOURCE #editisCreateForm
      #public edit NoYesId editisCreateForm(
      #    boolean _set,
      #    NoYesId _isCreateForm
      #    )
      #{
      #    if (_set)
      #    {
      #        isCreateForm = _isCreateForm;
      #    }
      #    return  isCreateForm;
      #}
    ENDSOURCE
    SOURCE #editisCreateTable
      #public edit NoYesId editisCreateTable(
      #    boolean _set,
      #    NoYesId _isCreateTable
      #    )
      #{
      #    if (_set)
      #    {
      #        isCreateTable = _isCreateTable;
      #    }
      #    return  isCreateTable;
      #}
    ENDSOURCE
    SOURCE #edittableLabel
      #public edit NotesLine edittableLabel(
      #    boolean _set,
      #    NotesLine _tableLabel
      #    )
      #{
      #    if (_set)
      #    {
      #        tableLabel = _tableLabel;
      #    }
      #    return  tableLabel;
      #}
    ENDSOURCE
    SOURCE #edittableName
      #public edit SysElementName edittableName(
      #    boolean _set,
      #    SysElementName _tableName
      #    )
      #{
      #    if (_set)
      #    {
      #        tableName = _tableName;
      #    }
      #    return  tableName;
      #}
    ENDSOURCE
    SOURCE #edittableVarName
      #public edit SysElementName edittableVarName(
      #    boolean _set,
      #    SysElementName _tableVarName
      #    )
      #{
      #    if (_set)
      #    {
      #        tableVarName = _tableVarName;
      #    }
      #    return  tableVarName;
      #}
    ENDSOURCE
    SOURCE #initParmDefault
      #public void initParmDefault()
      #{
      #
      #}
    ENDSOURCE
    SOURCE #lastValueDataAreaId
      #public dataAreaId lastValueDataAreaId()
      #{
      #    return curExt();
      #}
    ENDSOURCE
    SOURCE #lastValueDesignName
      #public identifiername lastValueDesignName()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #lastValueElementName
      #public identifiername lastValueElementName()
      #{
      #    return element.name();
      #}
    ENDSOURCE
    SOURCE #lastValueType
      #public UtilElementType lastValueType()
      #{
      #    return UtilElementType::Form;
      #}
    ENDSOURCE
    SOURCE #lastValueUserId
      #public userId lastValueUserId()
      #{
      #    return curUserId();
      #}
    ENDSOURCE
    SOURCE #pack
      #public container pack()
      #{
      #    //container   fmtRecord;
      #    ;
      #    /*
      #    while select devRunBaseBuilderVars
      #    {
      #        fmtRecord += [buf2con(devRunBaseBuilderVars)];
      #    }
      #    */
      #    return [#CurrentVersion, #CurrentList];// + [fmtRecord];
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    super();
      #    xSysLastValue::getLast(this);
      #
      #
      #}
    ENDSOURCE
    SOURCE #setTableProps
      #private void setTableProps()
      #{
      #    DEVPropertyMap propertyMap  = new DEVPropertyMap();
      #    DEVTableBuilderVars         tableBuilderVars;
      #    LineNum         lastLineNum;
      #    ;
      #    tableNode                       = infolog.findNode(#TablesPath + '\\' + tableName);
      #
      #    select firstOnly tableBuilderVars
      #        order by LineNum;
      #
      #    lastLineNum = tableBuilderVars.LineNum;
      #
      #    propertyMap.setNode(tableNode);
      #    propertyMap.setProperty(#PropertyLabel,        tableLabel);
      #    propertyMap.setProperty(#PropertyTitleField1,  tableBuilderVars.Name);
      #    select firstOnly tableBuilderVars
      #        order by LineNum
      #        where tableBuilderVars.LineNum > lastLineNum;
      #
      #    propertyMap.setProperty(#PropertyTitleField2,  tableBuilderVars.Name);
      #    propertyMap.setProperty(#PropertyPrimaryIndex, indexName);
      #    propertyMap.setProperty(#PropertyClusterIndex, indexName);
      #    propertymap.setProperty(#PropertyCacheLookup,  'Found');
      #    propertyMap.setProperty(#PropertyTableGroup,   'Group', true);
      #    tableNode.AOTsave();
      #}
    ENDSOURCE
    SOURCE #strFirstLower
      #str strFirstLower(str _s)
      #{
      #    ;
      #    return strlwr(substr(_s, 1, 1)) + substr(_s, 2, strlen(_s));
      #}
    ENDSOURCE
    SOURCE #strFirstLwr
      #public str strFirstLwr(str _str)
      #{
      #    int len = strlen(_str);
      #    return len ? (strlwr(substr(_str, 1, 1)) + (len > 1 ? substr(_str, 2, len - 1) : "")) : "";
      #}
    ENDSOURCE
    SOURCE #template_method_find
      ##DictField
      #str template_method_find(str _tableName, str _indexName)
      #{
      #    DictTable       dt;
      #    DictIndex       di;
      #    DictField       df;
      #
      #    int             i;
      #    int             longestTypeLength = strlen('boolean'); //for forupdate
      #    int             longestNameLength;
      #    FieldId         fieldId;
      #    str             mandatoryFields;
      #
      #    str             methodText;
      #    str             indent;
      #    str             varName;
      #    //TextBuffer      tb;
      #
      #
      #    str strTypeOf(DictField _df, int _padTo = 0)
      #    {
      #        str res;
      #        if(df.typeId())
      #            res = new DictType(df.typeId()).name();
      #        else if(df.enumId())
      #            res = new DictEnum(df.enumId()).name();
      #        else
      #            res = '?UNKNOWN?';
      #        if(_padTo)
      #        {
      #            res += strrep(' ', _padTo - strlen(res));
      #        }
      #        return res;
      #    }
      #
      #    str prettyName(str _name)
      #    {
      #        return strlwr(substr(_name,1,1)) + substr(_name, 2, strlen(_name)-1);
      #    }
      #    ;
      #
      #    dt = new DictTable(tablename2id(_tableName));
      #
      #    if(!dt)
      #        throw error('Table name is incorrect');
      #
      #
      #    di = new DictIndex(dt.id() , dt.indexName2Id(_indexName));
      #    if(! di)
      #        throw error('Incorrect index');
      #
      #    methodText = strfmt('public static %1 find(',  dt.name());
      #    indent     = strrep(' ', strlen(methodText));
      #    varName    = prettyName(dt.name());
      #
      #
      #    // find longest type name
      #    longestTypeLength = strlen('boolean');
      #    //longestNameLength = strlen('_forUpdate');
      #    for(i = 1; i <= di.numberOfFields(); ++i)
      #    {
      #        df = new DictField(dt.id(), di.field(i));
      #        longestTypeLength = max(longestTypeLength, strlen(strTypeOf(df)));
      #        longestNameLength = max(longestNameLength, strlen(df.name()));
      #    }
      #
      #
      #    // build args and mandatory fields list
      #    for(i = 1; i <= di.numberOfFields(); ++i)
      #    {
      #        fieldId = di.field(i);
      #        df = new DictField(dt.id(), fieldId);
      #        if(df.flags() & #DBF_MANDATORY == #DBF_MANDATORY
      #         || di.name() == 'RecId')
      #        {
      #            if(mandatoryFields)
      #            {
      #                mandatoryFields += ' && ';
      #            }
      #            mandatoryFields += '_' + prettyName(df.name());
      #        }
      #
      #        if(i != 1)
      #        {
      #            methodText += strfmt(',\n%1', indent);
      #        }
      #
      #        methodText += strfmt('%1 _%2', strTypeOf(df, longestTypeLength), prettyName(df.name()));
      #    }
      #
      #    //build method header
      #    methodText += strfmt(',\n%1boolean%2_forUpdate = false)\n{\n', indent, strrep(' ', 1+longestTypeLength - strlen('boolean')));
      #    indent = '    ';
      #    methodText += indent + dt.name() + ' ' + varName + ';\n';
      #    methodText += indent + '\n';
      #
      #    //check for mandatory fields
      #    if(mandatoryFields)
      #    {
      #        methodText += indent + 'if (' + mandatoryFields + ')\n';
      #        methodText += indent + '{\n';
      #        indent += '    ';
      #    }
      #
      #    //selectForUpdate
      #    methodText += indent + varName+'.selectForUpdate(_forUpdate);\n\n';
      #
      #    //build select query
      #    methodText += indent + 'select firstonly ' + varname + '\n';
      #    methodText += indent + '    where ';
      #    for(i = 1; i <= di.numberOfFields(); ++i)
      #    {
      #        df = new DictField(dt.id(), di.field(i));
      #        if(i != 1)
      #        {
      #            methodText += '\n' + indent + '       && ';
      #        }
      #        methodText += varName + '.' + df.name() + strrep(' ', longestNameLength - strlen(df.name())) + ' == _' + prettyName(df.name());
      #    }
      #    methodText += ';\n';
      #
      #    //footer
      #    if(mandatoryFields)
      #    {
      #        indent = substr(indent, 1, strlen(indent) - 4);
      #        methodText += indent + '}\n';
      #    }
      #    methodText += '\n';
      #    methodText += indent + 'return '+varName+';\n';
      #
      #    methodText += '}';
      #    return methodText;
      #}
    ENDSOURCE
    SOURCE #unpack
      #public boolean unpack(container packedClass)
      #{
      #    Version     version     = runbase::getVersion(packedClass);
      #    //container   fmtRecord;
      #    ;
      #
      #    switch (version)
      #    {
      #        case #CurrentVersion:
      #            //[version, #CurrentList, fmtRecord] = packedClass;
      #            [version, #CurrentList] = packedClass;
      #            break;
      #        default:
      #            return false;
      #    }
      #    /*
      #    while (conlen(fmtRecord))
      #    {
      #        devRunBaseBuilderVars.clear();
      #        con2buf(conpeek(fmtRecord, 1), devRunBaseBuilderVars);
      #        devRunBaseBuilderVars.insert();
      #
      #        fmtRecord = condel(fmtRecord, 1, 1);
      #    }
      #    */
      #    return true;
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #DEVTableBuilderVars
          Table               #DEVTableBuilderVars
          Index               #LineNumIdx
          CounterField        #LineNum
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Caption             #Table builder
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup1
          Left                #Auto (right)
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroup
          ArrangeWhen         #Auto
          ArrangeMethod       #Horizontal, flush right
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Group
          DataSource          #DEVTableBuilderVars
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ButtonGroup
          Left                #Auto (right)
          ElementPosition     #1610612733
          ArrangeMethod       #Horizontal, flush right
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #FormParametersGroup
          ElementPosition     #1610612733
          HierarchyParent     #Group1
          Caption             #Form
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridGroup
          ElementPosition     #1431655764
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #DEVTableBuilderVars
          DataGroup           #GridGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #GroupVarList
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group1
          ElementPosition     #536870911
          FrameType           #None
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupProperties
          ElementPosition     #1610612733
          HierarchyParent     #VariableGroup
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupVarList
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #VariableGroup
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MoveButtos
          ElementPosition     #1073741822
          HierarchyParent     #GroupVarList
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ParametersGroup
          ElementPosition     #1073741822
          HierarchyParent     #Group1
          Caption             #Table
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PropertiesGroup
          ElementPosition     #1431655764
          HierarchyParent     #GroupProperties
          DataSource          #DEVTableBuilderVars
          DataGroup           #PropertiesGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VariableGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          Caption             #Variables
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonUp
          ElementPosition     #1073741822
          HierarchyParent     #MoveButtos
          Text                #@SYS35112
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    DEVTableBuilderVars save = DEVTableBuilderVars.moveUp(DEVTableBuilderVars);
            #    ;
            #
            #    super();
            #
            #    if (save)
            #    {
            #        DEVTableBuilderVars_ds.research();
            #        DEVTableBuilderVars_ds.findRecord(save);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #DownButton
          ElementPosition     #1610612733
          HierarchyParent     #MoveButtos
          Text                #@SYS35113
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    DEVTableBuilderVars cur = DEVTableBuilderVars.moveDown(DEVTableBuilderVars);
            #    ;
            #
            #    super();
            #
            #    if (cur)
            #    {
            #        DEVTableBuilderVars_ds.research();
            #        DEVTableBuilderVars_ds.findRecord(cur);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #editisCreateForm
          ElementPosition     #715827882
          HierarchyParent     #FormParametersGroup
          Label               #Is create form
          DataMethod          #editisCreateForm
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #editisCreateTable
          ElementPosition     #715827882
          HierarchyParent     #ParametersGroup
          Label               #Is create table
          DataMethod          #editisCreateTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonCancel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup1
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonOK
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup1
          Command             #263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #editformHelp
          ElementPosition     #1789569705
          HierarchyParent     #FormParametersGroup
          Label               #Form help
          DataMethod          #editformHelp
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #editformLabel
          ElementPosition     #1431655764
          HierarchyParent     #FormParametersGroup
          Label               #Form label
          DataMethod          #editformLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #editformName
          ElementPosition     #1073741823
          HierarchyParent     #FormParametersGroup
          Label               #Form name
          DataMethod          #editformName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #edittableLabel
          ElementPosition     #1431655764
          HierarchyParent     #ParametersGroup
          Label               #Table Label
          DataMethod          #edittableLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #edittableName
          ElementPosition     #1073741823
          HierarchyParent     #ParametersGroup
          Label               #Table Name
          DataMethod          #edittableName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #edittableVarName
          ElementPosition     #1789569705
          HierarchyParent     #ParametersGroup
          Label               #Table Var Name
          DataMethod          #edittableVarName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #DEVLabelsCreateInfo
  PROPERTIES
    Name                #DEVLabelsCreateInfo
    Origin              #{59B2DD16-2DC0-4B1C-A09E-8C9ED3989D83}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysFormSplitter_X           verticalSplitter;
      #
      #    DEVLabelsCreateHelper       labelsCreateHelper;
      #}
    ENDSOURCE
    SOURCE #deleteAllAction
      #void deleteAllAction()
      #{
      #    ;
      #    delete_from DEVLabelsCreateInfo;
      #
      #    element.refreshAction();
      #}
    ENDSOURCE
    SOURCE #refreshAction
      #void refreshAction()
      #{
      #    ;
      #    SetHookBox.value(false);
      #    SetHookBox.modified();
      #    DEVLabelsCreateInfo_ds.research();
      #}
    ENDSOURCE
    SOURCE #setLabelAction
      #void setLabelAction()
      #{
      #
      #    ;
      #    labelsCreateHelper = new DEVLabelsCreateHelper();
      #    labelsCreateHelper.setLabelAction();
      #
      #    element.refreshAction();
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #DEVLabelsCreateInfo
          Table               #DEVLabelsCreateInfo
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD Column
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD ElementPath
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Line
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD NewLabel
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD NewLabelValue
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PropertyName
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD dataAreaId
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #Create labels
      Style               #SimpleList
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #429496729
          Style               #Strip
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #RecordBasics
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #GridContainer
          ShowRowLabels       #No
          DataSource          #DEVLabelsCreateInfo
          AlternateRowShading #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDblClick
            #public int mouseDblClick(int _x, int _y, int _button, boolean _Ctrl, boolean _Shift)
            #{
            #    int ret;
            #    TreeNode    parentNode;
            #    TreeNode    treeNode  ;
            #
            #
            #    ret = super(_x, _y, _button, _Ctrl, _Shift);
            #
            #
            #    parentNode  = infolog.findNode(SysTreeNode::applObjectPath(DEVLabelsCreateInfo.ElementPath));
            #    treeNode    = infolog.findNode(DEVLabelsCreateInfo.ElementPath);
            #
            #
            #    if (treeNode)
            #    {
            #        if (DEVLabelsCreateInfo.PropertyName)
            #        {
            #            treeNode.AOTshowProperties();
            #        }
            #        else
            #        {
            #            treeNode.AOTedit(DEVLabelsCreateInfo.Line, DEVLabelsCreateInfo.Column);
            #        }
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CustomFilterGroup
          Visible             #No
          ElementPosition     #1288490187
          Style               #DetailTitleContainer
          AlignChild          #No
          ViewEditMode        #Edit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridContainer
          ElementPosition     #1717986916
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridGroup
          ElementPosition     #1431655764
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #DEVLabelsCreateInfo
          DataGroup           #GridGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PageTitleGroup
          ElementPosition     #858993458
          Style               #DetailTitleContainer
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #CreateLabelsButton
          ElementPosition     #1533916890
          HierarchyParent     #RecordBasics
          Text                #Create labels
          ButtonDisplay       #Text & Image left
          NormalImage         #11329
          ImageLocation       #EmbeddedResource
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    labelsCreateHelper = new DEVLabelsCreateHelper();
            #    labelsCreateHelper.createLabelsInFile();
            #
            #    element.refreshAction();
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #DeleteAllButton
          ElementPosition     #920350134
          HierarchyParent     #RecordBasics
          Text                #Clear list
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.deleteAllAction();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #RefreshButton
          ElementPosition     #613566756
          HierarchyParent     #RecordBasics
          Text                #Refresh
          ButtonDisplay       #Text & Image left
          NormalImage         #11437
          ImageLocation       #EmbeddedResource
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.refreshAction();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ReplaceTextWithLabels
          ElementPosition     #1840700268
          HierarchyParent     #RecordBasics
          Text                #Replace Text With Labels
          ButtonDisplay       #Text & Image left
          NormalImage         #11289
          ImageLocation       #EmbeddedResource
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    labelsCreateHelper = new DEVLabelsCreateHelper();
            #    labelsCreateHelper.processLabels();
            #
            #    element.refreshAction();
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SetLabelAction
          ElementPosition     #1227133512
          HierarchyParent     #RecordBasics
          Text                #Set Label action
          ButtonDisplay       #Text & Image left
          NormalImage         #11280
          ImageLocation       #EmbeddedResource
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.setLabelAction();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SetHookBox
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #PageTitleGroup
          Label               #Set hook
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    if (SetHookBox.checked())
            #    {
            #        appl.globalCache().set(formStr(DEVLabelsCreateInfo), 'IsEnabled', 'true', false);
            #    }
            #    else
            #    {
            #        appl.globalCache().remove(formStr(DEVLabelsCreateInfo), 'IsEnabled');
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GridGroup_TextValue
          AllowEdit           #No
          ElementPosition     #1431655760
          HierarchyParent     #GridGroup
          Alignment           #Left
          ChangeCase          #None
          DataSource          #DEVLabelsCreateInfo
          DataField           #TextValue
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysCompareForm
  PROPERTIES
    Name                #SysCompareForm
    Origin              #{0B0E0000-0000-1000-598A-54B974672872}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #class FormRun extends ObjectRun
      #{
      #    SysCompare       _sysCompare;
      #    FormTreeItem     _selectionChangedItem;
      #
      #    SysFormSplitter_X _formSplitter;
      #}
    ENDSOURCE
    SOURCE #animateStop
      #void animateStop()
      #{
      #;
      #    animate.stop();
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    _sysCompare = null;
      #    super();
      #}
    ENDSOURCE
    SOURCE #createGradientIndicator
      #private void createGradientIndicator(Object htmlActiveX, str startColor, str endColor)
      #{
      #    str htmlBodyText;
      #    ;
      #
      #    htmlBodyText = @"
      #    <html>
      #        <head>
      #            <style>
      #                .tableGradient
      #                {
      #                    filter:progid:DXImageTransform.Microsoft.Gradient(
      #                        startColorstr="+startColor+@",
      #                        endColorstr="+endColor+@",
      #                        gradientType=1);
      #                }
      #                body
      #                {
      #                    border:0px;
      #                    margin:0px;
      #                    background-image: linear-gradient(to right, "+startColor+@", "+endColor+@");
      #                    background-color: "+startColor+@";
      #                }
      #            </style>
      #        </head>
      #        <body scroll='No'>
      #            <table width='100%' height='100%' class='tableGradient'><td></td></table>
      #        </body>
      #    </html>";
      #
      #    SysHelp::showHTML(htmlActiveX, htmlBodyText);
      #}
    ENDSOURCE
    SOURCE #init
      #void init()
      #{
      #    boolean useGreen = false;
      #    super();
      #    html.prefColumnSize(600,400);
      #    combobox1.prefColumnSize(400,100);
      #
      #    _sysCompare = element.args().caller();
      #    if (_sysCompare.parmContext())
      #    {
      #        if (_sysCompare.parmContext() is SysCodeCoverageCompareContext)
      #        {
      #            useGreen = true;
      #        }
      #    }
      #    //
      #    // Set height of html controls to match height of comboBox controls
      #    //
      #    redHtmlGroup.height(comboBox1.heightValue());
      #    blueHtmlGroup.height(comboBox2.heightValue());
      #
      #    //
      #    // Create gradients for red and blue / green indicators
      #    //
      #    this.createGradientIndicator(htmlRed, @'#FF0000', @'#FF9999');
      #
      #    if (useGreen)
      #    {
      #        this.createGradientIndicator(htmlBlue, @'#00FF00', @'#99FF99');
      #    }
      #    else
      #    {
      #        this.createGradientIndicator(htmlBlue, @'#2222FF', @'#9999FF');
      #    }
      #}
    ENDSOURCE
    SOURCE #print
      #void print()
      #{
      #    OleCommand oleCommand;
      #    COMVariant parm;
      #
      #    if (html.visible())
      #    {
      #        oleCommand = new OleCommand( html.interface() );
      #    }
      #    parm = new COMVariant(COMVariantInOut::Out);
      #    oleCommand.exec('',6,1,parm);
      #}
    ENDSOURCE
    SOURCE #run
      #void run()
      #{
      #    _formSplitter = new SysFormSplitter_X(split, tree);
      #    super();
      #
      #    compareButton.setFocus();
      #
      #     compareButton.setTimeOut('clicked', 150, true);
      #   // element.setTimeOut(
      #    //compareButton.clicked();//trud
      #}
    ENDSOURCE
    SOURCE #selectionChangedTimeOut
      #void selectionChangedTimeOut()
      #{
      #    if (_selectionChangedItem)
      #    {
      #        if (_sysCompare)
      #        {
      #            _sysCompare.selectionChanged(_selectionChangedItem);
      #        }
      #        _selectionChangedItem = null;
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS53419
      Frame               #Dialog
      WindowType          #Workspace
      SaveSize            #No
      HideToolbar         #Yes
      SetCompany          #No
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1610612734
          HierarchyParent     #Criteria
          ArrangeMethod       #Horizontal, flush right
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BlueGroup
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #Combo
          FrameType           #None
          Columns             #2
          Columnspace         #0
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BlueHtmlGroup
          AutoDeclaration     #Yes
          Width               #16
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #BlueGroup
          FrameType           #Sunken 3D
          TopMargin           #2
          BottomMargin        #2
          LeftMargin          #2
          RightMargin         #2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Combo
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #SelectTab
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Criteria
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #Form
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #data
          Visible             #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #Form
          FrameType           #None
          FramePosition       #Inside
          Columns             #3
          Columnspace         #0
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Form
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #HTMLGrp
          Width               #Column width
          Height              #Column height
          ElementPosition     #1879048190
          HierarchyParent     #data
          FrameType           #Sunken 3D
          TopMargin           #2
          BottomMargin        #2
          LeftMargin          #2
          RightMargin         #2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #RedGroup
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #Combo
          FrameType           #None
          Columns             #2
          Columnspace         #0
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #RedHtmlGroup
          AutoDeclaration     #Yes
          Width               #16
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #RedGroup
          FrameType           #Sunken 3D
          TopMargin           #2
          BottomMargin        #2
          LeftMargin          #2
          RightMargin         #2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Split
          AutoDeclaration     #Yes
          Width               #4
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #data
          FrameType           #None
          HideIfEmpty         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitter.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitter.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitter.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #Criteria
          Tabs                #2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #AdvancedTab
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #Tab
          Caption             #@SYS23466
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #SelectTab
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #Tab
          Caption             #@SYS29089
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIVEX
        PROPERTIES
          Name                #HTML
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #HTMLGrp
          Caption             #HTML Document
          ClassName           #{25336920-03F9-11cf-8FD0-00AA00686F13}
        ENDPROPERTIES
        
        METHODS
          SOURCE #onEvent_onclick
            #//
            #boolean onEvent_onclick()
            #{
            #    boolean ret = false;
            #    ;
            #
            #    if (_sysCompare)
            #    {
            #        ret = _sysCompare.onEvent_onclick(html);
            #    }
            #
            #    return ret;
            #
            #
            #}
          ENDSOURCE
          SOURCE #onEvent_oncontextmenu
            #//
            #boolean onEvent_oncontextmenu()
            #{
            #    ;
            #    return SysHelp::onEvent_oncontextmenu();
            #}
          ENDSOURCE
        ENDMETHODS
        BINARY 250
          3C 21 44 4F 43 54 59 50 45 20 48 54 4D 4C 20 50 55 42 4C 49 43 20 22 2D 2F 2F 57 33 43 2F 2F 44
          54 44 20 48 54 4D 4C 20 34 2E 30 20 54 72 61 6E 73 69 74 69 6F 6E 61 6C 2F 2F 45 4E 22 3E 0D 0A
          3C 48 54 4D 4C 3E 3C 48 45 41 44 3E 0D 0A 3C 4D 45 54 41 20 68 74 74 70 2D 65 71 75 69 76 3D 43
          6F 6E 74 65 6E 74 2D 54 79 70 65 20 63 6F 6E 74 65 6E 74 3D 22 74 65 78 74 2F 68 74 6D 6C 3B 20
          63 68 61 72 73 65 74 3D 77 69 6E 64 6F 77 73 2D 31 32 35 32 22 3E 0D 0A 3C 4D 45 54 41 20 63 6F
          6E 74 65 6E 74 3D 22 4D 53 48 54 4D 4C 20 35 2E 35 30 2E 34 31 33 34 2E 36 30 30 22 20 6E 61 6D
          65 3D 47 45 4E 45 52 41 54 4F 52 3E 3C 2F 48 45 41 44 3E 0D 0A 3C 42 4F 44 59 3E 0D 0A 3C 50 3E
          26 6E 62 73 70 3B 3C 2F 50 3E 3C 2F 42 4F 44 59 3E 3C 2F 48 54 4D 4C 3E 0D 0A
        ENDBINARY
        BINARY 1
          00
        ENDBINARY
      ENDCONTROL 
      
      CONTROL ACTIVEX
        PROPERTIES
          Name                #htmlBlue
          Width               #Column width
          Height              #Column height
          Skip                #Yes
          ElementPosition     #1431655764
          HierarchyParent     #BlueHtmlGroup
          Caption             #HTML Document
          ClassName           #{25336920-03F9-11cf-8FD0-00AA00686F13}
        ENDPROPERTIES
        
        METHODS
          SOURCE #onEvent_oncontextmenu
            #//
            #boolean onEvent_oncontextmenu()
            #{
            #    ;
            #    return false;
            #}
          ENDSOURCE
        ENDMETHODS
        BINARY 0
          
        ENDBINARY
        BINARY 1
          00
        ENDBINARY
      ENDCONTROL 
      
      CONTROL ACTIVEX
        PROPERTIES
          Name                #htmlRed
          Width               #Column width
          Height              #Column height
          Skip                #Yes
          ElementPosition     #1073741823
          HierarchyParent     #RedHtmlGroup
          Caption             #HTML Document
          ClassName           #{25336920-03F9-11cf-8FD0-00AA00686F13}
        ENDPROPERTIES
        
        METHODS
          SOURCE #onEvent_oncontextmenu
            #//
            #boolean onEvent_oncontextmenu()
            #{
            #    ;
            #    return false;
            #}
          ENDSOURCE
        ENDMETHODS
        BINARY 0
          
        ENDBINARY
        BINARY 1
          00
        ENDBINARY
      ENDCONTROL 
      
      CONTROL ANIMATE
        PROPERTIES
          Name                #Animate
          AutoDeclaration     #Yes
          Left                #Right edge
          ElementPosition     #1879048190
          HierarchyParent     #Criteria
          Border              #None
          AnimateFile         #findfile.avi
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #CompareButton
          AutoDeclaration     #Yes
          HelpText            #@SYS68610
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          Text                #@SYS4735
          DefaultButton       #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #
            #    super();
            #
            #    if (_sysCompare)
            #    {
            #        animate.play();
            #        element.setTimeOut(identifierStr(animateStop), 100, true);
            #        _sysCompare.startCompare();
            #    }
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #CaseSensitive
          ElementPosition     #2013265918
          HierarchyParent     #AdvancedTab
          Label               #@SYS29119
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #LineNumbers
          ElementPosition     #2080374782
          HierarchyParent     #AdvancedTab
          Label               #@SYS50868
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SuppressEqual
          ElementPosition     #1073741823
          HierarchyParent     #AdvancedTab
          Value               #1
          Label               #@SYS29136
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SuppressName
          Visible             #No
          ElementPosition     #1610612734
          HierarchyParent     #AdvancedTab
          Value               #1
          Label               #@SYS50867
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SuppressWhiteSpace
          ElementPosition     #1879048190
          HierarchyParent     #AdvancedTab
          Value               #1
          Label               #@SYS29108
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #ComboBox1
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #RedGroup
          ShowLabel           #No
          ComboType           #List
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #ComboBox2
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #BlueGroup
          ShowLabel           #No
          ComboType           #List
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #Tree
          Width               #200
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #data
          LinesAtRoot         #No
          SingleSelection     #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #context
            #void context()
            #{
            #    ;
            #    if (_sysCompare)
            #    {
            #        _sysCompare.contextTree();
            #    }
            #//    super();
            #
            #}
          ENDSOURCE
          SOURCE #expanding
            #boolean expanding(int idx, FormTreeExpand action, anytype data)
            #{
            #    boolean ret;
            #    ;
            #
            #    if (_sysCompare)
            #    {
            #        _sysCompare.expanding(idx);
            #    }
            #
            #    ret = super(idx, action, data);
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #selectionChanging
            #boolean selectionChanging(FormTreeItem oldItem, FormTreeItem newItem, FormTreeSelect how)
            #{
            #    boolean ret;
            #
            #    ret = super(oldItem, newItem, how);
            #
            #    _selectionChangedItem = newItem;
            #
            #//    if (how != FormTreeSelect::Unknown)
            #    element.setTimeOut(identifierStr(selectionChangedTimeOut), 100, true);
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysImportDialog
  PROPERTIES
    Name                #SysImportDialog
    Origin              #{47D4564C-6428-444E-9082-5FE1CDFFC808}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #class FormRun extends ObjectRun
      #{
      #    ImageListAppl_Aot               imageListAot;
      #    ImageListAppl_checkbox          imageListState;
      #    SysImportElementsForm           sysImportElementsForm;
      #    QueryBuildRange                 importRange;
      #    container                       lastFiles;
      #    boolean                         called;
      #    FormDataObject                  replaceWithLabel;
      #    boolean                         examinedFile;
      #
      #    #resAppl
      #    #define.FOCUS_CHECKBOX(64)
      #    #define.FOCUS_FIELD(4)
      #
      #    #FormListControl
      #
      #    #define.nodeDocumentation(0)
      #
      #    #define.currentVersion(1)
      #    #define.currentList(lastFiles)
      #
      #    #define.tempFiles(5)
      #    #define.expImpFileExtension('xpo')
      #
      #}
    ENDSOURCE
    SOURCE #buildHtml
      #public void buildHtml()
      #{
      #    html.setText(sysImportElementsForm.buildImportDescription(tmpImportLabel));
      #}
    ENDSOURCE
    SOURCE #enableAot
      #void enableAot(boolean _enable)
      #{
      #    boolean enableDeleteSubNodes = _enable;
      #
      #    deleteSubNodes.allowEdit(enableDeleteSubNodes);
      #    deleteSubNodes.skip(!enableDeleteSubNodes);
      #}
    ENDSOURCE
    SOURCE #enableLabel
      #public void enableLabel(boolean _enable)
      #{
      #    labelModuleId.enabled(   _enable && (!tabGrp.enableChilds() || sysImportElementsForm.parmImportLabels()));
      #    labelLanguageTab.visible(_enable);
      #    labelsTab.visible(       _enable);
      #    labelDetailTab.visible(  _enable);
      #
      #    if (!_enable)
      #    {
      #        aotTab.setFocus();
      #        importActionRbtn.setFocus();
      #    }
      #}
    ENDSOURCE
    SOURCE #fileNameLookupFilename
      #str fileNameLookupFilename()
      #{
      #    Filename    path;
      #    Filename    name;
      #    Filename    ext;
      #    ;
      #    [path, name, ext] = fileNameSplit(this.getFileName());
      #
      #    if (name)
      #    {
      #        return path + name + ext;
      #    }
      #
      #    return '';
      #}
    ENDSOURCE
    SOURCE #fileNameLookupFilter
      #container fileNameLookupFilter()
      #{
      #    #file
      #    return [WinAPI::fileType(#xpo), #allfilesName+#xpo, #allFilesType, #allFiles];
      #}
    ENDSOURCE
    SOURCE #fileNameLookupInitialPath
      #str fileNameLookupInitialPath()
      #{
      #    #WinApi
      #    Filename                path;
      #    Filename                name;
      #    Filename                ext;
      #    ;
      #
      #    [path, name, ext] = fileNameSplit(this.getFileName());
      #
      #    if (!path)
      #    {
      #        if (conLen(lastFiles))
      #        {
      #            [path, name, ext] = fileNameSplit(conPeek(lastFiles,1));
      #        }
      #
      #        if (!path)
      #        {
      #            path = WinAPI::getFolderPath(#CSIDL_Personal);
      #        }
      #    }
      #    return path;
      #
      #}
    ENDSOURCE
    SOURCE #fileNameLookupTitle
      #str fileNameLookupTitle()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #getFileName
      #public Filename getFileName()
      #{
      #    return strLRTrim(fileName.getText(fileName.selection()));
      #}
    ENDSOURCE
    SOURCE #import
      #public void import()
      #{
      #    if (WinAPI::fileExists(this.getFileName()))
      #    {
      #        element.updateBox(fileName.getEditText(), false);
      #        xSysLastValue::saveLast(element);
      #
      #        if (!examinedFile)
      #        {
      #            sysImportElementsForm.newFile(this.getFileName());
      #        }
      #
      #        sysImportElementsForm.bulidImportLabelLanguageSet(languageTree);
      #
      #        sysImportElementsForm.parmAddToProject( false);
      #        sysImportElementsForm.parmDeleteSubNodes(deleteSubNodes.allowEdit() && deleteSubNodes.value());
      #
      #        sysImportElementsForm.parmImportLabels((importActionRbtn.selection() == SysAotImportAction::Label ||
      #                                                importActionRbtn.selection() == SysAotImportAction::ElementAndLabel));
      #        sysImportElementsForm.parmImportAot(   (importActionRbtn.selection() == SysAotImportAction::Element ||
      #                                                importActionRbtn.selection() == SysAotImportAction::ElementAndLabel));
      #        sysImportElementsForm.parmLabelModuleId(labelModuleId.text());
      #
      #        sysImportElementsForm.import();
      #        element.close();
      #    }
      #    else
      #    {
      #        throw error(strFmt("@SYS109820", this.getFileName()));
      #    }
      #}
    ENDSOURCE
    SOURCE #importActionChanged
      #void importActionChanged(SysAotImportAction _sysImportAction)
      #{
      #    switch (_sysImportAction)
      #    {
      #        case SysAotImportAction::Element:
      #            this.enableAot(true);
      #            this.enableLabel(false);
      #            break;
      #        case SysAotImportAction::ElementAndLabel:
      #            this.enableAot(true);
      #            this.enableLabel(true);
      #            break;
      #        case SysAotImportAction::Label:
      #            this.enableAot(false);
      #            this.enableLabel(true);
      #            break;
      #    }
      #}
    ENDSOURCE
    SOURCE #init
      #void init()
      #{
      #    super();
      #
      #    sysImportElementsForm = new SysImportElementsForm();
      #
      #    imageListAot          = new ImageListAppl_Aot();
      #    imageListState        = new ImageListAppl_checkbox();
      #
      #    aotTree.setImagelist(imageListAot.imageList());
      #    aotTree.setStateImagelist(imageListState.imageList());
      #
      #    languageTree.setStateImagelist(imageListState.imageList());
      #}
    ENDSOURCE
    SOURCE #initParmDefault
      #/*MAN
      #This method is called when no SysLastValue record can be found in xSysLastValue.GetLast()
      #*/
      #void initParmDefault()
      #{
      #
      #}
    ENDSOURCE
    SOURCE #lastValueDataAreaId
      #dataAreaId lastValueDataAreaId()
      #{
      #    return curext();
      #}
    ENDSOURCE
    SOURCE #lastValueDesignName
      #private identifierName lastValueDesignName()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #lastValueElementName
      #private identifierName lastValueElementName()
      #{
      #    return 'ImpExpLastFiles';
      #
      #}
    ENDSOURCE
    SOURCE #lastValueType
      #private UtilElementType lastValueType()
      #{
      #    return UtilElementType::Form;
      #}
    ENDSOURCE
    SOURCE #lastValueUserId
      #private userId lastValueUserId()
      #{
      #    return curUserId();
      #}
    ENDSOURCE
    SOURCE #mouseClick
      #void mouseClick(FormTreeControl _formTreeControl, FormTreeItem _formTreeItem)
      #{
      #    ;
      #    if (_formTreeItem)
      #    {
      #        SysFormTreeControl::changeStateImage_CheckBox(_formTreeControl, _formTreeItem.idx());
      #        sysImportElementsForm.updateTmpImportAot(_formTreeItem.data(), (_formTreeItem.stateImage() != imageListState.image(#ImageCheckAll)));
      #        tmpImportAot.setTmpData(sysImportElementsForm.getTmpImportAot());
      #        tmpImportLabel_ds.executeQuery();
      #    }
      #}
    ENDSOURCE
    SOURCE #newFile
      #public void newFile()
      #{
      #    Map             languageMap = new Map(Types::String, Types::String);
      #    Map             statusMap   = new Map(Types::String, Types::Enum);
      #    SetIterator     setIterator;
      #    Filename        filenameSelected = this.getFileName();
      #    ;
      #    this.lock();
      #    examinedFile = false;
      #
      #    this.updateBox(filenameSelected);
      #    if (tabGrp.enableChilds())
      #    {
      #        try
      #        {
      #            sysImportElementsForm.newFile(this.getFileName());
      #            sysImportElementsForm.buildTree(aotTree);
      #
      #            setIterator = new SetIterator(Set::create(sysImportElementsForm.getLanguagePack()));
      #            setIterator.begin();
      #            while (setIterator.more())
      #            {
      #                languageMap.insert(LanguageTable::languageId2Description(setIterator.value()), setIterator.value());
      #                statusMap.insert(setIterator.value(), true);
      #                setIterator.next();
      #            }
      #            LanguageTable::buildSelectLanguageTree(languageTree, statusMap, languageMap);
      #
      #            tmpImportAot.setTmpData(sysImportElementsForm.getTmpImportAot());
      #            tmpImportAotLabel.setTmpData(sysImportElementsForm.getTmpImportAotLabel());
      #            tmpImportLabel.setTmpData(sysImportElementsForm.getTmpImportLabel());
      #            tmpImportLabel_ds.executeQuery();
      #            examinedFile = true;
      #        }
      #        catch
      #        {
      #            aotTree.deleteAll();
      #        }
      #    }
      #
      #    import.enabled(true);
      #    called = false;
      #    this.unLock();
      #}
    ENDSOURCE
    SOURCE #pack
      #public container pack()
      #{
      #
      #    return [#CurrentVersion,#CurrentList];
      #
      #}
    ENDSOURCE
    SOURCE #run
      #void run()
      #{
      #    ;
      #    xSysLastValue::getLast(element);
      #
      #    labelModuleId.text(sysImportElementsForm.getDefaultLabelModuleId());
      #    element.updateBox('');
      #    this.importActionChanged(importActionRbtn.selection());
      #
      #    super();
      #
      #    element.enableLabel(false);
      #    fileName.setFocus();
      #}
    ENDSOURCE
    SOURCE #selectLanguage
      #void selectLanguage(FormTreeControl _formTreeControl, FormTreeItem _formTreeItem)
      #{
      #    ;
      #    if (_formTreeItem)
      #    {
      #        SysFormTreeControl::changeStateImage_CheckBox(_formTreeControl, _formTreeItem.idx());
      #    }
      #}
    ENDSOURCE
    SOURCE #setProject
      #public void setProject(Name _projectName)
      #{
      #    this.design().caption(this.design().caption() + ' - ' + _projectName);
      #
      #}
    ENDSOURCE
    SOURCE #unpack
      #public boolean unpack(container packedClass)
      #{
      #
      #    Integer     version     = conPeek(packedClass,1);
      #
      #    switch (version)
      #    {
      #        case #CurrentVersion :
      #            [version,#CurrentList] = packedClass;
      #            if (!WinAPI::showMruAllowed())
      #            {
      #                #CurrentList = conNull();
      #            }
      #            break;
      #        default :
      #            return false;
      #    }
      #
      #    return true;
      #
      #}
    ENDSOURCE
    SOURCE #updateBox
      #void updateBox(Filename file, boolean updateBox = true)
      #{
      #    int         i;
      #    boolean     showMruAllowed;
      #    int         selection;
      #
      #    if (WinAPI::showMruAllowed())
      #    {
      #        showMruAllowed = true;
      #
      #        while (conFind(lastFiles, file))
      #        {
      #            lastFiles = conDel(lastFiles, conFind(lastFiles, file), 1);
      #        }
      #
      #        if (file)
      #        {
      #            while (conLen(lastFiles) >= #tempFiles)
      #            {
      #                lastFiles = conDel(lastFiles, #tempFiles, 1);
      #            }
      #
      #            lastFiles = conIns(lastFiles, 1, file);
      #        }
      #    }
      #    else
      #    {
      #        lastFiles = conNull();
      #        lastFiles = conIns(lastFiles, 1, file);
      #    }
      #
      #
      #    if (updateBox)
      #    {
      #        fileName.clear();
      #        filename.selection(0);
      #
      #        if (showMruAllowed)
      #        {
      #            fileName.add('');
      #
      #            if (file)
      #            {
      #                selection = 1;
      #            }
      #            else
      #            {
      #                selection = 0;
      #            }
      #        }
      #        else
      #        {
      #            selection = 0;
      #        }
      #
      #        for (i = showMruAllowed ? 1 : 0; i <= conLen(lastFiles); i++)
      #        {
      #            if (conPeek(lastFiles, i))
      #            {
      #                fileName.add(conPeek(lastFiles, i));
      #            }
      #        }
      #        fileName.setDropSize(conLen(lastFiles) + (showMruAllowed ? 1 : 0));
      #        fileName.selection(selection);
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #TmpImportLabel
          Table               #TmpLabelImport
          Index               #LabelIdx
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD SysImportLabelError
            PROPERTIES
              AllowEdit           #No
              Skip                #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD LabelId
            PROPERTIES
              AllowEdit           #No
              Skip                #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD SysImportLabelAction
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    element.setTimeOut(identifierStr(buildHtml), 100, true);
                #    replaceWithLabel.allowEdit(tmpImportLabel.SysImportLabelAction == SysAotImportLabelAction::UseExistingLabel);    super();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    element.setTimeOut(identifierStr(buildHtml), 100, true);
          #    replaceWithLabel.allowEdit(tmpImportLabel.SysImportLabelAction == SysAotImportLabelAction::UseExistingLabel);
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    super();
          #
          #    replaceWithLabel = tmpImportLabel_ds.object(fieldNum(TmpLabelImport, ReplaceWithLabel));
          #
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #TmpImportAotLabel
          Table               #TmpAotLabelImport
          Index               #PathLabelIdx
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #TmpImportLabel
          LinkType            #ExistJoin
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #TmpImportAot
          Table               #TmpAotImport
          Index               #PathIdx
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #TmpImportAotLabel
          LinkType            #ExistJoin
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #public void init()
          #{
          #    super();
          #    importRange = this.query().dataSourceTable(tableNum(TmpAotImport)).addRange(fieldNum(TmpAotImport, Import));
          #    importRange.status(RangeStatus::Hidden);
          #    importRange.value(enum2str(true));
          #
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
    TmpImportAotLabel TmpImportLabel
    TmpImportAot TmpImportAotLabel
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS1052
      WindowType          #Workspace
      SaveSize            #No
      HideToolbar         #Yes
      SetCompany          #No
      BackgroundColor     #Window background
      TopMargin           #0
      BottomMargin        #0
      LeftMargin          #0
      RightMargin         #0
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #AOTButtonGroup
          ElementPosition     #1610612734
          HierarchyParent     #AotTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          Left                #Auto (left)
          ElementPosition     #1431655764
          HierarchyParent     #DialogCommit
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #LabelIdGrid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #LabelsTab
          ShowRowLabels       #No
          DataSource          #TmpImportLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DialogCommit
          ElementPosition     #1431655764
          Style               #DialogCommit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ImportGrp
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #TopSelectGrp
          FrameType           #Edged 3D
          Caption             #@SYS1052
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #LabelActionGrp
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #LabelDetailTab
          Caption             #@SYS6661
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #LabelFileGrp
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #LabelDetailTab
          Caption             #@SYS25058
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #LabelTextGrp
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #LabelTextMainGrp
          FrameType           #Sunken 3D
          TopMargin           #2
          BottomMargin        #2
          LeftMargin          #2
          RightMargin         #2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #LabelTextMainGrp
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1879048190
          HierarchyParent     #LabelDetailTab
          Caption             #@SYS8811
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MainGrp
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          Style               #DialogContent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #OptionGrp
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #OptionMainGrp
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #OptionMainGrp
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #TopSelectGrp
          FrameType           #Edged 3D
          Caption             #@SYS22622
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TabGrp
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS69908
          ElementPosition     #1610612734
          HierarchyParent     #MainGrp
          FrameType           #Edged 3D Line
          Caption             #@SYS60132
          FrameOptionButton   #Check
          OptionValue         #0
          HideIfEmpty         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    super();
            #
            #    element.lock();
            #    if (this.enableChilds())
            #    {
            #        tabGrp.frameType(FormFrameType::Edged3D);
            #
            #        if (!examinedFile)
            #        {
            #            element.newFile();
            #        }
            #    }
            #    else
            #    {
            #        tabGrp.frameType(FormFrameType::Edged3DLine);
            #    }
            #    tab.visible(this.enableChilds());
            #    html.prefColumnSize(0,100);
            #    element.importActionChanged(importActionRbtn.selection());
            #    element.resetSize();
            #    element.arrange();
            #    element.unLock();
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TopGrp
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #MainGrp
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TopMainGrp
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #TopGrp
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TopSelectGrp
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #TopGrp
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #TabGrp
          Tabs                #4
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #AotTab
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #Tab
          Caption             #@SYS69909
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #LabelDetailTab
          AutoDeclaration     #Yes
          AlignControl        #Yes
          ElementPosition     #2013265918
          HierarchyParent     #Tab
          Caption             #@SYS69912
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #LabelLanguageTab
          AutoDeclaration     #Yes
          AlignControl        #Yes
          ElementPosition     #1610612734
          HierarchyParent     #Tab
          Caption             #@SYS15819
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #LabelsTab
          AutoDeclaration     #Yes
          AlignControl        #Yes
          ElementPosition     #1879048190
          HierarchyParent     #Tab
          Caption             #@SYS13322
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Browse
          Left                #Right edge
          HelpText            #@SYS74496
          ElementPosition     #1610612734
          HierarchyParent     #TopMainGrp
          Text                #@SYS28927
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    Filename strFileName;
            #
            #    super();
            #
            #    strFileName = WinAPI::getOpenFileName(element.hWnd(),
            #                                          element.filenameLookupFilter(),
            #                                          element.filenameLookupInitialPath(),
            #                                          element.filenameLookupTitle(),
            #                                          '',
            #                                          element.filenameLookupFileName());
            #
            #    if (strFileName
            #     && strFileName != element.getFileName())
            #    {
            #        element.updateBox(strFileName);
            #        fileName.modified();
            #    }
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Checkout
          AutoDeclaration     #Yes
          HelpText            #@TSM710
          ElementPosition     #1610612734
          HierarchyParent     #AOTButtonGroup
          Text                #@SYS79343
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #//SR017331 - 08 Jul 2010 at 11:13:48 by Rayso
            #void clicked()
            #{
            #    FormTreeItem treeitem = aotTree.getItem(aotTree.getFirstSelected());
            #    TreeNodePath treeNodePath = treeitem.data();
            #    TreeNode treenodeInAot;
            #    ;
            #
            #    super();
            #
            #    treenodeInAot = TreeNode::findNode(treeNodePath);
            #
            #    if(treenodeInAot)
            #    {
            #        versionControl.checkOut(treenodeInAot);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #CompareButton
          AutoDeclaration     #Yes
          Enabled             #No
          HelpText            #@SYS121742
          ElementPosition     #1073741823
          HierarchyParent     #AOTButtonGroup
          Text                #@SYS4735
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    FormTreeItem treeitem = aotTree.getItem(aotTree.getFirstSelected());
            #    TreeNodePath treeNodePath = treeitem.data();
            #    SysTreenodeCompareContext context;
            #    TreeNode treenodeInAot;
            #    TreeNode treenodeInXpo;
            #
            #    super();
            #
            #    treenodeInAot = TreeNode::findNode(treeNodePath);
            #    treenodeInXpo = sysImportElementsForm.extractTreenodeFromFile(treeNodePath);
            #
            #    if (!treenodeInXpo)
            #    {
            #        warning(strFmt("@SYS28152", element.getFileName()));
            #    }
            #
            #    if (!treenodeInAot)
            #    {
            #        warning(strFmt("@SYS28152", treeNodePath));
            #    }
            #
            #    if (treenodeInAot &&
            #        treenodeInXpo)
            #    {
            #        context = SysTreenodeCompareContext::newSysTreeNode(
            #            SysTreeNode::newTreeNode(treenodeInAot),
            #            SysTreeNodeVirtualXPO::newTreeNode(treenodeInXpo));
            #
            #        SysCompare::startCompareOfContextProvider(context);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #DeleteSubNodes
          AutoDeclaration     #Yes
          AllowEdit           #No
          Skip                #Yes
          HelpText            #@SYS55630
          ElementPosition     #939524094
          HierarchyParent     #OptionGrp
          Value               #1
          Label               #@SYS55532
        ENDPROPERTIES
        
        METHODS
          SOURCE #toolTip
            #str toolTip()
            #{
            #    str ret;
            #
            #    ret = "@SYS55630";
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #TableRecovery
          AutoDeclaration     #Yes
          HelpText            #@SYS75724
          ElementPosition     #1409286141
          HierarchyParent     #OptionGrp
          Label               #@SYS75723
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #FileName
          AutoDeclaration     #Yes
          Width               #Column width
          AlignControl        #No
          HelpText            #@SYS21196
          ElementPosition     #1073741823
          HierarchyParent     #TopMainGrp
          Label               #@SYS16423
          AppendNew           #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    if (!called)
            #    {
            #        if (tabGrp.enableChilds())
            #        {
            #            //
            #            // Wait for tree control to by populated
            #            //
            #
            #            import.enabled(false);
            #            element.setTimeOut(identifierStr(newFile), 500, true);
            #            called = true;
            #        }
            #        else
            #        {
            #            element.newFile();
            #        }
            #    }
            #
            #    element.redraw();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #SysLabelImportAction
          ElementPosition     #1610612734
          HierarchyParent     #LabelIdGrid
          DataSource          #TmpImportLabel
          DataField           #SysImportLabelAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #TmpImportLabel_SysLabelImportAction
          ElementPosition     #1073741823
          HierarchyParent     #LabelActionGrp
          DataSource          #TmpImportLabel
          DataField           #SysImportLabelAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #TmpImportLabel_SysLabelImportError
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #LabelsTab
          DataSource          #TmpImportLabel
          DataField           #SysImportLabelError
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #TmpImportLabel_SysLabelImportError2
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #LabelFileGrp
          DataSource          #TmpImportLabel
          DataField           #SysImportLabelError
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Cancel
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Import
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          DefaultButton       #Yes
          Command             #263
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.import();
            #    if (tableRecovery.value())
            #    {
            #        new SqlSyncPending().databaseTouched(true); // Force full synchronization.
            #    }
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL HTML
        PROPERTIES
          Name                #HTML
          Width               #Column width
          Height              #Column height
          Skip                #Yes
          ElementPosition     #1073741823
          HierarchyParent     #LabelTextGrp
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
        BINARY 251
          3C 21 44 4F 43 54 59 50 45 20 48 54 4D 4C 20 50 55 42 4C 49 43 20 22 2D 2F 2F 57 33 43 2F 2F 44
          54 44 20 48 54 4D 4C 20 34 2E 30 20 54 72 61 6E 73 69 74 69 6F 6E 61 6C 2F 2F 45 4E 22 3E 0D 0A
          3C 48 54 4D 4C 3E 3C 48 45 41 44 3E 0D 0A 3C 4D 45 54 41 20 68 74 74 70 2D 65 71 75 69 76 3D 43
          6F 6E 74 65 6E 74 2D 54 79 70 65 20 63 6F 6E 74 65 6E 74 3D 22 74 65 78 74 2F 68 74 6D 6C 3B 20
          63 68 61 72 73 65 74 3D 77 69 6E 64 6F 77 73 2D 31 32 35 32 22 3E 0D 0A 3C 4D 45 54 41 20 63 6F
          6E 74 65 6E 74 3D 22 4D 53 48 54 4D 4C 20 36 2E 30 30 2E 32 37 31 33 2E 31 31 30 30 22 20 6E 61
          6D 65 3D 47 45 4E 45 52 41 54 4F 52 3E 3C 2F 48 45 41 44 3E 0D 0A 3C 42 4F 44 59 3E 0D 0A 3C 50
          3E 26 6E 62 73 70 3B 3C 2F 50 3E 3C 2F 42 4F 44 59 3E 3C 2F 48 54 4D 4C 3E 0D 0A
        ENDBINARY
        BINARY 1
          00
        ENDBINARY
      ENDCONTROL 
      
      CONTROL RADIOBUTTON
        PROPERTIES
          Name                #ImportActionRbtn
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #ImportGrp
          EnumType            #SysAotImportAction
          Caption             #@SYS1052
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #    element.lock();
            #    element.importActionChanged(this.selection());
            #    element.unLock();
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DetailReplaceWithLabel
          ElementPosition     #1610612734
          HierarchyParent     #LabelActionGrp
          LookupButton        #Always
          DataSource          #TmpImportLabel
          DataField           #ReplaceWithLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LabelId
          ElementPosition     #1073741823
          HierarchyParent     #LabelIdGrid
          DataSource          #TmpImportLabel
          DataField           #LabelId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LabelModuleId
          AutoDeclaration     #Yes
          HelpText            #@SYS69907
          ElementPosition     #1879048190
          HierarchyParent     #OptionGrp
          LookupButton        #Always
          Label               #@SYS69913
          ExtendedDataType    
            ARRAY 
              #LabelModuleId
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    ;
            #    SysLabelEdit::moduleIdLookup(this);
            #}
          ENDSOURCE
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    if (ret)
            #    {
            #        ret = SysLabelEdit::validateModuleId(this.text());
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TabReplaceWithLabel
          ElementPosition     #1879048190
          HierarchyParent     #LabelIdGrid
          LookupButton        #Always
          DataSource          #TmpImportLabel
          DataField           #ReplaceWithLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TmpImportLabel_LabelId
          ElementPosition     #1073741823
          HierarchyParent     #LabelFileGrp
          DataSource          #TmpImportLabel
          DataField           #LabelId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #AOTTree
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS69910
          ElementPosition     #1073741822
          HierarchyParent     #AotTab
        ENDPROPERTIES
        
        METHODS
          SOURCE #copy
            #public void copy()
            #{
            #    super();
            #
            #    sysImportElementsForm.copyTreeAsListToClipboard(this, this.getItem(this.getFirstSelected()));
            #
            #}
          ENDSOURCE
          SOURCE #expanding
            #public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
            #{
            #    boolean ret;
            #    ;
            #    sysImportElementsForm.expandTree(this, this.getItem(_idx));
            #    ret = super(_idx, _action, _data);
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #mouseDblClick
            #int mouseDblClick(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int             ret;
            #    int             idx;
            #    int             focus;
            #    FormTreeItem    formTreeItem;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    [idx, focus] = this.hitTest(x, y);
            #
            #    if (focus & #FOCUS_FIELD && this.getItem(idx))
            #    {
            #        formTreeItem = this.getItem(idx);
            #
            #        element.mouseClick(this, formTreeItem);
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int             ret;
            #    int             focus;
            #    TreeItemIdx     idx;
            #    FormTreeItem    formTreeItem;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    [idx, focus] = this.hitTest(x, y);
            #
            #    if (focus & #FLCHT_TOLEFT && this.getItem(idx))
            #    {
            #        formTreeItem = this.getItem(idx);
            #
            #        element.mouseClick(this, formTreeItem);
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
            #{
            #    super(_oldItem, _newItem, _how);
            #
            #    if (_newItem && _newItem.stateBold())
            #    {
            #        compareButton.enabled(true);
            #        Checkout.enabled(true);     //SR017331 - 08 Jul 2010 at 11:15:44 by Rayso
            #    }
            #    else
            #    {
            #        compareButton.enabled(false);
            #        Checkout.enabled(false);    //SR017331 - 08 Jul 2010 at 11:15:44 by Rayso
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #LanguageTree
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS69911
          ElementPosition     #1073741823
          HierarchyParent     #LabelLanguageTab
          LinesAtRoot         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #expanding
            #boolean expanding(int idx, FormTreeExpand action, anytype data)
            #{
            #    boolean ret;
            #    ;
            #    if (action == FormTreeExpand::Expand)
            #    {
            #        ret = super(idx, action, data);
            #    }
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #mouseDblClick
            #int mouseDblClick(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int             ret;
            #    int             idx;
            #    int             focus;
            #    FormTreeItem    formTreeItem;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    [idx, focus] = this.hitTest(x, y);
            #
            #    if (focus & #FOCUS_FIELD && this.getItem(idx))
            #    {
            #        formTreeItem = this.getItem(idx);
            #
            #        element.mouseClick(this, formTreeItem);
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int             ret;
            #    int             focus;
            #    TreeItemIdx     idx;
            #    FormTreeItem    formTreeItem;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    [idx, focus] = this.hitTest(x, y);
            #
            #    if (focus & #FLCHT_TOLEFT && this.getItem(idx))
            #    {
            #        formTreeItem = this.getItem(idx);
            #
            #        element.selectLanguage(this, formTreeItem);
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysLabelInterval
  PROPERTIES
    Name                #SysLabelInterval
    Origin              #{0B100000-0000-1000-063A-88BCE64DB8B3}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    super();
      #
      #    if (versioncontrol.ideIntegration())
      #    {
      #        info("@SYS300001");
      #        //trud - commented this
      #        //labelInterval_ds.allowEdit(false);
      #        //labelInterval_ds.allowDelete(false);
      #        //labelInterval_ds.allowCreate(false);
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #LabelInterval
          Table               #SysLabelInterval
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS69751
      WindowType          #Workspace
      SetCompany          #No
      DataSource          #LabelInterval
      Style               #SimpleList
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #536870911
          Style               #Strip
          DataSource          #LabelInterval
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #MainGrid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #GridContainer
          MultiSelect         #No
          ShowRowLabels       #No
          DataSource          #LabelInterval
          DataGroup           #Overview
          AlternateRowShading #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridContainer
          ElementPosition     #1610612733
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PageTitleGroup
          ElementPosition     #1073741822
          Style               #DetailTitleContainer
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DeleteButton
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Text                #@SYS14425
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #NewButton
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          ButtonDisplay       #Text & Image left
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #MainGrid_LabelIntervalFrom
          Width               #50
          ElementPosition     #1227133512
          HierarchyParent     #MainGrid
          DataSource          #LabelInterval
          DataField           #LabelIntervalFrom
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #MainGrid_LabelIntervalTo
          Width               #50
          ElementPosition     #1533916890
          HierarchyParent     #MainGrid
          DataSource          #LabelInterval
          DataField           #LabelIntervalTo
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #StaticText
          ElementPosition     #1431655764
          HierarchyParent     #PageTitleGroup
          Text                #@SYS344286
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #MainGrid_LabelModuleId
          ElementPosition     #613566756
          HierarchyParent     #MainGrid
          DataSource          #LabelInterval
          DataField           #LabelModuleId
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    ;
            #    SysLabelEdit::moduleIdLookup(this);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysModelsInstalledList
  PROPERTIES
    Name                #SysModelsInstalledList
    Origin              #{8DEB7369-D12B-42C5-B2F4-1FE1EE3DA321}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysFormSplitter_X verticalSplitter;
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
      Query               #SysModelsInstalledQuery
      Version             #75
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #ModelManifest
          Table               #SysModelManifest
          MaxAccessRight      #View
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #layer
          #public display UtilEntryLevel layer(SysModelManifest _manifest)
          #{
          #    SysModel model;
          #    //get the string of the layer, not the int
          #    select firstOnly layer from model
          #        where model.RecId == _manifest.Model;
          #
          #    return model.Layer;
          #}
        ENDSOURCE
        SOURCE #signed
          #public display NoYes signed(SysModelManifest _manifest)
          #{
          #    return _manifest.signed;
          #}
        ENDSOURCE
        SOURCE #version
          #public display SysBuildNo version(SysModelManifest _manifest)
          #{
          #
          #    return strFmt("%1.%2.%3.%4",
          #        _manifest.VersionMajor,
          #        _manifest.VersionMinor,
          #        _manifest.VersionBuildNo,
          #        _manifest.VersionRevision);
          #}
        ENDSOURCE
      ENDMETHODS
      LINKTYPES
      ENDLINKTYPES
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS342480
      UseCaptionFromMenuItem  #Yes
      SetCompany          #No
      DataSource          #ModelManifest
      Style               #SimpleList
      ViewEditMode        #View
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #GridContainer
          ShowRowLabels       #No
          DataSource          #ModelManifest
          AlternateRowShading #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridContainer
          AllowEdit           #No
          ElementPosition     #1073741823
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Layer
          AllowEdit           #No
          HelpText            #@SYS342481
          ElementPosition     #715827882
          HierarchyParent     #Grid
          Label               #@SYS342472
          LabelAlignment      #Center
          DataSource          #ModelManifest
          DataMethod          #layer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #signed
          HelpText            #@SYS342477
          ElementPosition     #1670265058
          HierarchyParent     #Grid
          Label               #@SYS342476
          DataSource          #ModelManifest
          DataMethod          #signed
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INT64EDIT
        PROPERTIES
          Name                #ModelID
          ElementPosition     #477218588
          HierarchyParent     #Grid
          Alignment           #Center
          DataSource          #ModelManifest
          DataField           #Model
          ViewEditMode        #Edit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelDescription
          HelpText            #@SYS342482
          ElementPosition     #1908874352
          HierarchyParent     #Grid
          DataSource          #ModelManifest
          DataField           #Description
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelManifest_DisplayName
          ElementPosition     #1073741823
          HierarchyParent     #Grid
          DataSource          #ModelManifest
          DataField           #DisplayName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelName
          ElementPosition     #954437176
          HierarchyParent     #Grid
          DataSource          #ModelManifest
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Publisher
          ElementPosition     #1193046470
          HierarchyParent     #Grid
          DataSource          #ModelManifest
          DataField           #Publisher
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Version
          HelpText            #@SYS342475
          ElementPosition     #1431655764
          HierarchyParent     #Grid
          Alignment           #Center
          Label               #@SYS342474
          DataSource          #ModelManifest
          DataMethod          #version
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecAssignOM
  PROPERTIES
    Name                #SysSecAssignOM
    Origin              #{64580A58-8267-46F2-9F09-047246CAFCB0}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    #resAppl
      #    #SysSecUI
      #    #define.GRAY_TEXT(13160660)
      #    #SysSecEntryPointManager
      #    SysFormSplitter_Y           _formSplitterY;
      #    int                         treeGroupBackgroundColor;
      #    Caption                     formCaption;
      #    Name                        allCompaniesHierarchyName;
      #    RefRecId                    hierarchyId;
      #    boolean                     isReadOnlyMode;
      #}
    ENDSOURCE
    SOURCE #addOrganization
      #public void addOrganization(boolean _withChildren)
      #{
      #    SysSecOrganizationsTmp orgTmp;
      #    FormTreeItem item;
      #    TreeItemIdx idx = organizationTree.getFirstSelected();
      #    RefRecId organizationId;
      #    Map inMemOrgs;
      #
      #    if (!idx)
      #        return;
      #
      #    item = organizationTree.getItem(idx);
      #    organizationId = item.data();
      #
      #    orgTmp = SysSecOrganizationsTmp;
      #    // BP Deviation documented
      #    orgTmp.setTmp();
      #    orgTmp.OMInternalOrganization = organizationId;
      #    orgTmp.omHierarchyType = (_withChildren) ? hierarchyId : 0;
      #    orgTmp.insert();
      #
      #    //Store org in GOC
      #    if(infolog.globalCache().isSet(curUserId() + #AssignOMOwnerKey, #AssignOMKey))
      #    {
      #        inMemOrgs = infolog.globalCache().get(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
      #    }
      #    else
      #    {
      #        inMemOrgs = new Map(Types::Int64, Types::Int64);
      #    }
      #    if(inMemOrgs && !inMemOrgs.exists(organizationId))
      #    {
      #        inMemOrgs.insert(organizationId, orgTmp.omHierarchyType);
      #        infolog.globalCache().remove(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
      #        infolog.globalCache().set(curUserId() + #AssignOMOwnerKey, #AssignOMKey, inMemOrgs);
      #    }
      #
      #    // BP Deviation documented
      #    SysSecOrganizationsTmp.setTmp();
      #    SysSecOrganizationsTmp.setTmpData(orgTmp);
      #    SysSecOrganizationsTmp_ds.executeQuery();
      #    element.enableButtons();
      #}
    ENDSOURCE
    SOURCE #buildHierarchyList
      #private void buildHierarchyList()
      #{
      #    OMHierarchyType     hierarchy;
      #    OMHierarchyPurpose  purpose;
      #
      #    allCompaniesHierarchyName = strFmt("@SYS332628");
      #    hierarchyCombo.clear();
      #    hierarchyCombo.add(allCompaniesHierarchyName);
      #
      #    while select Name from hierarchy exists join purpose
      #        where purpose.HierarchyPurpose == HierarchyPurpose::Security && purpose.HierarchyType == hierarchy.RecId
      #    {
      #        hierarchyCombo.add(hierarchy.Name);
      #    }
      #}
    ENDSOURCE
    SOURCE #canClose
      #public boolean canClose()
      #{
      #    OrganizationAccess selection = grantAccessRadioButton.selection();
      #    boolean ret = super();
      #    Map inMemOrg = new Map(Types::Int64, Types::Int64);
      #    if (ret)
      #    {
      #        if (selection == OrganizationAccess::Organization)
      #        {
      #            if(infolog.globalCache().isSet(curUserId() + #AssignOMOwnerKey, #AssignOMKey))
      #            {
      #                inMemOrg = infolog.globalCache().get(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
      #            }
      #            if(inMemOrg.elements() == 0)
      #            {
      #                ret = (Box::yesNo(strFmt("@SYS332627", strFmt("@SYS332626")), DialogButton::No) == DialogButton::Yes);
      #            }
      #        }
      #    }
      #
      #    return ret;
      #}
    ENDSOURCE
    SOURCE #enableButtons
      #public void enableButtons()
      #{
      #    TreeItemIdx idx;
      #    FormTreeItem item;
      #    RefRecId recId =  0;
      #    boolean enableGrantWithChildren;
      #    boolean enableGrant;
      #    boolean enableRevoke;
      #
      #    if (isReadOnlyMode || !buttons.enabled())
      #        return;
      #
      #    idx = organizationTree.getFirstSelected();
      #    item = (idx) ? organizationTree.getItem(idx) : null;
      #    enableRevoke = (SysSecOrganizationsTmp.RecId != 0);
      #
      #    enableGrant = (item != null);
      #    if (enableGrant)
      #    {
      #        recId = item.data();
      #        enableGrant = !element.IsOrganizationAdded(recId);
      #    }
      #
      #    enableGrantWithChildren = enableGrant && (hierarchyId != 0) ;
      #
      #    grantWithChildren.enabled(enableGrantWithChildren);
      #    grant.enabled(enableGrant);
      #    revoke.enabled(enableRevoke);
      #}
    ENDSOURCE
    SOURCE #enableTreeGroup
      #public void enableTreeGroup(boolean _enable)
      #{
      #    grantAccessRadioButton.enabled(!isReadOnlyMode);
      #    grantAccessRadioButton.allowEdit(!isReadOnlyMode);
      #
      #    if (_enable)
      #    {
      #        hierarchyCombo.enabled(!isReadOnlyMode);
      #        organizationTree.enabled(!isReadOnlyMode);
      #        organizationTree.backgroundColor(isReadOnlyMode ? #GRAY_TEXT : treeGroupBackgroundColor);
      #        grid.enabled(!isReadOnlyMode);
      #        buttons.enabled(!isReadOnlyMode);
      #    }
      #    else
      #    {
      #        hierarchyCombo.enabled(false);
      #        organizationTree.enabled(false);
      #        organizationTree.backgroundColor(#GRAY_TEXT);
      #        grid.enabled(false);
      #        buttons.enabled(false);
      #    }
      #    element.enableButtons();
      #}
    ENDSOURCE
    SOURCE #fillTree
      #public void fillTree()
      #{
      #    CompanyInfo ci;
      #    OMHierarchyRelationship relationship;
      #    OMInternalOrganization  organization;
      #    boolean hasChildren;
      #
      #    organizationTree.lockWindowUpdate(true);
      #    organizationTree.deleteAll();
      #
      #    if (!hierarchyId)
      #    {
      #        while select Name, RecId from ci
      #        {
      #            SysFormTreeControl::addTreeItem(
      #                organizationTree,
      #                ci.Name,
      #                FormTreeAdd::Root,
      #                ci.RecId,
      #                element.getImage(ci.RecId),
      #                false);
      #        }
      #    }
      #    else
      #    {
      #        while select ChildOrganization from relationship
      #            where relationship.ParentOrganization == 0 && relationship.HierarchyType == hierarchyId
      #            join Name from organization where organization.RecId == relationship.ChildOrganization
      #        {
      #            hasChildren = ((select firstonly omHierarchyRelationship
      #                            where omHierarchyRelationship.ParentOrganization == relationship.ChildOrganization &&
      #                                omHierarchyRelationship.HierarchyType == hierarchyId).RecId != 0);
      #            SysFormTreeControl::addTreeItem(
      #                organizationTree,
      #                organization.Name,
      #                FormTreeAdd::Root,
      #                relationship.ChildOrganization,
      #                element.getImage(relationship.ChildOrganization),
      #                hasChildren);
      #        }
      #    }
      #    organizationTree.lockWindowUpdate(false);
      #}
    ENDSOURCE
    SOURCE #getImage
      #public ImageRes getImage(RefRecId _recId)
      #{
      #    ImageListAppl_Aot           imageList_Security = SysSecHelper::getImageListForAdminUIs();
      #    CompanyInfo company;
      #    OMOperatingUnit operatingUnit;
      #    int nodeType = 0, imageID = 0;
      #
      #    select firstonly RecId from company where company.RecId == _recId;
      #    if (company)
      #    {
      #        nodeType =  OMHierarchyDesigner::toNodeTypeId([OMInternalOrganizationType::LegalEntity, OMOperatingUnitType::None]);
      #    }
      #    else
      #    {
      #        select firstonly RecId, omOperatingUnitType from operatingUnit where operatingUnit.RecId == _recId;
      #        if (operatingUnit)
      #        {
      #            nodeType = OMHierarchyDesigner::toNodeTypeId([OMInternalOrganizationType::OperatingUnit, operatingUnit.omOperatingUnitType]);
      #        }
      #    }
      #
      #    if (nodeType > 0)
      #    {
      #        imageID = OMHierDesignExtClass::getNodeTypeImageID(nodeType);
      #        if (imageID > 0)
      #        {
      #            return imageList_Security.image(imageID);
      #        }
      #    }
      #    return 0;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    OMInternalOrganizationTmpType       internalOrganizationTmpType;
      #    ImageListAppl_Aot           imageList_Security;
      #
      #    internalOrganizationTmpType         = OMInternalOrganizationTmpType::insertInternalOrganizationTypes(true);
      #    formCaption = strFmt("@SDT138");
      #
      #    super();
      #
      #    _formSplitterY = new SysFormSplitter_Y(YSplitter, organizationTree, this);
      #
      #    // null out the record so it does not affect the caption
      #    this.args().record(null);
      #    element.design().caption(formCaption);
      #
      #    radioGroup.caption("@SDT179");
      #
      #    treeGroupBackgroundColor = organizationTree.backgroundColor();
      #    imageList_Security = SysSecHelper::getImageListForAdminUIs();
      #
      #    while select * from internalOrganizationTmpType
      #    {
      #        imageList_Security.add(OMHierDesignExtClass::getNodeTypeImageID(OMHierarchyDesigner::toNodeTypeId(
      #            [OMInternalOrganizationType::OperatingUnit,internalOrganizationTmpType.OperatingUnitType])));
      #    }
      #
      #    imageList_Security.add(OMHierDesignExtClass::getNodeTypeImageID(OMHierarchyDesigner::toNodeTypeId(
      #        [OMInternalOrganizationType::LegalEntity,OMOperatingUnitType::None])));
      #    organizationTree.setImagelist(imageList_Security.imageList());
      #
      #
      #}
    ENDSOURCE
    SOURCE #IsOrganizationAdded
      #public boolean IsOrganizationAdded(RecId _orgId)
      #{
      #    Map inMemOrgs;
      #    MapEnumerator mapEnumerator;
      #    boolean retValue = false;
      #    if(infolog.globalCache().isSet(curUserId() + #AssignOMOwnerKey, #AssignOMKey))
      #    {
      #        inMemOrgs = infolog.globalCache().get(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
      #        if(inMemOrgs != null)
      #        {
      #            mapEnumerator = inMemOrgs.getEnumerator();
      #            while(mapEnumerator.moveNext())
      #            {
      #                if(mapEnumerator.currentKey() == _orgId)
      #                    return true;
      #            }
      #        }
      #    }
      #
      #    return retValue;
      #}
    ENDSOURCE
    SOURCE #refreshForm
      #private void refreshForm()
      #{
      #    this.buildHierarchyList();
      #    SysSecOrganizationsTmp_ds.executeQuery();
      #    organizationTree.lockWindowUpdate(true);
      #    element.enableTreeGroup(false);
      #    grantAccessRadioButton.setInitialValue();
      #    this.fillTree();
      #    organizationTree.lockWindowUpdate(false);
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    Map                         inMemOrgs;
      #    MapEnumerator               mapEnumerator;
      #    SysSecOrganizationsTmp      orgTmp;
      #
      #    super();
      #
      #    // get current org assignments from GOC
      #    if(infolog.globalCache().isSet(curUserId() + #AssignOMOwnerKey, #AssignOMKey))
      #    {
      #        inMemOrgs = infolog.globalCache().get(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
      #        if(inMemOrgs != null)
      #        {
      #            mapEnumerator = inMemOrgs.getEnumerator();
      #            orgTmp = SysSecOrganizationsTmp;
      #
      #            while(mapEnumerator.moveNext())
      #            {
      #                orgTmp.OMInternalOrganization = mapEnumerator.currentKey();
      #                orgTmp.omHierarchyType = mapEnumerator.currentValue();
      #                orgTmp.insert();
      #            }
      #        }
      #    }
      #
      #    // BP Deviation documented
      #    SysSecOrganizationsTmp.setTmp();
      #    SysSecOrganizationsTmp.setTmpData(orgTmp);
      #    SysSecOrganizationsTmp_ds.executeQuery();
      #
      #    this.refreshForm();
      #
      #}
    ENDSOURCE
    SOURCE #setReadOnlyMode
      #private void setReadOnlyMode()
      #{
      #    isReadOnlyMode = true;
      #}
    ENDSOURCE
    SOURCE #task
      #public int task(int _taskId)
      #{
      #    #task
      #
      #    switch (_taskId)
      #    {
      #        case #taskNew:
      #            return true;
      #
      #        case #taskDeleteRecord:
      #            return true;
      #
      #        case #taskF5:
      #            element.refreshForm();
      #            break;
      #    }
      #
      #    return super(_taskId);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysSecOrganizationsTmp
          Table               #SysSecOrganizationsTmp
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #organizationId
          #//BP Deviation documented
          #public display OMOperatingUnitNumber organizationId(SysSecOrganizationsTmp _org)
          #{
          #    CompanyInfo company;
          #    OMOperatingUnit operatingUnit;
          #
          #    select firstonly RecId, DataArea from company where company.RecId == _org.omInternalOrganization;
          #    if (company)
          #        return company.DataArea;
          #
          #    select firstonly RecId, omOperatingUnitNumber from operatingUnit where operatingUnit.RecId == _org.omInternalOrganization;
          #    if (operatingUnit)
          #        return operatingUnit.omOperatingUnitNumber;
          #
          #    return '';
          #}
        ENDSOURCE
        SOURCE #internalOrganizationType
          #//BP Deviation documented
          #public display OMInternalOrganizationType internalOrganizationType(SysSecOrganizationsTmp _org)
          #{
          #    CompanyInfo company;
          #    OMOperatingUnit operatingUnit;
          #
          #    select firstonly RecId from company where company.RecId == _org.omInternalOrganization;
          #    if (company)
          #        return OMInternalOrganizationType::LegalEntity;
          #
          #    select firstonly RecId, omOperatingUnitType from operatingUnit where operatingUnit.RecId == _org.omInternalOrganization;
          #    if (operatingUnit)
          #    {
          #        return OMInternalOrganizationType::OperatingUnit;
          #    }
          #    return 0;
          #}
        ENDSOURCE
        SOURCE #operatingUnitType
          #//BP Deviation documented
          #public display OMOperatingUnitType operatingUnitType(SysSecOrganizationsTmp _org)
          #{
          #    OMOperatingUnit operatingUnit;
          #
          #    select firstonly RecId, omOperatingUnitType from operatingUnit where operatingUnit.RecId == _org.omInternalOrganization;
          #    if (operatingUnit)
          #    {
          #        return operatingUnit.omOperatingUnitType;
          #    }
          #
          #    return OMOperatingUnitType::None;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Caption             #@SDT138
      SetCompany          #No
      Mode                #Delete
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #1073741822
          HierarchyParent     #Group
          Style               #Strip
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #buttons
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
          FrameType           #None
          Caption             #@SYS332622
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS332622
          ElementPosition     #1610612733
          HierarchyParent     #Group
          MultiSelect         #No
          ShowRowLabels       #No
          DataSource          #SysSecOrganizationsTmp
        ENDPROPERTIES
        
        METHODS
          SOURCE #launchHierarchyDesigner
            #public void launchHierarchyDesigner()
            #{
            #    OMHierarchyType type;
            #
            #    if (SysSecOrganizationsTmp.omHierarchyType)
            #    {
            #        select * from type where type.RecId == SysSecOrganizationsTmp.omHierarchyType;
            #        OMMultipleHierarchy::displayHierarchyDesigner([[type.Name, SysSecOrganizationsTmp.omInternalOrganization], 0]);
            #    }
            #}
          ENDSOURCE
          SOURCE #mouseDblClick
            #public int mouseDblClick(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    this.launchHierarchyDesigner();
            #    return true;
            #}
          ENDSOURCE
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    int hWnd = this.hWnd();
            #    int selection = 0;
            #    int selRevoke, selViewHierarchy;
            #    PopupMenu popupMenu = new PopupMenu(hWnd); // ignore _menuHandle
            #
            #    popupMenu.insertBreak();
            #    selRevoke = popupMenu.insertItem(revoke.text(), false, !revoke.enabled());
            #    selViewHierarchy = popupMenu.insertItem("@SYS316763", false,  !revoke.enabled());
            #    popupMenu.insertBreak();
            #
            #    selection  = popupMenu.draw();
            #
            #    switch (selection)
            #    {
            #        case selRevoke:
            #            revoke.clicked();
            #            break;
            #
            #        case selViewHierarchy:
            #        grid.launchHierarchyDesigner();
            #            break;
            #    }
            #
            #    return 0;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          Width               #Column width
          Height              #Column height
          ElementPosition     #1789569705
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #mainGroup
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #radioGroup
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #357913941
          Caption             #@SYS332646
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #YSplitter
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #5
          ElementPosition     #1431655764
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #OMHierarchyType
          AllowEdit           #No
          HelpText            #@SYS304850
          ElementPosition     #1789569705
          HierarchyParent     #Grid
          DataSource          #SysSecOrganizationsTmp
          ReferenceField      #OMHierarchyType
          Label               #@SYS40878
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    int ret;
            #
            #    ret = grid.showContextMenu(_menuHandle);
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #OMInternalOrganization
          AllowEdit           #No
          HelpText            #@SYS332637
          ElementPosition     #1118481064
          HierarchyParent     #Grid
          DataSource          #SysSecOrganizationsTmp
          ReferenceField      #OMInternalOrganization
          Label               #@SYS191131
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    int ret;
            #
            #    ret = grid.showContextMenu(_menuHandle);
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #grant
          AutoDeclaration     #Yes
          Height              #Column height
          HelpText            #@SYS332631
          ElementPosition     #1288490187
          HierarchyParent     #buttons
          Text                #@SYS332632
          Bold                #Semibold
          Border              #3D
          MultiSelect         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.addOrganization(false);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #grantWithChildren
          AutoDeclaration     #Yes
          Height              #Column height
          HelpText            #@SYS332629
          ElementPosition     #858993458
          HierarchyParent     #buttons
          Text                #@SYS332630
          Border              #3D
          MultiSelect         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.addOrganization(true);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #revoke
          AutoDeclaration     #Yes
          Height              #Column height
          HelpText            #@SYS332633
          ElementPosition     #1717986916
          HierarchyParent     #buttons
          Text                #@SYS332634
          Bold                #Semibold
          Border              #3D
          MultiSelect         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    Map inMemOrgs;
            #
            #    if (SysSecOrganizationsTmp)
            #    {
            #        //Update GOC
            #        if(infolog.globalCache().isSet(curUserId() + #AssignOMOwnerKey, #AssignOMKey))
            #        {
            #            inMemOrgs = infolog.globalCache().get(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
            #            if(inMemOrgs && inMemOrgs.exists(SysSecOrganizationsTmp.OMInternalOrganization))
            #            {
            #                inMemOrgs.remove(SysSecOrganizationsTmp.OMInternalOrganization);
            #                infolog.globalCache().remove(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
            #                infolog.globalCache().set(curUserId() + #AssignOMOwnerKey, #AssignOMKey, inMemOrgs);
            #            }
            #        }
            #
            #        ttsbegin;
            #        SysSecOrganizationsTmp.delete();
            #        ttscommit;
            #
            #        SysSecOrganizationsTmp_ds.executeQuery();
            #        element.enableButtons();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #hierarchyCombo
          AutoDeclaration     #Yes
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #mainGroup
          Label               #@SYS135925
        ENDPROPERTIES
        
        METHODS
          SOURCE #selectionChange
            #public int selectionChange()
            #{
            #    int ret;
            #    Name name = this.valueStr();
            #    OMHierarchyType hierarchy;
            #
            #    ret = super();
            #
            #    if (name == allCompaniesHierarchyName)
            #    {
            #        hierarchyId = 0;
            #    }
            #    else
            #    {
            #        select firstonly RecId from hierarchy where hierarchy.Name == name;
            #        hierarchyId = hierarchy.RecId;
            #    }
            #    element.fillTree();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #internalOrganizationType
          AllowEdit           #No
          ElementPosition     #536870910
          HierarchyParent     #Grid
          DataSource          #SysSecOrganizationsTmp
          DataMethod          #internalOrganizationType
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    int ret;
            #
            #    ret = grid.showContextMenu(_menuHandle);
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #operatingUnitType
          AllowEdit           #No
          ElementPosition     #805306365
          HierarchyParent     #Grid
          DataSource          #SysSecOrganizationsTmp
          DataMethod          #operatingUnitType
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    int ret;
            #
            #    ret = grid.showContextMenu(_menuHandle);
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL RADIOBUTTON
        PROPERTIES
          Name                #grantAccessRadioButton
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #radioGroup
          BackgroundColor     #Dyn Background white
          EnumType            #OrganizationAccess
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean                 ret;
            #    OrganizationAccess      selection = this.selection();
            #
            #    organizationTree.lockWindowUpdate(true);
            #
            #    ret = super();
            #    if (ret)
            #    {
            #        if (selection == OrganizationAccess::All)
            #        {
            #            // delete exisiting organizations
            #            infolog.globalCache().remove(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
            #            //Only in memory is deleted
            #            delete_from SysSecOrganizationsTmp;
            #            SysSecOrganizationsTmp_ds.executeQuery();
            #        }
            #
            #        element.enableTreeGroup(selection == OrganizationAccess::Organization);
            #    }
            #
            #    organizationTree.lockWindowUpdate(false);
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #setInitialValue
            #public void setInitialValue()
            #{
            #    OrganizationAccess selection;
            #    Map inMemOrg;
            #
            #    if(infolog.globalCache().isSet(curUserId() + #AssignOMOwnerKey, #AssignOMKey))
            #    {
            #        inMemOrg = infolog.globalCache().get(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
            #        selection = (inMemOrg.elements()) ? OrganizationAccess::Organization : OrganizationAccess::All;
            #        grantAccessRadioButton.selection(selection);
            #        grantAccessRadioButton.update();
            #        element.enableTreeGroup(selection == OrganizationAccess::Organization);
            #    }
            #}
          ENDSOURCE
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean                 ret;
            #    OrganizationAccess      selection = this.selection();
            #
            #    ret = super();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #StaticText
          VerticalSpacing     #0
          ElementPosition     #1610612734
          HierarchyParent     #mainGroup
          Text                #@SDT180
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #organizationId
          AllowEdit           #No
          ElementPosition     #1431655764
          HierarchyParent     #Grid
          Label               #@SYS332638
          DataSource          #SysSecOrganizationsTmp
          DataMethod          #organizationId
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    int ret;
            #
            #    ret = grid.showContextMenu(_menuHandle);
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #organizationTree
          Width               #Column width
          Height              #150
          HelpText            #@SYS134309
          ConfigurationKey    #SysAdmin
          ElementPosition     #1073741823
          RowSelect           #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #endLabelEdit
            #public void endLabelEdit(int _idx, str _text, anytype _data)
            #{
            #/*    FormTreeItem    formTreeItem = this.getItem(_idx);
            #
            #    // Data retrieved from SecurityRole table which
            #    // is TPF protected.
            #    // BP Deviation Documented
            #    formTreeItem.text(_text);
            #    this.setItem(formTreeItem);
            #*/
            #    super(_idx, _text, _data);
            #
            #}
          ENDSOURCE
          SOURCE #expanding
            #public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
            #{
            #
            #    FormTreeItem            formTreeItem = this.getItem(_idx);
            #    OMHierarchyRelationship relationship;
            #    OMInternalOrganization  organization;
            #    boolean                 hasChildren;
            #    RefRecId                parentId;
            #
            #    if ((!formTreeItem.stateExpandedOnce()) && (formTreeItem.children()))
            #    {
            #        parentId = formTreeItem.data();
            #
            #        while select ChildOrganization from relationship
            #            where relationship.ParentOrganization == parentId && relationship.HierarchyType == hierarchyId
            #            join Name from organization where organization.RecId == relationship.ChildOrganization
            #        {
            #            hasChildren = ((select firstonly omHierarchyRelationship
            #                            where omHierarchyRelationship.ParentOrganization == relationship.ChildOrganization &&
            #                                omHierarchyRelationship.HierarchyType == hierarchyId).RecId != 0);
            #            SysFormTreeControl::addTreeItem(
            #                organizationTree,
            #                organization.Name,
            #                _idx,
            #                relationship.ChildOrganization,
            #                element.getImage(relationship.ChildOrganization),
            #                hasChildren);
            #        }
            #    }
            #
            #    return false;
            #}
            #
          ENDSOURCE
          SOURCE #keyDown
            ##KEYPRESSED
            #public boolean keyDown(int _vKey, boolean _ctrl, boolean _shift)
            #{
            #    boolean ret = false;
            #
            #    if ((_vKey == #F5) && !_ctrl && !_shift)
            #    {
            #        element.fillTree();
            #        ret = true;
            #    }
            #
            #    if (!ret)
            #    {
            #        ret = super(_vKey, _ctrl, _shift);
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #replaceIcon
            #public void replaceIcon(FormTreeItem _item, ImageRes _newIcon)
            #{
            #    _item.image(_newIcon);
            #    _item.selectedImage(_newIcon);
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
            #{
            #    super(_oldItem, _newItem, _how);
            #    element.enableButtons();
            #}
          ENDSOURCE
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    int hWnd = this.hWnd();
            #    int selection = 0;
            #    int selGrantWithChildren, selGrant;
            #    PopupMenu popupMenu = new PopupMenu(hWnd); // ignore _menuHandle
            #
            #    popupMenu.insertBreak();
            #    selGrantWithChildren = popupMenu.insertItem(grantWithChildren.text(), false, !grantWithChildren.enabled());
            #    selGrant = popupMenu.insertItem(grant.text(), false, !grant.enabled());
            #    popupMenu.insertBreak();
            #
            #    selection  = popupMenu.draw();
            #
            #    switch (selection)
            #    {
            #        case selGrantWithChildren:
            #            grantWithChildren.clicked();
            #            break;
            #        case selGrant:
            #            grant.clicked();
            #            break;
            #    }
            #
            #    return 0;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
      TABLE #OmUserRoleOrganizationTemp
        PROPERTIES
          Table               #OmUserRoleOrganizationTemp
          EffectiveAccess     #Read
          ManagedBy           #Manual
        ENDPROPERTIES
        
      ENDTABLE
      
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
  TABLE #OmUserRoleOrganizationTemp
    PROPERTIES
      Table               #OmUserRoleOrganizationTemp
      EffectiveAccess     #Update
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
  TABLE #OmUserRoleOrganizationTemp
    PROPERTIES
      Table               #OmUserRoleOrganizationTemp
      EffectiveAccess     #Create
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
  TABLE #OMUSERROLEORGANIZATION
    PROPERTIES
      Table               #OMUSERROLEORGANIZATION
      EffectiveAccess     #Delete
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
TABLE #OmUserRoleOrganizationTemp
  PROPERTIES
    Table               #OmUserRoleOrganizationTemp
    EffectiveAccess     #Delete
    ManagedBy           #Manual
  ENDPROPERTIES
  
ENDTABLE

ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecDutyLookup
  PROPERTIES
    Name                #SysSecDutyLookup
    Origin              #{4AEA063A-E634-4CFD-A262-46BC1949B76E}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    super();
      #
      #    element.selectMode(SecurityTask_Name);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SecurityTask
          Table               #SecurityTask
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          AutoNotify          #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #executeQuery
          #public void executeQuery()
          #{
          #    QueryBuildDataSource qbds = SecurityTask_ds.queryBuildDataSource();
          #
          #    QueryBuildRange qbr2, qbr = qbds.addRange(fieldNum(SecurityTask, IsEnabled));
          #    qbr.value('1');
          #    qbr.status(RangeStatus::Locked);
          #
          #    qbr2 = qbds.addRange(fieldNum(SecurityTask, Type));
          #    qbr2.value(SysQuery::value(SecurityTaskType::Duty));
          #    qbr2.status(RangeStatus::Locked);
          #
          #    qbds.addSortField(fieldNum(SecurityTask, Name));
          #
          #    super();
          #
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
      WindowResize        #Dynamic
      SetCompany          #No
      Style               #Lookup
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          DataSource          #SecurityTask
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SecurityTask_AotName
          ElementPosition     #1610612733
          HierarchyParent     #Grid
          Label               #@SDT242
          DataSource          #SecurityTask
          DataField           #AotName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SecurityTask_Name
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Grid
          Label               #@SDT243
          DataSource          #SecurityTask
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecEntryPointManager
  PROPERTIES
    Name                #SysSecEntryPointManager
    Origin              #{1D698C77-11BD-4584-A553-C5F2564486F6}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends SysSecBaseForm
      #{
      #    #AOT
      #    #AviFiles
      #    #SysSecUI
      #    #Properties
      #    #SysSecEntryPointManager
      #
      #    ImageListAppl_SecurityAccess imageList_access;
      #    ImageListAppl_Aot imageListAppl_AOT;
      #
      #    Map accessRightsMap;
      #    Map oldAccessRightsMap;
      #    SecurityRoleName currentRoleName;
      #    SecurityRoleAotName currentRoleAOTName;
      #    SysSecDevelopmentType currentDevelopmentType;
      #    recid currentRoleID;
      #    IdentifierName currentDevelopmentObject;
      #    Map treeParents;
      #    Map menuItemTreeReferences;
      #
      #    Map curAccessTree;
      #    Map oldAccessTree;
      #    Map nodeHasChildWithNewAccessTree;
      #    Map oldAccessTreeDiscoveredNodes;
      #
      #    Map newIndicatedItems;
      #    Map prevIndicatedItems;
      #
      #    int workSpaceHandle;
      #    boolean wasFormRunHookEnabled;
      #    int curMainWindowHandle;
      #    TreeItemIdx richClientRootItemIdx;
      #    TreeItemIdx webRootItemIdx;
      #    TreeItemIdx servicesRootItemIdx;
      #    boolean isRecording;
      #    boolean recordingIsDirty;
      #    boolean recordingGridFilter;
      #    str prevRecordingFilePath;
      #    str prevEPTraceFilePath;
      #    FormRun epTraceFormRun;
      #
      #    boolean disableSysAdminRoleAssignment;
      #
      #    boolean skipRun;
      #    boolean labelsLoaded;
      #    boolean licenseInfoLoaded;
      #    boolean layerModelLoaded;
      #
      #    ImageRes accessImages[7];
      #
      #    Map disabledUserRolesMap;
      #    Map userRoleOrgRecords;
      #    recid newUserRole;
      #    recid curUserRoleDisabled;
      #
      #    Map systemUserAccessRightsMap;
      #    SysFormSplitter_Y  _formSplitterY;
      #    SysFormSplitter_X _formSplitterX;
      #
      #    boolean referencesShown;
      #    SysSecTree  secTree;
      #    SysSecHelper secHelper;
      #    TreeNode securityNode;
      #}
    ENDSOURCE
    SOURCE #AddFilterOnRecordedObjects
      #public void AddFilterOnRecordedObjects()
      #{
      #    QueryBuildDataSource qbds;
      #    QueryBuildRange qbr;
      #
      #    if(!recordingGridFilter)
      #    {
      #        qbds = SysSecEntryPointTmp_ds.query().dataSourceTable(tableNum(SysSecEntryPointTmp));
      #        qbr = qbds.addRange(fieldNum(SysSecEntryPointTmp, Recorded));
      #        qbr.value('1');
      #        qbr.status(RangeStatus::Locked);
      #        recordingGridFilter = true;
      #    }
      #    EntryPointsGrid_Recorded.visible(true);
      #    ClearRecordedFilter.visible(true);
      #}
    ENDSOURCE
    SOURCE #AreLabelsLoaded
      #public boolean AreLabelsLoaded()
      #{
      #    return labelsLoaded;
      #}
    ENDSOURCE
    SOURCE #BuildMetaDataCaches
      #public void BuildMetaDataCaches()
      #{
      #    #AOT
      #    TreeNode tn;
      #
      #    container parents;
      #
      #    #Properties
      #    identifierName itemValue;
      #    str itemType, itemTypeKey;
      #    TreeNodeIterator servicesIterator, operationsIterator;
      #    TreeNode servicesNode, serviceNode, operationNode;
      #
      #    void processMenuNode(TreeNode _menuNode)
      #    {
      #        TreeNode subMenuNode;
      #        TreeNode childNode;
      #        container curCon;
      #        str menuItemKey = '';
      #
      #        if(_menuNode == null)
      #            return;
      #
      #        itemvalue =  findProperty(_menuNode.AOTgetProperties(), #PropertyMenuItemName);
      #
      #        if(itemvalue)
      #        {
      #            itemtype  = findProperty(_menuNode.AOTgetProperties(),#PropertyMenuItemType);
      #            if(itemType == '' || itemType == 'Display')
      #            {
      #                itemTypeKey = #EntryPointObjectKeyDisplayMenuItem;
      #            }
      #            else if(itemType == 'Action')
      #            {
      #                itemTypeKey = #EntryPointObjectKeyActionMenuItem;
      #            }
      #            else if(itemType == 'Output')
      #            {
      #                itemTypeKey = #EntryPointObjectKeyOutputMenuItem;
      #            }
      #            menuItemKey = strFmt('%1.%2.%3', strLwr(itemTypeKey), strLwr(itemValue), '');
      #        }
      #
      #        childNode = _menuNode.AOTfirstChild();
      #        while (childNode)
      #        {
      #            parents = conIns(parents, conLen(parents)+1, _menuNode.treeNodePath());
      #            switch (childNode.handle())
      #            {
      #                case classNum(MenuReference):
      #                    subMenuNode = TreeNode::findNode(#MenusPath +'\\' +childNode.AOTname());
      #                    processMenuNode(subMenuNode);
      #                    break;
      #
      #                default:
      #                    processMenuNode(childNode);
      #                    break;
      #            }
      #
      #            parents = conDel(parents, conLen(parents), 1);
      #
      #            childNode = childNode.AOTnextSibling();
      #        }
      #
      #        treeParents.insert(_menuNode.treeNodePath(), parents);
      #
      #        if(menuItemKey != '')
      #        {
      #            if(!menuItemTreeReferences.exists(menuItemKey))
      #            {
      #                menuItemTreeReferences.insert(menuItemKey, [_menuNode.treeNodePath()]);
      #            }
      #            else
      #            {
      #                curCon = menuItemTreeReferences.lookup(menuItemKey);
      #                menuItemTreeReferences.remove(menuItemKey);
      #                menuItemTreeReferences.insert(menuItemKey, conIns(curCon, conLen(curCon)+1, _menuNode.treeNodePath()));
      #            }
      #        }
      #        _menuNode.treeNodeRelease();
      #    }
      #
      #    treeParents = new Map(Types::String, Types::Container);
      #    menuItemTreeReferences = new Map(Types::String, Types::Container);
      #    parents = conNull();
      #
      #    //Cache rich client parents
      #    tn = TreeNode::findNode(#MenusPath + @'\MainMenu');
      #    processMenuNode(tn);
      #
      #    //Cache services
      #    servicesNode = TreeNode::findNode(#ServicesPath);
      #    servicesIterator = servicesNode.AOTiterator();
      #    serviceNode = servicesIterator.next();
      #    while(serviceNode != null)
      #    {
      #        parents = conNull();
      #        parents = conIns(parents, conLen(parents)+1, servicesNode.treeNodePath());
      #        treeParents.insert(serviceNode.treeNodePath(), parents);
      #        parents = conIns(parents, conLen(parents)+1, serviceNode.treeNodePath());
      #
      #        operationsIterator = serviceNode.AOTfindChild(#ServiceOperations).AOTiterator();
      #        operationNode = operationsIterator.next();
      #        while(operationNode != null)
      #        {
      #            treeParents.insert(operationNode.treeNodePath(), parents);
      #            operationNode = operationsIterator.next();
      #        }
      #        serviceNode = servicesIterator.next();
      #    }
      #
      #}
    ENDSOURCE
    SOURCE #canClose
      #public boolean canClose()
      #{
      #    boolean ret;
      #
      #    ret = super();
      #
      #    if(isRecording)
      #    {
      #        warning(strFmt("@SDT73"));
      #        return false;
      #    }
      #    element.CheckRecordingIsDirty();
      #
      #    return ret;
      #}
    ENDSOURCE
    SOURCE #CheckRecordingIsDirty
      #public void CheckRecordingIsDirty()
      #{
      #    DialogButton dialogButton;
      #
      #    if(recordingIsDirty)
      #    {
      #        dialogButton = Box::yesNoOnce(strFmt("@SDT74"),
      #                            strFmt("@SDT75"), DialogButton::Yes, 'EntryPointRecorderIsDirty');
      #
      #        if(dialogButton == DialogButton::Yes)
      #        {
      #            element.SaveRecording();
      #        }
      #        else
      #        {
      #            recordingIsDirty = false;
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #ClearEntryPointReferenceTree
      #public void ClearEntryPointReferenceTree()
      #{
      #    if(referencesShown)
      #    {
      #        EntryPointReferenceTree.deleteAll();
      #        referencesShown = false;
      #    }
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    if(!skipRun)
      #    {
      #        if(isDeveloper())
      #        {
      #            //Turn off form run hook
      #            SysSecEntryPointManager::FormRunHookStatus(false);
      #
      #            //Remove pointer in GOC
      #            if(infolog.globalCache().isSet(curuserId() + #SecEntryPointFormKey, #SecEntryPointFormKey))
      #            {
      #                infolog.globalCache().remove(curuserId() + #SecEntryPointFormKey, #SecEntryPointFormKey);
      #            }
      #
      #            element.UndoRoleAssignmentChanges();
      #        }
      #
      #        //Release all objects in menu tree
      #        MenuTree.deleteAll();
      #
      #        //Release all maps
      #        systemUserAccessRightsMap = null;
      #        accessRightsMap = null;
      #        oldAccessRightsMap = null;
      #        treeParents = null;
      #        menuItemTreeReferences = null;
      #        curAccessTree = null;
      #        oldAccessTree = null;
      #        nodeHasChildWithNewAccessTree = null;
      #        oldAccessTreeDiscoveredNodes = null;
      #        newIndicatedItems = null;
      #        prevIndicatedItems = null;
      #    }
      #
      #    super();
      #}
    ENDSOURCE
    SOURCE #closeForm
      #public void closeForm()
      #{
      #    element.close();
      #}
    ENDSOURCE
    SOURCE #CurrentDevelopmentObject
      #public IdentifierName CurrentDevelopmentObject()
      #{
      #    return currentDevelopmentObject;
      #}
    ENDSOURCE
    SOURCE #CurrentDevelopmentType
      #public SysSecDevelopmentType CurrentDevelopmentType()
      #{
      #    return currentDevelopmentType;
      #}
    ENDSOURCE
    SOURCE #GetAccessRightForMenuItem
      #public AccessRight GetAccessRightForMenuItem(MenuItemType _menuItemType, identifierName _menuItemName)
      #{
      #    str typeKey, objectKey;
      #
      #    if(_menuItemName == '')
      #        return -1;
      #
      #    if(currentRoleAOTName == '')
      #        return -1;
      #
      #    switch(_menuItemType)
      #    {
      #        case MenuItemType::Display:
      #            typeKey = #EntryPointObjectKeyDisplayMenuItem;
      #            break;
      #        case MenuItemType::Output:
      #            typeKey = #EntryPointObjectKeyOutputMenuItem;
      #            break;
      #        case MenuItemType::Action:
      #            typeKey = #EntryPointObjectKeyActionMenuItem;
      #            break;
      #
      #        default:
      #            throw error(strFmt("@SDT76", _menuItemType));
      #    }
      #
      #    objectKey = strFmt('%1.%2.%3', typeKey, strLwr(_menuItemName), '');
      #    if(accessRightsMap != null)
      #    {
      #        if(accessRightsMap.exists(objectKey))
      #        {
      #            return accessRightsMap.lookup(objectKey);
      #        }
      #    }
      #
      #    return AccessRight::NoAccess;
      #}
    ENDSOURCE
    SOURCE #GetAccessRightForObjectKey
      #public AccessRight GetAccessRightForObjectKey(str _objectKey)
      #{
      #    if(accessRightsMap != null && accessRightsMap.exists(_objectKey))
      #    {
      #        return accessRightsMap.lookup(_objectKey);
      #    }
      #    return AccessRight::NoAccess;
      #}
    ENDSOURCE
    SOURCE #GetCurrentRoleAOTname
      #public SecurityRoleAotName GetCurrentRoleAOTname()
      #{
      #    return currentRoleAOTName;
      #}
    ENDSOURCE
    SOURCE #GetCurrentRoleName
      #public SecurityRoleName GetCurrentRoleName()
      #{
      #    return currentRoleName;
      #}
    ENDSOURCE
    SOURCE #GetEntryPointKeyForSysSecTreeItem
      #public SysSecEntryPointKey GetEntryPointKeyForSysSecTreeItem(FormTreeItem _formTreeItem)
      #{
      #    SysSecSecurableObject securableObjectUnder = element.GetLinkedWebMenuItem(_formTreeItem);
      #
      #    if(securableObjectUnder != null && (
      #        securableObjectUnder.getType() == SecurableType::MenuItemDisplay ||
      #        securableObjectUnder.getType() == SecurableType::MenuItemAction ||
      #        securableObjectUnder.getType() == SecurableType::MenuItemOutput ||
      #        securableObjectUnder.getType() == SecurableType::WebUrlItem ||
      #        securableObjectUnder.getType() == SecurableType::WebActionItem ||
      #        securableObjectUnder.getType() == SecurableType::WebManagedContentItem ||
      #        securableObjectUnder.getType() == SecurableType::ServiceOperation))
      #    {
      #        return strFmt('%1.%2.%3', SysSecEntryPointManager::GetTypeKeyForSecurableType(securableObjectUnder.getType()),
      #                            strLwr(securableObjectUnder.getName()), strLwr(securableObjectUnder.getChildName()));
      #    }
      #    return '';
      #}
    ENDSOURCE
    SOURCE #getFirstSelectedTaskRecId
      #public RecId getFirstSelectedTaskRecId()
      #{
      #    return 0;
      #}
    ENDSOURCE
    SOURCE #getHelper
      #SysSecHelper getHelper()
      #{
      #    return secHelper;
      #}
    ENDSOURCE
    SOURCE #GetLinkedWebMenuItem
      #public SysSecSecurableObject GetLinkedWebMenuItem(FormTreeItem _formTreeItem, boolean _returnParent = true)
      #{
      #    SysSecSecurableObject linkedWebMenuItem;
      #    Object objectUnder;
      #    SysSecSecurableObject curObjectUnder;
      #    Object data;
      #    TreeNode webNode;
      #    str menuItemName;
      #    str menuItemType;
      #    SecurableObject securableObject;
      #
      #    if(!_formTreeItem)
      #        return null;
      #
      #    objectUnder = _formTreeItem.data();
      #    if(!objectUnder)
      #        return null;
      #
      #    if(objectUnder is SysSecSecurableObject)
      #    {
      #        curObjectUnder = objectUnder as SysSecSecurableObject;
      #        data = curObjectUnder.getData();
      #        if(data is TreeNode)
      #        {
      #            webNode = data as TreeNode;
      #
      #            if(strStartsWith(webNode.treeNodePath(), #WebModulesPath) ||
      #                strStartsWith(webNode.treeNodePath(), #WebMenusPath))
      #            {
      #                menuItemName = findProperty(webNode.AOTgetProperties(), #PropertyMenuItemName);
      #                menuItemType = findProperty(webNode.AOTgetProperties(), #PropertyMenuItemType);
      #                if(menuItemName != '' && menuItemType != '')
      #                {
      #                    securableObject.RecId = 1;
      #                    securableObject.Name = menuItemName;
      #                    securableObject.Type = SecurableType::WebUrlItem;
      #                    if(strLwr(menuItemType) == 'action')
      #                    {
      #                        securableObject.Type = SecurableType::WebActionItem;
      #                    }
      #                    linkedWebMenuItem = new SysSecSecurableObject(this as Object, secTree, null, securableObject);
      #                    return linkedWebMenuItem;
      #                }
      #            }
      #        }
      #        if(_returnParent)
      #        {
      #            return curObjectUnder;
      #        }
      #    }
      #    return null;
      #}
    ENDSOURCE
    SOURCE #GetMenuItemKeyForNode
      #public str GetMenuItemKeyForNode(TreeNode _node)
      #{
      #    #Properties
      #    identifierName itemValue;
      #    str itemType, itemTypeKey;
      #    str key = '';
      #
      #    itemvalue =  findProperty(_node.AOTgetProperties(), #PropertyMenuItemName);
      #    itemtype  = findProperty(_node.AOTgetProperties(),#PropertyMenuItemType);
      #
      #    if(itemType == '' || itemType == 'Display')
      #    {
      #        itemTypeKey = #EntryPointObjectKeyDisplayMenuItem;
      #    }
      #    else if(itemType == 'Action')
      #    {
      #        itemTypeKey = #EntryPointObjectKeyActionMenuItem;
      #    }
      #    else if(itemType == 'Output')
      #    {
      #        itemTypeKey = #EntryPointObjectKeyOutputMenuItem;
      #    }
      #
      #    if(itemValue)
      #    {
      #        key = strFmt('%1.%2.%3', itemTypeKey, strLwr(itemValue), '');
      #    }
      #    return key;
      #
      #}
    ENDSOURCE
    SOURCE #GetSelectionDataGrid
      #public SysSecEntryPointTmp GetSelectionDataGrid()
      #{
      #    SysSecEntryPointTmp tmpData;
      #    SysSecEntryPointTmp entryPointGridData;
      #    for (entryPointGridData = getFirstSelection(SysSecEntryPointTmp_ds);
      #            entryPointGridData;
      #            entryPointGridData = SysSecEntryPointTmp_ds.getNext())
      #    {
      #        tmpData.ObjectType = entryPointGridData.ObjectType;
      #        tmpData.ObjectKey = entryPointGridData.ObjectKey;
      #        tmpData.ObjectAOTDisplayName = entryPointGridData.ObjectAOTDisplayName;
      #        tmpData.ObjectAOTName = entryPointGridData.ObjectAOTName;
      #        tmpData.ObjectAOTChildName = entryPointGridData.ObjectAOTChildName;
      #        tmpData.AccessRight = entryPointGridData.AccessRight;
      #        tmpData.NewAccessRight = entryPointGridData.AccessRight;
      #        tmpData.SystemUserRight = entryPointGridData.SystemUserRight;
      #        tmpData.ObjectLabel = entryPointGridData.ObjectLabel;
      #        tmpData.UserLicenseApplies = entryPointGridData.UserLicenseApplies;
      #        tmpData.MaintainUserLicense = entryPointGridData.MaintainUserLicense;
      #        tmpData.ViewUserLicense = entryPointGridData.ViewUserLicense;
      #        tmpData.ObjectAOTLayer = entryPointGridData.ObjectAOTLayer;
      #        tmpData.ObjectAOTModel = entryPointGridData.ObjectAOTModel;
      #        tmpData.insert();
      #    }
      #
      #    return tmpData;
      #}
    ENDSOURCE
    SOURCE #getTree
      #SysSecTree getTree()
      #{
      #    return secTree;
      #}
    ENDSOURCE
    SOURCE #getTreeControl
      #FormTreeControl getTreeControl()
      #{
      #    return MenuTree;
      #}
    ENDSOURCE
    SOURCE #GetTreeData
      #public SysSecEntryPointTmp GetTreeData()
      #{
      #    TreeItemIdx idx;
      #    Object  objectUnder;
      #    FormTreeItem itemUnder;
      #    TreeNode nodeUnder;
      #    SysSecSecurableObject sysSecObjUnder;
      #    SysSecEntryPointTmp tmpData;
      #    Map addedEntryPoints = new Map(Types::String, Types::String);
      #    SysSecEntryPointKey entryPointKey;
      #    boolean refreshGrid = false;
      #    SysSecEntryPointTmp restorePos;
      #
      #    void AddNode(FormTreeItem _item, TreeNode _node, SysSecSecurableObject sysSecObj = null)
      #    {
      #        TreeNode menuItemNode;
      #
      #        tmpData.clear();
      #
      #        if(sysSecObj != null)
      #        {
      #            if(SysSecEntryPointManager::GetTypeKeyForSecurableType(sysSecObj.getType()) != '')
      #            {
      #                tmpData.ObjectType = sysSecObj.getType();
      #                tmpData.ObjectAOTName = sysSecObj.getName();
      #                tmpData.ObjectAOTChildName = sysSecObj.getChildName();
      #            }
      #        }
      #        else if(SysTreeNode::path2ApplObjectType(_node.treeNodePath()) == UtilElementType::Service &&
      #            _node.AOTparent() != null &&
      #            _node.AOTparent().AOTparent() != null &&
      #            _node.AOTparent().AOTparent() != null &&
      #            _node.AOTparent().AOTparent().AOTparent() != null &&
      #            _node.AOTparent().AOTparent().AOTparent().treeNodePath() == #ServicesPath)
      #        {
      #            tmpData.ObjectType = SecurableType::ServiceOperation;
      #            tmpData.ObjectAOTName = _node.AOTparent().AOTparent().AOTname();
      #            tmpData.ObjectAOTChildName = _node.AOTname();
      #        }
      #        else
      #        {
      #            menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(_node);
      #            if(menuItemNode)
      #            {
      #                tmpData.ObjectType = SysSecEntryPointManager::GetSecurableMenuItemType(menuItemNode);
      #                tmpData.ObjectAOTName = menuItemNode.AOTname();
      #            }
      #        }
      #
      #        if(tmpData.ObjectAOTName != '')
      #        {
      #            entryPointKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(tmpData);
      #            if(!addedEntryPoints.exists(entryPointKey))
      #            {
      #                tmpData.AccessRight = this.StateImage2AccessRight(_item.stateImage());
      #                tmpData.NewAccessRight = this.StateImage2AccessRight(_item.stateImage());
      #
      #                tmpData.SystemUserRight = AccessRight::NoAccess;
      #                if(systemUserAccessRightsMap != null && systemUserAccessRightsMap.exists(entryPointKey))
      #                {
      #                    tmpData.SystemUserRight = systemUserAccessRightsMap.lookup(entryPointKey);
      #                }
      #
      #                if(labelsLoaded)
      #                {
      #                    select ObjectLabel from SysSecEntryPointTmp where SysSecEntryPointTmp.ObjectKey == entryPointKey;
      #                    tmpData.ObjectLabel = SysSecEntryPointTmp.ObjectLabel;
      #                    refreshGrid = true;
      #                }
      #
      #                if(licenseInfoLoaded)
      #                {
      #                    select UserLicenseApplies, MaintainUserLicense, ViewUserLicense from SysSecEntryPointTmp
      #                            where SysSecEntryPointTmp.ObjectKey == entryPointKey;
      #                    tmpData.UserLicenseApplies = SysSecEntryPointTmp.UserLicenseApplies;
      #                    tmpData.MaintainUserLicense = SysSecEntryPointTmp.MaintainUserLicense;
      #                    tmpData.ViewUserLicense = SysSecEntryPointTmp.ViewUserLicense;
      #                    tmpData.EffectiveUserLicense = SysSecEntryPointTmp.EffectiveUserLicense;
      #                    refreshGrid = true;
      #                }
      #
      #                if(layerModelLoaded)
      #                {
      #                    select ObjectAOTLayer, ObjectAOTModel from SysSecEntryPointTmp
      #                            where SysSecEntryPointTmp.ObjectKey == entryPointKey;
      #                    tmpData.ObjectAOTLayer = SysSecEntryPointTmp.ObjectAOTLayer;
      #                    tmpData.ObjectAOTModel = SysSecEntryPointTmp.ObjectAOTModel;
      #                    refreshGrid = true;
      #                }
      #
      #                if(refreshGrid && restorePos.RecId == 0)
      #                {
      #                    restorePos = SysSecEntryPointTmp.data();
      #                }
      #
      #                tmpData.ObjectKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(tmpData);
      #
      #                if(tmpData.ObjectType == SecurableType::ServiceOperation)
      #                {
      #                    tmpData.ObjectAOTDisplayName = strFmt('%1.%2', tmpData.ObjectAOTName, tmpData.ObjectAOTChildName);
      #                }
      #                else
      #                {
      #                    tmpData.ObjectAOTDisplayName = tmpData.ObjectAOTName;
      #                }
      #
      #                tmpData.insert();
      #                addedEntryPoints.insert(entryPointKey, '');
      #            }
      #        }
      #    }
      #
      #    void ProcessTree(int _rootItemIdxLevel)
      #    {
      #        TreeItemIdx treeItemIdx, firstChildIdx;
      #        FormTreeItem treeItem;
      #
      #        treeItemIdx = _rootItemIdxLevel;
      #        while(treeItemIdx)
      #        {
      #            treeItem = MenuTree.getItem(treeItemIdx);
      #            objectUnder = treeItem.data();
      #            if(objectUnder)
      #            {
      #                if(objectUnder is TreeNode)
      #                {
      #                    nodeUnder = objectUnder as TreeNode;
      #                    if(nodeUnder)
      #                    {
      #                        AddNode(treeItem, nodeUnder);
      #                    }
      #                }
      #                else
      #                {
      #                    sysSecObjUnder = objectUnder as SysSecSecurableObject;
      #                    sysSecObjUnder = element.GetLinkedWebMenuItem(treeItem);
      #                    if(sysSecObjUnder)
      #                    {
      #                        AddNode(treeItem, null, sysSecObjUnder);
      #                    }
      #                }
      #            }
      #
      #            firstChildIdx = MenuTree.getChild(treeItemIdx);
      #            if (firstChildIdx)
      #            {
      #                ProcessTree(firstChildIdx);
      #            }
      #            treeItemIdx = MenuTree.getNextSibling(treeItemIdx);
      #        }
      #    }
      #
      #    idx = MenuTree.getSelection();
      #    if (!idx)
      #    {
      #        return tmpData;
      #    }
      #
      #    itemUnder = MenuTree.getItem(idx);
      #    if (!itemUnder)
      #    {
      #        return tmpData;
      #    }
      #
      #    objectUnder = itemUnder.data();
      #    if(!objectUnder)
      #    {
      #        return tmpData;
      #    }
      #
      #    if(objectUnder is TreeNode)
      #    {
      #        nodeUnder = objectUnder as TreeNode;
      #        if (!nodeUnder)
      #        {
      #            return tmpData;
      #        }
      #
      #        AddNode(itemUnder, nodeUnder);
      #        ProcessTree(MenuTree.getChild(idx));
      #    }
      #    else
      #    {
      #        sysSecObjUnder = objectUnder as SysSecSecurableObject;
      #        sysSecObjUnder = element.GetLinkedWebMenuItem(itemUnder);
      #
      #        if(sysSecObjUnder)
      #        {
      #            AddNode(itemUnder, null, sysSecObjUnder);
      #            ProcessTree(MenuTree.getChild(idx));
      #        }
      #    }
      #
      #    if(refreshGrid)
      #    {
      #        SysSecEntryPointTmp_ds.research(true);
      #        SysSecEntryPointTmp_ds.findRecord(restorePos);
      #        SysSecEntryPointTmp_ds.setCurrent();
      #    }
      #
      #    return tmpData;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysContextMenu sysContextMenu;
      #
      #    imageListAppl_AOT = new ImageListAppl_Aot();
      #    imageList_access = new ImageListAppl_SecurityAccess();
      #
      #    accessImages[1+AccessRight::NoAccess]   = imageList_access.image(#ImageNoAccess);
      #    accessImages[1+AccessRight::View]       = imageList_access.image(#ImageView);
      #    accessImages[1+AccessRight::Edit]       = imageList_access.image(#ImageEdit);
      #    accessImages[1+AccessRight::Add]        = imageList_access.image(#ImageAdd);
      #    accessImages[1+AccessRight::Correction] = imageList_access.image(#ImageSecuritykey);
      #    accessImages[1+AccessRight::Delete]     = imageList_access.image(#ImageFullControl);
      #
      #    isRecording = false;
      #    skipRun = false;
      #    newUserRole = 0;
      #    curUserRoleDisabled = false;
      #    labelsLoaded = false;
      #    prevRecordingFilePath = '';
      #    prevEPTraceFilePath = '';
      #    recordingGridFilter = false;
      #
      #    super();
      #
      #    if (SysContextMenu::startedFrom(this.args()))
      #    {
      #        sysContextMenu = this.args().parmObject();
      #        securityNode = sysContextMenu.first();
      #
      #        if(securityNode &&
      #            !(strStartsWith(securityNode.treeNodePath(), #SecRolesPath + '\\') ||
      #                strStartsWith(securityNode.treeNodePath(), #SecDutiesPath + '\\') ||
      #                strStartsWith(securityNode.treeNodePath(), #SecPrivilegesPath + '\\')))
      #        {
      #            warning(strFmt("@SDT77"));
      #            skipRun = true;
      #            element.close();
      #            return;
      #        }
      #    }
      #
      #    _formSplitterX = new SysFormSplitter_X(XSplitter, MenuTree, this);
      #    _formSplitterY = new SysFormSplitter_Y(YSplitter, EntryPointsGrid, this);
      #    EntryPointReferenceTree.setImagelist(imageListAppl_AOT.imageList());
      #    EntryPointReferenceTree.setStateImagelist(imageList_access.imageList());
      #
      #    //Developers can only have form active once
      #    if(isDeveloper())
      #    {
      #        if(!SysSecEntryPointManager::IsInSingleClientSessionMode())
      #        {
      #            skipRun = true;
      #            error(strFmt("@SDT78"));
      #            element.close();
      #            return;
      #        }
      #
      #        //Add pointer to form in global object cache
      #        if(infolog.globalCache().isSet(curUserId() + 'SecEntryPointForm', #SecEntryPointFormKey))
      #        {
      #            skipRun = true;
      #            error(strFmt("@SDT79"));
      #            element.close();
      #            return;
      #        }
      #        else
      #        {
      #            infolog.globalCache().set(curUserId() + #SecEntryPointFormKey, #SecEntryPointFormKey, element);
      #        }
      #    }
      #    else
      #    {
      #        TestWorkSpace.enabled(false);
      #        TestWorkSpace.visible(false);
      #        ObjectType.enabled(false);
      #        ObjectType.visible(false);
      #        SettingsGroup.visible(false);
      #        CurrentObject.label(strFmt("@SDT80"));
      #        TraceButtonGroup.visible(false);
      #        TraceFileGroup.visible(false);
      #        AdminUIButtonGroup.visible(true);
      #        OpenRoleInNewWindow.enabled(false);
      #        YSplitter.visible(true);
      #        EntryPointReferenceGroup.visible(true);
      #    }
      #}
    ENDSOURCE
    SOURCE #InitControls
      #public void InitControls()
      #{
      #    //Initialize controls
      #    FilterOnPermissionChanges.visible(false);
      #    FilterOnPermissionChanges.value(0);
      #    EntryPointsGrid_OldAccessRight.visible(false);
      #}
    ENDSOURCE
    SOURCE #initUI
      #public void initUI()
      #{
      #    SecurityRole role;
      #    SecurityTask task;
      #    str objectLabel;
      #
      #    if(skipRun)
      #        return;
      #
      #    element.LoadMetaData();
      #
      #    if(securityNode != null)
      #    {
      #        if(strStartsWith(securityNode.treeNodePath(), #SecRolesPath))
      #        {
      #            ObjectType.selection(SysSecDevelopmentType::Role);
      #            select firstOnly Name from role where role.AotName == securityNode.AOTname();
      #            objectLabel = role.Name;
      #        }
      #        else if(strStartsWith(securityNode.treeNodePath(), #SecDutiesPath))
      #        {
      #            ObjectType.selection(SysSecDevelopmentType::Duty);
      #            select firstOnly Name from task where task.AotName == securityNode.AOTname() &&
      #                                                task.Type == SecurityTaskType::Duty;
      #            objectLabel = task.Name;
      #        }
      #        else
      #        {
      #            ObjectType.selection(SysSecDevelopmentType::Privilege);
      #            select firstOnly Name from task where task.AotName == securityNode.AOTname() &&
      #                                                task.Type == SecurityTaskType::Privilege;
      #            objectLabel = task.Name;
      #        }
      #        ObjectType.modified();
      #        CurrentObject.text(objectLabel);
      #        this.SelectObject();
      #    }
      #    else
      #    {
      #        SysSecEntryPointTmp_ds.executeQuery();
      #    }
      #}
    ENDSOURCE
    SOURCE #IsLayerModelInfoLoaded
      #public boolean IsLayerModelInfoLoaded()
      #{
      #    return layerModelLoaded;
      #}
    ENDSOURCE
    SOURCE #IsLicenseInfoLoaded
      #public boolean IsLicenseInfoLoaded()
      #{
      #    return licenseInfoLoaded;
      #}
    ENDSOURCE
    SOURCE #launch
      #public boolean launch(FormTreeItem _item)
      #{
      #    Menu         nodeParent;
      #    Object       objectUnder;
      #    TreeNode menuItemNode;
      #
      #    if ( !_item)
      #    {
      #        return false;
      #    }
      #
      #    objectUnder = _item.data();
      #    if(objectUnder is TreeNode)
      #    {
      #        nodeParent = objectUnder as TreeNode;
      #        if (!nodeParent)
      #        {
      #            return false;
      #        }
      #
      #        if (nodeParent.handle() == classnum(Menu))
      #        {
      #            return false;
      #        }
      #
      #        if(!isDeveloper())
      #            return false;
      #
      #        menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeParent);
      #        if(menuItemNode)
      #        {
      #            menuItemNode.AOTrun();
      #        }
      #    }
      #
      #    return true;
      #
      #}
    ENDSOURCE
    SOURCE #LoadAdditionalMetadata
      #public void LoadAdditionalMetadata()
      #{
      #    SysOperationProgress    progress;
      #    SecurableType curType = -1;
      #    TreeNode entryPointNode;
      #    AccessRight entryPointRight;
      #    str itemConfigurationKey;
      #    UserLicenseType maxLicenseType = UserLicenseType::None;
      #
      #    void updateUI()
      #    {
      #        SysSecEntryPointTmp_ds.research();
      #        SysSecEntryPointTmp_ds.refreshEx(-1);
      #        EntryPointsGrid.visible(true);
      #        infolog.endLengthyOperation();
      #    }
      #
      #    infolog.startLengthyOperation();
      #    EntryPointsGrid.visible(false);
      #
      #    try
      #    {
      #        select count(RecId) from SysSecEntryPointTmp;
      #
      #        progress = SysOperationProgress::newGeneral(#aviupdate, strFmt("@SDT81"), SysSecEntryPointTmp.RecId);
      #        progress.update(true);
      #        progress.updateInterval(1);
      #
      #        while select forUpdate SysSecEntryPointTmp
      #            order by SysSecEntryPointTmp.ObjectType
      #        {
      #            if(curType != SysSecEntryPointTmp.ObjectType)
      #            {
      #                curType = SysSecEntryPointTmp.ObjectType;
      #                progress.setText(strfmt("@SDT82", curType));
      #            }
      #
      #            entryPointNode = SysSecEntryPointManager::GetNodeForSecurableType(SysSecEntryPointTmp.ObjectType,
      #                SysSecEntryPointTmp.ObjectAOTName, SysSecEntryPointTmp.ObjectAOTChildName);
      #
      #            if(entryPointNode != null)
      #            {
      #                if(SysSecEntryPointTmp.ObjectType != SecurableType::ServiceOperation)
      #                {
      #                    //Update license info
      #                    SysSecEntryPointTmp.ViewUserLicense = symbol2Enum(enumNum(UserLicenseType), entryPointNode.AOTgetProperty('ViewUserLicense'));
      #                    SysSecEntryPointTmp.MaintainUserLicense = symbol2Enum(enumNum(UserLicenseType), entryPointNode.AOTgetProperty('MaintainUserLicense'));
      #                    SysSecEntryPointTmp.UserLicenseApplies = NoYes::No;
      #
      #                    itemConfigurationKey = entryPointNode.AOTgetProperty(#PropertyConfigurationKey);
      #                    if(!itemConfigurationKey || isConfigurationkeyEnabled(configurationKeyName2Id(itemConfigurationKey)))
      #                    {
      #                        SysSecEntryPointTmp.UserLicenseApplies = NoYes::Yes;
      #                        if(accessrightsMap != null && accessRightsMap.exists(SysSecEntryPointTmp.ObjectKey))
      #                        {
      #                            entryPointRight = accessRightsMap.lookup(SysSecEntryPointTmp.ObjectKey);
      #                            if(entryPointRight > AccessRight::View)
      #                            {
      #                                SysSecEntryPointTmp.EffectiveUserLicense = SysSecEntryPointTmp.MaintainUserLicense;
      #                            }
      #                            else if(entryPointRight == AccessRight::View)
      #                            {
      #                                SysSecEntryPointTmp.EffectiveUserLicense = SysSecEntryPointTmp.ViewUserLicense;
      #                            }
      #
      #                            if(SysSecEntryPointTmp.EffectiveUserLicense > maxLicenseType)
      #                            {
      #                                maxLicenseType = SysSecEntryPointTmp.EffectiveUserLicense;
      #                            }
      #                        }
      #                    }
      #
      #                    //Update label
      #                    SysSecEntryPointTmp.ObjectLabel = SysLabel::labelId2String2(entryPointNode.AOTgetProperty(#PropertyLabel));
      #
      #                    //Update layer/model information
      #                    if(SysSecEntryPointTmp.ObjectType == SecurableType::ServiceOperation)
      #                    {
      #                        //For service operations are not stored granular so display service layer/model
      #                        SysSecEntryPointTmp.ObjectAOTLayer = entryPointNode.AOTparent().AOTparent().AOTLayer();
      #                        SysSecEntryPointTmp.ObjectAOTModel = SysModelStore::displayName(entryPointNode.AOTparent().AOTparent().AOTGetModel());
      #                    }
      #                    else
      #                    {
      #                        SysSecEntryPointTmp.ObjectAOTLayer = entryPointNode.AOTLayer();
      #                        SysSecEntryPointTmp.ObjectAOTModel = SysModelStore::displayName(entryPointNode.AOTGetModel());
      #                    }
      #
      #                    SysSecEntryPointTmp.update();
      #                }
      #            }
      #
      #            progress.incCount();
      #        }
      #        licenseInfoLoaded = true;
      #        CurObjectLicenseType.selection(maxLicenseType);
      #        CurObjectLicenseType.visible(true);
      #        EntryPointsGrid_UserLicenseApplies.visible(true);
      #        EntryPointsGrid_EffectiveUserLicense.visible(true);
      #
      #        labelsLoaded = true;
      #        EntryPointsGrid_ObjectLabel.visible(true);
      #
      #        layerModelLoaded = true;
      #        EntryPointsGrid_ObjectAOTLayer.visible(true);
      #        EntryPointsGrid_ObjectAOTModel.visible(true);
      #    }
      #    catch
      #    {
      #        updateUI();
      #        throw Exception::Error;
      #    }
      #    updateUI();
      #}
    ENDSOURCE
    SOURCE #LoadEntryPointPermissions
      #public boolean LoadEntryPointPermissions(boolean _isLoadingNewObject)
      #{
      #    AccessRight accessRightVar, parentRight;
      #
      #    str typeKey;
      #    SecurableName securableName;
      #    SecurableChildName securableChildName;
      #    int j, k;
      #    SysSecEntryPointKey objectKey;
      #    container treeReferences;
      #    container menuParents;
      #    str menuPath, parentMenuPath;
      #    boolean foundNewRight = false;
      #    str servicePath;
      #    MapIterator mapIterator;
      #    container entryPointCon;
      #    container entryPointPermissions;
      #    int i;
      #
      #    accessRightsMap = new Map(Types::String, Types::Enum);
      #    if(currentRoleAOTName == '')
      #    {
      #        return true;
      #    }
      #
      #    entryPointPermissions = SysSecEntryPointManager::GetEntryPointPermissionsForRole(currentRoleID);
      #    for(i = 1; i <= conLen(entryPointPermissions); i = i+2)
      #    {
      #        objectKey = conPeek(entryPointPermissions, i);
      #
      #        entryPointCon = str2con(objectKey, '.');
      #        typeKey = conPeek(entryPointCon, 1);
      #        securableName = conPeek(entryPointCon, 2);
      #        securableChildName = '';
      #        if(conLen(entryPointCon) == 3)
      #        {
      #            securableChildName = conPeek(entryPointCon, 3);
      #        }
      #
      #        accessRightVar = conPeek(entryPointPermissions, i+1);
      #        accessRightsMap.insert(objectKey, accessRightVar);
      #
      #        //Update list view
      #        if(oldAccessRightsMap != null && oldAccessRightsMap.exists(objectKey))
      #        {
      #            if(accessRightVar != oldAccessRightsMap.lookup(objectKey))
      #            {
      #                foundNewRight = true;
      #            }
      #        }
      #        else
      #        {
      #            foundNewRight = true;
      #        }
      #
      #        update_recordSet SysSecEntryPointTmp setting OldAccessRight = SysSecEntryPointTmp.AccessRight, accessRight = accessRightVar
      #            where SysSecEntryPointTmp.ObjectKey == objectKey;
      #
      #        //Build the in memory access tree when loading a new object
      #        if(_isLoadingNewObject && typeKey == #EntryPointObjectKeyServiceOperation)
      #        {
      #            curAccessTree.insert(strFmt(#ServiceOperationPath,securableName, securableChildName), accessRightVar);
      #            servicePath = strFmt(#ServicePath,securableName);
      #
      #            parentRight = accessRight::NoAccess;
      #            if(curAccessTree.exists(servicePath))
      #            {
      #                parentRight = curAccessTree.lookup(servicePath);
      #            }
      #            if(parentRight < accessRightVar)
      #            {
      #                curAccessTree.remove(servicePath);
      #                curAccessTree.insert(servicePath, accessRightVar);
      #            }
      #        }
      #        else if(_isLoadingNewObject && menuItemTreeReferences.exists(objectKey))
      #        {
      #            treeReferences = menuItemTreeReferences.lookup(objectKey);
      #            for(j = 1; j <= conLen(treeReferences); j++)
      #            {
      #                menuPath = conPeek(treeReferences, j);
      #
      #                if(curAccessTree != null && curAccessTree.exists(menuPath))
      #                {
      #                    curAccessTree.remove(menuPath);
      #                    curAccessTree.insert(menuPath, accessRightVar);
      #
      #                    if(treeParents.exists(menuPath))
      #                    {
      #                        menuParents = treeParents.lookup(menuPath);
      #                    }
      #                    else
      #                    {
      #                        menuParents = conNull();
      #                    }
      #
      #                    //Update the parents
      #                    for(k = 1; k <= conLen(menuParents); k++)
      #                    {
      #                        parentMenuPath = conPeek(menuParents, k);
      #
      #                        if(curAccessTree.exists(parentMenuPath))
      #                        {
      #                            parentRight = curAccessTree.lookup(parentMenuPath);
      #                            if(parentRight < accessRightVar)
      #                            {
      #                                curAccessTree.remove(parentMenuPath);
      #                                curAccessTree.insert(parentMenuPath, accessRightVar);
      #                            }
      #                        }
      #                    }
      #                }
      #            }
      #        }
      #    }
      #
      #    //Update permissions that no longer exist and so are now NoAccess
      #    if(oldAccessRightsMap != null)
      #    {
      #        mapIterator = new MapIterator(oldAccessRightsMap);
      #
      #        while(mapIterator.more())
      #        {
      #            if(!accessRightsMap.exists(mapIterator.key()))
      #            {
      #                foundNewRight = true;
      #                //Update list view
      #                select forUpdate AccessRight from SysSecEntryPointTmp
      #                    where SysSecEntryPointTmp.ObjectKey == mapIterator.key();
      #
      #                SysSecEntryPointTmp.OldAccessRight = SysSecEntryPointTmp.AccessRight;
      #                SysSecEntryPointTmp.AccessRight = accessRight::NoAccess;
      #                SysSecEntryPointTmp.update();
      #            }
      #            mapIterator.next();
      #        }
      #    }
      #
      #    if(!_isLoadingNewObject && foundNewRight)
      #    {
      #        //Rebuild the in memory access tree to handle incremental changes
      #        element.ReBuildInMemoryAccessTree();
      #    }
      #
      #    return foundNewRight;
      #}
    ENDSOURCE
    SOURCE #LoadMetaData
      #public void LoadMetaData()
      #{
      #    List                    list = new List( Types::Class);
      #    #resAppl
      #    #Admin
      #    selectableDataArea      thisCompany = curext();
      #    SysOperationProgress    progress;
      #    Menu                    node;
      #    Label                   label = new Label();
      #
      #    infolog.startLengthyOperation();
      #    progress = SysOperationProgress::newGeneral(#aviupdate, strFmt("@SDT83"), 2);
      #    progress.updateInterval(0);
      #
      #    //Prepare tree
      #    MenuTree.setImagelist(imageListAppl_AOT.imageList());
      #    MenuTree.setStateImagelist(imageList_access.imageList());
      #    element.InitControls();
      #
      #    //Load and calculate permissions
      #    progress.setText(strfmt("@SDT84"));
      #    element.LoadSystemUserPermissions();
      #    SysSecEntryPointTmp.setTmpData(element.PopulateEntryPoints());
      #    curAccessTree = null;
      #    progress.incCount();
      #    progress.setText(strFmt("@SDT85"));
      #
      #    element.BuildMetaDataCaches();
      #
      #    //Initialize main menu tree
      #    node = TreeNode::findNode(strFmt('%1\\%2', #MenusPath, #MainMenu));
      #    richClientRootItemIdx = SysFormTreeControl::addTreeItem(MenuTree, "@SYS322952",
      #        FormTreeAdd::Root, node, imageListAppl_AOT.image(node.AOTbitmapId()), node.AOTchildNodeCount());
      #    MenuTree.expand(richClientRootItemIdx);
      #
      #    //Use sec admin UI code for EP tree
      #    node = TreeNode::findNode(strFmt('%1', #WebPath));
      #    webRootItemIdx = SysFormTreeControl::addTreeItem(MenuTree, "@SYS322953",
      #        FormTreeAdd::Root, node, imageListAppl_AOT.image(node.AOTbitmapId()), node.AOTchildNodeCount());
      #
      #    //Initialize services tree
      #    node = TreeNode::findNode(strFmt('%1', #ServicesPath));
      #    servicesRootItemIdx = SysFormTreeControl::addTreeItem(MenuTree, "@SYS322954",
      #        FormTreeAdd::Root, node, imageListAppl_AOT.image(node.AOTbitmapId()), node.AOTchildNodeCount());
      #
      #    infolog.endLengthyOperation();
      #}
    ENDSOURCE
    SOURCE #LoadPermissions
      #public void LoadPermissions()
      #{
      #    this.SetPermissions(true);
      #}
    ENDSOURCE
    SOURCE #LoadRecording
      #public void LoadRecording()
      #{
      #    #File
      #    str fileName;
      #    XmlDocument doc;
      #    XmlElement list, entryPointElement;
      #    SecurableType entryPointType;
      #    SecurableName securableName;
      #    SecurableChildName securableChildName;
      #    SysSecEntryPointKey entryPointKey;
      #
      #    void resetUI()
      #    {
      #        EntryPointsGrid.visible(true);
      #        infolog.endLengthyOperation();
      #        element.unLock();
      #    }
      #
      #    element.CheckRecordingIsDirty();
      #
      #    fileName = WinAPI::getOpenFileName(element.hWnd(),["@SDT86", #AllFilesName + #xml],
      #                prevRecordingFilePath, strFmt("@SDT87"), '', '', 0);
      #    if (fileName != '')
      #    {
      #        prevRecordingFilePath = System.IO.Path::GetDirectoryName(fileName);
      #
      #        doc = SysImportExportHelper::importXMLFromFile(fileName);
      #        if(doc == null)
      #        {
      #            throw error(strFmt("@SDT88"));
      #        }
      #        list = doc.getNamedElement(#RecordingFileXmlRoot);
      #        if(list == null)
      #        {
      #            throw error(strFmt("@SDT88"));
      #        }
      #
      #        //Clear existing recorded objects
      #        element.lock();
      #        infolog.startLengthyOperation();
      #        EntryPointsGrid.visible(false);
      #
      #        try
      #        {
      #            update_recordSet SysSecEntryPointTmp setting Recorded = NoYes::No;
      #            entryPointElement = list.firstChild();
      #            while(entryPointElement)
      #            {
      #                entryPointType = symbol2Enum(enumnum(SecurableType),
      #                                    entryPointElement.getAttribute(#RecordingFileXmlElementTypeAttribute));
      #                securableName = entryPointElement.getAttribute(#RecordingFileXmlElementAOTNameAttribute);
      #                securableChildName = entryPointElement.getAttribute(#RecordingFileXmlElementOperationAttribute);
      #
      #                entryPointKey = strFmt('%1.%2.%3', SysSecEntryPointManager::GetTypeKeyForSecurableType(entryPointType),
      #                        strLwr(securableName), strLwr(securableChildName));
      #
      #                select forUpdate SysSecEntryPointTmp where SysSecEntryPointTmp.ObjectKey == entryPointKey;
      #                SysSecEntryPointTmp.Recorded = NoYes::Yes;
      #                SysSecEntryPointTmp.update();
      #
      #                entryPointElement = entryPointElement.nextSibling();
      #            }
      #            element.AddFilterOnRecordedObjects();
      #            SysSecEntryPointTmp_ds.executeQuery();
      #        }
      #        catch
      #        {
      #            resetUI();
      #            throw Exception::Error;
      #        }
      #        resetUI();
      #    }
      #}
    ENDSOURCE
    SOURCE #LoadSystemUserPermissions
      #public void LoadSystemUserPermissions()
      #{
      #    SecurityRole systemUserRole;
      #    container permissionsContainer, permission;
      #    int i;
      #    SecurableType type;
      #    str typeKey, securableName, securableChildName, objectKey;
      #    AccessRight accessRight;
      #
      #    systemUserAccessRightsMap = new Map(Types::String, Types::Enum);
      #
      #    select firstOnly RecId from systemUserRole where systemUserRole.AotName == 'SystemUser';
      #    permissionsContainer = SecurityUtil::GetRolePermissions(systemUserRole.RecId);
      #
      #    for (i = 1; i <= conLen(permissionsContainer); i++)
      #    {
      #        permission = conPeek(permissionsContainer, i);
      #        type = conPeek(permission,2);
      #        typeKey = SysSecEntryPointManager::GetTypeKeyForSecurableType(type);
      #        securableName = conPeek(permission,1);
      #        securableChildName = conPeek(permission,3);
      #        accessRight = conPeek(permission,4);
      #        objectKey = strFmt('%1.%2.%3', typeKey, strLwr(securableName), strLwr(securableChildName));
      #        systemUserAccessRightsMap.insert(objectKey, accessRight);
      #    }
      #}
    ENDSOURCE
    SOURCE #MapDutyOrPrivilegeToRole
      #public void MapDutyOrPrivilegeToRole()
      #{
      #    TreeNode devRole = SysSecEntryPointManager::FindOrCreateUniqueRoleForCurrentUser();
      #    SecurityRole securityRole;
      #    TreeNode childNode;
      #    TreeNodeIterator tIterator;
      #    str typeToAdd;
      #    SecurityTask task;
      #
      #    if(!SysSecEntryPointManager::ObjectEditableVCS(devRole))
      #    {
      #        error(strFmt("@SDT89", devRole.AOTname()));
      #        return;
      #    }
      #
      #    //Remove existing duty/privileges
      #    tIterator = devRole.AOTfindChild('Duties').AOTiterator();
      #    childNode = tIterator.next();
      #    while(childNode)
      #    {
      #        childNode.AOTdelete();
      #        childNode = tIterator.next();
      #    }
      #
      #    tIterator = devRole.AOTfindChild('Privileges').AOTiterator();
      #    childNode = tIterator.next();
      #    while(childNode)
      #    {
      #        childNode.AOTdelete();
      #        childNode = tIterator.next();
      #    }
      #
      #    if(CurrentObject.text() != '')
      #    {
      #        //Add duty/privilege
      #        typeToAdd = 'Privileges';
      #        if(element.CurrentDevelopmentType() == SysSecDevelopmentType::Duty)
      #        {
      #            typeToAdd = 'Duties';
      #            select firstOnly AOTName from task where task.Name == CurrentObject.text() && task.Type == SecurityTaskType::Duty;
      #        }
      #        else
      #        {
      #            select firstOnly AOTName from task where task.Name == CurrentObject.text() && task.Type == SecurityTaskType::Privilege;
      #        }
      #
      #        if(task.AotName == '')
      #        {
      #            devRole.AOTrestore();
      #            error(strFmt("@SDT90", element.CurrentDevelopmentType(), currentObject.text()));
      #            return;
      #        }
      #
      #        //Validate object exists
      #        if(TreeNode::findNode(strFmt('%1\\%2', #SecurityPath, typeToAdd)).AOTfindChild(task.AotName) == null)
      #        {
      #            devRole.AOTrestore();
      #            error(strFmt("@SDT91", CurrentObject.text()));
      #            return;
      #        }
      #
      #        currentDevelopmentObject = task.AotName;
      #        currentRoleAOTName = devRole.AOTname();
      #        currentRoleName = devRole.AOTgetProperty(#PropertyLabel);
      #
      #        select RecId from securityRole where securityRole.AotName == currentRoleAOTName;
      #        currentRoleId = securityRole.RecId;
      #
      #        childNode = devRole.AOTfindChild(typeToAdd).AOTadd(task.AotName);
      #        childNode.AOTsetProperty('Name', element.CurrentDevelopmentObject());
      #    }
      #
      #    //Avoid current form loosing focus due to compiler output
      #    WinAPI::enableWindow(infolog.hWnd(), false);
      #    try
      #    {
      #        devRole.AOTsave();
      #    }
      #    catch
      #    {
      #        WinAPI::enableWindow(infolog.hWnd(), true);
      #        throw Exception::Error;
      #    }
      #    WinAPI::enableWindow(infolog.hWnd(), true);
      #}
    ENDSOURCE
    SOURCE #MarkObjectsAsRecorded
      #public void MarkObjectsAsRecorded(List _entryPointkeys)
      #{
      #    ListEnumerator listEnumerator = _entryPointkeys.getEnumerator();
      #    SysSecEntryPointKey curObjectKey;
      #
      #    element.lockWindowUpdate(true);
      #
      #    ttsBegin;
      #    update_recordSet SysSecEntryPointTmp setting Recorded = NoYes::No;
      #    ttsCommit;
      #
      #    while(listEnumerator.moveNext())
      #    {
      #        curObjectKey = listEnumerator.current();
      #
      #        select firstOnly forUpdate SysSecEntryPointTmp where SysSecEntryPointTmp.ObjectKey == curObjectKey;
      #        SysSecEntryPointTmp.Recorded = NoYes::Yes;
      #        SysSecEntryPointTmp.update();
      #    }
      #
      #    element.AddFilterOnRecordedObjects();
      #    SysSecEntryPointTmp_ds.executeQuery();
      #
      #    element.lockWindowUpdate(false);
      #    WinAPI::setFocus(element.hWnd());
      #}
    ENDSOURCE
    SOURCE #OpenRoleWorkSpace
      #public void OpenRoleWorkSpace(str _treeNodeToRun = '')
      #{
      #    SecurityUserRole userRole;
      #    SecurityRole sysAdminRole, systemUserRole;
      #    DialogButton dialogButton;
      #    str warningMessage;
      #    str dialogOwner;
      #    Map inMemOrgs;
      #    MapEnumerator orgsEnumerator;
      #    OMUserRoleOrganization userRoleOrganization;
      #
      #    if(currentRoleAOTName == '')
      #        return;
      #
      #    if(SysSecEntryPointManager::EnvironmentHasADGroups())
      #    {
      #        throw error(strFmt("@SDT92"));
      #    }
      #
      #    if(!isDeveloper())
      #    {
      #        throw error(strFmt("@SDT93"));
      #    }
      #
      #    if(_treeNodeToRun)
      #    {
      #        if(!SysSecEntryPointManager::IsQuickLaunchEnabled())
      #        {
      #            dialogButton = Box::yesNo(strFmt("@SDT94"),
      #                            dialogButton::Yes, strFmt("@SDT46"));
      #
      #            if(dialogButton == DialogButton::No)
      #            {
      #                return;
      #            }
      #
      #            if(!SysSecEntryPointManager::EnableQuickLaunch())
      #            {
      #                return;
      #            }
      #        }
      #    }
      #
      #    select firstOnly Recid from sysAdminRole where sysAdminRole.AotName == '-SYSADMIN-';
      #    select firstOnly RecId from systemUserRole where systemUserRole.AotName == 'SystemUser';
      #
      #    if(!disableSysAdminRoleAssignment)
      #    {
      #        warningMessage = strFmt("@SDT95",
      #                                currentRoleName, "@SYS323369", "@SYS344030");
      #
      #        dialogOwner = 'SecurityWorkspaceWarning';
      #    }
      #    else
      #    {
      #        warningMessage = strFmt("@SDT96",
      #                                currentRoleName, "@SYS323369", "@SYS344030");
      #
      #        select RecId from userRole where userRole.SecurityRole == sysAdminRole.RecId && userRole.User == curUserId();
      #        warningMessage += '\n\n';
      #        warningMessage += strFmt("@SDT97", "@SYS344030");
      #        warningMessage += '\n\t';
      #        warningMessage += strFmt("@SDT98");
      #        warningMessage += '\n\t';
      #        warningMessage += strFmt("@SDT99");
      #        warningMessage += '\n\t';
      #        warningMessage += strFmt("@SDT100", userRole.RecId);
      #
      #        dialogOwner = 'SecurityWorkspaceWarningDisableSysAdmin';
      #    }
      #
      #    dialogButton = Box::yesNoOnce(strFmt("@SDT101"),
      #                            warningMessage, DialogButton::Yes, dialogOwner);
      #
      #    if(dialogButton != DialogButton::Yes)
      #    {
      #        return;
      #    }
      #
      #    //Assign user to current role
      #
      #    //Disable all current role assigments to user except SysAdmin role
      #    ttsBegin;
      #    try
      #    {
      #        while select forUpdate userRole where userRole.User == curUserId() &&
      #                    userRole.SecurityRole != sysAdminRole.RecId &&
      #                    userRole.SecurityRole != currentRoleId &&
      #                    userRole.SecurityRole != systemUserRole.RecId &&
      #                    userRole.AssignmentStatus != RoleAssignmentStatus::Disabled
      #        {
      #            if(disabledUserRolesMap == null)
      #            {
      #                disabledUserRolesMap = new Map(Types::Int64, Types::Int64);
      #            }
      #            disabledUserRolesMap.insert(userRole.RecId, userRole.AssignmentStatus);
      #            userRole.AssignmentStatus = RoleAssignmentStatus::Disabled;
      #            userRole.update();
      #        }
      #
      #        select forUpdate userRole where userRole.User == curUserId() &&
      #                            userRole.SecurityRole == currentRoleID;
      #
      #        if(userRole.RecId == 0)
      #        {
      #            //Assign user to role
      #            userRole.SecurityRole = currentRoleId;
      #            userRole.User = curUserId();
      #            userRole.insert();
      #            newUserRole = userRole.RecId;
      #        }
      #        else
      #        {
      #            //Enable the role assignment if it was disabled
      #            if(userRole.AssignmentStatus == RoleAssignmentStatus::Disabled)
      #            {
      #                userRole.AssignmentStatus = RoleAssignmentStatus::Enabled;
      #                userRole.update();
      #                curUserRoleDisabled = userRole.RecId;
      #            }
      #        }
      #
      #        userRoleOrgRecords = new Map(Types::Int64, Types::Int64);
      #
      #        //Assign organizations
      #        if(infolog.globalCache().isSet(curUserId() + #AssignOMOwnerKey, #AssignOMKey))
      #        {
      #            inMemOrgs = infolog.globalCache().get(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
      #            if(inMemOrgs != null)
      #            {
      #                orgsEnumerator = inMemOrgs.getEnumerator();
      #                while(orgsEnumerator.moveNext())
      #                {
      #                    userRoleOrganization.User = curUserId();
      #                    userRoleOrganization.OMInternalOrganization = orgsEnumerator.currentKey();
      #                    userRoleOrganization.omHierarchyType = orgsEnumerator.currentValue();
      #                    userRoleOrganization.SecurityRole = currentRoleID;
      #                    userRoleOrganization.insert();
      #                    userRoleOrgRecords.insert(userRoleOrganization.RecId, 0);
      #                }
      #
      #                //Synchronize the user role conditions
      #                SysSecurityDynamicRoleAssignment::synchronize(currentRoleID);
      #            }
      #        }
      #    }
      #    catch
      #    {
      #        //If exception thrown transaction will not be commited and aborted so empty caches
      #        disabledUserRolesMap = null;
      #        newUserRole = 0;
      #        curUserRoleDisabled = 0;
      #        throw Exception::Error;
      #    }
      #    ttsCommit;
      #
      #    //Quick launch
      #    if(_treeNodeToRun)
      #    {
      #        if(infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey))
      #        {
      #            infolog.globalCache().remove(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey);
      #        }
      #        infolog.globalCache().set(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey, _treeNodeToRun, false);
      #    }
      #
      #    //Reload permissions on client
      #    SysSecurity::reload(false, false, false, false);
      #
      #    //Switch off sysadmin mode
      #    if(disableSysAdminRoleAssignment)
      #    {
      #        SysSecEntryPointManager::DisableCurrentSysAdminAssignment();
      #    }
      #
      #    SecurityUtil::sysAdminMode(false);
      #    wasFormRunHookEnabled = MarkControlsButtonState.toggleValue();
      #
      #    if(wasFormRunHookEnabled)
      #    {
      #        SysSecEntryPointManager::FormRunHookStatus(false);
      #    }
      #
      #    try
      #    {
      #        curMainWindowHandle = infolog.hWnd();
      #
      #        //Disable current main window
      #        WinAPI::enableWindow(curMainWindowHandle, false);
      #
      #        //Disable current form
      #        WinAPI::enableWindow(element.hWnd(), false);
      #
      #        workSpaceHandle = infolog.createWorkspaceWindow();
      #        element.setTimeOut(identifierStr(WaitForWorkSpaceToClose), 200, true);
      #    }
      #    catch
      #    {
      #        //If any exception occured turn on sysAdmin again
      #        SecurityUtil::sysAdminMode(true);
      #
      #        if(wasFormRunHookEnabled)
      #        {
      #            SysSecEntryPointManager::FormRunHookStatus(true);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #PopulateEntryPoints
      #public SysSecEntryPointTmp PopulateEntryPoints()
      #{
      #    SysSecEntryPointTmp entryPoints;
      #    TreeNode entryPointNode;
      #    str typeKey;
      #    str objectKey;
      #    str labelValue;
      #    container entryPointsCon, entryPointCon;
      #    int i;
      #    boolean isDev = isDeveloper();
      #
      #    entryPointsCon = SysSecEntryPointManager::GetEntryPointsContainer();
      #    ttsBegin;
      #    for(i = 1; i <= conLen(entryPointsCon); i++)
      #    {
      #        entryPoints.clear();
      #        entryPointCon = str2con(conPeek(entryPointsCon, i), '.');
      #
      #        entryPoints.ObjectID = conPeek(entryPointCon, 1);
      #        entryPoints.ObjectType = conPeek(entryPointCon, 2);
      #        entryPoints.ObjectAOTName = conPeek(entryPointCon, 3);
      #        if(conLen(entryPointCon) == 4)
      #        {
      #            entryPoints.ObjectAOTChildName = conPeek(entryPointCon, 4);
      #        }
      #
      #        if(entryPoints.ObjectType == SecurableType::ServiceOperation)
      #        {
      #            entryPoints.ObjectAOTDisplayName = strFmt('%1.%2', entryPoints.ObjectAOTName, entryPoints.ObjectAOTChildName);
      #        }
      #        else
      #        {
      #            entryPoints.ObjectAOTDisplayName = entryPoints.ObjectAOTName;
      #        }
      #
      #        typeKey = SysSecEntryPointManager::GetTypeKeyForSecurableType(entryPoints.ObjectType);
      #        objectKey = strFmt('%1.%2.%3', typeKey, strLwr(entryPoints.ObjectAOTName), strLwr(entryPoints.ObjectAOTChildName));
      #        entryPoints.ObjectKey = objectKey;
      #
      #        if(systemUserAccessRightsMap != null && systemUserAccessRightsMap.exists(objectKey))
      #        {
      #            entryPoints.SystemUserRight = systemUserAccessRightsMap.lookup(objectKey);
      #        }
      #
      #        //Load labels by default for business users
      #        if(!isDev && entryPoints.ObjectType != SecurableType::ServiceOperation)
      #        {
      #            entryPointNode = SysSecEntryPointManager::GetNodeForSecurableType(entryPoints.ObjectType,
      #                entryPoints.ObjectAOTName, entryPoints.ObjectAOTChildName);
      #
      #            if(entryPointNode != null)
      #            {
      #                labelValue = findProperty(entryPointNode.AOTgetProperties(), #PropertyLabel);
      #                entryPoints.ObjectLabel = SysLabel::labelId2String2(labelValue);
      #            }
      #        }
      #
      #        entryPoints.insert();
      #    }
      #
      #    ttsCommit;
      #
      #    if(!isDev)
      #    {
      #        labelsLoaded = true;
      #        EntryPointsGrid_ObjectLabel.visible(true);
      #    }
      #
      #    return entryPoints;
      #}
    ENDSOURCE
    SOURCE #ReBuildInMemoryAccessTree
      #public void ReBuildInMemoryAccessTree()
      #{
      #    #AOT
      #    TreeNode tn;
      #    Map parentsMap;
      #    MapEnumerator mapEnum;
      #    str key;
      #    TreeNodeIterator servicesIterator, operationsIterator;
      #    TreeNode servicesNode, serviceNode, operationNode;
      #    AccessRight right, serviceRight;
      #    boolean serviceHasChildWithNewRight;
      #
      #    AccessRight processMenuNode(TreeNode _menuNode)
      #    {
      #        TreeNode subMenuNode;
      #        TreeNode childNode;
      #        AccessRight curAccessRight = AccessRight::NoAccess;
      #        AccessRight childAccessRight = -1;
      #        AccessRight oldAccessRightTmp;
      #
      #        key = element.GetMenuItemKeyForNode(_menuNode);
      #
      #        curAccessRight = AccessRight::NoAccess;
      #        if(accessRightsMap != null && accessRightsMap.exists(key))
      #        {
      #            curAccessRight = accessRightsMap.lookup(key);
      #        }
      #
      #        childNode = _menuNode.AOTfirstChild();
      #        while (childNode)
      #        {
      #            parentsMap.insert(_menuNode.treeNodePath(), '');
      #            switch (childNode.handle())
      #            {
      #                case classNum(MenuReference):
      #                    subMenuNode = TreeNode::findNode(#MenusPath +'\\' +childNode.AOTname());
      #                    if(subMenuNode != null)
      #                    {
      #                        childAccessRight = processMenuNode(subMenuNode);
      #                    }
      #                    break;
      #
      #                default:
      #                    childAccessRight = processMenuNode(childNode);
      #                    break;
      #            }
      #            parentsMap.remove(_menuNode.treeNodePath());
      #
      #            if(childAccessRight > curAccessRight)
      #            {
      #                curAccessRight = childAccessRight;
      #            }
      #            childNode = childNode.AOTnextSibling();
      #        }
      #
      #        if(oldAccessTree.exists(_menuNode.treeNodePath()))
      #        {
      #            oldAccessRightTmp = oldAccessTree.lookup(_menuNode.treeNodePath());
      #
      #            if(oldAccessRightTmp != curAccessRight)
      #            {
      #                //Need to store the parents so we can indicate them in main menu
      #                mapEnum = parentsMap.getEnumerator();
      #
      #                while(mapEnum.moveNext())
      #                {
      #                    if(!nodeHasChildWithNewAccessTree.exists(mapEnum.currentKey()))
      #                    {
      #                        nodeHasChildWithNewAccessTree.insert(mapEnum.currentKey(), '');
      #                    }
      #                }
      #            }
      #        }
      #
      #        curAccessTree.insert(_menuNode.treeNodePath(), curAccessRight);
      #
      #        return curAccessRight;
      #    }
      #
      #    curAccessTree = new Map(Types::String, Types::Enum);
      #    parentsMap = new Map(Types::String, Types::String);
      #
      #    //Process rich client
      #    tn = TreeNode::findNode(#MenusPath + @'\MainMenu');
      #    processMenuNode(tn);
      #
      #    //Process service operations
      #    servicesNode = TreeNode::findNode(#ServicesPath);
      #    servicesIterator = servicesNode.AOTiterator();
      #    serviceNode = servicesIterator.next();
      #    while(serviceNode != null)
      #    {
      #        serviceRight = AccessRight::NoAccess;
      #        serviceHasChildWithNewRight = false;
      #        operationsIterator = serviceNode.AOTfindChild(#ServiceOperations).AOTiterator();
      #        operationNode = operationsIterator.next();
      #        while(operationNode != null)
      #        {
      #            key = SysSecEntryPointManager::GetKeyForEntryPointNode(operationNode);
      #            right = AccessRight::NoAccess;
      #            if(accessRightsMap != null && accessRightsMap.exists(key))
      #            {
      #                right = accessRightsMap.lookup(key);
      #            }
      #            if(right > serviceRight)
      #            {
      #                serviceRight = right;
      #            }
      #
      #            if(oldAccessTree != null && oldAccessTree.exists(operationNode.treeNodePath()))
      #            {
      #                if(right != oldAccessTree.lookup(operationNode.treeNodePath()))
      #                {
      #                    serviceHasChildWithNewRight = true;
      #                }
      #            }
      #
      #            curAccessTree.insert(operationNode.treeNodePath(), right);
      #            operationNode = operationsIterator.next();
      #        }
      #        curAccessTree.insert(serviceNode.treeNodePath(), serviceRight);
      #        if(serviceHasChildWithNewRight && nodeHasChildWithNewAccessTree != null &&
      #            !nodeHasChildWithNewAccessTree.exists(serviceNode.treeNodePath()))
      #        {
      #            nodeHasChildWithNewAccessTree.insert(serviceNode.treeNodePath(), '');
      #        }
      #
      #        serviceNode = servicesIterator.next();
      #    }
      #}
    ENDSOURCE
    SOURCE #ResetTraceButtons
      #public void ResetTraceButtons()
      #{
      #    SecurityRecorder.enabled(true);
      #    LoadEPtrace.enabled(true);
      #    SwitchBackToEPTraceForm.visible(false);
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    if(SysSecEntryPointManager::IsFormHighlightEnabled() && !SysSecEntryPointManager::SkipDefaultFormRunHook())
      #    {
      #        SysSecEntryPointManager::FormRunHookStatus(true);
      #        MarkControlsButtonState.toggleValue(1);
      #        MarkControlsButtonState.text("@SDT102");
      #    }
      #
      #    if(SysSecEntryPointManager::DisableSysAdminAssignmentSetting())
      #    {
      #        disableSysAdminRoleAssignment = true;
      #        SecurityWorkspaceEPSSRS.toggleValue(1);
      #        SecurityWorkspaceEPSSRS.text("@SDT103");
      #    }
      #    else
      #    {
      #        disableSysAdminRoleAssignment = false;
      #    }
      #
      #    super();
      #
      #    element.setTimeOut(identifierStr(initUI), 0, true);
      #}
    ENDSOURCE
    SOURCE #SaveRecording
      #public void SaveRecording()
      #{
      #    XmlDocument doc;
      #    XmlElement list, entryPointElement;
      #    str fileName;
      #    #File
      #
      #    void updateUI()
      #    {
      #        SysSecEntryPointTmp_ds.research();
      #        element.unlock();
      #        EntryPointsGrid.visible(true);
      #        infolog.endLengthyOperation();
      #    }
      #
      #    EntryPointsGrid.visible(false);
      #    element.lock();
      #
      #    try
      #    {
      #        select count(RecId) from SysSecEntryPointTmp where SysSecEntryPointTmp.Recorded == NoYes::Yes;
      #        if(SysSecEntryPointTmp.RecId == 0)
      #        {
      #            info(strFmt("@SDT104"));
      #        }
      #        else
      #        {
      #            fileName = WinAPI::getSaveFileName(element.hWnd(),["@SDT86", #AllFilesName + #xml],
      #                prevRecordingFilePath, strFmt("@SDT105"), '', '', 0);
      #            if(fileName != '')
      #            {
      #                infolog.startLengthyOperation();
      #                prevRecordingFilePath = System.IO.Path::GetDirectoryName(fileName);
      #                doc = XmlDocument::newBlank();
      #                list = doc.appendChild(doc.createElement(#RecordingFileXmlRoot));
      #                while select SysSecEntryPointTmp where SysSecEntryPointTmp.Recorded == NoYes::Yes
      #                {
      #                    entryPointElement = doc.createElement(#RecordingFileXmlElement);
      #                    entryPointElement.setAttribute(#RecordingFileXmlElementTypeAttribute,
      #                                                enum2Symbol(enumNum(SecurableType), SysSecEntryPointTmp.ObjectType));
      #                    entryPointElement.setAttribute(#RecordingFileXmlElementAOTNameAttribute, SysSecEntryPointTmp.ObjectAOTName);
      #                    if(SysSecEntryPointTmp.ObjectAOTChildName != '')
      #                    {
      #                        entryPointElement.setAttribute(#RecordingFileXmlElementOperationAttribute,
      #                                                    SysSecEntryPointTmp.ObjectAOTChildName);
      #                    }
      #                    list.appendChild(entryPointElement);
      #                }
      #                doc.save(fileName);
      #                recordingIsDirty = false;
      #            }
      #        }
      #    }
      #    catch
      #    {
      #        updateUI();
      #        throw Exception::Error;
      #    }
      #    updateUI();
      #}
    ENDSOURCE
    SOURCE #SelectObject
      #public void SelectObject()
      #{
      #    boolean needToUpdateRoleMapping = false;
      #    SecurityRole role;
      #    str prevDevelopmentObject = currentDevelopmentObject;
      #
      #    currentDevelopmentType = ObjectType.selection();
      #    currentDevelopmentObject = '';
      #    currentRoleName = '';
      #    currentRoleAOTName = '';
      #
      #    if(currentDevelopmentType != SysSecDevelopmentType::Role)
      #    {
      #        element.MapDutyOrPrivilegeToRole();
      #    }
      #    else
      #    {
      #        if(CurrentObject.text() == strFmt("@SYS344030"))
      #        {
      #            error(strFmt("@SDT106", CurrentObject.text()));
      #        }
      #        else if(CurrentObject.text() != '')
      #        {
      #            //Verify role exists
      #            select firstOnly recid, Name, AOTName from role where role.Name == CurrentObject.text();
      #            if(role.RecId != 0)
      #            {
      #                currentRoleName = role.Name;
      #                currentRoleAOTName = role.AotName;
      #                currentDevelopmentObject = role.AotName;
      #                currentRoleID = role.RecId;
      #            }
      #            else
      #            {
      #                error(strFmt("@SDT107", CurrentObject.text()));
      #            }
      #        }
      #    }
      #
      #    if(currentRoleAOTName == '')
      #    {
      #        TestWorkSpace.enabled(false);
      #        OpenRoleInNewWindow.enabled(false);
      #        ShowReferences.enabled(false);
      #    }
      #    else
      #    {
      #        OpenRoleInNewWindow.enabled(true);
      #        ShowReferences.enabled(true);
      #        if(!isRecording)
      #        {
      #            TestWorkSpace.enabled(true);
      #        }
      #    }
      #
      #    //No need to update permissions when changing type and nothing was selected already
      #    if(currentDevelopmentObject == '' && prevDevelopmentObject == '')
      #    {
      #        return;
      #    }
      #
      #    element.setTimeOut(identifierStr(LoadPermissions), 0, true);
      #}
    ENDSOURCE
    SOURCE #SetPermissions
      #public void SetPermissions(boolean _newObject = false)
      #{
      #    SysOperationProgress    progress;
      #    #AviFiles
      #    MapEnumerator mapEnum;
      #    str progressText = strFmt("@SDT108");
      #
      #    SysSecEntryPointTmp tmpData;
      #    Map selectedRows = new Map(Types::Int64, Types::Record);
      #    MapIterator mapIter;
      #    int c;
      #    SysSecEntryPointTmp curRecord;
      #    boolean foundNewRight;
      #
      #    void resetUI()
      #    {
      #        EntryPointsGrid.visible(true);
      #        infolog.endLengthyOperation();
      #        element.lockWindowUpdate(false);
      #    }
      #
      #    if(richClientRootItemIdx == 0)
      #        return;
      #
      #    infolog.startLengthyOperation();
      #
      #    if(!_newObject)
      #    {
      #        progressText = strFmt("@SDT109");
      #
      #        //Make sure we have link between dev role and duty or privilege
      #        if(element.CurrentDevelopmentType() != SysSecDevelopmentType::Role)
      #        {
      #            currentDevelopmentObject = '';
      #            currentRoleName = '';
      #            currentRoleAOTName = '';
      #            element.MapDutyOrPrivilegeToRole();
      #        }
      #    }
      #
      #    progress = SysOperationProgress::newGeneral(#aviupdate, progressText, 1 + (licenseInfoLoaded ? 1 : 0));
      #    progress.updateInterval(0);
      #    progress.setText(progressText);
      #
      #    EntryPointsGrid.visible(false);
      #
      #    curRecord = SysSecEntryPointTmp.data();
      #    for (tmpData = getFirstSelection(SysSecEntryPointTmp_ds);
      #            tmpData;
      #            tmpData = SysSecEntryPointTmp_ds.getNext())
      #    {
      #        c++;
      #        if(c > 300) //Too many selected rows, drop selection
      #        {
      #            selectedRows = null;
      #            break;
      #        }
      #        selectedRows.insert(tmpData.RecId, tmpData);
      #    }
      #
      #    prevIndicatedItems = newIndicatedItems;
      #    newIndicatedItems = new Map(Types::Int64, Types::Int64);
      #
      #    element.lockWindowUpdate(true);
      #
      #    try
      #    {
      #        if(_newObject || currentRoleAOTName == '')
      #        {
      #            element.InitControls();
      #
      #            curAccessTree = new Map(Types::String, Types::Enum);
      #            mapEnum = treeParents.getEnumerator();
      #            while(mapEnum.moveNext())
      #            {
      #                curAccessTree.insert(mapEnum.currentKey(), AccessRight::NoAccess);
      #            }
      #            oldAccessTree = null;
      #            oldAccessRightsMap = null;
      #
      #            ttsBegin;
      #            update_recordSet SysSecEntryPointTmp
      #                setting AccessRight = AccessRight::NoAccess, OldAccessRight = AccessRight::NoAccess;
      #            ttsCommit;
      #        }
      #        else
      #        {
      #            FilterOnPermissionChanges.visible(true);
      #            EntryPointsGrid_OldAccessRight.visible(true);
      #            oldAccessRightsMap = accessRightsMap;
      #            oldAccessTree = curAccessTree;
      #        }
      #        EntryPointsGrid_AccessRight.visible((currentRoleAOTName != ''));
      #
      #        nodeHasChildWithNewAccessTree = new Map(Types::String, Types::String);
      #        oldAccessTreeDiscoveredNodes = new Map(Types::Int64, Types::Enum);
      #
      #        foundNewRight = element.LoadEntryPointPermissions(_newObject);
      #
      #        element.UpdateAccessRightsInTree(MenuTree.getChild(richClientRootItemIdx), _newObject);
      #        element.UpdateAccessRightsInTree(MenuTree.getChild(webRootItemIdx), _newObject);
      #        element.UpdateAccessRightsInTree(MenuTree.getChild(servicesRootItemIdx), _newObject);
      #
      #        if(_newObject || (!_newObject && foundNewRight))
      #        {
      #            if(licenseInfoLoaded)
      #            {
      #                progress.incCount();
      #                progress.setText(strFmt("@SDT110"));
      #                element.UpdateLicenseTypes();
      #            }
      #        }
      #
      #        SysSecEntryPointTmp_ds.research();
      #        SysSecEntryPointTmp_ds.refreshEx(-1);
      #        SysSecEntryPointTmp_ds.findRecord(curRecord);
      #        SysSecEntryPointTmp_ds.setCurrent();
      #
      #        if(selectedRows)
      #        {
      #            mapIter = new MapIterator(selectedRows);
      #            while(mapIter.more())
      #            {
      #                tmpData = mapIter.value();
      #                SysSecEntryPointTmp_ds.markRecord(tmpData, 1);
      #                mapIter.next();
      #            }
      #        }
      #        progress.incCount();
      #        element.ClearEntryPointReferenceTree();
      #    }
      #    catch
      #    {
      #        resetUI();
      #        throw Exception::Error;
      #    }
      #    resetUI();
      #}
    ENDSOURCE
    SOURCE #StateImage2AccessRight
      #public AccessRight StateImage2AccessRight(int _stateImage)
      #{
      #    switch(_stateImage)
      #    {
      #        case imageList_access.image(#ImageNoAccess):
      #            return AccessRight::NoAccess;
      #        case imageList_access.image(#ImageView):
      #            return AccessRight::View;
      #        case imageList_access.image(#ImageEdit):
      #            return AccessRight::Edit;
      #        case imageList_access.image(#ImageAdd):
      #            return AccessRight::Add;
      #        case imageList_access.image(#ImageSecuritykey):
      #            return AccessRight::Correction;
      #        case imageList_access.image(#ImageFullControl):
      #            return AccessRight::Delete;
      #        default:
      #            return AccessRight::NoAccess;
      #    }
      #
      #    return AccessRight::NoAccess;
      #}
    ENDSOURCE
    SOURCE #task
      #public int task(int _taskId)
      #{
      #    int ret;
      #    int idx;
      #    FormTreeItem item;
      #    #task
      #
      #    ret = super(_taskId);
      #
      #    if ( _taskId == #TaskEnter)
      #    {
      #
      #        if (!MenuTree.getSelectedCount())
      #        {
      #            return ret;
      #        }
      #
      #        idx = MenuTree.getSelection();
      #        if (!idx)
      #        {
      #            return ret;
      #        }
      #
      #        item = MenuTree.getItem(idx);
      #
      #        element.launch(item);
      #
      #    }
      #    return ret;
      #}
    ENDSOURCE
    SOURCE #UndoRoleAssignmentChanges
      #public void UndoRoleAssignmentChanges()
      #{
      #    SecurityUserRole userRole;
      #    MapEnumerator mapEnumerator;
      #    OMUserRoleOrganization userRoleOrganization;
      #
      #    if(newUserRole != 0)
      #    {
      #        ttsBegin;
      #        delete_from userRole where userRole.RecId == newUserRole;
      #        ttsCommit;
      #        newUserRole = 0;
      #    }
      #
      #    if(curUserRoleDisabled != 0)
      #    {
      #        ttsBegin;
      #        update_recordSet userRole setting AssignmentStatus = RoleAssignmentStatus::Disabled
      #            where userRole.RecId == curUserRoleDisabled;
      #        ttsCommit;
      #        curUserRoleDisabled = 0;
      #    }
      #
      #    if(disabledUserRolesMap != null)
      #    {
      #        ttsBegin;
      #        mapEnumerator = disabledUserRolesMap.getEnumerator();
      #
      #        while(mapEnumerator.moveNext())
      #        {
      #            select forUpdate userRole where userRole.RecId == mapEnumerator.currentKey();
      #            userRole.AssignmentStatus = mapEnumerator.currentValue();
      #            userRole.update();
      #        }
      #        ttsCommit;
      #        disabledUserRolesMap = null;
      #    }
      #
      #    if(userRoleOrgRecords != null)
      #    {
      #        ttsBegin;
      #        mapEnumerator = userRoleOrgRecords.getEnumerator();
      #
      #        while(mapEnumerator.moveNext())
      #        {
      #            select forUpdate userRoleOrganization where userRoleOrganization.RecId == mapEnumerator.currentKey();
      #            userRoleOrganization.delete();
      #        }
      #        ttsCommit;
      #        userRoleOrgRecords = null;
      #
      #        if(currentRoleID != 0)
      #        {
      #            //Synchronize the user role conditions
      #            SysSecurityDynamicRoleAssignment::synchronize(currentRoleID);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #UpdateAccessRightsInTree
      #public void UpdateAccessRightsInTree(int _rootItemIdxLevel, boolean _isLoadingNewObject)
      #{
      #    FormTreeItem formTreeItem;
      #    TreeItemIdx treeItemIdx, firstChildIdx;
      #    Object objectUnder;
      #    TreeNode nodeUnder;
      #    AccessRight oldRight;
      #    AccessRight newRight;
      #    str key;
      #    SysSecEntryPointKey entryPointKey;
      #
      #    treeItemIdx = _rootItemIdxLevel;
      #    while(treeItemIdx)
      #    {
      #        formTreeItem = MenuTree.getItem(treeItemIdx);
      #        formTreeItem.stateBold(false);
      #        objectUnder = formTreeItem.data();
      #
      #        if(objectUnder is SysSecSecurableObject)
      #        {
      #            entryPointKey = element.GetEntryPointKeyForSysSecTreeItem(formTreeItem);
      #            if(currentDevelopmentObject != '' && entryPointKey != '')
      #            {
      #                if(accessRightsMap != null)
      #                {
      #                    if(accessRightsMap.exists(entryPointKey))
      #                    {
      #                        if(!_isLoadingNewObject)
      #                        {
      #                            oldRight = element.StateImage2AccessRight(formTreeItem.stateImage());
      #                        }
      #                        formTreeItem.stateImage(accessImages[1+ accessRightsMap.lookup(entryPointKey)]);
      #                        if(!_isLoadingNewObject && accessRightsMap.lookup(entryPointKey) != oldRight)
      #                        {
      #                            formTreeItem.stateBold(true);
      #                        }
      #                    }
      #                    else
      #                    {
      #                        formTreeItem.stateImage(accessImages[1+ AccessRight::NoAccess]);
      #                    }
      #                }
      #            }
      #            else
      #            {
      #                formTreeItem.stateImage(0);
      #            }
      #        }
      #        else
      #        {
      #            nodeUnder = objectUnder as TreeNode;
      #            //Check if we need to remove *
      #            if(prevIndicatedItems != null && prevIndicatedItems.exists(formTreeItem.idx()))
      #            {
      #                // BP Deviation documented
      #                formTreeItem.text(subStr(formTreeItem.text(), 0, strLen(formTreeItem.text())-1));
      #            }
      #
      #            newRight = AccessRight::NoAccess;
      #            if(curAccessTree != null && curAccessTree.exists(nodeUnder.treeNodePath()))
      #            {
      #                newRight = curAccessTree.lookup(nodeUnder.treeNodePath());
      #                if(oldAccessTree != null && oldAccessTree.exists(nodeUnder.treeNodePath()))
      #                {
      #                    oldRight = oldAccessTree.lookup(nodeUnder.treeNodePath());
      #
      #                    if(oldRight != newRight)
      #                    {
      #                        formTreeItem.stateBold(true);
      #                    }
      #                    else
      #                    {
      #                        //Check that any child permission has changed
      #                        if(nodeHasChildWithNewAccessTree != null && nodeHasChildWithNewAccessTree.exists(nodeUnder.treeNodePath()))
      #                        {
      #                            // BP Deviation documented
      #                            formTreeItem.text(formTreeItem.text() + '*');
      #                            newIndicatedItems.insert(formTreeItem.idx(), 0);
      #                        }
      #                    }
      #                }
      #            }
      #            else
      #            {
      #                key = element.GetMenuItemKeyForNode(nodeUnder);
      #                if(accessRightsMap.exists(key))
      #                {
      #                    newRight = accessRightsMap.lookup(key);
      #                }
      #
      #                if(!_isLoadingNewObject)
      #                {
      #                    oldRight = this.StateImage2AccessRight(formTreeItem.stateImage());
      #
      #                    if(newRight != oldRight)
      #                    {
      #                        formTreeItem.stateBold(true);
      #                    }
      #                    oldAccessTreeDiscoveredNodes.insert(formTreeItem.idx(), oldRight);
      #                }
      #            }
      #            if(currentDevelopmentObject == '')
      #            {
      #                formTreeItem.stateImage(0);
      #            }
      #            else
      #            {
      #                formTreeItem.stateImage(accessImages[1+newRight]);
      #            }
      #        }
      #
      #        MenuTree.setItem(formTreeItem);
      #        firstChildIdx = MenuTree.getChild(treeItemIdx);
      #        if (firstChildIdx)
      #        {
      #            element.UpdateAccessRightsInTree(firstChildIdx, _isLoadingNewObject);
      #        }
      #        treeItemIdx = MenuTree.getNextSibling(treeItemIdx);
      #    }
      #}
    ENDSOURCE
    SOURCE #UpdateLicenseTypes
      #public void UpdateLicenseTypes()
      #{
      #    UserLicenseType maxLicenseType;
      #    AccessRight entryPointRight;
      #
      #    if(licenseInfoLoaded)
      #    {
      #        ttsBegin;
      #        update_recordSet SysSecEntryPointTmp
      #            setting EffectiveUserLicense = UserLicenseType::None
      #            where SysSecEntryPointTmp.UserLicenseApplies == NoYes::Yes;
      #
      #        while select forUpdate SysSecEntryPointTmp
      #            where SysSecEntryPointTmp.UserLicenseApplies == NoYes::Yes
      #        {
      #            if(accessrightsMap != null && accessRightsMap.exists(SysSecEntryPointTmp.ObjectKey))
      #            {
      #                entryPointRight = accessRightsMap.lookup(SysSecEntryPointTmp.ObjectKey);
      #                if(entryPointRight > AccessRight::View)
      #                {
      #                    SysSecEntryPointTmp.EffectiveUserLicense = SysSecEntryPointTmp.MaintainUserLicense;
      #                    SysSecEntryPointTmp.update();
      #                }
      #                else if(entryPointRight == AccessRight::View)
      #                {
      #                    SysSecEntryPointTmp.EffectiveUserLicense = SysSecEntryPointTmp.ViewUserLicense;
      #                    SysSecEntryPointTmp.update();
      #                }
      #
      #                if(SysSecEntryPointTmp.EffectiveUserLicense > maxLicenseType)
      #                {
      #                    maxLicenseType = SysSecEntryPointTmp.EffectiveUserLicense;
      #                }
      #            }
      #        }
      #        ttsCommit;
      #
      #        CurObjectLicenseType.selection(maxLicenseType);
      #    }
      #}
    ENDSOURCE
    SOURCE #WaitForWorkSpaceToClose
      #public void WaitForWorkSpaceToClose()
      #{
      #    if(WinAPI::isWindow(workSpaceHandle))
      #    {
      #        element.setTimeOut(identifierStr(WaitForWorkSpaceToClose), 200, true);
      #    }
      #    else
      #    {
      #        if(disableSysAdminRoleAssignment)
      #        {
      #            try
      #            {
      #                SysSecEntryPointManager::EnableCurrentSysAdminAssignment();
      #            }
      #            catch
      #            {
      #                WinAPI::enableWindow(curMainWindowHandle, true);
      #                SecurityUtil::sysAdminMode(true);
      #                throw Exception::Error;
      #            }
      #        }
      #
      #        try
      #        {
      #            SecurityUtil::sysAdminMode(true);
      #
      #            if(wasFormRunHookEnabled)
      #            {
      #                SysSecEntryPointManager::FormRunHookStatus(true);
      #            }
      #            element.UndoRoleAssignmentChanges();
      #        }
      #        catch
      #        {
      #            WinAPI::enableWindow(curMainWindowHandle, true);
      #            throw Exception::Error;
      #        }
      #
      #        //Enable main window
      #        WinAPI::enableWindow(curMainWindowHandle, true);
      #
      #        //Enable current window
      #        WinAPI::enableWindow(element.hWnd(), true);
      #        WinAPI::setFocus(element.hWnd());
      #
      #        element.redraw();
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysSecEntryPointTmp
          Table               #SysSecEntryPointTmp
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #selectionChanged
          #public void selectionChanged()
          #{
          #    super();
          #
          #    if(!isDeveloper())
          #    {
          #        element.ClearEntryPointReferenceTree();
          #    }
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #buttonRole
          Table               #SecurityRole
          LinkType            #Passive
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Left                #Left edge
      Width               #Column width
      Caption             #@SDT46
      UseCaptionFromMenuItem  #Yes
      SetCompany          #No
      Mode                #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          AutoDeclaration     #Yes
          ElementPosition     #417566263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
          Caption             #@SDT111
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #AdminUIButtonGroup
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #715827880
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT112
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #MetadataButtonGroup
          ElementPosition     #1491308086
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT113
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #SettingsGroup
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          ElementPosition     #1789569705
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT114
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #TestButtonGroup
          NeededPermission    #Manual
          ElementPosition     #477218586
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT115
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #TraceButtonGroup
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          ElementPosition     #954437174
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT116
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #TraceFileGroup
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1193046468
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT117
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #EntryPointsGrid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1259857071
          HierarchyParent     #RighGroup
          DataSource          #SysSecEntryPointTmp
          DataGroup           #EntryPointManager
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    #WinAPI
            #    #AOT
            #    #Properties
            #    int ret;
            #    PopupMenu contextMenu = new PopupMenu(this.hWnd());
            #
            #    int setEntryPointPermissions;
            #    int addMatchingPrivileges;
            #    int addMatchingDuties;
            #    int executeMenuitemInCurWorkSpace;
            #    int executeMenuitemInSecurityWorkSpace;
            #    int aotNewWindow;
            #    int aotPropertyWindowItem;
            #    Struct selectedData;
            #    Array selectionData;
            #
            #    TreeNode nodeUnder;
            #    SysSecEntryPointTmp entryPointTmpData;
            #    Args args;
            #    FormRun formRun;
            #    str formEntryPointRights;
            #
            #    entryPointTmpData = SysSecEntryPointTmp_ds.cursor();
            #
            #    if (entryPointTmpData.RecId != 0)
            #    {
            #        selectedData = EntryPointsGrid.getSelectedData();
            #        selectionData = selectedData.value('lines');
            #
            #        nodeUnder = SysSecEntryPointManager::GetNodeForSecurableType(entryPointTmpData.ObjectType,
            #                                                                    entryPointTmpData.ObjectAOTName,
            #                                                                    entryPointTmpData.ObjectAOTChildName);
            #
            #        //Build context menu
            #        if(nodeUnder != null && isDeveloper() && selectionData.lastIndex() == 1)
            #        {
            #            if(entryPointTmpData.ObjectType == SecurableType::MenuItemDisplay ||
            #                entryPointTmpData.ObjectType == SecurableType::MenuItemOutput ||
            #                entryPointTmpData.ObjectType == SecurableType::MenuItemAction)
            #            {
            #                executeMenuitemInCurWorkSpace = contextMenu.insertItem(strFmt("@SDT118"));
            #
            #                if(currentDevelopmentObject != '' && !isrecording)
            #                {
            #                    executeMenuitemInSecurityWorkSpace = contextMenu.insertItem(strFmt("@SDT119"));
            #                }
            #            }
            #        }
            #
            #        if(currentDevelopmentObject != '' && isDeveloper())
            #        {
            #            contextMenu.insertBreak();
            #            setEntryPointPermissions = contextMenu.insertItem(strFmt("@SDT120"));
            #        }
            #
            #        if(selectionData.lastIndex() == 1)
            #        {
            #            contextMenu.insertBreak();
            #            if(currentDevelopmentType == SysSecDevelopmentType::Role && currentRoleAOTName != '')
            #            {
            #                addMatchingDuties = contextMenu.insertItem(strFmt("@SDT121"));
            #            }
            #
            #            if(currentDevelopmentType != SysSecDevelopmentType::Privilege && currentRoleAOTName != '')
            #            {
            #                addMatchingPrivileges = contextMenu.insertItem(strFmt("@SDT122"));
            #            }
            #
            #            if(nodeUnder != null && isDeveloper())
            #            {
            #                contextMenu.insertBreak();
            #                aotNewWindow = contextMenu.insertItem(strFmt("@SDT123"));
            #                aotPropertyWindowItem = contextMenu.insertItem(strFmt("@SDT124"));
            #            }
            #        }
            #    }
            #
            #    ret = contextMenu.draw();
            #
            #    switch (ret)
            #    {
            #        case -1:
            #            break;
            #
            #        case setEntryPointPermissions:
            #            formEntryPointRights = '';
            #            if(currentDevelopmentType == SysSecDevelopmentType::Privilege)
            #            {
            #                formEntryPointRights = formstr(SysSecSetEntryPointRightsForPrivilege);
            #            }
            #            else if(currentDevelopmentType == SysSecDevelopmentType::Duty || currentDevelopmentType == SysSecDevelopmentType::Role)
            #            {
            #                formEntryPointRights = formstr(SysSecSetEntryPointRights);
            #            }
            #
            #            args = new Args(formEntryPointRights);
            #            args.caller(element);
            #            args.parmEnum(NoYes::Yes);
            #            formRun = classFactory.formRunClass(args);
            #            formRun.run();
            #            formRun.wait(true);
            #            break;
            #
            #        case addMatchingPrivileges:
            #            args = new Args(formstr(SysSecReferencePrivilegesForEntryPoint));
            #            args.caller(element);
            #
            #            args.parmEnum(entryPointTmpData.ObjectType);
            #            args.parm(strFmt('%1.%2',
            #                        entryPointTmpData.ObjectAOTName,
            #                        entryPointTmpData.ObjectAOTChildName));
            #
            #            formRun = classFactory.formRunClass(args);
            #            formRun.run();
            #            formRun.wait(true);
            #            break;
            #
            #        case addMatchingDuties:
            #            args = new Args(formstr(SysSecReferenceDutiesForEntryPoint));
            #            args.caller(element);
            #
            #            args.parmEnum(entryPointTmpData.ObjectType);
            #            args.parm(strFmt('%1.%2',
            #                        entryPointTmpData.ObjectAOTName,
            #                        entryPointTmpData.ObjectAOTChildName));
            #
            #            formRun = classFactory.formRunClass(args);
            #            formRun.run();
            #            formRun.wait(true);
            #            break;
            #
            #        case executeMenuitemInCurWorkSpace:
            #            nodeUnder.AOTrun();
            #            break;
            #
            #        case executeMenuitemInSecurityWorkSpace:
            #            element.OpenRoleWorkSpace(nodeUnder.treeNodePath());
            #            break;
            #
            #        case aotNewWindow:
            #            nodeUnder.AOTnewWindow();
            #            break;
            #
            #        case aotPropertyWindowItem:
            #            nodeUnder.AOTshowProperties();
            #            break;
            #
            #        default:
            #            break;
            #
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EntryPointReferenceGroup
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1882627329
          HierarchyParent     #RighGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridFilterOptionsGroup
          ElementPosition     #901943130
          HierarchyParent     #RighGroup
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #LicenseInformation
          ElementPosition     #1312351114
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MainGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1789569703
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #RighGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #MainGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Settings
          Width               #Column width
          ElementPosition     #835132527
          RightMargin         #2
          Columns             #3
          Columnspace         #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #XSplitter
          AutoDeclaration     #Yes
          Width               #5
          Height              #Column height
          ElementPosition     #1288490187
          HierarchyParent     #MainGroup
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #YSplitter
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          Height              #5
          ElementPosition     #1617771012
          HierarchyParent     #RighGroup
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ClearRecordedFilter
          AutoDeclaration     #Yes
          Visible             #No
          HelpText            #@SDT125
          ElementPosition     #1073741822
          HierarchyParent     #GridFilterOptionsGroup
          Text                #@SDT126
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    QueryBuildDataSource qbds;
            #
            #    super();
            #
            #    qbds = SysSecEntryPointTmp_ds.query().dataSourceTable(tableNum(SysSecEntryPointTmp));
            #    qbds.clearRange(fieldNum(SysSecEntryPointTmp, Recorded));
            #
            #    recordingGridFilter = false;
            #
            #    SysSecEntryPointTmp_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #LoadAdditionalMetadata
          AutoDeclaration     #Yes
          HelpText            #@SDT127
          ElementPosition     #1431655764
          HierarchyParent     #MetadataButtonGroup
          Text                #@SDT128
          ButtonDisplay       #Text & Image above
          NormalImage         #11032
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          Big                 #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.LoadAdditionalMetadata();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #LoadEPTrace
          AutoDeclaration     #Yes
          HelpText            #@SDT129
          ElementPosition     #1181116005
          HierarchyParent     #TraceButtonGroup
          Text                #@SDT130
          ButtonDisplay       #Text & Image left
          NormalImage         #7643
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysSecEntryPointTmp    epTraceData;
            #    Args                args;
            #    str                 fileName;
            #
            #    str                 axUserName;
            #    int                 axSessionId;
            #    str                 moduleName;
            #    str                 pageName;
            #    str                 entryPointName;
            #    str                 tmpEntryPointType;
            #    SecurableType       entryPointType;
            #    boolean             isPostBack;
            #    XmlReader           reader;
            #
            #    str                 entryPointKey;
            #    int                 entryPointCounter;
            #    #File
            #
            #    element.CheckRecordingIsDirty();
            #    SecurityRecorder.enabled(false);
            #    LoadEPtrace.enabled(false);
            #
            #    fileName = WinAPI::getOpenFileName(element.hWnd(),["@SDT86", #AllFilesName + #xml],
            #                prevEPTraceFilePath, strFmt("@SDT131"), '', '', 0);
            #    if (fileName != '')
            #    {
            #        prevEPTraceFilePath = System.IO.Path::GetDirectoryName(fileName);
            #        try
            #        {
            #            //Parse xml file
            #            reader = XmlReader::newFile(fileName);
            #            axUserName = '';
            #            isPostBack = false;
            #            entryPointCounter = 1;
            #
            #            while(reader.read())
            #            {
            #                if(reader.name() == 'Data')
            #                {
            #                    if(reader.getAttribute2('Name') == 'AxUserName')
            #                    {
            #                        reader.read();
            #                        axUserName = reader.value();
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'AxSessionId')
            #                    {
            #                        reader.read();
            #                        axSessionId = str2int(reader.value());
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'ModuleName')
            #                    {
            #                        reader.read();
            #                        moduleName = reader.value();
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'PageName')
            #                    {
            #                        reader.read();
            #                        pageName = reader.value();
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'MenuItemName')
            #                    {
            #                        reader.read();
            #                        entryPointName = reader.value();
            #                        entryPointType = securableType::WebUrlItem;
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'EntryPointName')
            #                    {
            #                        reader.read();
            #                        entryPointName = reader.value();
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'EntryPointType')
            #                    {
            #                        reader.read();
            #                        tmpEntryPointType = reader.value();
            #                        entryPointType = symbol2Enum(enumNum(SecurableType), tmpEntryPointType);
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'IsPostBack')
            #                    {
            #                        reader.read();
            #                        isPostBack = (reader.value() == 'true');
            #                    }
            #                }
            #
            #                if(reader.name() == 'EventData')
            #                {
            #                    if(axUserName != '' && entryPointName != '')
            #                    {
            #                        epTraceData.clear();
            #                        epTraceData.EPTraceUserName = axUserName;
            #                        epTraceData.EPTraceSessionId = axSessionId;
            #                        epTraceData.EPTraceModuleName = moduleName;
            #                        epTraceData.EPTracePageName = pageName;
            #                        epTraceData.EPTraceIsPostBack = isPostBack;
            #                        epTraceData.ObjectAOTName = entryPointName;
            #                        epTraceData.ObjectType = entryPointType;
            #                        epTraceData.AccessRight = AccessRight::NoAccess;
            #                        epTraceData.SystemUserRight = AccessRight::NoAccess;
            #                        //Object key field is unique and entry points can be traced multiple times, just assign unique number
            #                        epTraceData.ObjectKey = int2str(entryPointCounter);
            #
            #                        entryPointKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(epTraceData);
            #
            #                        if(accessRightsMap != null && accessRightsMap.exists(entryPointKey))
            #                        {
            #                            epTraceData.AccessRight = accessRightsMap.lookup(entryPointKey);
            #                        }
            #
            #                        if(systemUserAccessRightsMap != null && systemUserAccessRightsMap.exists(entryPointKey))
            #                        {
            #                            epTraceData.SystemUserRight = systemUserAccessRightsMap.lookup(entryPointKey);
            #                        }
            #
            #                        epTraceData.insert();
            #
            #                        axUserName = '';
            #                        isPostBack = false;
            #                        entryPointCounter++;
            #                    }
            #                }
            #            }
            #
            #            SwitchBackToEPTraceForm.visible(true);
            #
            #            args = new Args(formStr(SysSecLoadEPTrace));
            #            args.parm(fileName);
            #            args.caller(element);
            #            args.record(epTraceData);
            #            epTraceFormRun = classFactory.formRunClass(args);
            #            epTraceFormRun.run();
            #            epTraceFormRun.wait();
            #        }
            #        catch
            #        {
            #            element.ResetTraceButtons();
            #            throw Exception::Error;
            #        }
            #    }
            #    element.ResetTraceButtons();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #LoadRecording
          AutoDeclaration     #Yes
          HelpText            #@SDT132
          ElementPosition     #1968526675
          HierarchyParent     #TraceButtonGroup
          Text                #@SDT133
          ButtonDisplay       #Text & Image left
          NormalImage         #802
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          ForcedToOverflow    #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.LoadRecording();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #MarkControlsButtonState
          AutoDeclaration     #Yes
          HelpText            #@SDT134
          ElementPosition     #1717986916
          HierarchyParent     #SettingsGroup
          Text                #@SDT135
          NormalImage         #12262
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          MultiSelect         #Yes
          ToggleButton        #Check
          AcquireFocus        #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    DialogButton dialogButton;
            #
            #    super();
            #
            #    if(MarkControlsButtonState.toggleValue())
            #    {
            #        if(!SysSecEntryPointManager::IsFormHighlightEnabled())
            #        {
            #            dialogButton = Box::yesNo(strFmt("@SDT136"),
            #                            dialogButton::Yes, strFmt("@SDT46"));
            #
            #            if(dialogButton == DialogButton::No)
            #            {
            #                MarkControlsButtonState.toggleValue(0);
            #                return;
            #            }
            #
            #            if(!SysSecEntryPointManager::EnableFormHighlight())
            #            {
            #                MarkControlsButtonState.toggleValue(0);
            #                return;
            #            }
            #        }
            #
            #        MarkControlsButtonState.text("@SDT102");
            #    }
            #    else
            #    {
            #        MarkControlsButtonState.text("@SDT135");
            #    }
            #
            #    //Enable/disable feature
            #    SysSecEntryPointManager::FormRunHookStatus(MarkControlsButtonState.toggleValue());
            #
            #    //Cache user preference
            #    SysSecEntryPointManager::SkipDefaultFormRunHook((MarkControlsButtonState.toggleValue() == 0));
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #OMAssignOrganizations
          HelpText            #@SDT137
          ElementPosition     #858993458
          HierarchyParent     #SettingsGroup
          Text                #@SDT138
          ButtonDisplay       #Text & Image left
          NormalImage         #10858
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    Args                args = new Args(formStr(SysSecAssignOM));
            #    FormRun             fr = classFactory.formRunClass(args);
            #
            #    super();
            #
            #    fr.init();
            #    fr.run();
            #    fr.wait();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Refresh
          Left                #Right edge
          Width               #30
          HelpText            #@SDT139
          ElementPosition     #1717986916
          HierarchyParent     #Settings
          Text                #@SDT140
          ButtonDisplay       #Image only
          NormalImage         #1088
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.SetPermissions();
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SaveRecording
          AutoDeclaration     #Yes
          HelpText            #@SDT141
          ElementPosition     #1574821340
          HierarchyParent     #TraceButtonGroup
          Text                #@SDT142
          ButtonDisplay       #Text & Image left
          NormalImage         #12467
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          ForcedToOverflow    #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    element.SaveRecording();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SecurityRecorder
          AutoDeclaration     #Yes
          HelpText            #@SDT143
          ElementPosition     #787410670
          HierarchyParent     #TraceButtonGroup
          Text                #@SYS107735
          NormalImage         #27110
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysGlobalCache globalCache = appl.globalCache();
            #    SysSecRecordedEntryPoint recordedObjects;
            #    DialogButton dialogButton;
            #
            #    void updateUIOnStop()
            #    {
            #        SecurityRecorder.normalImage('27110');
            #        SecurityRecorder.text("@SYS107735");
            #        LoadEPtrace.enabled(true);
            #        SaveRecording.enabled(true);
            #        LoadRecording.enabled(true);
            #
            #        if(currentRoleAOTName != '')
            #        {
            #            TestWorkSpace.enabled(true);
            #        }
            #        element.lockWindowUpdate(false);
            #    }
            #
            #    super();
            #
            #    if(!SysSecEntryPointManager::IsClientRecorderEnabled())
            #    {
            #        dialogButton = Box::yesNo(strFmt("@SDT144"),
            #                            dialogButton::Yes, strFmt("@SDT46"));
            #
            #        if(dialogButton == DialogButton::No)
            #        {
            #            return;
            #        }
            #        SysSecEntryPointManager::EnableClientRecorder();
            #    }
            #
            #    isRecording = !isRecording;
            #
            #    if(isRecording)
            #    {
            #        LoadEPtrace.enabled(false);
            #        SaveRecording.enabled(false);
            #        LoadRecording.enabled(false);
            #        TestWorkSpace.enabled(false);
            #
            #        element.CheckRecordingIsDirty();
            #        element.lockWindowUpdate(true);
            #        EntryPointsGrid.visible(false);
            #        try
            #        {
            #            ttsBegin;
            #            delete_from recordedObjects where recordedObjects.User == curUserId() &&
            #                                                recordedObjects.SessionId == sessionId();
            #            update_recordSet SysSecEntryPointTmp setting Recorded = NoYes::No;
            #            ttsCommit;
            #            SysSecEntryPointTmp_ds.research();
            #            SysSecEntryPointTmp_ds.refreshEx(-1);
            #            SecurityRecorder.normalImage('27106');
            #            SecurityRecorder.text("@SYS107734");
            #
            #            if(!globalCache.isSet(curUserId() + #SecEntryPoint, #EntryPointRecorderKey))
            #            {
            #                appl.globalCache().set(curUserId() + #SecEntryPoint, #EntryPointRecorderKey, #EntryPointRecorderKey, false);
            #            }
            #        }
            #        catch
            #        {
            #            EntryPointsGrid.visible(true);
            #            throw Exception::Error;
            #        }
            #        EntryPointsGrid.visible(true);
            #    }
            #    else
            #    {
            #        try
            #        {
            #            if(globalCache.isSet(curUserId() + #SecEntryPoint, #EntryPointRecorderKey))
            #            {
            #                appl.globalCache().remove(curUserId() + #SecEntryPoint, #EntryPointRecorderKey);
            #            }
            #
            #            select count(RecId) from recordedObjects where recordedObjects.User == curUserId() &&
            #                                                            recordedObjects.SessionId == sessionId();
            #            if(recordedObjects.RecId == 0)
            #            {
            #                info(strFmt("@SDT145"));
            #            }
            #            else
            #            {
            #                infolog.startLengthyOperation();
            #                element.lockWindowUpdate(true);
            #
            #                recordingIsDirty = true;
            #                ttsBegin;
            #                update_recordSet SysSecEntryPointTmp setting Recorded = NoYes::Yes
            #                    exists join recordedObjects where recordedObjects.SecurableObject == SysSecEntryPointTmp.ObjectID &&
            #                        recordedObjects.User == curUserId() && recordedObjects.SessionId == sessionId();
            #                ttsCommit;
            #
            #                element.AddFilterOnRecordedObjects();
            #                SysSecEntryPointTmp_ds.executeQuery();
            #            }
            #        }
            #        catch
            #        {
            #            updateUIOnStop();
            #            throw Exception::Error;
            #        }
            #        updateUIOnStop();
            #
            #        infolog.endLengthyOperation();
            #    }
            #
            #    element.lockWindowUpdate(false);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SecurityWorkspaceEPSSRS
          AutoDeclaration     #Yes
          HelpText            #@SDT146
          ElementPosition     #1288490187
          HierarchyParent     #SettingsGroup
          Text                #@SDT147
          NormalImage         #12350
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          MultiSelect         #Yes
          ToggleButton        #Check
          AcquireFocus        #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    if(SecurityWorkspaceEPSSRS.toggleValue())
            #    {
            #        if(strLwr(curUserId()) == 'admin')
            #        {
            #            SecurityWorkspaceEPSSRS.toggleValue(0);
            #            error(strFmt("@SDT148"));
            #            return;
            #        }
            #
            #        if(!SysSecEntryPointManager::IsSingleServerRunning())
            #        {
            #            SecurityWorkspaceEPSSRS.toggleValue(0);
            #            error(strFmt("@SDT149"));
            #            return;
            #        }
            #
            #        disableSysAdminRoleAssignment = true;
            #        SecurityWorkspaceEPSSRS.text("@SDT103");
            #    }
            #    else
            #    {
            #        disableSysAdminRoleAssignment = false;
            #        SecurityWorkspaceEPSSRS.text("@SDT147");
            #    }
            #
            #    //Cache user preference
            #    SysSecEntryPointManager::DisableSysAdminAssignmentSetting((SecurityWorkspaceEPSSRS.toggleValue()));
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ShowReferences
          AutoDeclaration     #Yes
          Enabled             #No
          HelpText            #@SDT150
          ElementPosition     #1073741822
          HierarchyParent     #EntryPointReferenceGroup
          Text                #@SDT151
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    TreeItemIdx rootIdx;
            #
            #    super();
            #
            #    EntryPointReferenceTree.deleteAll();
            #    if(currentDevelopmentObject == '')
            #    {
            #        return;
            #    }
            #
            #    if(currentDevelopmentType == SysSecDevelopmentType::Role)
            #    {
            #        rootIdx = SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', CurrentObject.text(), currentRoleAOTName),
            #            FormTreeAdd::Root, currentRoleAOTName, imageListAppl_AOT.image(#ImageSecurityRole), 1);
            #
            #        this.processRole(currentRoleID, rootIdx);
            #    }
            #
            #    //Expand entire tree
            #    if(rootIdx != 0)
            #    {
            #        referencesShown = true;
            #        SysFormTreeControl::expandTree(EntryPointReferenceTree, rootIdx);
            #    }
            #}
          ENDSOURCE
          SOURCE #processRole
            #public void processRole(recid _roleId, TreeItemIdx _rootIdx)
            #{
            #    SecurityRoleTaskGrant roleTaskGrant;
            #    SecurityTaskEntryPoint taskEntryPoint;
            #    SecuritySubTask subTask;
            #    SecurityTask privilege;
            #    SecurityTask duty;
            #    TreeItemIdx currentDutyIdx;
            #    TreeItemIdx subRoleRootIdx;
            #
            #    SecuritySubRole subRole;
            #    SecurityRole role2;
            #
            #    SecurityTaskName prevDutyName = '';
            #
            #    //Process all role-duty-privileges
            #    while select Name, AOTName from duty group by Name, AOTName
            #            join Name, AOTName from privilege group by Name, AOTName
            #            join maxOf(PermissionGroup) from taskEntryPoint
            #                group by taskEntryPoint.PermissionGroup
            #                where taskEntryPoint.EntryPoint == SysSecEntryPointTmp.ObjectID &&
            #                        privilege.RecId == taskEntryPoint.SecurityTask
            #            exists join subTask
            #                where subTask.SecuritySubTask == privilege.RecId &&
            #                        subTask.SecurityTask == duty.RecId &&
            #                        duty.IsEnabled == NoYes::Yes &&
            #                        privilege.IsEnabled == NoYes::Yes
            #            exists join roleTaskGrant
            #                where roleTaskGrant.SecurityRole == _roleId &&
            #                        roleTaskGrant.SecurityTask == duty.RecId
            #    {
            #        if(prevDutyName != duty.Name)
            #        {
            #            currentDutyIdx = SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', duty.Name, duty.AotName),
            #                    _rootIdx, duty.AotName, imageListAppl_AOT.image(#ImageSecurityDuty), 1);
            #        }
            #
            #        SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', privilege.Name, privilege.AotName),
            #                    currentDutyIdx, privilege.AotName, imageListAppl_AOT.image(#ImageSecurityPrivilege), 1,
            #                    accessImages[1+taskEntryPoint.PermissionGroup]);
            #
            #        prevDutyName = duty.Name;
            #    }
            #
            #    //Process all role-privileges
            #    while select Name, AOTName from privilege group by Name, AOTName
            #            join maxOf(PermissionGroup) from taskEntryPoint
            #                group by taskEntryPoint.PermissionGroup
            #                where taskEntryPoint.EntryPoint == SysSecEntryPointTmp.ObjectID &&
            #                        privilege.RecId == taskEntryPoint.SecurityTask
            #            exists join roleTaskGrant
            #                where roleTaskGrant.SecurityRole == _roleId &&
            #                        roleTaskGrant.SecurityTask == privilege.RecId
            #    {
            #        SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', privilege.Name, privilege.AotName),
            #                    _rootIdx, privilege.AotName, imageListAppl_AOT.image(#ImageSecurityPrivilege), 1,
            #                    accessImages[1+taskEntryPoint.PermissionGroup]);
            #    }
            #
            #    //Recursively process sub roles
            #    while select SecuritySubrole from subRole
            #            where subRole.SecurityRole == _roleId
            #            join Name, AOTName from role2
            #                where role2.RecId == subRole.SecuritySubRole &&
            #                    role2.IsEnabled == NoYes::Yes
            #    {
            #        subRoleRootIdx = SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', role2.Name, role2.AotName),
            #            _rootIdx, role2.AotName, imageListAppl_AOT.image(#ImageSecurityRole), 1);
            #        this.processRole(role2.RecId, subRoleRootIdx);
            #    }
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SwitchBackToEPTraceForm
          AutoDeclaration     #Yes
          Visible             #No
          HelpText            #@SDT152
          ElementPosition     #1879048189
          HierarchyParent     #GridFilterOptionsGroup
          Text                #@SDT153
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    if(epTraceFormRun != null)
            #    {
            #        WinAPI::setFocus(epTraceFormRun.hWnd());
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #TestWorkSpace
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          Enabled             #No
          HelpText            #@SDT154
          ElementPosition     #1431655764
          HierarchyParent     #TestButtonGroup
          Text                #@SDT155
          NormalImage         #412
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          MultiSelect         #Yes
          Big                 #Yes
          Primary             #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.OpenRoleWorkSpace();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #EntryPointsGrid_Recorded
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #330382098
          HierarchyParent     #EntryPointsGrid
          BackgroundColor     #Window background
          Label               #@SDT23
          DataSource          #SysSecEntryPointTmp
          DataField           #Recorded
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #EntryPointsGrid_UserLicenseApplies
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1610612727
          HierarchyParent     #EntryPointsGrid
          BackgroundColor     #Window background
          Label               #@SDT27
          DataSource          #SysSecEntryPointTmp
          DataField           #UserLicenseApplies
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #FilterOnPermissionChanges
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1610612733
          HierarchyParent     #GridFilterOptionsGroup
          Label               #@SDT156
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    QueryBuildDataSource qbds;
            #    QueryBuildRange qbr;
            #    boolean ret;
            #
            #    ret = super();
            #
            #    qbds = SysSecEntryPointTmp_ds.query().dataSourceTable(tableNum(SysSecEntryPointTmp));
            #    if(FilterOnPermissionChanges.value())
            #    {
            #        qbr = qbds.addRange(fieldNum(SysSecEntryPointTmp, AccessRight));
            #        qbr.value('(AccessRight != OldAccessRight)');
            #        qbr.status(RangeStatus::Hidden);
            #    }
            #    else
            #    {
            #        qbds.clearRange(fieldNum(SysSecEntryPointTmp, AccessRight));
            #    }
            #    SysSecEntryPointTmp_ds.executeQuery();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #CurObjectLicenseType
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          AlignControl        #No
          ElementPosition     #1431655764
          HierarchyParent     #LicenseInformation
          Label               #@SDT157
          EnumType            #UserLicenseType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_AccessRight
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #825955245
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT158
          DataSource          #SysSecEntryPointTmp
          DataField           #AccessRight
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_EffectiveUserLicense
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1404123916
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT2
          DataSource          #SysSecEntryPointTmp
          DataField           #EffectiveUserLicense
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_ObjectAOTLayer
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1817101539
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT159
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTLayer
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_ObjectType
          ElementPosition     #495573147
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT160
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectType
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_OldAccessRight
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #991146294
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT21
          DataSource          #SysSecEntryPointTmp
          DataField           #OldAccessRight
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_SystemUserRight
          ElementPosition     #1156337343
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT25
          DataSource          #SysSecEntryPointTmp
          DataField           #SystemUserRight
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #ObjectType
          AutoDeclaration     #Yes
          AlignControl        #No
          HelpText            #@SDT161
          ElementPosition     #858993458
          HierarchyParent     #Settings
          Label               #@SDT162
          EnumType            #SysSecDevelopmentType
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    CurrentObject.text('');
            #    element.SelectObject();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #OpenRoleInNewWindow
          AutoDeclaration     #Yes
          HelpText            #@SDT163
          ElementPosition     #1431655764
          HierarchyParent     #AdminUIButtonGroup
          Text                #@SDT164
          ButtonDisplay       #Text & Image left
          NormalImage         #1008
          ImageLocation       #EmbeddedResource
          DataSource          #buttonRole
          MenuItemName        #SysSecRolesEditTasks
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    select buttonRole where buttonRole.AotName == currentRoleAOTName;
            #    buttonRole_ds.setRecord(buttonRole);
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CurrentObject
          AutoDeclaration     #Yes
          Width               #Column width
          AlignControl        #No
          HelpText            #@SDT165
          ElementPosition     #1288490187
          HierarchyParent     #Settings
          Label               #@SDT166
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    str lookupForm;
            #    SysSecDevelopmentType selectedType = ObjectType.selection();
            #    FormRun formRun;
            #    Args args;
            #
            #    switch(selectedType)
            #    {
            #        case SysSecDevelopmentType::Role:
            #            lookupForm = formStr(SysSecRoleLookup);
            #            break;
            #        case SysSecDevelopmentType::Duty:
            #            lookupForm = formStr(SysSecDutyLookup);
            #            break;
            #        case SysSecDevelopmentType::Privilege:
            #            lookupForm = formStr(SysSecPrivilegeLookup);
            #            break;
            #    }
            #
            #    if(lookupForm != '')
            #    {
            #        args = new Args(lookupForm);
            #        args.caller(this);
            #        formRun = classfactory.formRunClass(args);
            #        formRun.init();
            #        this.performFormLookup(formRun);
            #    }
            #}
          ENDSOURCE
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    element.SelectObject();
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EntryPointsGrid_ObjectAOTDisplayName
          Width               #250
          ElementPosition     #660764196
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT167
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTDisplayName
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EntryPointsGrid_ObjectAOTModel
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1982292588
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT168
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTModel
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EntryPointsGrid_ObjectLabel
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1321528392
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT169
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectLabel
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #EntryPointReferenceTree
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #EntryPointReferenceGroup
        ENDPROPERTIES
        
        METHODS
          SOURCE #context
            #public void context()
            #{
            #    #WinAPI
            #    int selectedMenu;
            #    int mouseX, mouseY;
            #    TreeItemIdx idx;
            #    PopupMenu contextMenu = new PopupMenu(element.hWnd());
            #    int newWindow;
            #    FormTreeItem itemUnder;
            #    SysSecDevelopmentType treeItemObjectType;
            #    SecurityRoleName treeItemObjectAOTName;
            #    MenuFunction menuFunc;
            #    xArgs args;
            #    SecurityRole selectedRole;
            #
            #    [mouseX, mouseY] = WinAPI::getCursorPos();
            #    [mouseX, mouseY] = WinAPI::screenToClient(element.hWnd(), mouseX, mouseY);
            #
            #    idx = EntryPointReferenceTree.getSelection();
            #    if (!idx)
            #    {
            #        return;
            #    }
            #
            #    itemUnder = EntryPointReferenceTree.getItem(idx);
            #    if (!itemUnder)
            #    {
            #        return;
            #    }
            #
            #    treeItemObjectAOTName = itemUnder.data();
            #    if (treeItemObjectAOTName == '')
            #    {
            #        return;
            #    }
            #
            #    treeItemObjectType = SysSecDevelopmentType::Role;
            #    if(itemUnder.image() == imageListAppl_AOT.image(#ImageSecurityPrivilege))
            #    {
            #        treeItemObjectType = SysSecDevelopmentType::Privilege;
            #    }
            #    else if(itemUnder.image() == imageListAppl_AOT.image(#ImageSecurityDuty))
            #    {
            #        treeItemObjectType = SysSecDevelopmentType::Duty;
            #    }
            #
            #    //Build context menu
            #    switch(treeItemObjectType)
            #    {
            #        case SysSecDevelopmentType::Role:
            #            if(hasMenuItemAccess('SysSecRolesEditTasks', MenuItemType::Display))
            #            {
            #                newWindow = contextMenu.insertItem(strFmt("@SYS327211"));
            #            }
            #            break;
            #        case SysSecDevelopmentType::Duty:
            #            if(hasMenuItemAccess('SysSecTasksEditPS', MenuItemType::Display))
            #            {
            #                newWindow = contextMenu.insertItem(strFmt("@SDT170"));
            #            }
            #            break;
            #        case SysSecDevelopmentType::Privilege:
            #            if(hasMenuItemAccess('SysSecTasksEditPS', MenuItemType::Display))
            #            {
            #                newWindow = contextMenu.insertItem(strFmt("@SDT170"));
            #            }
            #            break;
            #    }
            #
            #    selectedMenu = contextMenu.draw();
            #
            #    switch (selectedMenu)
            #    {
            #        case -1:
            #            break;
            #        case newWindow:
            #            switch(treeItemObjectType)
            #            {
            #                case SysSecDevelopmentType::Role:
            #                    menuFunc = new MenuFunction('SysSecRolesEditTasks', MenuItemType::Display);
            #                    args = new xArgs();
            #                    select selectedRole where selectedRole.AotName == treeItemObjectAOTName;
            #                    args.record(selectedRole);
            #                    menuFunc.run(Args);
            #                    break;
            #                case SysSecDevelopmentType::Duty:
            #                case SysSecDevelopmentType::Privilege:
            #                    menuFunc = new MenuFunction('SysSecTasksEditPS', MenuItemType::Display);
            #                    menuFunc.run();
            #                    break;
            #            }
            #            break;
            #        default:
            #            break;
            #
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #MenuTree
          Width               #300
          Height              #Column height
          HelpText            #@SDT171
          DragDrop            #Manual
          ElementPosition     #858993458
          HierarchyParent     #MainGroup
        ENDPROPERTIES
        
        METHODS
          SOURCE #context
            #public void context()
            #{
            #    #WinAPI
            #    #AOT
            #    #Properties
            #    int selectedMenu;
            #    int mouseX, mouseY;
            #    TreeItemIdx idx, childIdx;
            #    PopupMenu contextMenu = new PopupMenu(element.hWnd());
            #
            #    int expandAll;
            #    int findMenuItems;
            #    int setEntryPointPermissions;
            #    int addMatchingPrivileges;
            #    int addMatchingDuties;
            #    int executeMenuitemInCurWorkSpace;
            #    int executeMenuitemInSecurityWorkSpace;
            #    int aotNewWindow;
            #    int aotPropertyWindowItem;
            #    int aotNewWindowMenuItem;
            #    int aotPropertyMenuItem;
            #
            #    FormTreeItem itemUnder;
            #    Object objectUnder;
            #    Object sysSecObjData;
            #    TreeNode nodeUnder, menuItemNode, linkedMenuItemNode;
            #    str formEntryPointRights;
            #    SysSecEntryPointKey entryPointKey;
            #    SysSecSecurableObject securableObjectUnder;
            #    SysSecSecurableObject linkedSecurableObject;
            #    SysSecSecurableObject sysSecObjToUse;
            #
            #    Args args;
            #    FormRun formRun;
            #
            #    [mouseX, mouseY] = WinAPI::getCursorPos();
            #    [mouseX, mouseY] = WinAPI::screenToClient(element.hWnd(), mouseX, mouseY);
            #
            #    idx = MenuTree.getSelection();
            #    if (!idx)
            #    {
            #        return;
            #    }
            #
            #    itemUnder = MenuTree.getItem(idx);
            #    if (!itemUnder)
            #    {
            #        return;
            #    }
            #
            #    objectUnder = itemUnder.data();
            #    if(!objectUnder)
            #    {
            #        return;
            #    }
            #
            #    //Build context menu
            #    if(objectUnder is SysSecSecurableObject)
            #    {
            #        securableObjectUnder = objectUnder as SysSecSecurableObject;
            #        linkedSecurableObject = element.GetLinkedWebMenuItem(itemUnder, false);
            #        if(currentDevelopmentObject != '' && isDeveloper())
            #        {
            #            setEntryPointPermissions = contextMenu.insertItem(strFmt("@SDT172"));
            #        }
            #
            #        entryPointKey = element.GetEntryPointKeyForSysSecTreeItem(itemUnder);
            #        if(entryPointKey != '')
            #        {
            #            contextMenu.insertBreak();
            #            if(currentDevelopmentType == SysSecDevelopmentType::Role && currentRoleAOTName != '')
            #            {
            #                addMatchingDuties = contextMenu.insertItem(strFmt("@SDT121"));
            #            }
            #
            #            if(currentDevelopmentType != SysSecDevelopmentType::Privilege && currentRoleAOTName != '')
            #            {
            #                addMatchingPrivileges = contextMenu.insertItem(strFmt("@SDT122"));
            #            }
            #        }
            #
            #        if(isDeveloper())
            #        {
            #            contextMenu.insertBreak();
            #            aotNewWindow = contextMenu.insertItem(strFmt("@SDT123"));
            #            aotPropertyWindowItem = contextMenu.insertItem(strFmt("@SDT124"));
            #
            #            if(linkedSecurableObject != null)
            #            {
            #                aotNewWindowMenuItem = contextMenu.insertItem(strFmt("@SDT173"));
            #                aotPropertyMenuItem = contextMenu.insertItem(strFmt("@SDT174"));
            #            }
            #        }
            #    }
            #    else
            #    {
            #        nodeUnder = objectUnder as TreeNode;
            #
            #        expandAll = contextMenu.insertItem(strFmt("@SDT175"));
            #        contextMenu.insertBreak();
            #
            #        if(findProperty(nodeUnder.AOTgetProperties(), #PropertyMenuItemName))
            #        {
            #            if(isDeveloper())
            #            {
            #                executeMenuitemInCurWorkSpace = contextMenu.insertItem(strFmt("@SDT118"));
            #                if(currentRoleAOTName != '' && !isrecording)
            #                {
            #                    executeMenuitemInSecurityWorkSpace = contextMenu.insertItem(strFmt("@SDT119"));
            #                }
            #            }
            #
            #            contextMenu.insertBreak();
            #            findMenuItems = contextMenu.insertItem(strFmt("@SDT176"));
            #        }
            #
            #        if(currentDevelopmentObject != '' && isDeveloper())
            #        {
            #            setEntryPointPermissions = contextMenu.insertItem(strFmt("@SDT172"));
            #        }
            #
            #        if(findProperty(nodeUnder.AOTgetProperties(), #PropertyMenuItemName) ||
            #            SysSecEntryPointManager::TreeNodeIsServiceOperation(nodeUnder))
            #        {
            #            contextMenu.insertBreak();
            #
            #            if(currentDevelopmentType == SysSecDevelopmentType::Role && currentRoleAOTName != '')
            #            {
            #                addMatchingDuties = contextMenu.insertItem(strFmt("@SDT121"));
            #            }
            #
            #            if(currentDevelopmentType != SysSecDevelopmentType::Privilege && currentRoleAOTName != '')
            #            {
            #                addMatchingPrivileges = contextMenu.insertItem(strFmt("@SDT122"));
            #            }
            #        }
            #
            #        if(isDeveloper())
            #        {
            #            contextMenu.insertBreak();
            #            aotNewWindow = contextMenu.insertItem(strFmt("@SDT123"));
            #            aotPropertyWindowItem = contextMenu.insertItem(strFmt("@SDT124"));
            #
            #            if(findProperty(nodeUnder.AOTgetProperties(), #PropertyMenuItemName))
            #            {
            #                aotNewWindowMenuItem = contextMenu.insertItem(strFmt("@SDT177"));
            #                aotPropertyMenuItem = contextMenu.insertItem(strFmt("@SDT178"));
            #            }
            #        }
            #    }
            #
            #    selectedMenu = contextMenu.draw();
            #
            #    switch (selectedMenu)
            #    {
            #        case -1:
            #            break;
            #
            #        case findMenuItems:
            #            this.DiscoverLinkedMenuItems(itemUnder);
            #            break;
            #
            #        case expandAll:
            #            MenuTree.expand(idx, FormTreeExpand::Expand);
            #            childIdx = MenuTree.getChild(idx);
            #            if(childIdx != 0)
            #            {
            #                SysFormTreeControl::expandTree(MenuTree, childIdx);
            #            }
            #            break;
            #
            #        case setEntryPointPermissions:
            #            formEntryPointRights = '';
            #            if(currentDevelopmentType == SysSecDevelopmentType::Privilege)
            #            {
            #                formEntryPointRights = formstr(SysSecSetEntryPointRightsForPrivilege);
            #            }
            #            else if(currentDevelopmentType == SysSecDevelopmentType::Duty || currentDevelopmentType == SysSecDevelopmentType::Role)
            #            {
            #                formEntryPointRights = formstr(SysSecSetEntryPointRights);
            #            }
            #
            #            args = new Args(formEntryPointRights);
            #            args.caller(element);
            #            args.parmEnum(NoYes::No);
            #            formRun = classFactory.formRunClass(args);
            #            formRun.run();
            #            formRun.wait(true);
            #            break;
            #
            #        case addMatchingPrivileges:
            #            args = new Args(formstr(SysSecReferencePrivilegesForEntryPoint));
            #            args.caller(element);
            #
            #            if(securableObjectUnder != null)
            #            {
            #                sysSecObjToUse = securableObjectUnder;
            #                if(linkedSecurableObject != null)
            #                {
            #                    sysSecObjToUse = linkedSecurableObject;
            #                }
            #                args.parmEnum(sysSecObjToUse.getType());
            #                args.parm(strFmt('%1.%2', sysSecObjToUse.getName(), sysSecObjToUse.getChildName()));
            #            }
            #            else if(SysSecEntryPointManager::TreeNodeIsServiceOperation(nodeUnder))
            #            {
            #                args.parmEnum(SecurableType::ServiceOperation);
            #                args.parm(strFmt('%1.%2',
            #                    nodeUnder.AOTparent().AOTparent().AOTname(),
            #                    nodeUnder.AOTname()));
            #            }
            #            else
            #            {
            #                menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #                if(menuItemNode)
            #                {
            #                    args.parmEnum(SysSecEntryPointManager::GetSecurableMenuItemType(menuItemNode));
            #                    args.parm(menuItemNode.AOTname());
            #                }
            #            }
            #
            #            if(args.parm() != '')
            #            {
            #                formRun = classFactory.formRunClass(args);
            #                formRun.run();
            #                formRun.wait(true);
            #            }
            #            break;
            #
            #        case addMatchingDuties:
            #            args = new Args(formstr(SysSecReferenceDutiesForEntryPoint));
            #            args.caller(element);
            #
            #            if(securableObjectUnder != null)
            #            {
            #                sysSecObjToUse = securableObjectUnder;
            #                if(linkedSecurableObject != null)
            #                {
            #                    sysSecObjToUse = linkedSecurableObject;
            #                }
            #                args.parmEnum(sysSecObjToUse.getType());
            #                args.parm(strFmt('%1.%2', sysSecObjToUse.getName(), sysSecObjToUse.getChildName()));
            #            }
            #            else if(SysSecEntryPointManager::TreeNodeIsServiceOperation(nodeUnder))
            #            {
            #                args.parmEnum(SecurableType::ServiceOperation);
            #                args.parm(strFmt('%1.%2',
            #                    nodeUnder.AOTparent().AOTparent().AOTname(),
            #                    nodeUnder.AOTname()));
            #            }
            #            else
            #            {
            #                menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #                if(menuItemNode)
            #                {
            #                    args.parmEnum(SysSecEntryPointManager::GetSecurableMenuItemType(menuItemNode));
            #                    args.parm(menuItemNode.AOTname());
            #                }
            #            }
            #
            #            if(args.parm() != '')
            #            {
            #                formRun = classFactory.formRunClass(args);
            #                formRun.run();
            #                formRun.wait(true);
            #            }
            #            break;
            #
            #        case executeMenuitemInCurWorkSpace:
            #            element.launch(itemUnder);
            #            break;
            #
            #        case executeMenuitemInSecurityWorkSpace:
            #            linkedMenuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #            if(linkedMenuItemNode != null)
            #            {
            #                element.OpenRoleWorkSpace(linkedMenuItemNode.treeNodePath());
            #            }
            #            break;
            #
            #        case aotNewWindow:
            #            if(securableObjectUnder != null)
            #            {
            #                sysSecObjData = securableObjectUnder.getData();
            #                if(sysSecObjData is TreeNode)
            #                {
            #                    nodeUnder = sysSecObjData as TreeNode;
            #                    nodeUnder.AOTnewWindow();
            #                }
            #            }
            #            else
            #            {
            #                nodeUnder.AOTnewWindow();
            #            }
            #            break;
            #
            #        case aotPropertyWindowItem:
            #            if(securableObjectUnder != null)
            #            {
            #                sysSecObjData = securableObjectUnder.getData();
            #                if(sysSecObjData is TreeNode)
            #                {
            #                    nodeUnder = sysSecObjData as TreeNode;
            #                    nodeUnder.AOTshowProperties();
            #                }
            #            }
            #            else
            #            {
            #                nodeUnder.AOTshowProperties();
            #            }
            #            break;
            #
            #        case aotNewWindowMenuItem:
            #            if(linkedSecurableObject != null)
            #            {
            #                nodeUnder = SysSecEntryPointManager::GetNodeForSecurableType(linkedSecurableObject.getType(),
            #                    linkedSecurableObject.getName(), linkedSecurableObject.getChildName());
            #                if(nodeUnder)
            #                {
            #                    nodeUnder.AOTnewWindow();
            #                }
            #            }
            #            else
            #            {
            #                menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #                if(menuItemNode)
            #                {
            #                    menuItemNode.AOTnewWindow();
            #                }
            #            }
            #            break;
            #
            #        case aotPropertyMenuItem:
            #            if(linkedSecurableObject != null)
            #            {
            #                nodeUnder = SysSecEntryPointManager::GetNodeForSecurableType(linkedSecurableObject.getType(),
            #                    linkedSecurableObject.getName(), linkedSecurableObject.getChildName());
            #                if(nodeUnder)
            #                {
            #                    nodeUnder.AOTshowProperties();
            #                }
            #            }
            #            else
            #            {
            #                menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #                if(menuItemNode)
            #                {
            #                    menuItemNode.AOTshowProperties();
            #                }
            #            }
            #            break;
            #
            #        default:
            #            break;
            #
            #    }
            #}
          ENDSOURCE
          SOURCE #DiscoverLinkedMenuItems
            #private boolean DiscoverLinkedMenuItems(FormTreeItem _formTreeItem)
            #{
            #    #Properties
            #    boolean         retValue = false;
            #    Label           label = new Label();
            #    int             stateIcon;
            #    TreeNode        nodeUnder;
            #    Object          objectUnder;
            #    TreeNode        menuItemNode, formNode, designNode, partsNode;
            #    str             menuItemKey;
            #
            #    void processFormSubNode(TreeNode _formSubNode)
            #    {
            #        TreeNodeIterator tIterator = _formSubNode.AOTiterator();
            #        TreeNode controlMenuItemNode;
            #        TreeNode controlNode = tIterator.next();
            #        str l, c, text, formatStr;
            #
            #        while(controlNode != null)
            #        {
            #            controlMenuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(controlNode);
            #
            #            if(controlMenuItemNode)
            #            {
            #                l = findProperty(controlNode.AOTgetProperties(),#PropertyText);
            #                formatStr = '%1';
            #                if(l == '')
            #                {
            #                    formatStr = '- %1 -';
            #                    l = findProperty(controlMenuItemNode.AOTgetProperties(), #PropertyLabel);
            #                }
            #
            #                if(SysLabel::isLabelId(l))
            #                {
            #                    text = strFmt(formatStr, label.extractString(l));
            #                }
            #                else
            #                {
            #                    text = strFmt(formatStr, l);
            #                }
            #
            #                c = strFmt('%1 (%2.%3)', text, SysSecEntryPointManager::GetSecurableMenuItemType(controlMenuItemNode), controlMenuItemNode.AOTname());
            #
            #                retValue = true;
            #
            #                menuItemKey = element.GetMenuItemKeyForNode(controlNode);
            #
            #                if(currentRoleAOTName == '')
            #                {
            #                    stateIcon = 0;
            #                }
            #                else
            #                {
            #                    stateIcon = accessImages[1+ AccessRight::NoAccess];
            #                    if(accessRightsMap != null && accessRightsMap.exists(menuItemKey))
            #                    {
            #                        stateIcon = accessImages[1+ accessRightsMap.lookup(menuItemKey)];
            #                    }
            #                }
            #                SysFormTreeControl::addTreeItem(MenuTree, c, _formTreeItem.idx(), controlNode,
            #                    imageListAppl_AOT.image(controlNode.AOTbitmapId()), 0, stateIcon);
            #
            #            }
            #            controlNode = tIterator.next();
            #        }
            #    }
            #
            #    objectUnder = _formTreeItem.data();
            #    if(objectUnder == null)
            #        return false;
            #
            #    if(objectUnder is SysSecSecurableObject)
            #    {
            #        return false;
            #    }
            #
            #    nodeUnder = objectUnder as TreeNode;
            #    menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #    if(menuItemNode != null)
            #    {
            #        formNode = SysSecEntryPointManager::GetLinkedFormNode(menuItemNode);
            #        if(formNode)
            #        {
            #            designNode = formNode.AOTfindChild('Designs').AOTfindChild('DesignList');
            #            if(designNode)
            #            {
            #                processFormSubNode(designNode);
            #            }
            #
            #            partsNode = formNode.AOTfindChild('Parts');
            #            if(partsNode)
            #            {
            #                processFormSubNode(partsNode);
            #            }
            #        }
            #    }
            #
            #    if(retValue)
            #    {
            #        if(!_formTreeItem.children())
            #        {
            #            _formTreeItem.children(true);
            #            MenuTree.setItem(_formTreeItem);
            #            MenuTree.expand(_formTreeItem.idx());
            #        }
            #    }
            #
            #    return retValue;
            #}
          ENDSOURCE
          SOURCE #expanding
            #public boolean expanding(int _Idx, FormTreeExpand _action, anytype _data)
            #{
            #    #ResAppl
            #    #Properties
            #    FormTreeItem    parent = this.getItem(_idx);
            #    boolean         ret;
            #    str             c, l;
            #    Object          objectUnder;
            #    SysSecSecurableObject sysSecSecurableObject;
            #    TreeNode        nodeParent, nodeChild, nodeShown;
            #    TreeItemIdx     treeItemIdx;
            #    Label           label = new Label();
            #    int             stateIcon;
            #    FormTreeItem    formTreeItem, childTreeItem;
            #    boolean         isServiceNode = false;
            #    TreeItemIdx     childItemIdx;
            #    SysSecEntryPointKey entryPointKey;
            #    SecurableObject         curSecurableObject;
            #
            #    ret = super(_Idx, _action, _data);
            #
            #    if (parent.stateExpandedOnce())
            #        return ret;
            #
            #    objectUnder = parent.data();
            #
            #    //Perf optimization: Load EP objects only when expanding EP node first time
            #    if(_Idx == webRootItemIdx && objectUnder is TreeNode)
            #    {
            #        secTree = new SysSecTree(element as Object, false, SysSecTreeSubType::SecurableObjects);
            #        secTree.fillTree();
            #        secHelper = new SysSecHelper(element as Object);
            #        curSecurableObject.RecId = 1;
            #        curSecurableObject.Type = #SecurableTypeEP;
            #        sysSecSecurableObject = new SysSecSecurableObject(element as Object, secTree, null, curSecurableObject);
            #        sysSecSecurableObject.setData(TreeNode::findNode(strFmt('%1', #WebPath)));
            #        sysSecSecurableObject.setIdx(webRootItemIdx);
            #        formTreeItem = MenuTree.getItem(webRootItemIdx);
            #        FormTreeItem.data(sysSecSecurableObject);
            #        objectUnder = SysSecSecurableObject;
            #        MenuTree.setItem(FormTreeItem);
            #    }
            #
            #    if(objectUnder is SysSecSecurableObject)
            #    {
            #        sysSecSecurableObject = objectUnder as SysSecSecurableObject;
            #        sysSecSecurableObject.expandChildren();
            #
            #        childItemIdx = MenuTree.getChild(_idx);
            #        while(childItemIdx != 0)
            #        {
            #            childTreeItem = MenuTree.getItem(childItemIdx);
            #            stateIcon = 0;
            #            entryPointKey = element.GetEntryPointKeyForSysSecTreeItem(childTreeItem);
            #            if(entryPointKey != '')
            #            {
            #                if(accessRightsMap != null)
            #                {
            #                    if(accessRightsMap.exists(entryPointKey))
            #                    {
            #                        stateIcon = accessImages[1+ accessRightsMap.lookup(entryPointKey)];
            #                        if(oldAccessRightsMap != null && oldAccessRightsMap.exists(entryPointKey))
            #                        {
            #                            if(accessRightsMap.lookup(entryPointKey) != oldAccessRightsMap.lookup(entryPointKey))
            #                            {
            #                                childTreeItem.stateBold(true);
            #                            }
            #                        }
            #                    }
            #                    else
            #                    {
            #                        stateIcon = accessImages[1+ AccessRight::NoAccess];
            #                    }
            #                }
            #            }
            #            childTreeItem.stateImage(stateIcon);
            #            MenuTree.setItem(childTreeItem);
            #
            #            childItemidx = MenuTree.getNextSibling(childItemidx);
            #        }
            #    }
            #    else
            #    {
            #        nodeParent = objectUnder as TreeNode;
            #
            #        if(Global::strStartsWith(nodeParent.treeNodePath(),strFmt('%1\\', #FormsPath)))
            #        {
            #            return ret;
            #        }
            #
            #        if (nodeParent)
            #        {
            #            if(nodeParent.AOTparent() != null && nodeParent.AOTparent().treeNodePath() == #ServicesPath)
            #            {
            #                isServiceNode = true;
            #                nodeChild = nodeParent.AOTfindChild(#ServiceOperations).AOTfirstChild();
            #            }
            #            else
            #            {
            #                nodeChild = nodeParent.AOTfirstChild();
            #            }
            #        }
            #        while(nodeChild)
            #        {
            #            nodeShown = nodeChild;
            #            if (nodeChild.handle() == classnum(MenuReference))
            #            {
            #                nodeShown = TreeNode::findNode('Menus\\' + nodeChild.AOTname());
            #                l = findProperty(nodeShown.AOTgetProperties(),#PropertyLabel);
            #                c = label.extractString(l);
            #            }
            #            else if(nodeChild.handle() == classnum(Menu))
            #            {
            #                l = findProperty(nodeShown.AOTgetProperties(),#PropertyLabel);
            #                c = label.extractString(l);
            #            }
            #            else
            #            {
            #                c = label.extractString(nodeShown.AOTname());
            #            }
            #
            #            if(currentDevelopmentObject == '')
            #            {
            #                stateIcon = 0;
            #            }
            #            else if(curAccessTree != null && curAccessTree.exists(nodeShown.treeNodePath()))
            #            {
            #                stateIcon = accessImages[1+ curAccessTree.lookup(nodeShown.treeNodePath())];
            #            }
            #            else
            #            {
            #                stateIcon = accessImages[1+ AccessRight::NoAccess];
            #            }
            #
            #            treeItemIdx = SysFormTreeControl::addTreeItem(MenuTree, c, _Idx, nodeShown,
            #                imageListAppl_AOT.image(nodeShown.AOTbitmapId()), (isServiceNode ? 0 : nodeShown.AOTchildNodeCount()), stateIcon);
            #
            #            if(oldAccessTree != null)
            #            {
            #                if(oldAccessTree.exists(nodeShown.treeNodePath()))
            #                {
            #                    if(curAccessTree.lookup(nodeShown.treeNodePath()) != oldAccessTree.lookup(nodeShown.treeNodePath()))
            #                    {
            #                        formTreeItem = MenuTree.getItem(treeItemIdx);
            #                        FormTreeItem.stateBold(true);
            #                        MenuTree.setItem(FormTreeItem);
            #                    }
            #                    else
            #                    {
            #                        if(nodeHasChildWithNewAccessTree.exists(nodeShown.treeNodePath()))
            #                        {
            #                            formTreeItem = MenuTree.getItem(treeItemIdx);
            #                            // BP Deviation documented
            #                            FormTreeItem.text(FormTreeItem.text() + '*');
            #                            newIndicatedItems.insert(treeItemIdx, 0);
            #                            MenuTree.setItem(FormTreeItem);
            #                        }
            #                    }
            #                }
            #            }
            #
            #            nodeChild = nodeChild.AOTnextSibling();
            #        }
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #keyDown
            #public boolean keyDown(int _vKey, boolean _Ctrl, boolean _Shift)
            #{
            #    boolean ret;
            #    int idx;
            #    FormTreeItem item;
            #    #KeyPressed
            #
            #    ret = super(_vKey, _Ctrl, _Shift);
            #
            #    if (!MenuTree.getSelectedCount())
            #    {
            #        return ret;
            #    }
            #
            #    idx = MenuTree.getSelection();
            #    if (!idx)
            #    {
            #        return ret;
            #    }
            #
            #    item = MenuTree.getItem( idx);
            #
            #    if(_vKey == #return)
            #        element.launch( item);
            #    else if( _vKey == #delete)
            #    {
            #        if(!MenuTree.getParent( idx))
            #        {
            #            return ret;
            #        }
            #        MenuTree.delete( idx);
            #
            #    }
            #    return ret;
            #
            #}
          ENDSOURCE
          SOURCE #mouseDown
            #public int mouseDown(int _x, int _y, int _button, boolean _Ctrl, boolean _Shift)
            #{
            #    int ret;
            #    int idx;
            #
            #    ret = super(_x, _y, _button, _Ctrl, _Shift);
            #
            #    [idx] = this.hitTest(_x, _y);
            #
            #    MenuTree.select(idx);
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #selectInGrid
            #public void selectInGrid()
            #{
            #    Object objectUnder;
            #    TreeNode nodeUnder;
            #    FormTreeItem formTreeItem;
            #    SysSecEntryPointKey objectKey;
            #    TreeNode entryPointNode;
            #
            #    formTreeItem = MenuTree.getItem(MenuTree.getSelection());
            #
            #    if(!formTreeItem)
            #    {
            #        return;
            #    }
            #
            #    objectUnder = formTreeItem.data();
            #    if (!objectUnder)
            #    {
            #        return;
            #    }
            #
            #    if(objectUnder is SysSecSecurableObject)
            #    {
            #        objectKey = element.GetEntryPointKeyForSysSecTreeItem(formTreeItem);
            #    }
            #    else
            #    {
            #        nodeUnder = formTreeItem.data();
            #        if (!nodeUnder)
            #        {
            #            return;
            #        }
            #
            #        if(strStartsWith(nodeUnder.treeNodePath(), #MenusPath) || strStartsWith(nodeUnder.treeNodePath(), #FormsPath))
            #        {
            #            entryPointNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #        }
            #        else if(SysSecEntryPointManager::TreeNodeIsServiceOperation(nodeUnder))
            #        {
            #            entryPointNode = nodeUnder;
            #        }
            #
            #        if(entryPointNode != null)
            #        {
            #            objectKey = SysSecEntryPointManager::GetKeyForEntryPointNode(entryPointNode);
            #        }
            #    }
            #
            #    element.lock();
            #    SysSecEntryPointTmp_ds.markAllLoadedRecords(0);
            #    SysSecEntryPointTmp_ds.refreshEx(-1);
            #    if(objectKey != '' && SysSecEntryPointTmp_ds.findValue(
            #        fieldName2id(tableNum('SysSecEntryPointTmp'), 'ObjectKey'), objectKey))
            #    {
            #        SysSecEntryPointTmp_ds.setCurrent();
            #        SysSecEntryPointTmp_ds.mark(1);
            #    }
            #    element.unLock();
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _OldItem, FormTreeItem _NewItem, FormTreeSelect _how)
            #{
            #    super(_OldItem, _NewItem, _how);
            #
            #    MenuTree.selectInGrid();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
      ReadPermissions     #No
      UpdatePermissions   #No
      CreatePermissions   #No
    ENDPROPERTIES
    
    PERMISSIONSET #Delete
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
      TABLE #SecurityRole
        PROPERTIES
          Table               #SecurityRole
          EffectiveAccess     #Create
          ManagedBy           #Manual
        ENDPROPERTIES
        
      ENDTABLE
      
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
  ASSOCIATEDFORM #SysSecAssignOM
    PROPERTIES
      Form                #SysSecAssignOM
      AccessLevel         #Delete
      SystemManaged       #No
      ManagedBy           #
    ENDPROPERTIES
    
  ENDASSOCIATEDFORM
  
ASSOCIATEDFORM #SysSecDutyLookup
  PROPERTIES
    Form                #SysSecDutyLookup
    AccessLevel         #Read
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecLoadEPTrace
  PROPERTIES
    Form                #SysSecLoadEPTrace
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecPrivilegeLookup
  PROPERTIES
    Form                #SysSecPrivilegeLookup
    AccessLevel         #Read
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecReferenceDutiesForEntryPoint
  PROPERTIES
    Form                #SysSecReferenceDutiesForEntryPoint
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecReferencePrivilegesForEntryPoint
  PROPERTIES
    Form                #SysSecReferencePrivilegesForEntryPoint
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecRoleLookup
  PROPERTIES
    Form                #SysSecRoleLookup
    AccessLevel         #Read
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecSetEntryPointRights
  PROPERTIES
    Form                #SysSecSetEntryPointRights
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecSetEntryPointRightsForPrivilege
  PROPERTIES
    Form                #SysSecSetEntryPointRightsForPrivilege
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecLoadEPTrace
  PROPERTIES
    Name                #SysSecLoadEPTrace
    Origin              #{A2F928A6-4D69-48BF-A7E3-6C4F33A83F1D}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    SysSecEntryPointTmp epTraceData;
      #    super();
      #
      #    if(element.args() == null)
      #    {
      #        return;
      #    }
      #
      #    element.design().caption(strFmt("@SDT234", element.args().parm()));
      #    InfoText.text(strFmt("@SDT235"));
      #
      #    epTraceData = element.args().record();
      #
      #    if(epTraceData.RecId != 0)
      #    {
      #        SysSecEntryPointTmp.setTmpData(epTraceData);
      #        SysSecEntryPointTmp_ds.executeQuery();
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysSecEntryPointTmp
          Table               #SysSecEntryPointTmp
          AllowEdit           #No
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SDT236
      SetCompany          #No
      AllowDocking        #Yes
      TopMargin           #0
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          DataSource          #SysSecEntryPointTmp
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          Left                #Auto (right)
          ElementPosition     #1610612733
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #MarkSelection
          AutoDeclaration     #Yes
          HelpText            #@SDT237
          ElementPosition     #1610612734
          HierarchyParent     #Group
          Text                #@SDT238
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysSecEntryPointTmp developmentTmp;
            #    List objectKeys = new List(Types::String);
            #
            #    super();
            #
            #    for (developmentTmp = getFirstSelection(SysSecEntryPointTmp_ds);
            #            developmentTmp;
            #            developmentTmp = SysSecEntryPointTmp_ds.getNext())
            #    {
            #        objectKeys.addEnd(SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(developmentTmp));
            #    }
            #
            #    if(element.args() && element.args().caller() &&
            #        formHasMethod(element.args().caller(), identifierStr(MarkObjectsAsRecorded)))
            #    {
            #        element.args().caller().MarkObjectsAsRecorded(objectKeys);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #UpdatePermissions
          HelpText            #@SDT239
          ElementPosition     #1073741822
          HierarchyParent     #Group
          Text                #@SDT240
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysSecEntryPointTmp tmpData2 = SysSecEntryPointTmp;
            #    SysSecEntryPointTmp tmpData;
            #    Map selectedRows = new Map(Types::Int64, Types::Record);
            #    SysSecEntryPointTmp curRecord = SysSecEntryPointTmp.data();
            #    MapIterator mapIterator;
            #
            #    for (tmpData = getFirstSelection(SysSecEntryPointTmp_ds);
            #            tmpData;
            #            tmpData = SysSecEntryPointTmp_ds.getNext())
            #    {
            #        selectedRows.insert(tmpData.RecId, tmpData);
            #    }
            #
            #    ttsBegin;
            #    while select forUpdate tmpData2
            #    {
            #        if(element.args() && element.args().caller() &&
            #            formHasMethod(element.args().caller(), identifierStr(GetAccessRightForObjectKey)))
            #        {
            #            tmpData2.AccessRight = element.args().caller().GetAccessRightForObjectKey(SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(tmpData2));
            #            tmpData2.update();
            #        }
            #    }
            #    ttsCommit;
            #
            #    SysSecEntryPointTmp.setTmpData(tmpData2);
            #    SysSecEntryPointTmp_ds.executeQuery();
            #    SysSecEntryPointTmp_ds.findRecord(curRecord);
            #    SysSecEntryPointTmp_ds.setCurrent();
            #
            #    mapIterator = new mapIterator(selectedRows);
            #    while(mapIterator.more())
            #    {
            #        tmpData = mapIterator.value();
            #        SysSecEntryPointTmp_DS.markRecord(tmpData, 1);
            #        mapIterator.next();
            #    }
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SysSecEntryPointTmp_EPTraceIsPostBack
          ElementPosition     #1100585365
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysSecEntryPointTmp
          DataField           #EPTraceIsPostBack
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #SysSecEntryPointTmp_AccessRight
          ElementPosition     #1717986912
          HierarchyParent     #Grid
          Label               #@SDT241
          DataSource          #SysSecEntryPointTmp
          DataField           #AccessRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #SysSecEntryPointTmp_ObjectType
          ElementPosition     #1181116002
          HierarchyParent     #Grid
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #SysSecEntryPointTmp_SystemUserRight
          ElementPosition     #1932735279
          HierarchyParent     #Grid
          Label               #@SDT25
          DataSource          #SysSecEntryPointTmp
          DataField           #SystemUserRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #SysSecEntryPointTmp_EPTraceSessionId
          ElementPosition     #644245092
          HierarchyParent     #Grid
          DataSource          #SysSecEntryPointTmp
          DataField           #EPTraceSessionId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InfoText
          AutoDeclaration     #Yes
          Width               #Column width
          Skip                #Yes
          AlignControl        #No
          ElementPosition     #536870911
          DisplayHeight       #3
          Border              #None
          MultiLine           #Yes
          FontSize            #10
          ShowLabel           #No
          IMEMode             #Disabled
          ViewEditMode        #View
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysSecEntryPointTmp_EPTraceModuleName
          ElementPosition     #858993456
          HierarchyParent     #Grid
          DataSource          #SysSecEntryPointTmp
          DataField           #EPTraceModuleName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysSecEntryPointTmp_EPTracePageName
          ElementPosition     #1020054729
          HierarchyParent     #Grid
          DataSource          #SysSecEntryPointTmp
          DataField           #EPTracePageName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysSecEntryPointTmp_EPTraceUserName
          ElementPosition     #429496728
          HierarchyParent     #Grid
          DataSource          #SysSecEntryPointTmp
          DataField           #EPTraceUserName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysSecEntryPointTmp_ObjectAOTName
          ElementPosition     #1449551457
          HierarchyParent     #Grid
          Label               #@SDT167
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecPrivilegeLookup
  PROPERTIES
    Name                #SysSecPrivilegeLookup
    Origin              #{DCB02030-924D-485B-84F2-FE45A2FD9802}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    super();
      #
      #    element.selectMode(SecurityTask_Name);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SecurityTask
          Table               #SecurityTask
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          AutoNotify          #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #executeQuery
          #public void executeQuery()
          #{
          #    QueryBuildDataSource qbds = SecurityTask_ds.queryBuildDataSource();
          #
          #    QueryBuildRange qbr2, qbr = qbds.addRange(fieldNum(SecurityTask, IsEnabled));
          #    qbr.value('1');
          #    qbr.status(RangeStatus::Locked);
          #
          #    qbr2 = qbds.addRange(fieldNum(SecurityTask, Type));
          #    qbr2.value(SysQuery::value(SecurityTaskType::Privilege));
          #    qbr2.status(RangeStatus::Locked);
          #
          #    qbds.addSortField(fieldNum(SecurityTask, Name));
          #
          #    super();
          #
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
      WindowResize        #Dynamic
      SetCompany          #No
      Style               #Lookup
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          DataSource          #SecurityTask
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SecurityTask_AotName
          ElementPosition     #1610612733
          HierarchyParent     #Grid
          Label               #@SDT244
          DataSource          #SecurityTask
          DataField           #AotName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SecurityTask_Name
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Grid
          Label               #@SDT245
          DataSource          #SecurityTask
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecReferenceDutiesForEntryPoint
  PROPERTIES
    Name                #SysSecReferenceDutiesForEntryPoint
    Origin              #{D57A11F7-66C3-4E48-BE6F-A3BDF543FC9E}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    SecurityTask duty;
      #    SecuritySubTask dutyPrivileges;
      #    SecurityTask privilege;
      #    SecurableObject entryPointObject;
      #    SecurityTaskEntryPoint privilegeEntryPoint;
      #    SysSecEntryPointTmp tmpTable;
      #    SecurableType entryPointType;
      #    SecurableName entryPointName;
      #    SecurableChildName entryPointChildName;
      #    container paramAOTNames;
      #
      #    super();
      #
      #    if(element.args() == null)
      #    {
      #        return;
      #    }
      #
      #    entryPointType = element.args().parmEnum();
      #    paramAOTNames = str2con(element.args().parm(), '.');
      #
      #    if(conLen(paramAOTNames) == 0)
      #    {
      #        return;
      #    }
      #    entryPointName = conPeek(paramAOTNames, 1);
      #    if(conLen(paramAOTNames) > 1)
      #    {
      #        entryPointChildName = conPeek(paramAOTNames, 2);
      #    }
      #
      #    this.design().caption(strFmt("@SDT231", entryPointType, entryPointName, entryPointChildName));
      #
      #    //Show all duties that grant entry point with the max access level
      #    insert_recordset tmpTable(ObjectID, ObjectKey, ObjectAOTName, ObjectLabel, ObjectDescription, AccessRight)
      #            select RecId, AOTName, AOTName, Name, Description from duty
      #                    group by RecId, AOTName, Name, Description
      #                    where duty.Type == SecurityTaskType::Duty &&
      #                        duty.IsEnabled == NoYes::Yes
      #                join privilege
      #                join dutyPrivileges where duty.RecId == dutyPrivileges.SecurityTask &&
      #                        privilege.RecId == dutyPrivileges.SecuritySubTask
      #                    join maxOf(PermissionGroup) from privilegeEntryPoint
      #                    where
      #                        privilegeEntryPoint.SecurityTask == privilege.RecId &&
      #                        privilege.Type == SecurityTaskType::Privilege &&
      #                        privilege.IsEnabled == NoYes::Yes
      #                    join entryPointObject where
      #                        entryPointObject.RecId == privilegeEntryPoint.EntryPoint &&
      #                        entryPointObject.Type == entryPointType &&
      #                        entryPointObject.Name == entryPointName &&
      #                        entryPointObject.ChildName == entryPointChildName;
      #
      #    SysSecEntryPointTmp.setTmpData(tmpTable);
      #    SysSecEntryPointTmp_DS.executeQuery();
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysSecEntryPointTmp
          Table               #SysSecEntryPointTmp
          AllowEdit           #No
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
      Caption             #@SDT232
      Frame               #Dialog
      SetCompany          #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          DataSource          #SysSecEntryPointTmp
          DataGroup           #ReferenceObject
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Button
          AutoDeclaration     #Yes
          Left                #Auto (right)
          HelpText            #@SDT233
          ElementPosition     #1431655764
          Text                #@SDT226
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    #AOT
            #    SysSecEntryPointTmp developmentTmp;
            #    TreeNode dutyNode;
            #    TreeNode roleNode, roleDutiesNode;
            #    SecurityRole role;
            #    SecurityRoleTaskGrant roleTaskGrant;
            #
            #    super();
            #
            #    if(element.args().caller().CurrentDevelopmentObject() == '')
            #    {
            #        throw error(strFmt("@SDT227"));
            #    }
            #
            #    if(isDeveloper())
            #    {
            #        roleNode = TreeNode::findNode(strFmt('%1\\%2', #SecRolesPath, element.args().caller().CurrentDevelopmentObject()));
            #
            #        //Ensure object still exists
            #        if(roleNode == null)
            #        {
            #            throw error(strFmt("@SDT228", element.args().caller().CurrentDevelopmentObject()));
            #        }
            #
            #        //Handle VCS
            #        if(!SysSecEntryPointManager::ObjectEditableVCS(roleNode))
            #        {
            #            return;
            #        }
            #
            #        roleDutiesNode = roleNode.AOTfindChild('Duties');
            #
            #        for (developmentTmp = getFirstSelection(SysSecEntryPointTmp_ds);
            #                developmentTmp;
            #                developmentTmp = SysSecEntryPointTmp_ds.getNext())
            #        {
            #            dutyNode = TreeNode::findNode(strFmt('%1\\%2', #SecDutiesPath, developmentTmp.ObjectAOTName));
            #
            #            if(dutyNode == null)
            #            {
            #                throw error(strFmt("@SDT229", developmentTmp.ObjectAOTName));
            #            }
            #
            #            if(roleDutiesNode.AOTfindChild(developmentTmp.ObjectAOTName) == null)
            #            {
            #                roleDutiesNode.AOTDrop(dutyNode);
            #            }
            #
            #        }
            #        roleNode.AOTsave();
            #    }
            #    else
            #    {
            #        SysSecEntryPointManager::EnsureVCSDisabledForBusinessUser();
            #
            #        //Non-admin can only add privileges to role
            #        select RecId from role where role.AotName == element.args().caller().GetCurrentRoleAOTname();
            #        roleTaskGrant.SecurityRole = role.RecId;
            #
            #        for (developmentTmp = getFirstSelection(SysSecEntryPointTmp_ds);
            #                developmentTmp;
            #                developmentTmp = SysSecEntryPointTmp_ds.getNext())
            #        {
            #            roleTaskGrant.SecurityTask = developmentTmp.ObjectID;
            #            roleTaskGrant.insert();
            #        }
            #    }
            #
            #    if(element.args() && element.args().caller() &&
            #        formHasMethod(element.args().caller(), identifierStr(SetPermissions)))
            #    {
            #        element.args().caller().SetPermissions();
            #    }
            #    element.close();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_AccessRight
          ElementPosition     #1431655764
          HierarchyParent     #Grid
          Label               #@SDT158
          DataSource          #SysSecEntryPointTmp
          DataField           #AccessRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Grid_ObjectLabel
          ElementPosition     #715827882
          HierarchyParent     #Grid
          Label               #@SDT166
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
      ReadPermissions     #No
      UpdatePermissions   #No
      DeletePermissions   #No
    ENDPROPERTIES
    
    PERMISSIONSET #Create
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
      TABLE #SecurityRoleTaskGrant
        PROPERTIES
          Table               #SecurityRoleTaskGrant
          EffectiveAccess     #Create
          ManagedBy           #Manual
        ENDPROPERTIES
        
      ENDTABLE
      
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecReferencePrivilegesForEntryPoint
  PROPERTIES
    Name                #SysSecReferencePrivilegesForEntryPoint
    Origin              #{B8FF4725-727F-4AFC-9272-8CC2EA4AAAF8}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    SecurityTask privilege;
      #    SecurableObject entryPointObject;
      #    SecurityTaskEntryPoint privilegeEntryPoint;
      #    SysSecEntryPointTmp tmpTable;
      #    SecurableType entryPointType;
      #    SecurableName entryPointName;
      #    SecurableChildName entryPointChildName;
      #    container paramAOTNames;
      #    SysSecDevelopmentType developmentType;
      #
      #    super();
      #
      #    if(element.args() == null)
      #    {
      #        return;
      #    }
      #
      #    entryPointType = element.args().parmEnum();
      #    paramAOTNames = str2con(element.args().parm(), '.');
      #
      #    if(conLen(paramAOTNames) == 0)
      #    {
      #        return;
      #    }
      #    entryPointName = conPeek(paramAOTNames, 1);
      #    if(conLen(paramAOTNames) > 1)
      #    {
      #        entryPointChildName = conPeek(paramAOTNames, 2);
      #    }
      #
      #    if(element.args() && element.args().caller() &&
      #        formHasMethod(element.args().caller(), identifierStr(CurrentDevelopmentType)))
      #    {
      #        developmentType = element.args().caller().CurrentDevelopmentType();
      #
      #        if(developmentType == SysSecDevelopmentType::Duty)
      #        {
      #            Button.text(strFmt("@SDT222"));
      #        }
      #    }
      #
      #    this.design().caption(strFmt("@SDT223", entryPointType, entryPointName, entryPointChildName));
      #
      #    //Show all privileges that grant entry point
      #    insert_recordset tmpTable(ObjectID, ObjectKey, ObjectAOTName, ObjectLabel, ObjectDescription, AccessRight)
      #                select RecId, AOTName, AOTName, Name, Description from privilege
      #                        group by RecId, AOTName, Name, Description
      #                    join maxOf(PermissionGroup) from privilegeEntryPoint
      #                        where privilegeEntryPoint.SecurityTask == privilege.RecId &&
      #                                privilege.Type == SecurityTaskType::Privilege &&
      #                                privilege.IsEnabled == NoYes::Yes
      #                    join entryPointObject where
      #                        entryPointObject.RecId == privilegeEntryPoint.EntryPoint &&
      #                        entryPointObject.Type == entryPointType &&
      #                        entryPointObject.Name == entryPointName &&
      #                        entryPointObject.ChildName == entryPointChildName;
      #
      #    SysSecEntryPointTmp.setTmpData(tmpTable);
      #    SysSecEntryPointTmp_DS.executeQuery();
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysSecEntryPointTmp
          Table               #SysSecEntryPointTmp
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
      Caption             #@SDT224
      Frame               #Dialog
      SetCompany          #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          DataSource          #SysSecEntryPointTmp
          DataGroup           #ReferenceObject
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Button
          AutoDeclaration     #Yes
          Left                #Auto (right)
          HelpText            #@SDT225
          ElementPosition     #1431655764
          Text                #@SDT226
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    #AOT
            #    SysSecEntryPointTmp developmentTmp;
            #    TreeNode privilegeNode;
            #    TreeNode objectNode, objectPrivilegesNode;
            #    SysSecDevelopmentType developmentType;
            #
            #    SecurityRole role;
            #    SecurityRoleTaskGrant roleTaskGrant;
            #
            #    super();
            #
            #    if(element.args() && element.args().caller() &&
            #        formHasMethod(element.args().caller(), identifierStr(CurrentDevelopmentType)))
            #    {
            #        developmentType = element.args().caller().CurrentDevelopmentType();
            #    }
            #
            #    if(element.args().caller().CurrentDevelopmentObject() == '')
            #    {
            #        throw error(strFmt("@SDT227"));
            #    }
            #
            #    if(isDeveloper())
            #    {
            #        //Developer can work on role or duty
            #        if(developmentType == SysSecDevelopmentType::Role)
            #        {
            #            objectNode = TreeNode::findNode(strFmt('%1\\%2', #SecRolesPath, element.args().caller().CurrentDevelopmentObject()));
            #
            #            //Ensure object still exists
            #            if(objectNode == null)
            #            {
            #                throw error(strFmt("@SDT228", element.args().caller().CurrentDevelopmentObject()));
            #            }
            #        }
            #
            #        if(developmentType == SysSecDevelopmentType::Duty)
            #        {
            #            objectNode = TreeNode::findNode(strFmt('%1\\%2', #SecDutiesPath, element.args().caller().CurrentDevelopmentObject()));
            #
            #            //Ensure object still exists
            #            if(objectNode == null)
            #            {
            #                throw error(strFmt("@SDT229", element.args().caller().CurrentDevelopmentObject()));
            #            }
            #        }
            #
            #        //Handle VCS
            #        if(!SysSecEntryPointManager::ObjectEditableVCS(objectNode))
            #        {
            #            return;
            #        }
            #
            #        objectPrivilegesNode = objectNode.AOTfindChild('Privileges');
            #
            #        for (developmentTmp = getFirstSelection(SysSecEntryPointTmp_ds);
            #                developmentTmp;
            #                developmentTmp = SysSecEntryPointTmp_ds.getNext())
            #        {
            #            privilegeNode = TreeNode::findNode(strFmt('%1\\%2', #SecPrivilegesPath, developmentTmp.ObjectAOTName));
            #
            #            if(privilegeNode == null)
            #            {
            #                throw error(strFmt("@SDT230", developmentTmp.ObjectAOTName));
            #            }
            #
            #            if(objectPrivilegesNode.AOTfindChild(developmentTmp.ObjectAOTName) == null)
            #            {
            #                objectPrivilegesNode.AOTDrop(privilegeNode);
            #            }
            #
            #        }
            #        objectNode.AOTsave();
            #    }
            #    else
            #    {
            #        SysSecEntryPointManager::EnsureVCSDisabledForBusinessUser();
            #
            #        //Non-admin can only add privileges to role
            #        select RecId from role where role.AotName == element.args().caller().GetCurrentRoleAOTname();
            #        roleTaskGrant.SecurityRole = role.RecId;
            #
            #        for (developmentTmp = getFirstSelection(SysSecEntryPointTmp_ds);
            #                developmentTmp;
            #                developmentTmp = SysSecEntryPointTmp_ds.getNext())
            #        {
            #            roleTaskGrant.SecurityTask = developmentTmp.ObjectID;
            #            roleTaskGrant.insert();
            #        }
            #    }
            #
            #    if(element.args() && element.args().caller() &&
            #        formHasMethod(element.args().caller(), identifierStr(SetPermissions)))
            #    {
            #        element.args().caller().SetPermissions();
            #    }
            #
            #    element.close();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_AccessRight
          ElementPosition     #1431655764
          HierarchyParent     #Grid
          Label               #@SDT158
          DataSource          #SysSecEntryPointTmp
          DataField           #AccessRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Grid_ObjectLabel
          ElementPosition     #715827882
          HierarchyParent     #Grid
          Label               #@SDT166
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
      ReadPermissions     #No
      UpdatePermissions   #No
      DeletePermissions   #No
    ENDPROPERTIES
    
    PERMISSIONSET #Create
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
      TABLE #SecurityRoleTaskGrant
        PROPERTIES
          Table               #SecurityRoleTaskGrant
          EffectiveAccess     #Create
          ManagedBy           #Manual
        ENDPROPERTIES
        
      ENDTABLE
      
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecRoleLookup
  PROPERTIES
    Name                #SysSecRoleLookup
    Origin              #{7C70A7B6-529A-4940-8435-9C00805501FB}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    super();
      #
      #    element.selectMode(SecurityRole_Name);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SecurityRole
          Table               #SecurityRole
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          AutoNotify          #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #executeQuery
          #public void executeQuery()
          #{
          #    #SysSecUI
          #    QueryBuildDataSource qbds = SecurityRole_ds.queryBuildDataSource();
          #    QueryBuildRange qbr2, qbr = qbds.addRange(fieldNum(SecurityRole, IsEnabled));
          #    qbr.value('1');
          #    qbr.status(RangeStatus::Locked);
          #
          #    //Filter out -SYSADMIN-
          #    qbr2 = qbds.addRange(fieldNum(SecurityRole, AOTName));
          #    qbr2.value(SysQuery::valueNot(#SYSADMIN_TEXT));
          #    qbr2.status(RangeStatus::Hidden);
          #
          #    qbds.addSortField(fieldNum(SecurityRole, Name));
          #
          #    super();
          #
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
      WindowResize        #Dynamic
      SetCompany          #No
      Style               #Lookup
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          DataSource          #SecurityRole
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SecurityRole_AotName
          ElementPosition     #1610612733
          HierarchyParent     #Grid
          DataSource          #SecurityRole
          DataField           #AotName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SecurityRole_Name
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Grid
          DataSource          #SecurityRole
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecSetEntryPointRights
  PROPERTIES
    Name                #SysSecSetEntryPointRights
    Origin              #{DD1F597E-3781-40FE-B132-35251C3FDE5E}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    #AOT
      #    #Properties
      #    #resAppl
      #    SysFormSplitter_Y               _formSplitterY;
      #    SysFormSplitter_X               _formSplitterX;
      #
      #    IdentifierName                  currentObjectAOTName;
      #    SysSecDevelopmentType                         developmentType;
      #    ImageListAppl_SecurityAccess    imageList_access;
      #    ImageListAppl_Aot               imageListAppl_AOT;
      #    ImageRes                        accessImages[7];
      #    TreeItemIdx                     rootItemIdx;
      #
      #    Map                             currentHiglightedItems;
      #    Map                             entryPointRelatedTreeItems;
      #    Map                             privilegeTreeIdxs;
      #    Map                             entryPointPrivilegePermissions;
      #    Map                             parentsMap;
      #
      #    boolean                         step1Complete;
      #
      #    RecId                           selectedTask;
      #    boolean                         permissionChange;
      #}
    ENDSOURCE
    SOURCE #AddRoleObjects
      #public void AddRoleObjects(TreeItemIdx _roleTreeItemIdx, TreeNode _roleNode)
      #{
      #    #Properties
      #    TreeNode dutiesListNode, dutyReferenceNode;
      #    TreeNode dutyNode;
      #    TreeNodeIterator dutyIterator;
      #    TreeItemIdx dutyIdx;
      #
      #    //Process duties assigned to role
      #    dutiesListNode = _roleNode.AOTfindChild('Duties');
      #    dutyIterator = dutiesListNode.AOTiterator();
      #    dutyReferenceNode = dutyIterator.next();
      #
      #    while(dutyReferenceNode != null)
      #    {
      #        dutyNode = TreeNode::findNode(strFmt('%1\\%2', #SecDutiesPath, dutyReferenceNode.AOTname()));
      #
      #        if(dutyNode != null && dutyNode.AOTgetProperty(#PropertyEnabled) == 'Yes')
      #        {
      #            dutyIdx = SysFormTreeControl::addTreeItem(SecurityTree, dutyReferenceNode.AOTname(), _roleTreeItemIdx,
      #                        dutyNode, imageListAppl_AOT.image(dutyReferenceNode.AOTbitmapId()), true);
      #            parentsMap.insert(dutyIdx, '');
      #
      #            element.ProcessPrivileges(dutyIdx, TreeNode::findNode(strFmt('%1\\%2',
      #                                #SecDutiesPath, dutyReferenceNode.AOTname())).AOTfindChild('Privileges'));
      #
      #            parentsMap.remove(dutyIdx);
      #        }
      #
      #        dutyReferenceNode = dutyIterator.next();
      #    }
      #
      #    //Process privileges assigned to role
      #    element.ProcessPrivileges(_roleTreeItemIdx, _roleNode.AOTfindChild('Privileges'));
      #}
    ENDSOURCE
    SOURCE #ApplySelectedPermissionsToObject
      #public void ApplySelectedPermissionsToObject(TreeNode _privilegeNode, TreeItemIdx _treeItemIdx)
      #{
      #    SysSecEntryPointTmp tmpData, selectedEntryPoints;
      #    str entryPointKey;
      #    FormTreeItem privilegeTreeItem, childItem;
      #    Map relatedObjects;
      #    Map selectedItems = new Map(Types::String, Types::String);
      #    MapIterator privilegeIterator, relatedObjectsIterator, highlightedObjectsIterator, selectedItemsIterator;
      #    TreeItemIdx nextIdx, parentIdx;
      #    TreeNode privilegeNode, entryPointListNode, entryPointReferenceNode;
      #    TreeNodeIterator entryPointIterator;
      #    TreeItemIdx entryPointIdx, deleteIdx;
      #    FormTreeItem newEntryPointTreeItem, formTreeItem, highLightedTreeItem;
      #    Map privilegesPermissionMap;
      #    boolean highlightParents = false;
      #    List entryPointsThatWillBeRemoved = new List(Types::String);
      #    List removeFromMap;
      #    ListEnumerator entryPointListEnumerator, removeListEnumerator;
      #    boolean foundSelectedEntryPoint;
      #
      #    boolean FormTreeItemContainsEntryPoint(TreeItemIdx _idx, str _entryPointKey)
      #    {
      #        FormTreeItem item = SecurityTree.getItem(_idx);
      #        TreeItemIdx childIndex;
      #        formTreeItem currentTreeItem;
      #        TreeNode currentTreeNode;
      #
      #        currentTreeNode = item.data();
      #        if(currentTreeNode != null && findProperty(currentTreeNode.AOTgetProperties(), #PropertyObjectType) != '')
      #        {
      #            if(SysSecEntryPointManager::GetKeyForEntryPointReferenceNode(currentTreeNode) == _entryPointKey)
      #            {
      #                return true;
      #            }
      #        }
      #
      #        if(item.children())
      #        {
      #            childIndex = SecurityTree.getChild(_idx);
      #            while(childIndex != 0)
      #            {
      #                currentTreeItem = SecurityTree.getItem(childIndex);
      #                currentTreeNode = currentTreeItem.data();
      #                if(currentTreeNode != null && findProperty(currentTreeNode.AOTgetProperties(), #PropertyObjectType) != '')
      #                {
      #                    if(SysSecEntryPointManager::GetKeyForEntryPointReferenceNode(currentTreeNode) == _entryPointKey)
      #                    {
      #                        //Found one so return true;
      #                        return true;
      #                    }
      #                }
      #
      #                if(FormTreeItemContainsEntryPoint(childIndex, _entryPointKey))
      #                {
      #                    return true;
      #                }
      #
      #                childIndex = SecurityTree.getNextSibling(childIndex);
      #            }
      #        }
      #
      #        return false;
      #    }
      #
      #    if(_privilegeNode == null)
      #    {
      #        throw error(strFmt("@SDT181"));
      #    }
      #
      #    element.lockWindowUpdate(true);
      #
      #    for (tmpData = getFirstSelection(SysSecEntryPointTmp_ds);
      #            tmpData;
      #            tmpData = SysSecEntryPointTmp_ds.getNext())
      #    {
      #        selectedEntryPoints.data(tmpData);
      #        selectedEntryPoints.insert();
      #        entryPointKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(selectedEntryPoints);
      #        selectedItems.insert(entryPointKey, '');
      #
      #        if(selectedEntryPoints.NewAccessRight == AccessRight::NoAccess)
      #        {
      #            entryPointsThatWillBeRemoved.addEnd(entryPointKey);
      #        }
      #    }
      #
      #    //Remove all entry points references for existing privilege references in the security tree
      #    if(privilegeTreeIdxs.exists(_privilegeNode.AOTname()))
      #    {
      #        privilegeIterator = new MapIterator(privilegeTreeIdxs.lookup(_privilegeNode.AOTname()));
      #        while(privilegeIterator.more())
      #        {
      #            privilegeTreeItem = SecurityTree.getItem(privilegeIterator.key());
      #            if(privilegeTreeItem != null)
      #            {
      #                childItem = SecurityTree.getItem(SecurityTree.getChild(privilegeIterator.key()));
      #
      #                while(childItem != null)
      #                {
      #                    //Remove the idx from entryPointRelatedTreeItems
      #                    entryPointReferenceNode = childItem.data();
      #                    entryPointKey = SysSecEntryPointManager::GetKeyForEntryPointReferenceNode(entryPointReferenceNode);
      #                    if(entryPointRelatedTreeItems.exists(entryPointKey))
      #                    {
      #                        relatedObjects = entryPointRelatedTreeItems.lookup(entryPointKey);
      #                        if(relatedObjects.exists(childItem.idx()))
      #                        {
      #                            relatedObjects.remove(childItem.idx());
      #                            entryPointRelatedTreeItems.remove(entryPointKey);
      #                            entryPointRelatedTreeItems.insert(entryPointKey, relatedObjects);
      #                        }
      #                    }
      #
      #                    //Remove the idx from currentHiglightedItems
      #                    if(currentHiglightedItems != null && currentHiglightedItems.exists(childItem.idx()))
      #                    {
      #                        currentHiglightedItems.remove(childItem.idx());
      #                    }
      #
      #                    //Remove from entry point privilege permission cache
      #                    if(entryPointPrivilegePermissions.exists(entryPointKey))
      #                    {
      #                        privilegesPermissionMap = entryPointPrivilegePermissions.lookup(entryPointKey);
      #                        if(privilegesPermissionMap != null && privilegesPermissionMap.exists(_privilegeNode.AOTname()))
      #                        {
      #                            privilegesPermissionMap.remove(_privilegeNode.AOTname());
      #                            entryPointPrivilegePermissions.remove(entryPointKey);
      #                            entryPointPrivilegePermissions.insert(entryPointKey, privilegesPermissionMap);
      #                        }
      #                    }
      #
      #                    //Set next child
      #                    deleteIdx = childItem.idx();
      #                    nextIdx = SecurityTree.getNextSibling(childItem.idx());
      #                    childItem = SecurityTree.getItem(nextIdx);
      #
      #                    //Remove from the tree
      #                    SecurityTree.delete(deleteIdx);
      #                }
      #            }
      #
      #            privilegeIterator.next();
      #        }
      #    }
      #
      #    if(entryPointsThatWillBeRemoved != null && entryPointsThatWillBeRemoved.elements() > 0)
      #    {
      #        //Need to update relatedObjects cache for entry points that get removed from a privilege
      #        entryPointListEnumerator = entryPointsThatWillBeRemoved.getEnumerator();
      #        while(entryPointListEnumerator.moveNext())
      #        {
      #            entryPointKey = entryPointListEnumerator.current();
      #
      #            if(entryPointRelatedTreeItems.exists(entryPointKey))
      #            {
      #                relatedObjects = entryPointRelatedTreeItems.lookup(entryPointKey);
      #
      #                //Remove the current parent privilege from the related objects
      #                if(relatedObjects.exists(_treeItemIdx))
      #                {
      #                    relatedObjects.remove(_treeItemIdx);
      #                }
      #
      #                //Process all other related objects and remove them as well if needed
      #                removeFromMap = new List(Types::Int64);
      #                relatedObjectsIterator = new MapIterator(relatedObjects);
      #                while(relatedObjectsIterator.more())
      #                {
      #                    if(!FormTreeItemContainsEntryPoint(relatedObjectsIterator.key(), entryPointKey))
      #                    {
      #                        removeFromMap.addEnd(relatedObjectsIterator.key());
      #                    }
      #                    relatedObjectsIterator.next();
      #                }
      #
      #                removeListEnumerator = removeFromMap.getEnumerator();
      #                while(removeListEnumerator.moveNext())
      #                {
      #                    relatedObjects.remove(removeListEnumerator.current());
      #                }
      #                entryPointRelatedTreeItems.remove(entryPointKey);
      #                entryPointRelatedTreeItems.insert(entryPointKey, relatedObjects);
      #            }
      #        }
      #
      #        //For each currently highlighted item check if it still contains an entry point that is selected in grid, if not remove highlighting
      #        highlightedObjectsIterator = new MapIterator(currentHiglightedItems);
      #        removeFromMap = new List(Types::Int64);
      #        while(highlightedObjectsIterator.more())
      #        {
      #            foundSelectedEntryPoint = false;
      #            selectedItemsIterator = new MapIterator(selectedItems);
      #            while(selectedItemsIterator.more())
      #            {
      #                if(FormTreeItemContainsEntryPoint(highlightedObjectsIterator.key(), selectedItemsIterator.key()))
      #                {
      #                    foundSelectedEntryPoint = true;
      #                    break;
      #                }
      #                selectedItemsIterator.next();
      #            }
      #            if(!foundSelectedEntryPoint)
      #            {
      #                removeFromMap.addEnd(highlightedObjectsIterator.key());
      #            }
      #            highlightedObjectsIterator.next();
      #        }
      #
      #        removeListEnumerator = removeFromMap.getEnumerator();
      #        while(removeListEnumerator.moveNext())
      #        {
      #            highLightedTreeItem = SecurityTree.getItem(removeListEnumerator.current());
      #            highLightedTreeItem.stateBold(false);
      #            SecurityTree.setItem(highLightedTreeItem);
      #            currentHiglightedItems.remove(removeListEnumerator.current());
      #        }
      #    }
      #
      #    //Update the entry point permissions
      #    SysSecEntryPointManager::MergeEntryPointRightsIntoPrivilegeNode(_privilegeNode, selectedEntryPoints);
      #    permissionChange = true;
      #
      #    //Get the new privilege node
      #    privilegeNode = TreeNode::findNode(strFmt('%1\\%2', #SecPrivilegesPath, _privilegeNode.AOTname()));
      #    if(privilegeNode == null)
      #    {
      #        throw error(strFmt("@SDT182", privilegeNode.AOTname()));
      #    }
      #
      #    //Add the new entry points to the tree for each privilege reference
      #    if(privilegeTreeIdxs.exists(privilegeNode.AOTname()))
      #    {
      #        privilegeIterator = new MapIterator(privilegeTreeIdxs.lookup(_privilegeNode.AOTname()));
      #        while(privilegeIterator.more())
      #        {
      #            privilegeTreeItem = SecurityTree.getItem(privilegeIterator.key());
      #            highlightParents = false;
      #            if(privilegeTreeItem != null)
      #            {
      #                entryPointListNode = privilegeNode.AOTfindChild('Entry Points');
      #                entryPointIterator = entryPointListNode.AOTiterator();
      #
      #                entryPointReferenceNode = entryPointIterator.next();
      #                while(entryPointReferenceNode != null)
      #                {
      #                    entryPointIdx = SysFormTreeControl::addTreeItem(SecurityTree, entryPointReferenceNode.AOTname(), privilegeIterator.key(),
      #                        entryPointReferenceNode, imageListAppl_AOT.image(entryPointReferenceNode.AOTbitmapId()), 0,
      #                        accessImages[1+SysSecEntryPointManager::AccessLevel2AccessRight(entryPointReferenceNode.AOTgetProperty(#PropertyAccessLevel))]);
      #
      #                    entryPointKey = SysSecEntryPointManager::GetKeyForEntryPointReferenceNode(entryPointReferenceNode);
      #
      #                    //Update entryPointRelatedTreeItems
      #                    if(!entryPointRelatedTreeItems.exists(entryPointKey))
      #                    {
      #                        relatedObjects = new Map(Types::Int64, Types::String);
      #                    }
      #                    else
      #                    {
      #                        relatedObjects = entryPointRelatedTreeItems.lookup(entryPointKey);
      #                        entryPointRelatedTreeItems.remove(entryPointKey);
      #                    }
      #                    relatedObjects.insert(entryPointIdx, '');
      #                    //Add all parents
      #                    parentIdx = SecurityTree.getParent(entryPointIdx);
      #                    while(parentIdx != 0)
      #                    {
      #                        relatedObjects.insert(parentIdx, '');
      #                        parentIdx = SecurityTree.getParent(parentIdx);
      #                    }
      #
      #                    entryPointRelatedTreeItems.insert(entryPointKey, relatedObjects);
      #
      #                    //Higlight selected items
      #                    if(selectedItems.exists(entryPointKey))
      #                    {
      #                        newEntryPointTreeItem = SecurityTree.getItem(entryPointIdx);
      #                        newEntryPointTreeItem.stateBold(true);
      #                        highlightParents = true;
      #                        SecurityTree.setItem(newEntryPointTreeItem);
      #                        currentHiglightedItems.insert(newEntryPointTreeItem.idx(), '');
      #                    }
      #
      #                    //Update entry point privilege permission cache
      #                    if(!entryPointPrivilegePermissions.exists(entryPointKey))
      #                    {
      #                        privilegesPermissionMap = new Map(Types::String, Types::Enum);
      #                    }
      #                    else
      #                    {
      #                        privilegesPermissionMap = entryPointPrivilegePermissions.lookup(entryPointKey);
      #                        entryPointPrivilegePermissions.remove(entryPointKey);
      #                    }
      #                    privilegesPermissionMap.insert(privilegeNode.AOTname(),
      #                            SysSecEntryPointManager::AccessLevel2AccessRight(entryPointReferenceNode.AOTgetProperty(#PropertyAccessLevel)));
      #                    entryPointPrivilegePermissions.insert(entryPointKey, privilegesPermissionMap);
      #
      #                    entryPointReferenceNode = entryPointIterator.next();
      #                }
      #
      #                //Map new privilege node to privilege FormTreeItem data
      #                privilegeTreeItem.data(privilegeNode);
      #                SecurityTree.setItem(privilegeTreeItem);
      #
      #                //Ensure current privilege is expanded
      #                if(_treeItemIdx == privilegeIterator.key())
      #                {
      #                    if(!privilegeTreeItem.stateExpanded())
      #                    {
      #                        SecurityTree.expand(privilegeIterator.key());
      #                    }
      #                }
      #
      #                //Highlight the parents if needed
      #                if(highlightParents)
      #                {
      #                    if(!currentHiglightedItems.exists(privilegeIterator.key()))
      #                    {
      #                        formTreeItem = SecurityTree.getItem(privilegeIterator.key());
      #                        formTreeItem.stateBold(true);
      #                        SecurityTree.setItem(formTreeItem);
      #                        currentHiglightedItems.insert(privilegeIterator.key(), '');
      #                    }
      #
      #                    parentIdx = SecurityTree.getParent(privilegeIterator.key());
      #                    while(parentIdx != 0)
      #                    {
      #                        if(!currentHiglightedItems.exists(parentIdx))
      #                        {
      #                            formTreeItem = SecurityTree.getItem(parentIdx);
      #                            formTreeItem.stateBold(true);
      #                            SecurityTree.setItem(formTreeItem);
      #                            currentHiglightedItems.insert(parentIdx, '');
      #                        }
      #                        parentIdx = SecurityTree.getParent(parentIdx);
      #                    }
      #                }
      #            }
      #            privilegeIterator.next();
      #        }
      #    }
      #
      #    //Refresh current role access level in grid for new entry points
      #    element.UpdateEffectiveAccessRightsInGrid();
      #    element.lockWindowUpdate(false);
      #}
    ENDSOURCE
    SOURCE #BuildSecurityTree
      #public void BuildSecurityTree()
      #{
      #    #AviFiles
      #    SysOperationProgress    progress;
      #    TreeNode roleNode, dutyNode;
      #
      #    void addSubRoles(TreeItemIdx _parentIdx, TreeNode _roleNode)
      #    {
      #        TreeNode subRolesNode, subRoleNode;
      #        TreeNodeIterator subRoleIterator;
      #        TreeNode childRoleNode;
      #        TreeItemIdx newRoleItemIdx;
      #
      #        subRolesNode = _roleNode.AOTfindChild('Sub Roles');
      #        subRoleIterator = subRolesNode.AOTiterator();
      #
      #        subRoleNode = subRoleIterator.next();
      #
      #        while(subRoleNode != null)
      #        {
      #            childRoleNode = TreeNode::findNode(strFmt('%1\\%2', #SecRolesPath, subRoleNode.AOTname()));
      #
      #            if(childRoleNode != null && childRoleNode.AOTgetProperty(#PropertyEnabled) == 'Yes')
      #            {
      #                newRoleItemIdx = SysFormTreeControl::addTreeItem(SecurityTree, childRoleNode.AOTname(),
      #                        _parentIdx, childRoleNode, imageListAppl_AOT.image(childRoleNode.AOTbitmapId()), 1);
      #
      #                parentsMap.insert(newRoleItemIdx, '');
      #
      #                element.AddRoleObjects(newRoleItemIdx, childRoleNode);
      #                addSubRoles(newRoleItemIdx, childRoleNode);
      #
      #                parentsMap.remove(newRoleItemIdx);
      #            }
      #            subRoleNode = subRoleIterator.next();
      #        }
      #    }
      #
      #    if(currentObjectAOTName == '')
      #    {
      #        return;
      #    }
      #
      #    SecurityTree.setImagelist(imageListAppl_AOT.imageList());
      #    SecurityTree.setStateImagelist(imageList_access.imageList());
      #
      #    entryPointRelatedTreeItems = new Map(Types::String, Types::Class);
      #    privilegeTreeIdxs = new Map(Types::String, Types::Class);
      #    entryPointPrivilegePermissions = new Map(Types::String, Types::Class);
      #    parentsMap = new Map(Types::Int64, Types::String);
      #
      #    if(developmentType == SysSecDevelopmentType::Role)
      #    {
      #        roleNode = TreeNode::findNode(strFmt('%1\\%2', #SecRolesPath, currentObjectAOTName));
      #        if(roleNode == null)
      #        {
      #            throw error(strFmt("@SDT183", currentObjectAOTName));
      #        }
      #
      #        progress = SysOperationProgress::newGeneral(#aviupdate, strFmt("@SDT184"), 1);
      #        progress.updateInterval(0);
      #        progress.setText(strfmt("@SDT185"));
      #
      #        //Add the role itself
      #        rootItemIdx = SysFormTreeControl::addTreeItem(SecurityTree, roleNode.AOTname(),
      #            FormTreeAdd::Root, roleNode, imageListAppl_AOT.image(roleNode.AOTbitmapId()), 1);
      #
      #        parentsMap.insert(rootItemIdx, '');
      #        element.AddRoleObjects(rootItemIdx, roleNode);
      #
      #        //Process sub roles assigned to role
      #        addSubRoles(rootItemIdx, roleNode);
      #    }
      #    else
      #    {
      #        dutyNode = TreeNode::findNode(strFmt('%1\\%2', #SecDutiesPath, currentObjectAOTName));
      #        if(dutyNode == null)
      #        {
      #            throw error(strFmt("@SDT186", currentObjectAOTName));
      #        }
      #
      #        progress = SysOperationProgress::newGeneral(#aviupdate, strFmt("@SDT187"), 1);
      #        progress.updateInterval(0);
      #        progress.setText(strfmt("@SDT188"));
      #
      #        //Add the duty itself
      #        rootItemIdx = SysFormTreeControl::addTreeItem(SecurityTree, dutyNode.AOTname(),
      #            FormTreeAdd::Root, dutyNode, imageListAppl_AOT.image(dutyNode.AOTbitmapId()), 1);
      #
      #        parentsMap.insert(rootItemIdx, '');
      #        element.ProcessPrivileges(rootItemIdx, dutyNode.AOTfindChild('Privileges'));
      #    }
      #
      #    //Expand the tree
      #    SecurityTree.expand(rootItemIdx);
      #    SysSecEntryPointTmp_ds.selectionChanged();
      #
      #    progress.incCount();
      #}
    ENDSOURCE
    SOURCE #canClose
      #public boolean canClose()
      #{
      #    boolean ret;
      #    DialogButton dialogButton;
      #
      #    ret = super();
      #
      #    while select SysSecEntryPointTmp
      #    {
      #        if(SysSecEntryPointTmp.NewAccessRight != SysSecEntryPointTmp.AccessRight)
      #        {
      #            dialogButton = Box::yesNoOnce(strFmt("@SDT46"),
      #                                        strFmt("@SDT189"),
      #                                                    DialogButton::No, 'SysSecSetEntryPointRights');
      #            if(dialogButton == dialogButton::No)
      #            {
      #                return false;
      #            }
      #            else
      #            {
      #                break;
      #            }
      #        }
      #    }
      #
      #    return ret;
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    super();
      #
      #    if(permissionChange)
      #    {
      #        if(element.args() && element.args().caller() &&
      #            formHasMethod(element.args().caller(), identifierStr(SetPermissions)))
      #        {
      #            element.args().caller().SetPermissions();
      #        }
      #    }
      #
      #    if(rootItemIdx != 0)
      #    {
      #        SecurityTree.deleteAll();
      #    }
      #
      #}
    ENDSOURCE
    SOURCE #DuplicateNodeAndReplaceReference
      #public void DuplicateNodeAndReplaceReference(TreeNode _currentNode, FormTreeItem _currentItem)
      #{
      #    TreeNode duplicateNode;
      #    Dialog      dialog;
      #    DialogField fieldAOTName, fieldLabel, fieldDescription;
      #    SysSecDevelopmentType curDevelopmentObjectType, parentDevelopmentObjectType;
      #    FormTreeItem parentItem;
      #    TreeNode parentNode, privilegeEntryPointsNode, referenceNode, entryPointRefNode;
      #    TreeNodeIterator entryPointReferenceIterator;
      #    Map treeIndexes, privilegesPermissionMap;
      #    str entryPointKey;
      #    boolean duplicatedPrivilegeStillReferencedInTree;
      #
      #    if(strStartsWith(_currentNode.treeNodePath(), #SecRolesPath))
      #    {
      #        curDevelopmentObjectType = SysSecDevelopmentType::Role;
      #    }
      #    else if(strStartsWith(_currentNode.treeNodePath(), #SecDutiesPath))
      #    {
      #        curDevelopmentObjectType = SysSecDevelopmentType::Duty;
      #    }
      #    else if(strStartsWith(_currentNode.treeNodePath(), #SecPrivilegesPath))
      #    {
      #        curDevelopmentObjectType = SysSecDevelopmentType::Privilege;
      #    }
      #    else
      #    {
      #        throw error(strFmt("@SDT190", _currentNode.treeNodePath()));
      #    }
      #
      #    parentItem = SecurityTree.getItem(SecurityTree.getParent(_currentItem.idx()));
      #    if(parentItem == null)
      #    {
      #        throw error(strFmt("@SDT191", _currentNode.treeNodePath()));
      #    }
      #    parentNode = parentItem.data();
      #
      #    //Make sure object is checked out
      #    if(!SysSecEntryPointManager::ObjectEditableVCS(parentNode))
      #    {
      #        return;
      #    }
      #
      #    if(strStartsWith(parentNode.treeNodePath(), #SecRolesPath))
      #    {
      #        parentDevelopmentObjectType = SysSecDevelopmentType::Role;
      #    }
      #    else if(strStartsWith(parentNode.treeNodePath(), #SecDutiesPath))
      #    {
      #        parentDevelopmentObjectType = SysSecDevelopmentType::Duty;
      #    }
      #    else if(strStartsWith(parentNode.treeNodePath(), #SecPrivilegesPath))
      #    {
      #        parentDevelopmentObjectType = SysSecDevelopmentType::Privilege;
      #    }
      #    else
      #    {
      #        throw error(strFmt("@SDT192", parentNode.treeNodePath()));
      #    }
      #
      #    //Duplicate the object using AOTDuplicate
      #    duplicateNode = _currentNode.AOTDuplicate();
      #    duplicateNode.AOTsave();
      #
      #    //Show dialog to enter new object information
      #    dialog = new Dialog(strFmt("@SDT193", curDevelopmentObjectType), element);
      #    fieldAOTName = dialog.addFieldValue('IdentifierName', duplicateNode.AOTgetProperty(#PropertyName), "@SDT18");
      #    fieldLabel = dialog.addFieldValue('SecurityTaskName', duplicateNode.AOTgetProperty(#PropertyLabel), "@SDT169");
      #    fieldDescription = dialog.addFieldValue('SecurityTaskDescription', duplicateNode.AOTgetProperty(#PropertyDescription), "@SDT20");
      #
      #    dialog.run();
      #
      #    if (dialog.closedOK())
      #    {
      #        //Update label and text
      #        if(fieldAOTName.value() != duplicateNode.AOTname() && _currentNode.AOTparent().AOTfindChild(fieldAOTName.value()) != null)
      #        {
      #            error(strFmt("@SDT194", fieldAOTName.value()));
      #            duplicateNode.AOTdelete();
      #            return;
      #        }
      #
      #        duplicateNode.AOTsetProperty(#PropertyName, fieldAOTName.value());
      #        duplicateNode.AOTsetProperty(#PropertyLabel, fieldLabel.value());
      #        duplicateNode.AOTsetProperty(#PropertyDescription, fieldDescription.value());
      #        duplicateNode.AOTsave();
      #
      #        // BP Deviation documented
      #        _currentItem.text(fieldAOTName.value());
      #        _currentItem.data(duplicateNode);
      #        SecurityTree.setItem(_currentItem);
      #
      #        if(curDevelopmentObjectType == SysSecDevelopmentType::Privilege &&
      #            (parentDevelopmentObjectType == SysSecDevelopmentType::Duty || parentDevelopmentObjectType == SysSecDevelopmentType::Role))
      #        {
      #            referenceNode = parentNode.AOTfindChild('Privileges').AOTfindChild(_currentNode.AOTname());
      #            referenceNode.AOTdelete();
      #            referenceNode = parentNode.AOTfindChild('Privileges').AOTadd(fieldAOTName.value());
      #            referenceNode.AOTsetProperty(#PropertyName, fieldAOTName.value());
      #            parentNode.AOTsave();
      #
      #            //Update privilegeTreeIdxs
      #            treeIndexes = new Map(Types::Int64, Types::String);
      #            treeIndexes.insert(_currentItem.idx(), '');
      #            privilegeTreeIdxs.insert(fieldAOTName.value(), treeIndexes);
      #
      #            treeIndexes = privilegeTreeIdxs.lookup(_currentNode.AOTname());
      #            if(treeIndexes.exists(_currentItem.idx()))
      #            {
      #                treeIndexes.remove(_currentItem.idx());
      #                privilegeTreeIdxs.remove(_currentNode.AOTname());
      #                privilegeTreeIdxs.insert(_currentNode.AOTname(), treeIndexes);
      #            }
      #
      #            //Update entryPointPrivilegePermissions
      #            privilegeEntryPointsNode = duplicateNode.AOTfindChild('Entry Points');
      #            entryPointReferenceIterator = privilegeEntryPointsNode.AOTiterator();
      #            entryPointRefNode = entryPointReferenceIterator.next();
      #
      #            duplicatedPrivilegeStillReferencedInTree = element.SecurityTreeContainsTreeNode(rootItemIdx, _currentNode);
      #            while(entryPointRefNode != null)
      #            {
      #                entryPointKey = SysSecEntryPointManager::GetKeyForEntryPointReferenceNode(entryPointRefNode);
      #
      #                if(!entryPointPrivilegePermissions.exists(entryPointKey))
      #                {
      #                    privilegesPermissionMap = new Map(Types::String, Types::Enum);
      #                }
      #                else
      #                {
      #                    privilegesPermissionMap = entryPointPrivilegePermissions.lookup(entryPointKey);
      #                    entryPointPrivilegePermissions.remove(entryPointKey);
      #                }
      #
      #                if(!duplicatedPrivilegeStillReferencedInTree)
      #                {
      #                    if(privilegesPermissionMap.lookup(_currentNode.AOTname()))
      #                    {
      #                        privilegesPermissionMap.remove(_currentNode.AOTname());
      #                    }
      #                }
      #
      #                privilegesPermissionMap.insert(duplicateNode.AOTname(),
      #                        SysSecEntryPointManager::AccessLevel2AccessRight(entryPointRefNode.AOTgetProperty(#PropertyAccessLevel)));
      #                entryPointPrivilegePermissions.insert(entryPointKey, privilegesPermissionMap);
      #
      #                entryPointRefNode = entryPointReferenceIterator.next();
      #            }
      #
      #        }
      #        else if (curDevelopmentObjectType == SysSecDevelopmentType::Duty && parentDevelopmentObjectType == SysSecDevelopmentType::Role)
      #        {
      #            referenceNode = parentNode.AOTfindChild('Duties').AOTfindChild(_currentNode.AOTname());
      #            referenceNode.AOTdelete();
      #            referenceNode = parentNode.AOTfindChild('Duties').AOTadd(fieldAOTName.value());
      #            referenceNode.AOTsetProperty(#PropertyName, fieldAOTName.value());
      #            parentNode.AOTsave();
      #        }
      #        else if (curDevelopmentObjectType == SysSecDevelopmentType::Role && parentDevelopmentObjectType == SysSecDevelopmentType::Role)
      #        {
      #            referenceNode = parentNode.AOTfindChild('Sub Roles').AOTfindChild(_currentNode.AOTname());
      #            referenceNode.AOTdelete();
      #            referenceNode = parentNode.AOTfindChild('Sub Roles').AOTadd(fieldAOTName.value());
      #            referenceNode.AOTsetProperty(#PropertyName, fieldAOTName.value());
      #            parentNode.AOTsave();
      #        }
      #
      #        SecurityTree.updateDetails();
      #    }
      #    else
      #    {
      #        duplicateNode.AOTdelete();
      #    }
      #
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    super();
      #
      #    _formSplitterY   = new SysFormSplitter_Y(YSplitter, Grid, this);
      #    _formSplitterX   = new SysFormSplitter_X(XSplitter, SecurityTree, this);
      #
      #    selectedTask = 0;
      #    permissionChange = false;
      #
      #    imageListAppl_AOT = new ImageListAppl_Aot();
      #    imageList_access = new ImageListAppl_SecurityAccess();
      #
      #    accessImages[1+AccessRight::NoAccess]   = imageList_access.image(#ImageNoAccess);
      #    accessImages[1+AccessRight::View]       = imageList_access.image(#ImageView);
      #    accessImages[1+AccessRight::Edit]       = imageList_access.image(#ImageEdit);
      #    accessImages[1+AccessRight::Add]        = imageList_access.image(#ImageAdd);
      #    accessImages[1+AccessRight::Correction] = imageList_access.image(#ImageSecuritykey);
      #    accessImages[1+AccessRight::Delete]     = imageList_access.image(#ImageFullControl);
      #
      #    StepInfoText.text(strFmt("@SDT195"));
      #}
    ENDSOURCE
    SOURCE #ProcessPrivileges
      #public void ProcessPrivileges(TreeItemIdx _parentIdx, TreeNode _privilegeListNode)
      #{
      #    TreeNode privilegeReferenceNode, privilegeNode;
      #    TreeNode entryPointListNode, entryPointReferenceNode;
      #    TreeNodeIterator privilegeIterator, entryPointIterator;
      #    TreeItemIdx privilegeIdx, entryPointIdx;
      #    str entryPointKey;
      #    Map relatedObjects;
      #    Map treeIndexes;
      #    MapIterator mapIterator;
      #    Map privilegesPermissionMap;
      #
      #    privilegeIterator = _privilegeListNode.AOTiterator();
      #    privilegeReferenceNode = privilegeIterator.next();
      #
      #    while(privilegeReferenceNode != null)
      #    {
      #        privilegeNode = TreeNode::findNode(strFmt('%1\\%2', #SecPrivilegesPath, privilegeReferenceNode.AOTname()));
      #
      #        if(privilegeNode != null && privilegeNode.AOTgetProperty(#PropertyEnabled) == 'Yes')
      #        {
      #            privilegeIdx = SysFormTreeControl::addTreeItem(SecurityTree, privilegeReferenceNode.AOTname(), _parentIdx,
      #                    privilegeNode, imageListAppl_AOT.image(privilegeReferenceNode.AOTbitmapId()), true);
      #            parentsMap.insert(privilegeIdx, '');
      #
      #            if(!privilegeTreeIdxs.exists(privilegeNode.AOTname()))
      #            {
      #                treeIndexes = new Map(Types::Int64, Types::String);
      #                treeIndexes.insert(privilegeIdx, '');
      #                privilegeTreeIdxs.insert(privilegeNode.AOTname(), treeIndexes);
      #            }
      #            else
      #            {
      #                treeIndexes = privilegeTreeIdxs.lookup(privilegeNode.AOTname());
      #                if(!treeIndexes.exists(privilegeIdx))
      #                {
      #                    treeIndexes.insert(privilegeIdx, '');
      #                }
      #                privilegeTreeIdxs.remove(privilegeNode.AOTname());
      #                privilegeTreeIdxs.insert(privilegeNode.AOTname(), treeIndexes);
      #            }
      #
      #            entryPointListNode = privilegeNode.AOTfindChild('Entry Points');
      #            entryPointIterator = entryPointListNode.AOTiterator();
      #
      #            entryPointReferenceNode = entryPointIterator.next();
      #            while(entryPointReferenceNode != null)
      #            {
      #                entryPointIdx = SysFormTreeControl::addTreeItem(SecurityTree, entryPointReferenceNode.AOTname(), privilegeIdx,
      #                    entryPointReferenceNode, imageListAppl_AOT.image(entryPointReferenceNode.AOTbitmapId()), 0,
      #                    accessImages[1+SysSecEntryPointManager::AccessLevel2AccessRight(entryPointReferenceNode.AOTgetProperty(#PropertyAccessLevel))]);
      #
      #                //Cache related entry point tree indexes
      #                entryPointKey = SysSecEntryPointManager::GetKeyForEntryPointReferenceNode(entryPointReferenceNode);
      #                if(!entryPointRelatedTreeItems.exists(entryPointKey))
      #                {
      #                    relatedObjects = new Map(Types::Int64, Types::String);
      #                }
      #                else
      #                {
      #                    relatedObjects = entryPointRelatedTreeItems.lookup(entryPointKey);
      #                    entryPointRelatedTreeItems.remove(entryPointKey);
      #                }
      #                relatedObjects.insert(entryPointIdx, '');
      #                mapIterator = new MapIterator(parentsMap);
      #                while(mapIterator.more())
      #                {
      #                    if(!relatedObjects.exists(mapIterator.key()))
      #                    {
      #                        relatedObjects.insert(mapIterator.key(), '');
      #                    }
      #                    mapIterator.next();
      #                }
      #                entryPointRelatedTreeItems.insert(entryPointKey, relatedObjects);
      #
      #                //Cache permission for entry point granted in each privilege
      #                if(!entryPointPrivilegePermissions.exists(entryPointKey))
      #                {
      #                    privilegesPermissionMap = new Map(Types::String, Types::Enum);
      #                }
      #                else
      #                {
      #                    privilegesPermissionMap = entryPointPrivilegePermissions.lookup(entryPointKey);
      #                    entryPointPrivilegePermissions.remove(entryPointKey);
      #                }
      #                privilegesPermissionMap.insert(privilegeReferenceNode.AOTname(),
      #                        SysSecEntryPointManager::AccessLevel2AccessRight(entryPointReferenceNode.AOTgetProperty(#PropertyAccessLevel)));
      #                entryPointPrivilegePermissions.insert(entryPointKey, privilegesPermissionMap);
      #                entryPointReferenceNode = entryPointIterator.next();
      #            }
      #
      #            parentsMap.remove(privilegeIdx);
      #        }
      #        privilegeReferenceNode = privilegeIterator.next();
      #    }
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    SysSecEntryPointTmp tmpData;
      #
      #    super();
      #
      #    AccessRight.selection(AccessRight::NoAccess);
      #
      #    if(element.args() && element.args().caller() &&
      #        formHasMethod(element.args().caller(), identifierStr(GetSelectionDataGrid)) &&
      #        formHasMethod(element.args().caller(), identifierStr(GetTreeData)))
      #    {
      #        if(element.args().parmEnum() == NoYes::Yes)
      #        {
      #            tmpData = element.args().caller().GetSelectionDataGrid();
      #        }
      #        else
      #        {
      #            tmpData = element.args().caller().GetTreeData();
      #        }
      #        Grid_ObjectLabel.visible(element.args().caller().AreLabelsLoaded());
      #
      #        Grid_UserLicenseApplies.visible(element.args().caller().IsLicenseInfoLoaded());
      #        Grid_ViewUserLicense.visible(element.args().caller().IsLicenseInfoLoaded());
      #        Grid_MaintainUserLicense.visible(element.args().caller().IsLicenseInfoLoaded());
      #
      #        Grid_ObjectAOTLayer.visible(element.args().caller().IsLayerModelInfoLoaded());
      #        Grid_ObjectAOTModel.visible(element.args().caller().IsLayerModelInfoLoaded());
      #
      #        SysSecEntryPointTmp.setTmpData(tmpData);
      #        SysSecEntryPointTmp_ds.executeQuery();
      #    }
      #
      #    if(element.args() && element.args().caller() &&
      #        formHasMethod(element.args().caller(), identifierStr(CurrentDevelopmentType)))
      #    {
      #        developmentType = element.args().caller().CurrentDevelopmentType();
      #    }
      #
      #    if(element.args() && element.args().caller() &&
      #        formHasMethod(element.args().caller(), identifierStr(CurrentDevelopmentObject)))
      #    {
      #        currentObjectAOTName = element.args().caller().CurrentDevelopmentObject();
      #    }
      #}
    ENDSOURCE
    SOURCE #SecurityTreeContainsTreeNode
      #public boolean SecurityTreeContainsTreeNode(TreeItemIdx _idx, TreeNode _privilegeNode)
      #{
      #    FormTreeItem item = SecurityTree.getItem(_idx);
      #    TreeItemIdx childIndex;
      #    formTreeItem currentTreeItem;
      #    TreeNode currentTreeNode;
      #
      #    currentTreeNode = item.data();
      #    if(currentTreeNode != null && currentTreeNode.treeNodePath() == _privilegeNode.treeNodePath())
      #    {
      #        return true;
      #    }
      #
      #    if(item.children())
      #    {
      #        childIndex = SecurityTree.getChild(_idx);
      #        while(childIndex != 0)
      #        {
      #            currentTreeItem = SecurityTree.getItem(childIndex);
      #            currentTreeNode = currentTreeItem.data();
      #            if(currentTreeNode != null && currentTreeNode.treeNodePath() == _privilegeNode.treeNodePath())
      #            {
      #                //Found privilege so return true;
      #                return true;
      #            }
      #
      #            if(element.SecurityTreeContainsTreeNode(childIndex, _privilegeNode))
      #            {
      #                return true;
      #            }
      #
      #            childIndex = SecurityTree.getNextSibling(childIndex);
      #        }
      #    }
      #
      #    return false;
      #}
      #
    ENDSOURCE
    SOURCE #UpdateEffectiveAccessRightsInGrid
      #public void UpdateEffectiveAccessRightsInGrid()
      #{
      #    SysSecEntryPointTmp tmpData2 = SysSecEntryPointTmp;
      #    SysSecEntryPointTmp tmpData;
      #    SysSecEntryPointTmp curRecord = SysSecEntryPointTmp.data();
      #    Map selectedRows = new Map(Types::Int64, Types::Record);
      #    MapIterator mapIterator;
      #    str entryPointKey;
      #    AccessRight curHighestRight;
      #    MapIterator privilegeIterator;
      #
      #    for (tmpData = getFirstSelection(SysSecEntryPointTmp_ds);
      #            tmpData;
      #            tmpData = SysSecEntryPointTmp_ds.getNext())
      #    {
      #        selectedRows.insert(tmpData.RecId, tmpData);
      #    }
      #
      #    ttsBegin;
      #    while select forUpdate tmpData2
      #    {
      #        entryPointKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(tmpData2);
      #        curHighestRight = AccessRight::NoAccess;
      #
      #        if(entryPointPrivilegePermissions != null && entryPointPrivilegePermissions.exists(entryPointKey))
      #        {
      #            privilegeIterator = new MapIterator(entryPointPrivilegePermissions.lookup(entryPointKey));
      #            while(privilegeIterator.more())
      #            {
      #                if(privilegeIterator.value() > curHighestRight)
      #                {
      #                    curHighestRight = privilegeIterator.value();
      #                }
      #                privilegeIterator.next();
      #            }
      #        }
      #        tmpData2.AccessRight = curHighestRight;
      #        tmpData2.update();
      #    }
      #    ttsCommit;
      #
      #    SysSecEntryPointTmp.setTmpData(tmpData2);
      #    SysSecEntryPointTmp_ds.executeQuery();
      #    SysSecEntryPointTmp_ds.findRecord(curRecord);
      #    SysSecEntryPointTmp_ds.setCurrent();
      #
      #    mapIterator = new mapIterator(selectedRows);
      #    while(mapIterator.more())
      #    {
      #        tmpData = mapIterator.value();
      #        SysSecEntryPointTmp_DS.markRecord(tmpData, 1);
      #        mapIterator.next();
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysSecEntryPointTmp
          Table               #SysSecEntryPointTmp
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD AccessRight
            PROPERTIES
              AllowEdit           #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #selectionChanged
          #public void selectionChanged()
          #{
          #    SysSecEntryPointTmp tmpData;
          #    MapIterator mapIterator;
          #    str entryPointKey;
          #    FormTreeItem treeItem;
          #
          #    super();
          #
          #    if(!step1Complete)
          #    {
          #        return;
          #    }
          #
          #    infolog.startLengthyOperation();
          #    element.lockWindowUpdate(true);
          #
          #    //Clear previous selection
          #    if(currentHiglightedItems != null)
          #    {
          #        mapIterator = new mapIterator(currentHiglightedItems);
          #
          #        while(mapIterator.more())
          #        {
          #            treeItem = SecurityTree.getItem(mapIterator.key());
          #            treeItem.stateBold(false);
          #            SecurityTree.setItem(treeItem);
          #            mapIterator.next();
          #        }
          #    }
          #
          #    if(entryPointRelatedTreeItems == null)
          #        return;
          #
          #    currentHiglightedItems = new Map(Types::Int64, Types::String);
          #
          #    for (tmpData = getFirstSelection(SysSecEntryPointTmp_ds);
          #            tmpData;
          #            tmpData = SysSecEntryPointTmp_ds.getNext())
          #    {
          #        entryPointKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(tmpData);
          #        if(entryPointRelatedTreeItems.exists(entryPointKey))
          #        {
          #            mapIterator = new mapIterator(entryPointRelatedTreeItems.lookup(entryPointKey));
          #            while(mapIterator.more())
          #            {
          #                treeItem = SecurityTree.getItem(mapIterator.key());
          #                if(treeItem != null)
          #                {
          #                    treeItem.stateBold(true);
          #                    SecurityTree.setItem(treeItem);
          #                    currentHiglightedItems.insert(mapIterator.key(), '');
          #                }
          #                mapIterator.next();
          #            }
          #        }
          #    }
          #
          #    element.lockWindowUpdate(false);
          #    infolog.endLengthyOperation();
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SecurityRole
          Table               #SecurityRole
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          OnlyFetchActive     #Yes
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #executeQuery
          #public void executeQuery()
          #{
          #    SecurityRoleExplodedGraph securityRoleExplodedGraph;
          #    SecurityTaskExplodedGraph securityTaskExplodedGraph;
          #    SecurityRoleTaskGrant srtGrant;
          #
          #    super();
          #
          #    select Name, AOTName, RecId from SecurityRole order by SecurityRole.Name where SecurityRole.IsEnabled
          #        exists join securityRoleExplodedGraph
          #        where securityRoleExplodedGraph.SecurityRole == SecurityRole.RecId
          #        join RecId from srtGrant
          #                where srtGrant.SecurityRole == securityRoleExplodedGraph.SecuritySubRole
          #        join RecId from securityTaskExplodedGraph
          #                where securityTaskExplodedGraph.SecurityTask == srtGrant.SecurityTask &&
          #                        securityTaskExplodedGraph.SecuritySubTask == selectedTask;
          #
          #
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SDT120
      Frame               #Dialog
      SetCompany          #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #150
          ElementPosition     #652835026
          DataSource          #SysSecEntryPointTmp
          DataGroup           #SetEntryPointRights
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #RolesWithSelectedTask
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #Group
          DataSource          #SecurityRole
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DetailsInformation
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #DetailsView
          Caption             #@SDT196
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DetailsView
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #UpdateRightsControl
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EntryPointObjectGroup
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          ElementPosition     #1717986916
          HierarchyParent     #DetailsInformation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EntryPointRightGroup
          ElementPosition     #1789569705
          HierarchyParent     #EntryPointObjectGroup
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          Width               #Column width
          Height              #Column height
          ElementPosition     #1789569705
          HierarchyParent     #DetailsView
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #NextGroup
          AutoDeclaration     #Yes
          Left                #Auto (right)
          ElementPosition     #979252539
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SecurityObjectGroup
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          ElementPosition     #1288490187
          HierarchyParent     #DetailsInformation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Settings
          AutoDeclaration     #Yes
          ElementPosition     #1305670054
          FrameType           #Edged 3D
          Caption             #@SDT197
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UpdateRightsControl
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          ElementPosition     #1889785606
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #XSplitter
          AutoDeclaration     #Yes
          Width               #5
          Height              #Column height
          ElementPosition     #1288490187
          HierarchyParent     #UpdateRightsControl
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #YSplitter
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          Height              #5
          ElementPosition     #1632087569
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ApplyAccessRight
          HelpText            #@SDT198
          ElementPosition     #1610612733
          HierarchyParent     #Settings
          Text                #@SDT199
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysSecEntryPointTmp tmpData2 = SysSecEntryPointTmp;
            #    SysSecEntryPointTmp tmpData;
            #    SysSecEntryPointTmp curRecord = SysSecEntryPointTmp.data();
            #    MapIterator mapIterator;
            #    Map selectedRows = new Map(Types::Int64, Types::Record);
            #
            #    for (tmpData = getFirstSelection(SysSecEntryPointTmp_ds);
            #            tmpData;
            #            tmpData = SysSecEntryPointTmp_ds.getNext())
            #    {
            #        selectedRows.insert(tmpData.RecId, tmpData);
            #    }
            #
            #    ttsBegin;
            #    while select forUpdate tmpData2
            #    {
            #        if(selectedRows.exists(tmpData2.RecId))
            #        {
            #            tmpData2.NewAccessRight = AccessRight.selection();
            #            tmpData2.update();
            #        }
            #    }
            #    ttsCommit;
            #
            #    SysSecEntryPointTmp.setTmpData(tmpData2);
            #    SysSecEntryPointTmp_ds.executeQuery();
            #    SysSecEntryPointTmp_ds.findRecord(curRecord);
            #    SysSecEntryPointTmp_ds.setCurrent();
            #
            #    mapIterator = new mapIterator(selectedRows);
            #    while(mapIterator.more())
            #    {
            #        tmpData = mapIterator.value();
            #        SysSecEntryPointTmp_DS.markRecord(tmpData, 1);
            #        mapIterator.next();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Step1CompleteButton
          AutoDeclaration     #Yes
          Left                #Auto (right)
          HelpText            #@SDT200
          ElementPosition     #1431655764
          HierarchyParent     #NextGroup
          Text                #@SDT201
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    //Build the role tree
            #    step1Complete = true;
            #    Settings.visible(false);
            #    NextGroup.visible(false);
            #
            #    YSplitter.visible(true);
            #    UpdateRightsControl.visible(true);
            #    //Grid_NewAccessRight.allowEdit(false);
            #
            #    //Make group auto-resizable in height
            #    UpdateRightsControl.heightMode(1);
            #
            #    if(developmentType == SysSecDevelopmentType::Role)
            #    {
            #        StepInfoText.text(strFmt("@SDT202"));
            #    }
            #    else
            #    {
            #        StepInfoText.text(strFmt("@SDT203"));
            #    }
            #
            #    //element.BuildSecurityTree();
            #    element.setTimeOut(identifierStr(BuildSecurityTree), 0, true);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Grid_UserLicenseApplies
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1651910490
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          Label               #@SDT27
          DataSource          #SysSecEntryPointTmp
          DataField           #UserLicenseApplies
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #AccessRight
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Settings
          Label               #@SDT204
          EnumType            #AccessRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointRight
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #100
          ElementPosition     #1073741822
          HierarchyParent     #EntryPointRightGroup
          Label               #@SDT158
          EnumType            #AccessRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_AccessRight
          AllowEdit           #No
          ElementPosition     #825955245
          HierarchyParent     #Grid
          Label               #@SDT205
          DataSource          #SysSecEntryPointTmp
          DataField           #AccessRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_MaintainUserLicense
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1486719441
          HierarchyParent     #Grid
          Label               #@SDT14
          DataSource          #SysSecEntryPointTmp
          DataField           #MaintainUserLicense
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_NewAccessRight
          AutoDeclaration     #Yes
          ElementPosition     #660764196
          HierarchyParent     #Grid
          Label               #@SDT206
          DataSource          #SysSecEntryPointTmp
          DataField           #NewAccessRight
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    SysSecEntryPointTmp_ds.write();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_ObjectAOTLayer
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1817101539
          HierarchyParent     #Grid
          Label               #@SDT159
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTLayer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_ObjectType
          AllowEdit           #No
          ElementPosition     #330382098
          HierarchyParent     #Grid
          Label               #@SDT160
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_SystemUserRight
          AllowEdit           #No
          ElementPosition     #991146294
          HierarchyParent     #Grid
          Label               #@SDT25
          DataSource          #SysSecEntryPointTmp
          DataField           #SystemUserRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_ViewUserLicense
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1321528392
          HierarchyParent     #Grid
          Label               #@SDT29
          DataSource          #SysSecEntryPointTmp
          DataField           #ViewUserLicense
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #GridRolesForTaskInfo
          ElementPosition     #1073741822
          HierarchyParent     #Group
          Text                #@SDT207
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #AOTName
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          ElementPosition     #858993458
          HierarchyParent     #DetailsInformation
          LimitText           #40
          Label               #@SDT18
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Description
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          ElementPosition     #1610612733
          HierarchyParent     #SecurityObjectGroup
          Label               #@SDT20
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Grid_ObjectAOTDisplayName
          AllowEdit           #No
          ElementPosition     #495573147
          HierarchyParent     #Grid
          Label               #@SDT167
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTDisplayName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Grid_ObjectAOTModel
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1982292588
          HierarchyParent     #Grid
          Label               #@SDT168
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTModel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Grid_ObjectLabel
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1156337343
          HierarchyParent     #Grid
          Label               #@SDT169
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Label
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          ElementPosition     #1073741822
          HierarchyParent     #SecurityObjectGroup
          Label               #@SDT169
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ObjectChildName
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #EntryPointObjectGroup
          Label               #@SDT208
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ObjectName
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #Column width
          ElementPosition     #1073741823
          HierarchyParent     #EntryPointObjectGroup
          Label               #@SDT167
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ObjectType
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #200
          ElementPosition     #715827882
          HierarchyParent     #EntryPointObjectGroup
          Label               #@SDT160
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SecurityRole_AotName
          Width               #150
          ElementPosition     #1610612733
          HierarchyParent     #RolesWithSelectedTask
          DataSource          #SecurityRole
          DataField           #AotName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SecurityRole_Name
          Width               #150
          ElementPosition     #1073741822
          HierarchyParent     #RolesWithSelectedTask
          DataSource          #SecurityRole
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #StepInfoText
          AutoDeclaration     #Yes
          Width               #Column width
          Skip                #Yes
          AlignControl        #No
          ElementPosition     #326417513
          DisplayHeight       #3
          Border              #None
          MultiLine           #Yes
          FontSize            #10
          ShowLabel           #No
          IMEMode             #Disabled
          ViewEditMode        #View
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #SecurityTree
          Width               #400
          Height              #Column height
          ElementPosition     #858993458
          HierarchyParent     #UpdateRightsControl
        ENDPROPERTIES
        
        METHODS
          SOURCE #context
            #public void context()
            #{
            #    #WinAPI
            #    int selectedMenu;
            #    int mouseX, mouseY;
            #    int idx;
            #
            #    int addNewDuty;
            #    int addNewPrivilege;
            #    int duplicateAndRemove;
            #    int applyPermissions;
            #    Dialog      dialog;
            #    DialogField fieldAOTName, fieldLabel, fieldDescription;
            #    TreeNode newDutyNode;
            #    TreeNode newPrivilegeNode;
            #    TreeItemIdx newPrivilegeTreeItemIdx;
            #    Map treeIndexes;
            #
            #    PopupMenu contextMenu = new PopupMenu(element.hWnd());
            #
            #    FormTreeItem itemUnder;
            #    TreeNode nodeUnder;
            #
            #    [mouseX, mouseY] = WinAPI::getCursorPos();
            #    [mouseX, mouseY] = WinAPI::screenToClient(element.hWnd(), mouseX, mouseY);
            #
            #    idx = SecurityTree.getSelection();
            #    if (!idx)
            #    {
            #        return;
            #    }
            #
            #    itemUnder = SecurityTree.getItem(idx);
            #    if (!itemUnder)
            #    {
            #        return;
            #    }
            #
            #    nodeUnder = itemUnder.data();
            #    if (!nodeUnder)
            #    {
            #        return;
            #    }
            #
            #    if(idx == rootItemIdx)
            #    {
            #        if(developmentType == SysSecDevelopmentType::Role)
            #        {
            #            addNewDuty = contextMenu.insertItem(strFmt("@SDT209"));
            #        }
            #        addNewPrivilege = contextMenu.insertItem(strFmt("@SDT210"));
            #    }
            #    else if(strStartsWith(nodeUnder.treeNodePath(), #SecRolesPath))
            #    {
            #        duplicateAndRemove = contextMenu.insertItem(strFmt("@SDT211"));
            #    }
            #    else if(strStartsWith(nodeUnder.treeNodePath(), #SecDutiesPath))
            #    {
            #        addNewPrivilege = contextMenu.insertItem(strFmt("@SDT210"));
            #        duplicateAndRemove = contextMenu.insertItem(strFmt("@SDT211"));
            #    }
            #    else if(strStartsWith(nodeUnder.treeNodePath(), #SecPrivilegesPath) &&
            #            findProperty(nodeUnder.AOTgetProperties(), #PropertyObjectType) == '')
            #    {
            #        applyPermissions = contextMenu.insertItem(strFmt("@SDT212"));
            #        duplicateAndRemove = contextMenu.insertItem(strFmt("@SDT211"));
            #    }
            #
            #    selectedMenu = contextMenu.draw();
            #
            #    switch (selectedMenu)
            #    {
            #        case -1:
            #            break;
            #
            #        case addNewDuty:
            #            //Show dialog to get the new AOTName, label and description
            #            dialog = new Dialog("@SDT213", element);
            #            fieldAOTName = dialog.addField('IdentifierName', "@SDT18");
            #            fieldLabel = dialog.addField('SecurityTaskName', "@SDT169");
            #            fieldDescription = dialog.addField('SecurityTaskDescription', "@SDT20");
            #
            #            dialog.run();
            #            if (dialog.closedOK())
            #            {
            #                //Create the new duty
            #                if(TreeNode::findNode(#SecDutiesPath).AOTfindChild(fieldAOTName.value()) != null)
            #                {
            #                    throw error(strFmt("@SDT214", fieldAOTName.value()));
            #                }
            #
            #                newDutyNode = TreeNode::findNode(#SecDutiesPath).AOTadd(fieldAOTName.value());
            #                newDutyNode.AOTsetProperty(#PropertyLabel, fieldLabel.value());
            #                newDutyNode.AOTsetProperty(#PropertyDescription, fieldDescription.value());
            #                newDutyNode.AOTsave();
            #                SysSecEntryPointManager::AddObjectToVersionControl(newDutyNode);
            #
            #                //Add duty to current object
            #                if(SysSecEntryPointManager::ObjectEditableVCS(nodeUnder))
            #                {
            #                    nodeUnder.AOTfindChild('Duties').AOTDrop(newDutyNode);
            #                    nodeUnder.AOTsave();
            #
            #                    //Add new duty in tree
            #                    SysFormTreeControl::addTreeItem(SecurityTree, newDutyNode.AOTname(),
            #                        idx, newDutyNode, imageListAppl_AOT.image(newDutyNode.AOTbitmapId()), 1);
            #
            #                    if(!itemUnder.stateExpanded())
            #                    {
            #                        SecurityTree.expand(idx);
            #                    }
            #                }
            #            }
            #            break;
            #
            #        case addNewPrivilege:
            #            //Show dialog to get the new AOTName, label and description
            #            dialog = new Dialog("@SDT215", element);
            #            fieldAOTName = dialog.addField('IdentifierName', "@SDT18");
            #            fieldLabel = dialog.addField('SecurityTaskName', "@SDT169");
            #            fieldDescription = dialog.addField('SecurityTaskDescription', "@SDT20");
            #
            #            dialog.run();
            #            if (dialog.closedOK())
            #            {
            #                //Create the new privilege
            #                if(TreeNode::findNode(#SecPrivilegesPath).AOTfindChild(fieldAOTName.value()) != null)
            #                {
            #                    throw error(strFmt("@SDT216", fieldAOTName.value()));
            #                }
            #
            #                newPrivilegeNode = TreeNode::findNode(#SecPrivilegesPath).AOTadd(fieldAOTName.value());
            #                newPrivilegeNode.AOTsetProperty(#PropertyLabel, fieldLabel.value());
            #                newPrivilegeNode.AOTsetProperty(#PropertyDescription, fieldDescription.value());
            #                newPrivilegeNode.AOTsave();
            #                SysSecEntryPointManager::AddObjectToVersionControl(newPrivilegeNode);
            #
            #                //Add duty to current object
            #                if(SysSecEntryPointManager::ObjectEditableVCS(nodeUnder))
            #                {
            #                    nodeUnder.AOTfindChild('Privileges').AOTDrop(newPrivilegeNode);
            #                    nodeUnder.AOTsave();
            #
            #                    //Add new privilege in tree
            #                    newPrivilegeTreeItemIdx = SysFormTreeControl::addTreeItem(SecurityTree, newPrivilegeNode.AOTname(),
            #                        idx, newPrivilegeNode, imageListAppl_AOT.image(newPrivilegeNode.AOTbitmapId()), 1);
            #
            #                    //A new privilege AOT name should never exists in the map
            #                    if(!privilegeTreeIdxs.exists(newPrivilegeNode.AOTname()))
            #                    {
            #                        treeIndexes = new Map(Types::Int64, Types::String);
            #                        treeIndexes.insert(newPrivilegeTreeItemIdx, '');
            #                        privilegeTreeIdxs.insert(newPrivilegeNode.AOTname(), treeIndexes);
            #                    }
            #
            #                    if(!itemUnder.stateExpanded())
            #                    {
            #                        SecurityTree.expand(idx);
            #                    }
            #                }
            #            }
            #            break;
            #
            #        case applyPermissions:
            #            element.ApplySelectedPermissionsToObject(nodeUnder, idx);
            #            break;
            #
            #        case duplicateAndRemove:
            #            element.DuplicateNodeAndReplaceReference(nodeUnder, itemUnder);
            #            break;
            #
            #        default:
            #            break;
            #
            #    }
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _OldItem, FormTreeItem _NewItem, FormTreeSelect _how)
            #{
            #    super(_OldItem, _NewItem, _how);
            #    SecurityTree.updateDetails();
            #}
          ENDSOURCE
          SOURCE #updateDetails
            #public void updateDetails()
            #{
            #    TreeNode nodeUnder;
            #    AccessRight effectiveRight;
            #    FormTreeItem formTreeItem;
            #    SysSecEntryPointTmp developmentTmp = SysSecEntryPointTmp;
            #    SecurityTask task;
            #
            #    formTreeItem = SecurityTree.getItem(SecurityTree.getSelection());
            #
            #    if(!formTreeItem)
            #    {
            #        return;
            #    }
            #
            #    nodeUnder = formTreeItem.data();
            #    if (!nodeUnder)
            #    {
            #        return;
            #    }
            #
            #    AOTName.text(nodeUnder.AOTname());
            #    selectedTask = 0;
            #
            #    if(findProperty(nodeUnder.AOTgetProperties(), #PropertyObjectType) == '')
            #    {
            #        SecurityObjectGroup.visible(true);
            #        EntryPointObjectGroup.visible(false);
            #        Label.text(SysLabel::labelId2String2(nodeUnder.AOTgetProperty(#PropertyLabel)));
            #        Description.text(SysLabel::labelId2String2(nodeUnder.AOTgetProperty(#PropertyDescription)));
            #
            #        if(strStartsWith(nodeUnder.treeNodePath(), #SecDutiesPath))
            #        {
            #            select RecId from task where task.AotName == nodeUnder.AOTname() &&
            #                task.Type == SecurityTaskType::Duty;
            #            selectedTask = task.RecId;
            #        }
            #        else if(strStartsWith(nodeUnder.treeNodePath(), #SecPrivilegesPath))
            #        {
            #            select RecId from task where task.AotName == nodeUnder.AOTname() &&
            #                task.Type == SecurityTaskType::Privilege;
            #            selectedTask = task.RecId;
            #        }
            #    }
            #    else
            #    {
            #        EntryPointObjectGroup.visible(true);
            #        SecurityObjectGroup.visible(false);
            #        ObjectType.text(nodeUnder.AOTgetProperty(#PropertyObjectType));
            #        effectiveRight = SysSecEntryPointManager::AccessLevel2AccessRight(nodeUnder.AOTgetProperty(#PropertyAccessLevel));
            #        EntryPointRight.selection(effectiveRight);
            #        ObjectName.text(nodeUnder.AOTgetProperty(#PropertyObjectName));
            #        ObjectChildName.text(nodeUnder.AOTgetProperty(#PropertyObjectChildName));
            #    }
            #
            #    securityrole_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
      ReadPermissions     #No
      UpdatePermissions   #No
      CreatePermissions   #No
      DeletePermissions   #No
    ENDPROPERTIES
    
  ENDPERMISSIONS
  
ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecSetEntryPointRightsForPrivilege
  PROPERTIES
    Name                #SysSecSetEntryPointRightsForPrivilege
    Origin              #{35D2AA4D-98D2-44F3-BAF9-849DEB347040}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    SysSecEntryPointTmp tmpData;
      #
      #    super();
      #
      #    AccessRight.selection(AccessRight::NoAccess);
      #
      #    if(element.args() && element.args().caller() &&
      #        formHasMethod(element.args().caller(), identifierStr(GetSelectionDataGrid)) &&
      #        formHasMethod(element.args().caller(), identifierStr(GetTreeData)))
      #    {
      #        if(element.args().parmEnum() == NoYes::Yes)
      #        {
      #            tmpData = element.args().caller().GetSelectionDataGrid();
      #        }
      #        else
      #        {
      #            tmpData = element.args().caller().GetTreeData();
      #        }
      #
      #        Grid_ObjectLabel.visible(element.args().caller().AreLabelsLoaded());
      #
      #        Grid_UserLicenseApplies.visible(element.args().caller().IsLicenseInfoLoaded());
      #        Grid_ViewUserLicense.visible(element.args().caller().IsLicenseInfoLoaded());
      #        Grid_MaintainUserLicense.visible(element.args().caller().IsLicenseInfoLoaded());
      #
      #        Grid_ObjectAOTLayer.visible(element.args().caller().IsLayerModelInfoLoaded());
      #        Grid_ObjectAOTModel.visible(element.args().caller().IsLayerModelInfoLoaded());
      #
      #        SysSecEntryPointTmp.setTmpData(tmpData);
      #        SysSecEntryPointTmp_ds.executeQuery();
      #    }
      #
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysSecEntryPointTmp
          Table               #SysSecEntryPointTmp
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SDT217
      Frame               #Dialog
      SetCompany          #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #805306367
          DataSource          #SysSecEntryPointTmp
          DataGroup           #SetEntryPointRights
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BottomGroup
          Width               #Column width
          ElementPosition     #1610612734
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MultiSelection
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #BottomGroup
          FrameType           #Edged 3D
          Caption             #@SDT197
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ApplyAccessRight
          HelpText            #@SDT198
          ElementPosition     #1610612733
          HierarchyParent     #MultiSelection
          Text                #@SDT199
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysSecEntryPointTmp tmpData2 = SysSecEntryPointTmp;
            #    SysSecEntryPointTmp tmpData;
            #    Map selectedRows = new Map(Types::Int64, Types::Record);
            #    SysSecEntryPointTmp curRecord = SysSecEntryPointTmp.data();
            #    MapIterator mapIterator;
            #
            #    for (tmpData = getFirstSelection(SysSecEntryPointTmp_ds);
            #            tmpData;
            #            tmpData = SysSecEntryPointTmp_ds.getNext())
            #    {
            #        selectedRows.insert(tmpData.RecId, tmpData);
            #    }
            #
            #    ttsBegin;
            #    while select forUpdate tmpData2
            #    {
            #        if(selectedRows.exists(tmpData2.RecId))
            #        {
            #            tmpData2.NewAccessRight = AccessRight.selection();
            #            tmpData2.update();
            #        }
            #    }
            #    ttsCommit;
            #
            #    SysSecEntryPointTmp.setTmpData(tmpData2);
            #    SysSecEntryPointTmp_ds.executeQuery();
            #    SysSecEntryPointTmp_ds.findRecord(curRecord);
            #    SysSecEntryPointTmp_ds.setCurrent();
            #
            #    mapIterator = new mapIterator(selectedRows);
            #    while(mapIterator.more())
            #    {
            #        tmpData = mapIterator.value();
            #        SysSecEntryPointTmp_DS.markRecord(tmpData, 1);
            #        mapIterator.next();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Update
          Left                #Right edge
          HelpText            #@SDT218
          ElementPosition     #1610612733
          HierarchyParent     #BottomGroup
          Text                #@SDT219
          MultiSelect         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    #AOT
            #    #Properties
            #    SecurityTaskAotName aotName;
            #    TreeNode privilegeNode, privilegesNode = TreeNode::findNode(strFmt('%1', #SecPrivilegesPath));
            #
            #    if(element.args() && element.args().caller() &&
            #        formHasMethod(element.args().caller(), identifierStr(CurrentDevelopmentObject)))
            #    {
            #        aotName = element.args().caller().CurrentDevelopmentObject();
            #    }
            #
            #    if(aotName == '')
            #    {
            #        throw error(strFmt("@SDT220"));
            #    }
            #
            #    super();
            #
            #    privilegeNode = privilegesNode.AOTfindChild(aotName);
            #
            #    if(privilegeNode == null)
            #    {
            #        throw error(strFmt("@SDT221", aotName));
            #    }
            #
            #    SysSecEntryPointManager::MergeEntryPointRightsIntoPrivilegeNode(privilegeNode, SysSecEntryPointTmp);
            #
            #    if(element.args() && element.args().caller() &&
            #        formHasMethod(element.args().caller(), identifierStr(SetPermissions)))
            #    {
            #        element.args().caller().SetPermissions();
            #    }
            #
            #    element.close();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Grid_UserLicenseApplies
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          ElementPosition     #1651910490
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          Label               #@SDT27
          DataSource          #SysSecEntryPointTmp
          DataField           #UserLicenseApplies
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #AccessRight
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #MultiSelection
          Label               #@SDT204
          EnumType            #AccessRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_AccessRight
          AllowEdit           #No
          ElementPosition     #825955245
          HierarchyParent     #Grid
          Label               #@SDT205
          DataSource          #SysSecEntryPointTmp
          DataField           #AccessRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_MaintainUserLicense
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          ElementPosition     #1486719441
          HierarchyParent     #Grid
          Label               #@SDT14
          DataSource          #SysSecEntryPointTmp
          DataField           #MaintainUserLicense
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_NewAccessRight
          ElementPosition     #660764196
          HierarchyParent     #Grid
          Label               #@SDT206
          DataSource          #SysSecEntryPointTmp
          DataField           #NewAccessRight
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    SysSecEntryPointTmp_ds.write();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_ObjectAOTLayer
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          ElementPosition     #1817101539
          HierarchyParent     #Grid
          Label               #@SDT159
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTLayer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_ObjectType
          AllowEdit           #No
          ElementPosition     #330382098
          HierarchyParent     #Grid
          Label               #@SDT160
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_SystemUserRight
          AllowEdit           #No
          ElementPosition     #991146294
          HierarchyParent     #Grid
          Label               #@SDT25
          DataSource          #SysSecEntryPointTmp
          DataField           #SystemUserRight
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Grid_ViewUserLicense
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          ElementPosition     #1321528392
          HierarchyParent     #Grid
          Label               #@SDT29
          DataSource          #SysSecEntryPointTmp
          DataField           #ViewUserLicense
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Grid_ObjectAOTDisplayName
          AllowEdit           #No
          ElementPosition     #495573147
          HierarchyParent     #Grid
          Label               #@SDT167
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTDisplayName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Grid_ObjectAOTModel
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          ElementPosition     #1982292588
          HierarchyParent     #Grid
          Label               #@SDT168
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTModel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Grid_ObjectLabel
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          ElementPosition     #1156337343
          HierarchyParent     #Grid
          Label               #@SDT169
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
      ReadPermissions     #No
      UpdatePermissions   #No
      CreatePermissions   #No
      DeletePermissions   #No
    ENDPROPERTIES
    
  ENDPERMISSIONS
  
ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysTaskRecorderSaveTask
  PROPERTIES
    Name                #SysTaskRecorderSaveTask
    Origin              #{0B170000-0000-1000-359B-13BA8771D7F6}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysTaskRecorderTask savedTask;
      #    Object callerform;
      #}
    ENDSOURCE
    SOURCE #run
      #void run()
      #{
      #    super();
      #
      #    if (element.args().caller())
      #    {
      #        callerform = element.args().caller();
      #
      #        if (callerform && formHasMethod(callerform,identifierstr(getTask)))
      #        {
      #            savedTask = callerform.getTask();
      #            if( savedTask )
      #            {
      #                taskNameEdit.text(savedTask.parmCaption());
      #                taskNotesEdit.text(savedTask.parmDescription());
      #            }
      #        }
      #
      #        if (callerform && formHasMethod(callerform,identifierstr(parmCancelSave)))
      #        {
      #            callerform.parmCancelSave(true);
      #        }
      #
      #
      #    }
      #    DEVCommentsTool::processSaveTaskForm(element);//trud
      #
      #    if (strltrim(taskNameEdit.text())=="")
      #        saveButton.enabled(false);
      #    else
      #        saveButton.enabled(true);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS115063
      HideToolbar         #Yes
      Style               #DropDialog
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #BottomGroup
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BottomGroup
          ElementPosition     #1431655764
          Style               #DialogCommit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MainGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          FrameType           #None
          Style               #DialogContent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #CancelButton
          AutoDeclaration     #Yes
          AlignControl        #Yes
          HelpText            #@SYS112495
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Text                #@SYS57717
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    if (callerform && formHasMethod(callerform,identifierstr(parmCancelSave)))
            #    {
            #        callerform.parmCancelSave(true);
            #    }
            #
            #    element.close();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SaveButton
          AutoDeclaration     #Yes
          AlignControl        #Yes
          HelpText            #@SYS107737
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          Text                #@SYS12229
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    savedTask.parmCaption(taskNameEdit.valueStr());
            #    savedTask.parmDescription(taskNotesEdit.valueStr());
            #    if (callerform && formHasMethod(callerform,identifierstr(parmCancelSave)))
            #        callerform.parmCancelSave(false);
            #
            #    element.close();
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #StaticText
          ElementPosition     #715827880
          HierarchyParent     #MainGroup
          Text                #@SYS107737
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TaskNameEdit
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #1073741822
          HierarchyParent     #MainGroup
          Label               #@SYS107747
        ENDPROPERTIES
        
        METHODS
          SOURCE #textChange
            #public void textChange()
            #{
            #    super();
            #
            #    if (strltrim(this.text())=="")
            #        saveButton.enabled(false);
            #    else
            #        saveButton.enabled(true);
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TaskNotesEdit
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #MainGroup
          MultiLine           #Yes
          Label               #@SYS107746
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysTraceSQL
  PROPERTIES
    Name                #SysTraceSQL
    Origin              #{EC603790-E90F-4AC3-8FC6-37D74BFD47D2}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysInfoAction_Showplan   sysInfoAction_Showplan;
      #    ;
      #
      #    super();
      #
      #    if (!isDeveloper())
      #        JumpToSource.visible(false);
      #
      #    if (typeOf(this.args().parmObject())==typeOf(sysInfoAction_Showplan))
      #    {
      #        sysInfoAction_Showplan = this.args().parmObject();
      #        //BP Deviation Documented
      #        sysTraceTableSQL.setTmp();
      #        //BP Deviation Documented
      #        sysTraceTableSQLExecPlan.setTmp();
      #        //BP Deviation Documented
      #        sysTraceTableSQLTabRef.setTmp();
      #
      #        SysTraceTableSQL::createFromContainer(sysInfoAction_Showplan.getTraceContainer(),sysTraceTableSQL,sysTraceTableSQLExecPlan,sysTraceTableSQLTabRef);
      #        element.design().caption("@SYS58112");
      #    }
      #}
    ENDSOURCE
    SOURCE #jumpToSource
      #void jumpToSource()
      #{
      #    str         treeNodePath;
      #    Args        args = new Args();
      #    MenuFunction menuFunction = new MenuFunction(menuitemActionStr(SysTraceJumpToSource),MenuItemType::Action);
      #    ;
      #    treeNodePath = lbCallStack.getText(lbCallStack.selection());
      #    args.parm(treeNodePath);
      #    menuFunction.run(args);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysTraceTableSQL
          Table               #SysTraceTableSQL
          AllowCheck          #No
          AllowEdit           #No
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #public void init()
          #{
          #
          #    super();
          #    this.cacheAddMethod(tableMethodStr(SysTraceTableSQL,traceInfo));
          #}
        ENDSOURCE
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #    str callStack;
          #    int pos;
          #    int oPos;
          #
          #    ;
          #
          #    if (sysTraceTableSQL.CallStack)
          #        jumpToSource.enabled(true);
          #    else
          #        jumpToSource.enabled(false);
          #
          #    lbCallStack.clear();
          #    callStack = sysTraceTableSQL.CallStack;
          #    pos = 0;
          #    while (pos<strLen(callStack))
          #    {
          #        oPos = pos+1;
          #        pos = strScan(callStack,'\n',pos+1,strLen(callStack)-pos);
          #        if (pos==0)
          #            pos=strLen(callStack);
          #        lbCallStack.add(subStr(callStack,oPos,pos-oPos));
          #    }
          #
          #    ret = super();
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysTraceTableSQLTabRef
          Table               #SysTraceTableSQLTabRef
          Index               #RefIdx
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #SysTraceTableSQL
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysTraceTableSQLExecPlan
          Table               #SysTraceTableSQLExecPlan
          AllowCheck          #No
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          AutoSearch          #No
          AutoNotify          #No
          JoinSource          #SysTraceTableSQL
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
    SysTraceTableSQLTabRef SysTraceTableSQL
    SysTraceTableSQLExecPlan SysTraceTableSQL
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS74552
      TitleDatasource     #SysTraceTableSQL
      WindowResize        #Dynamic
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          Style               #Strip
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #Overview
          DataSource          #SysTraceTableSQL
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid1
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Tables
          DataSource          #SysTraceTableSQLTabRef
          DataGroup           #Overview
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Connection
          ElementPosition     #1610612733
          HierarchyParent     #General
          Caption             #@SYS74754
          DataSource          #SysTraceTableSQL
          DataGroup           #ConnectionDetails
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Statement
          ElementPosition     #1073741822
          HierarchyParent     #General
          Caption             #@SYS73679
          DataSource          #SysTraceTableSQL
          DataGroup           #StatementDetails
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TimeCategory
          ElementPosition     #1717986916
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysTraceTableSQL
          DataGroup           #Overview
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #Functions
          HelpText            #@SYS74753
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroup
          Text                #@SYS10340
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Description
          ElementPosition     #1227133512
          HierarchyParent     #Tab
          Caption             #@SYS7576
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #General
          ElementPosition     #920350134
          HierarchyParent     #Tab
          Caption             #@SYS2952
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Overview
          ElementPosition     #613566756
          HierarchyParent     #Tab
          Caption             #@SYS9039
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Tables
          ElementPosition     #1840700268
          HierarchyParent     #Tab
          Caption             #@SYS9678
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Use
          ElementPosition     #1533916890
          HierarchyParent     #Tab
          Caption             #@SYS5983
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #JumpToSource
          AutoDeclaration     #Yes
          HelpText            #@SYS74745
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroup
          Text                #@SYS70468
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.jumpToSource();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Group_IsLobsIncluded
          ElementPosition     #357913940
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #IsLobsIncluded
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Group_IsMoreDataPending
          ElementPosition     #536870910
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #IsMoreDataPending
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Group_IsSelectedForUpdate
          ElementPosition     #1252698790
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #IsSelectedForUpdate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Group_IsStartedWithinTransaction
          ElementPosition     #1431655760
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #IsStartedWithinTransaction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Group_Category
          ElementPosition     #1288490187
          HierarchyParent     #TimeCategory
          DataSource          #SysTraceTableSQL
          DataField           #Category
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #Group_StatementType
          ElementPosition     #1968526670
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #StatementType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #ConnectionDetails_ConnectionId
          ElementPosition     #1717986916
          HierarchyParent     #Connection
          DataSource          #SysTraceTableSQL
          DataField           #ConnectionId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #ConnectionDetails_ConnectionSPID
          ElementPosition     #1288490187
          HierarchyParent     #Connection
          DataSource          #SysTraceTableSQL
          DataField           #ConnectionSPID
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Group_Code
          ElementPosition     #1717986916
          HierarchyParent     #TimeCategory
          DataSource          #SysTraceTableSQL
          DataField           #Code
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Group_RowsAffected
          ElementPosition     #715827880
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #RowsAffected
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Group_RowSize
          ElementPosition     #894784850
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #RowSize
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Group_RowsPerFetch
          ElementPosition     #1073741820
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #RowsPerFetch
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Group_StatementId
          ElementPosition     #1789569700
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #StatementId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Group_StatementReuseCount
          ElementPosition     #1610612730
          HierarchyParent     #Statement
          DataSource          #SysTraceTableSQL
          DataField           #StatementReuseCount
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Group_traceTime
          ElementPosition     #858993458
          HierarchyParent     #TimeCategory
          DataSource          #SysTraceTableSQL
          DataField           #traceTime
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL LISTBOX
        PROPERTIES
          Name                #lbCallStack
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Use
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDblClick
            #public int mouseDblClick(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    int ret;
            #
            #    element.jumpToSource();
            #
            #    ret = super(_x, _y, _button, _ctrl, _shift);
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #DEVSysTraceExecPlan
          ElementPosition     #1932735281
          HierarchyParent     #ButtonGroup
          NeedsRecord         #Yes
          DataSource          #SysTraceTableSQL
          MenuItemName        #DEVSysTraceExecPlan
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysTraceSQLClearLog
          HelpText            #@SYS74741
          ElementPosition     #1717986916
          HierarchyParent     #Functions
          MenuItemType        #Action
          MenuItemName        #SysTraceSQLClearLog
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    sysTraceTableSQL_ds.research();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysTraceSQLExport
          HelpText            #@SYS74740
          ElementPosition     #1288490187
          HierarchyParent     #Functions
          MenuItemType        #Action
          MenuItemName        #SysTraceSQLExport
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysTraceSQLImport
          HelpText            #@SYS74742
          ElementPosition     #858993458
          HierarchyParent     #Functions
          MenuItemType        #Action
          MenuItemName        #SysTraceSQLImport
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    sysTraceTableSQL_ds.research();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ConnectionDetails_ConnectionType
          ElementPosition     #858993458
          HierarchyParent     #Connection
          DataSource          #SysTraceTableSQL
          DataField           #ConnectionType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Info_Statement
          Width               #Column width
          ElementPosition     #858993458
          HierarchyParent     #Description
          Label               #@SYS73679
          DataSource          #SysTraceTableSQL
          DataField           #Statement
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Info_Text
          Width               #Column width
          ElementPosition     #1288490187
          HierarchyParent     #Description
          Label               #@SYS2595
          DataSource          #SysTraceTableSQL
          DataField           #Text
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Info_TextDetails
          Width               #Column width
          ElementPosition     #1717986916
          HierarchyParent     #Description
          Label               #@SYS8811
          DataSource          #SysTraceTableSQL
          DataField           #TextDetails
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysTracetableSQL_createdBy
          HelpText            #@SYS74732
          ElementPosition     #1288490187
          HierarchyParent     #Grid
          Label               #@SYS16181
          DataSource          #SysTraceTableSQL
          DataField           #createdBy
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SysTraceTableSQL_Info
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #Overview
          LabelPosition       #Above
          DataSource          #SysTraceTableSQL
          DataMethod          #traceInfo
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL UTCDATETIMEEDIT
        PROPERTIES
          Name                #SysTraceTableSQL_createdDateTime
          HelpText            #@SYS74734
          ElementPosition     #858993458
          HierarchyParent     #Grid
          DataSource          #SysTraceTableSQL
          DataField           #createdDateTime
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlCheckIn
  PROPERTIES
    Name                #SysVersionControlCheckIn
    Origin              #{0B180000-0000-1000-6C98-A7ECEC045D6B}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysVersionControlTmpItem            item;
      #    SysVersionControlTmpWorkItems       tmpWorkItems;
      #    SysVersionControlAction             action;
      #    SysVersionControlWorkItemProvider   workItemProvider;
      #    SysFormSplitter_Y                   formSplitter;
      #
      #    // Controls whether or not the form should have modal behaviour
      #    boolean                             setFormToModal;
      #    boolean                             workItemsActivatedFirstTime;
      #
      #    SysVersionControlChangeListId       changeList;
      #}
    ENDSOURCE
    SOURCE #addWorkItemById
      #public void addWorkItemById(SysVersionControlWorkItemId idToAdd)
      #{
      #    SysVersionControlTmpWorkItems addedItem;
      #
      #    addedItem = workItemProvider.getItemById(idToAdd);
      #
      #    if (SysVersionControlTmpWorkItems::numberOfWorkItems(addedItem) == 0)
      #    {
      #        warning("@SYS341267");
      #    }
      #    else
      #    {
      #        select firstonly addedItem;
      #
      #        tmpWorkItems.id = addedItem.id;
      #        tmpWorkItems.Title = addedItem.Title;
      #        tmpWorkItems.State = addedItem.State;
      #        tmpWorkItems.Type = addedItem.Type;
      #
      #        tmpWorkItems.insert();
      #
      #        sysVersionControlTmpWorkItems_ds.executeQuery();
      #        sysVersionControlTmpWorkItems_ds.findRecord(tmpWorkItems);
      #    }
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    if (workItemProvider != null)
      #    {
      #        workItemProvider.flushCache();
      #    }
      #    super();
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    SysVersionControlTmpItem localitem;
      #    SysVersionControlReviews review;
      #    boolean closeForm = true;
      #;
      #    //
      #    // Remove deselected items from list
      #    // and store them in local variable
      #    //
      #    while select item
      #        where item.Selected == false
      #    {
      #        localitem.data(item);
      #        localitem.insert();
      #        item.delete();
      #    }
      #
      #    try
      #    {
      #        switch (action)
      #        {
      #            case SysVersionControlAction::CheckIn:
      #                if (gatedCheckin.value())
      #                    versioncontrol.checkInChangelist(item, '', changeList, tmpWorkItems);
      #                else
      #                    versioncontrol.checkInChangelist(item, comment.valueStr(), changeList, tmpWorkItems);
      #                break;
      #
      #            case SysVersionControlAction::Review:
      #                review = versioncontrol.parmSysVersionControlSystem() as SysVersionControlReviews;
      #                if (review)
      #                    review.reviewChangeList(item, comment.valueStr(), filename.valueStr());
      #                break;
      #        }
      #    }
      #    catch
      #    {
      #        //
      #        // If something failed, reinsert the deselected items,
      #        // and keep the form running.
      #        //
      #
      #        while select localitem
      #        {
      #            item.data(localitem);
      #            item.insert();
      #        }
      #        closeForm = false;
      #    }
      #    if (closeForm)
      #    {
      #        super();
      #    }
      #}
    ENDSOURCE
    SOURCE #fetchData
      #void fetchData(boolean _firsttime = false)
      #{
      #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
      #    SysVersionControlChangeLists sysVersionControlChangeLists = sysVersionControlSystem as SysVersionControlChangeLists;
      #
      #    if(sysVersionControlChangeLists && changeList)
      #    {
      #        item = sysVersionControlChangeLists.getPendingChangeListContents(changeList);
      #    }
      #    else
      #    {
      #        item = versioncontrol.getCheckedOutItems();
      #    }
      #
      #    if (element.args() &&
      #        element.args().caller())
      #    {
      #        // By default select all items
      #        this.setSelected(true);
      #    }
      #    else
      #    {
      #        // Started from AOT context menu - only select the items from the AOT
      #        this.setSelectedAotElements();
      #    }
      #
      #    // BP deviation documented
      #    sysVersionControlTmpItem.setTmp();
      #    sysVersionControlTmpItem.checkRecord(false);
      #    sysVersionControlTmpItem.setTmpData(item);
      #    if (!_firsttime)
      #        sysVersionControlTmpItem_ds.executeQuery();
      #}
    ENDSOURCE
    SOURCE #filenameLookupFileName
      #str filenameLookupFileName()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #filenameLookupFilter
      #FilenameFilter filenameLookupFilter()
      #{
      #    SysVersionControlReviews review =versioncontrol.parmSysVersionControlSystem() as SysVersionControlReviews;
      #
      #    if (review)
      #        return review.reviewFilenameLookupFilter();
      #    return conNull();
      #}
    ENDSOURCE
    SOURCE #filenameLookupInitialPath
      #str filenameLookupInitialPath()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #filenameLookupTitle
      #str filenameLookupTitle()
      #{
      #    return "@SYS88311";
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysVersionControlSystem vcs = versioncontrol.parmSysVersionControlSystem();
      #    Object caller;
      #
      #    element.args().record(null);
      #    super();
      #    aotImage.imageList(new ImageListAppl_Aot().imageList());
      #
      #    this.initializeWorkItems(vcs);
      #
      #    if (element.args().parmEnumType() == enumnum(SysVersionControlAction))
      #    {
      #        action = element.args().parmEnum();
      #
      #        // If parm not empty, then the form should have modal behaviour
      #        if (element.args().parm())
      #        {
      #            setFormToModal = str2enum(setFormToModal, element.args().parm());
      #        }
      #
      #        switch (action)
      #        {
      #            case SysVersionControlAction::Review:
      #                element.design().caption("@SYS60543");
      #                filename.visible(true);
      #                break;
      #
      #            default:
      #                if (vcs && vcs.supportCheckInWizard())
      #                {
      #                    gatedCheckin.visible(true);
      #                    //Check and disable the 'use checkin wizard' check box so checkins are forced through the checkin wizard.
      #                    //Also disable the change description box because it should be disabled when using the checkin wizard.
      #                    gatedCheckin.value(1);
      #                    gatedCheckin.enabled(false);
      #                    comment.visible(false);
      #                }
      #                break;
      #        }
      #
      #        if (vcs && !vcs.supportChangeVersion())
      #        {
      #            overview_Version.visible(false);
      #        }
      #    }
      #    else
      #    {
      #        throw error(Error::missingParameter(element));
      #    }
      #
      #    caller = element.args().caller() as FormRun;
      #    if (caller &&
      #        formHasMethod(caller, identifierstr(changeList)))
      #    {
      #        changeList = caller.changeList();
      #    }
      #}
    ENDSOURCE
    SOURCE #initializeWorkItems
      #private void initializeWorkItems(SysVersionControlSystem vcs)
      #{
      #    workItemsActivatedFirstTime = false;
      #    workItemProvider = vcs.workItemProvider();
      #    if (workItemProvider == null)
      #    {
      #        workItems.visible(false);
      #    }
      #    else
      #    {
      #        workItemProvider.flushCache();
      #    }
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    this.fetchData();
      #
      #    DEVCommentsTool::processCheckInForm(element);
      #
      #    super();
      #
      #    if (setFormToModal)
      #    {
      #        element.wait(setFormToModal);
      #    }
      #}
    ENDSOURCE
    SOURCE #setSelected
      #void setSelected(boolean _selected)
      #{
      #    while select forupdate item
      #    {
      #        item.Selected = _selected;
      #        item.update();
      #    }
      #}
    ENDSOURCE
    SOURCE #setSelectedAotElements
      #void setSelectedAotElements()
      #{
      #    LastAotSelection lastAotSelection = new LastAotSelection();
      #    TreeNode treeNode;
      #
      #    treeNode = lastAotSelection.first();
      #
      #    element.setSelected(treeNode == null);
      #
      #    while (treeNode)
      #    {
      #        select forupdate item
      #            where item.ItemPath == treeNode.treeNodePath();
      #
      #        if (item)
      #        {
      #            item.Selected = true;
      #            item.update();
      #        }
      #
      #        treeNode = lastAotSelection.next();
      #    }
      #
      #    sysVersionControlTmpItem_ds.executeQuery();
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpItem
          Table               #SysVersionControlTmpItem
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #validateDelete
          #public boolean validateDelete()
          #{
          #    //
          #    // Do not display warning dialog, as this is a temporary form
          #    //
          #    return true;
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    super();
          #    this.query().dataSourceTable(tableNum(SysVersionControlTmpItem)).addSortField(fieldNum(SysVersionControlTmpItem, vcsDate),SortOrder::Descending);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpWorkItems
          Table               #SysVersionControlTmpWorkItems
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
      Caption             #@SYS85680
      WindowType          #Workspace
      SetCompany          #No
      BackgroundColor     #Window background
      TopMargin           #0
      BottomMargin        #0
      LeftMargin          #0
      RightMargin         #0
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #DialogCommit
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #SelectGrp
          ElementPosition     #1610612733
          HierarchyParent     #ButtomGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #ButtomGroup
          ShowRowLabels       #No
          DataSource          #SysVersionControlTmpItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #WorkItemsList
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #WorkItems
          ShowRowLabels       #No
          DataSource          #SysVersionControlTmpWorkItems
          DataGroup           #CheckInActionData
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ButtomGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #ModelElements
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CommentGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1288490187
          HierarchyParent     #TopGroup
          Caption             #@SYS7576
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DialogCommit
          ElementPosition     #1431655764
          Style               #DialogCommit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DialogContent
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          Style               #DialogContent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ItemQueryGroup
          ElementPosition     #1073741822
          HierarchyParent     #WorkItems
          ArrangeMethod       #Horizontal, flush right
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Overview
          AllowEdit           #No
          ElementPosition     #1717986916
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysVersionControlTmpItem
          DataGroup           #ChangelistGrid
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TopGroup
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #ModelElements
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #MainTab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #DialogContent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #ModelElements
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741822
          HierarchyParent     #MainTab
          Caption             #@SYS341269
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #WorkItems
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #MainTab
          Caption             #@SYS341266
        ENDPROPERTIES
        
        METHODS
          SOURCE #fetchWorkItemsData
            #private void fetchWorkItemsData()
            #{
            #    tmpWorkItems = workItemProvider.getItemsAssignedToMe();
            #    //BP Deviation documented
            #    sysVersionControlTmpWorkItems.setTmp();
            #    sysVersionControlTmpWorkItems.checkRecord(false);
            #    sysVersionControlTmpWorkItems.setTmpData(tmpWorkItems);
            #    sysVersionControlTmpWorkItems_ds.executeQuery();
            #}
          ENDSOURCE
          SOURCE #pageActivated
            #public void pageActivated()
            #{
            #    super();
            #
            #    if (workItemsActivatedFirstTime == false)
            #    {
            #        this.fetchWorkItemsData();
            #        workItemsActivatedFirstTime = true;
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #AddToList
          HelpText            #@SYS341271
          ElementPosition     #1610612734
          HierarchyParent     #ItemQueryGroup
          Text                #@SYS341270
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysVersionControlWorkItemId idToAdd;
            #
            #    super();
            #
            #    idToAdd = workItemIdToAdd.value();
            #
            #    if (tmpWorkItems.containsItemById(idToAdd))
            #    {
            #        warning("@SYS341268");
            #    }
            #    else
            #    {
            #        element.addWorkItemById(idToAdd);
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SelectAll
          HelpText            #@SYS111701
          ElementPosition     #1073741822
          HierarchyParent     #SelectGrp
          Text                #@SYS11696
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    element.setSelected(true);
            #    sysVersionControlTmpItem_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SelectNone
          HelpText            #@SYS111702
          ElementPosition     #1610612733
          HierarchyParent     #SelectGrp
          Text                #@SYS1369
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    element.setSelected(false);
            #    sysVersionControlTmpItem_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #GatedCheckIn
          AutoDeclaration     #Yes
          Visible             #No
          HelpText            #@SYS90671
          ElementPosition     #1717986916
          HierarchyParent     #TopGroup
          Label               #@SYS90670
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #    comment.allowEdit(!this.value());
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SysVersionControlTmpItem_Selected
          ElementPosition     #858993458
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysVersionControlTmpItem
          DataField           #Selected
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandCancel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandOk
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          DefaultButton       #Yes
          Command             #263
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    if (!comment.valueStr() && !gatedCheckin.value())
            #    {
            #        throw error(strFmt("@SYS84753","@SYS85716"));
            #    }
            #
            #    if (action == SysVersionControlAction::Review &&
            #        !filename.valueStr())
            #    {
            #        throw error(strFmt("@SYS84753","@SYS53125"));
            #    }
            #
            #    //
            #    // Verify at least one file is selected
            #    //
            #    select count(RecId) from item
            #        where item.Selected ==true;
            #
            #    if (item.RecId == 0)
            #    {
            #        throw error("@SYS111699");
            #    }
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Overview_Version
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #Version
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #WorkItemIdToAdd
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ItemQueryGroup
          ExtendedDataType    
            ARRAY 
              #SysVersionControlWorkItemId
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #WorkItemsList_ID
          AllowEdit           #No
          ElementPosition     #1073741823
          HierarchyParent     #WorkItemsList
          DataSource          #SysVersionControlTmpWorkItems
          DataField           #ID
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Comment
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #CommentGroup
          DisplayHeight       #5
          MultiLine           #Yes
          ShowLabel           #No
          Mandatory           #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Filename
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          ElementPosition     #858993458
          HierarchyParent     #TopGroup
          Mandatory           #Yes
          ExtendedDataType    
            ARRAY 
              #FilenameSave
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WorkItemsList_State
          AllowEdit           #No
          ElementPosition     #1610612733
          HierarchyParent     #WorkItemsList
          DataSource          #SysVersionControlTmpWorkItems
          DataField           #State
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WorkItemsList_Type
          AllowEdit           #No
          ElementPosition     #1879048188
          HierarchyParent     #WorkItemsList
          DataSource          #SysVersionControlTmpWorkItems
          DataField           #Type
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL WINDOW
        PROPERTIES
          Name                #AOTImage
          AutoDeclaration     #Yes
          AllowEdit           #No
          Width               #16
          Height              #16
          ElementPosition     #1288490187
          HierarchyParent     #Grid
          BackStyle           #Transparent
          ShowLabel           #No
          DataSource          #SysVersionControlTmpItem
          DataField           #ImageRes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #xRefReferencesUsedByTypedTree
  PROPERTIES
    Name                #xRefReferencesUsedByTypedTree
    Origin              #{74487556-6372-4ED8-9CF1-7264FAAFEB74}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #/*
      #    A tree control shows the other methods the method override or are overridden by, explicit as implicit.
      #    User can navigate this tree to see other potential calls to the method.
      #*/
      #final class FormRun extends ObjectRun
      #{
      #    TreeNode  treeNode;
      #
      #    SysFormSplitter_X formSplitter;
      #    SysTypeHierarchy  hierarchy;
      #}
    ENDSOURCE
    SOURCE #init
      #/*
      #    This form shows where the supplied type oriented application object are used; who it is "Used by"
      #    The supplied application object can be
      #    * a treeNode
      #    * an external xRefNames buffer
      #    * an external xRefPaths buffer
      #    * an external UtilElements buffer
      #*/
      #void init()
      #{
      #    QueryBuildDataSource xRefReferencesQueryBuildDataSource;
      #    xRefPaths            elementArgsXRefPaths;
      #
      #    startLengthyOperation();
      #
      #    if (SysContextMenu::startedFrom(element.args()))   // started from SysContextMenu
      #    {
      #        if (element.args().dataset() != tablenum(xRefPaths) &&
      #            element.args().dataset() != tablenum(xRefNames))
      #        {
      #            treeNode = element.args().parmObject().first();
      #            element.args().record(xRefPaths::find(treeNode.treeNodePath()));
      #        }
      #    }
      #    else    // started with a button (or from a menu!)
      #    if (element.args().dataset() == tablenum(UtilElements))
      #    {
      #        treeNode = xUtilElements::getNodeInTree(element.args().record());
      #        element.args().record(xRefPaths::find(treeNode.treeNodePath()));
      #    }
      #
      #    super();
      #
      #    formSplitter = new SysFormSplitter_X(split, treeGroup);
      #    element.lock();
      #
      #    // if started with a xRefPaths, then relate to the referencePathRecId
      #    if (element.args().dataset() == tablenum(xRefPaths))
      #    {
      #        xRefReferencesQueryBuildDataSource = xRefReferences_ds.query().dataSourceNo(1); // Name(tablestr(xRefReferences)
      #        xRefReferencesQueryBuildDataSource.clearDynalinks();
      #        xRefReferencesQueryBuildDataSource.addDynalink(fieldnum(xRefReferences,ReferencePathRecId),
      #                                                  element.args().record(),
      #                                                  fieldnum(xRefPaths,RecId));
      #
      #        nameButton.enabled(true);
      #        if (!treeNode)
      #        {
      #            elementArgsXRefPaths = element.args().record();
      #            treeNode = elementArgsXRefPaths.treeNode();
      #        }
      #    }
      #    if (element.args().dataset() == tablenum(xRefNames))
      #    {
      #        nameButton.enabled(false);
      #    }
      #
      #    // if it is a type based entry show the variable name declared for the types
      #    if (treeNode && SysTreeNode::isType(treeNode))
      #    {
      #        xRefNames_nameGrid.visible(true);
      #    }
      #    else
      #    {
      #        xRefNames_nameGrid.visible(false);
      #    }
      #
      #    element.resetSize();
      #    element.unLock();
      #}
    ENDSOURCE
    SOURCE #run
      #void run()
      #{
      #    #TreeNodeSysNodeType
      #
      #    if (treeNode &&
      #        ((treeNode.treeNodeType().isUtilElement() && treeNode.utilElement().RecordType == UtilElementType::ClassInstanceMethod) ||
      #         (treeNode.TreeNodeType().id() == #NT_KERNELDOCFUNCTIONNODE && !strContains(treeNode.AOTtoolTip(), 'static '))))     //  instance system class method
      #    {
      #        tree.linesAtRoot(true);
      #        hierarchy = SysTypeHierarchy::newFormTreeControl(tree);
      #        infolog.globalCache().set(formstr(xRefReferencesUsedByTypedTree), 0, new ObjectIdent(this));
      #        hierarchy.onItemCreated += eventHandler(xRefUpdate::setIcon);
      #        this.setupSimpleChart();
      #    }
      #    else
      #    {   //Hides application heirarchy tree when node is not of correct type to display tree for.
      #        treeGroup.width(0);
      #        split.enabled(false);
      #    }
      #
      #    super();
      #}
    ENDSOURCE
    SOURCE #setIcon
      #void setIcon(FormTreeItem _item)
      #{
      #    SysTypeHierarchyProvider provider = SysTypeHierarchyProviderGeneric::newName(_item.text());
      #    SysDictClass dictClass = provider as SysDictClass;
      #    xRefNames    xRefNamesCaller;
      #    xRefReferences xRefReferencesCaller;
      #    int image;
      #    #resource
      #
      #    if (dictClass)
      #    {
      #        select firstonly TypeName, Name, Kind, RecId from xRefNamesCaller
      #            where xRefNamesCaller.TypeName == dictClass.name() &&
      #                  xRefNamesCaller.Name     == treeNode.treeNodeName() &&
      #                  xRefNamesCaller.Kind     == xRefKind::ClassInstanceMethod
      #        join xRefNameRecId, Reference from xRefReferencesCaller
      #            where xRefReferencesCaller.xRefNameRecId == xRefNamesCaller.RecId &&
      #                  xRefReferencesCaller.Reference == XRefReference::Call;
      #    }
      #
      #    if (xRefNamesCaller)
      #    {
      #        image = dictClass && TreeNode::findNode(dictClass.path()+'\\'+treeNode.treeNodeName()) ?
      #                #RES_NODE_INHSYS_OK :
      #                #RES_NODE_INHSYS_NULL;
      #
      #    }
      #    else
      #    {
      #        image = dictClass && TreeNode::findNode(dictClass.path()+'\\'+treeNode.treeNodeName()) ?
      #                #RES_NODE_TRIGGER_NOTEMPTY :
      #                #RES_NODE_TRIGGER_EMPTY;
      #    }
      #
      #
      #    if (image)
      #    {
      #        _item.image(hierarchy.parmImageList().image(image));
      #        _item.selectedImage(_item.image());
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #setupSimpleChart
      #void setupSimpleChart()
      #{
      #    //We only get here for class methods. The parent is always the class
      #    TreeNode applObjectTreeNode = treeNode.AOTparent();
      #
      #    if (applObjectTreeNode)
      #    {
      #        hierarchy.populateFromTreenode(applObjectTreeNode);
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #XRefReferences
          Table               #xRefReferences
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #xRefPaths
          Table               #xRefPaths
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #XRefReferences
          LinkType            #InnerJoin
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #xRefNames
          Table               #xRefNames
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #XRefReferences
          LinkType            #InnerJoin
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
    xRefPaths XRefReferences
    xRefNames XRefReferences
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS27530
      WindowResize        #Dynamic
      WindowType          #Workspace
      SetCompany          #No
      DataSource          #XRefReferences
      ArrangeWhen         #Auto
      HideIfEmpty         #No
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1879048190
          HierarchyParent     #ThisCalled
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1252698792
          HierarchyParent     #ThisCalled
          DataSource          #XRefReferences
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDblClick
            #public int mouseDblClick(int _x, int _y, int _button, boolean _Ctrl, boolean _Shift)
            #{
            #    int ret = super(_x, _y, _button, _ctrl, _shift);
            #    ;
            #    editButton.clicked();
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #NameRegister
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #715827882
          FrameType           #None
          FramePosition       #Center
          DataSource          #XRefReferences
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #References
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          FrameType           #None
          Columns             #3
          Columnspace         #0
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Split
          AutoDeclaration     #Yes
          Width               #4
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #References
          FrameType           #None
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    return formSplitter.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return formSplitter.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    return formSplitter.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ThisCalled
          Width               #Column width
          Height              #Column height
          ElementPosition     #1879048190
          HierarchyParent     #References
          FrameType           #None
          DataSource          #XRefReferences
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TreeGroup
          AutoDeclaration     #Yes
          Width               #200
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #References
          FrameType           #None
          Caption             #@SYS26859
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #MorphXtools
          HelpText            #@SYS68574
          ElementPosition     #1879048190
          HierarchyParent     #ButtonGroup
          Text                #@SYS28637
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysContextMenu toolsMenu;
            #    PopupMenu popupMenu;
            #    int x,y;
            #
            #    toolsMenu = new SysContextMenuxRefReferences(xRefReferences);
            #
            #    popupMenu = toolsMenu.buildMenu(this.hWnd());
            #    [x,y] = WinAPI::clientToScreen(this.hWnd(),this.widthValue(),0);
            #    toolsMenu.runMenu(popupMenu.draw(x,y),toolsMenu,element,xRefReferences);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #dummy
          HelpText            #@SYS28637
          ElementPosition     #1073741823
          HierarchyParent     #MorphXtools
          Text                #@SYS68574
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #EditButton
          AutoDeclaration     #Yes
          HelpText            #@SYS1300
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          Text                #@SYS16569
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    xRefReferences xRefReferencesEdit;
            #
            #    for (xRefReferencesEdit = getFirstSelection(xRefReferences_ds);
            #         xRefReferencesEdit;
            #         xRefReferencesEdit = xRefReferences_ds.getNext())
            #    {
            #        SysUtil::editPathLogicalPos(xRefReferencesEdit.path(),xRefReferencesEdit.Line,xRefReferencesEdit.Column);
            #    }
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #SDSinCurrentLayer
          ElementPosition     #2102744403
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          Label               #inCurrentLayer
          DataSource          #XRefReferences
          DataMethod          #SDSinCurrentLayer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #xRefNames_kind
          Skip                #Yes
          ElementPosition     #1073741823
          HierarchyParent     #NameRegister
          LabelPosition       #Above
          DataSource          #xRefNames
          DataField           #kind
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #xRefReferences_Reference
          ElementPosition     #1073741823
          HierarchyParent     #Grid
          DataSource          #XRefReferences
          DataField           #Reference
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #XRefReferences_Column
          ElementPosition     #2013265918
          HierarchyParent     #Grid
          DataSource          #XRefReferences
          DataField           #Column
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #XRefReferences_Line
          ElementPosition     #1879048190
          HierarchyParent     #Grid
          DataSource          #XRefReferences
          DataField           #line
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #NameButton
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          MenuItemName        #XRefNames
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #TreeLabel
          VerticalSpacing     #0
          ElementPosition     #1073741823
          HierarchyParent     #TreeGroup
          Text                #@SYS26859
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CIT_getSourceLine
          AllowEdit           #No
          ElementPosition     #2125114024
          HierarchyParent     #Grid
          DataSource          #XRefReferences
          DataMethod          #SDSgetSourceLine
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDblClick
            #//CIT000, DEV-CIT-0002, Утилиты разработки, 30.09.2009, kirp
            #int mouseDblClick(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret = super(x, y, button, ctrl, shift);
            #    ;
            #    editButton.clicked();
            #    return ret;
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #xRefNames_name
          Skip                #Yes
          ElementPosition     #1610612734
          HierarchyParent     #NameRegister
          LabelPosition       #Above
          DataSource          #xRefNames
          DataField           #name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #xRefNames_nameGrid
          AutoDeclaration     #Yes
          ElementPosition     #2080374782
          HierarchyParent     #Grid
          DataSource          #xRefNames
          DataField           #name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #xRefNames_typeName
          Skip                #Yes
          ElementPosition     #1879048190
          HierarchyParent     #NameRegister
          LabelPosition       #Above
          DataSource          #xRefNames
          DataField           #typeName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #xRefPaths_Path
          ElementPosition     #1610612734
          HierarchyParent     #Grid
          DataSource          #xRefPaths
          DataField           #Path
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDblClick
            #int mouseDblClick(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret = super(x, y, button, ctrl, shift);
            #
            #    editButton.clicked();
            #    return ret;
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #Tree
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS67740
          ElementPosition     #1610612734
          HierarchyParent     #TreeGroup
          LinesAtRoot         #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #expanding
            #public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
            #{
            #    if (_action==FormTreeExpand::Expand)
            #    {
            #        hierarchy.treeExpanding(_idx);
            #    }
            #    return false;
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
            #{
            #    xRefPaths xRefPathsNew;
            #    xRefNames xRefNamesNew;
            #    QueryBuildDataSource xRefReferencesQueryBuildDataSource;
            #
            #    super(_oldItem, _newItem, _how);
            #
            #    xRefNamesNew = xRefNames::find(xRefKind::ClassInstanceMethod, tree.getItem(tree.getSelection()).text(), treeNode.treeNodeName());
            #
            #    if (!xRefPathsNew)
            #        xRefPathsNew.RecId = -1;    // no relations are to be shown (just hope none records have recid = -1!)
            #
            #    xRefReferencesQueryBuildDataSource = xRefReferences_q.dataSourceNo(1);
            #    xRefReferencesQueryBuildDataSource.clearDynalinks();
            #    xRefReferencesQueryBuildDataSource.addDynalink(fieldnum(xRefReferences,xRefNameRecId),
            #                                                       xRefNamesNew,
            #                                                       fieldnum(xRefNames,RecId));
            #
            #    xRefReferences_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: JOB

; Microsoft Dynamics AX Job: checkNumSeq unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #checkNumSeq
    #static void checkNumSeq(Args _args)
    #{
    #    NumberSequenceReference     NumberSequenceReference;
    #    NumberSequenceTable         NumberSequenceTable;
    #    int  good, bad;
    #    ;
    #    ttsBegin;
    #    while select forUpdate NumberSequenceReference
    #    {
    #        select NumberSequenceTable
    #            where NumberSequenceTable.RecId == NumberSequenceReference.NumberSequenceId;
    #        if (NumberSequenceTable.RecId)
    #        {
    #            good++;
    #        }
    #        else
    #        {
    #            bad++;
    #            NumberSequenceReference.delete();
    #        }
    #
    #    }
    #    ttsCommit;
    #    info(strFmt("%1 %2", good, bad));
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{C834EF6C-1478-4264-9593-7F5A26C01BA2}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: dimensionCombValuesforMainAccount unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #dimensionCombValuesforMainAccount
    #static void dimensionCombValuesforMainAccount(Args _args)
    #{
    #    DimensionAttributeValueCombination  dimAttrValueComb;
    #
    #    DimensionStorage        dimensionStorage;
    #
    #    DimensionStorageSegment segment;
    #    int                     segmentCount, segmentIndex;
    #    int                     hierarchyCount, hierarchyIndex;
    #    str                     segmentName, segmentDescription;
    #    SysDim                  segmentValue;
    #
    #    DimensionHierarchyLevel  dimensionHierarchyLevel;
    #    RefRecId recordvalue;
    #    DimensionAttributeValueCombination dimCombination;
    #    MainAccount  mainAccount;
    #    ;
    #
    #   mainAccount = MainAccount::findByMainAccountId('110110');
    #    recordvalue=DimensionHierarchy::getAccountStructure(mainAccount.RecId);
    #
    #    select  recid from dimCombination where  dimCombination.MainAccount==mainAccount.RecId
    #               && dimCombination.AccountStructure==recordvalue;
    #
    #    dimAttrValueComb = DimensionAttributeValueCombination::find(dimCombination.RecId);
    #    setPrefix("Breakup for " + dimAttrValueComb.DisplayValue);
    #
    #    dimensionStorage = DimensionStorage::findById(dimAttrValueComb.RecId);
    #    if (dimensionStorage == null)
    #    {
    #        throw error("No dimension Specified for the Main Account");
    #    }
    #    hierarchyCount = dimensionStorage.hierarchyCount();
    #    for(hierarchyIndex = 1; hierarchyIndex <= hierarchyCount; hierarchyIndex++)
    #    {
    #        setPrefix(strFmt("Hierarchy: %1", DimensionHierarchy::find(dimensionStorage.getHierarchyId(hierarchyIndex)).Name));
    #
    #        segmentCount = dimensionStorage.segmentCountForHierarchy(hierarchyIndex);
    #        //Loop through segments and display required values
    #        for (segmentIndex = 1; segmentIndex <= segmentCount; segmentIndex++)
    #        {
    #            segment = dimensionStorage.getSegmentForHierarchy(hierarchyIndex, segmentIndex);
    #            if (segment.parmDimensionAttributeValueId() != 0)
    #            {
    #               // Dimension Name
    #                segmentName = DimensionAttribute::find(DimensionAttributeValue::find(segment.parmDimensionAttributeValueId()).DimensionAttribute).Name;
    #
    #                 // segment value- Dimension Value
    #                segmentValue        = segment.parmDisplayValue();
    #
    #                //Description for dimension)
    #                segmentDescription  = segment.getName();
    #                info(strFmt("DimensionName:%1: Value:%2,Description: %3", segmentName, segmentValue, segmentDescription));
    #            }
    #        }
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{77723045-6053-48B6-B740-CCFD83A3996A}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: DEVfixDemoRoleNames unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #DEVfixDemoRoleNames
    #static void DEVfixDemoRoleNames(Args _args)
    #{
    #    LogisticsLocationRoleTranslation        LogisticsLocationRoleTranslation;
    #
    #    LogisticsLocationRoleTranslation        LogisticsLocationRoleTranslationAU;
    #
    #    LogisticsAddressCountryRegionTranslation        logisticsAddressCountryRegionTranslation;
    #
    #    LogisticsAddressCountryRegionTranslation        logisticsAddressCountryRegionTranslationAU;
    #
    #    Num         fromLang = 'en-us', toLang = 'en-au';
    #    ;
    #    ttsBegin;
    #
    #    while select LogisticsLocationRoleTranslation
    #        where LogisticsLocationRoleTranslation.LanguageId == fromLang
    #    {
    #        LogisticsLocationRoleTranslationAU = null;
    #        select forUpdate LogisticsLocationRoleTranslationAU
    #            where LogisticsLocationRoleTranslationAU.LanguageId == toLang &&
    #                  LogisticsLocationRoleTranslationAU.LocationRole == LogisticsLocationRoleTranslation.LocationRole;
    #
    #        LogisticsLocationRoleTranslationAU.LocationRole = LogisticsLocationRoleTranslation.LocationRole;
    #        LogisticsLocationRoleTranslationAU.LanguageId   = toLang;
    #        LogisticsLocationRoleTranslationAU.Description  = LogisticsLocationRoleTranslation.Description;
    #        LogisticsLocationRoleTranslationAU.write();
    #
    #    }
    #
    #    while select logisticsAddressCountryRegionTranslation
    #        where logisticsAddressCountryRegionTranslation.LanguageId == fromLang
    #    {
    #        logisticsAddressCountryRegionTranslationAU = null;
    #        select forupdate logisticsAddressCountryRegionTranslationAU
    #            where logisticsAddressCountryRegionTranslationAU.LanguageId == toLang &&
    #                  logisticsAddressCountryRegionTranslationAU.CountryRegionId == logisticsAddressCountryRegionTranslation.CountryRegionId;
    #
    #        logisticsAddressCountryRegionTranslationAU.LanguageId       = toLang;
    #        logisticsAddressCountryRegionTranslationAU.CountryRegionId  = logisticsAddressCountryRegionTranslation.CountryRegionId;
    #        logisticsAddressCountryRegionTranslationAU.ShortName = logisticsAddressCountryRegionTranslation.ShortName;
    #        logisticsAddressCountryRegionTranslationAU.LongName  = logisticsAddressCountryRegionTranslation.LongName;
    #        logisticsAddressCountryRegionTranslationAU.write();
    #
    #    }
    #    ttsCommit;
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{A0E50200-26FA-4ECB-A10D-D1B344112771}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_approvePO unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_approvePO
    #static void trud_approvePO(Args _args)
    #{
    #    PurchTable      purchTable;
    #
    #    ;
    #    ttsBegin;
    #
    #    purchTable = purchTable::find("PO019372", true);
    #
    #    purchTable.DocumentState = VersioningDocumentState::InReview;
    #    purchTable.update();
    #
    #    VersioningPurchaseOrder::newPurchaseOrder(purchTable).approveChangeRequest();
    #
    #    //purchTable.ChangeRequestRequired = false;
    #    //purchTable.DocumentState = VersioningDocumentState::Approved;
    #    //purchTable.update();
    #
    #
    #    ttsCommit;
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{B55953BF-6AC0-4931-8DF8-DF543DD18651}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_checkDataDictionary unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_checkDataDictionary
    #static void trud_checkDataDictionary(Args _args)
    #{
    #    Dictionary      dictionary  = new Dictionary();
    #    DictTable       dictTableMacro   = dictionary.tableObject(dictionary.tableCnt2Id(1));
    #    Set             tableSet = new Set(Types::Integer),
    #                    fieldSet = new Set(Types::container);
    #    boolean         forAllTables, forAllFields;
    #    FieldId         lastDataId = 1000000;
    #
    #    boolean checkField(DictTable dictTable, DictField dictField, boolean _silent = false)
    #    {
    #        DialogButton    boxRet;
    #        SQLDictionary   sqlDictionary,
    #                        sqlDictionaryCorr,
    #                        sqlDictionaryUpd;
    #        DictField       df;
    #        FieldId         currentFieldId;
    #        ;
    #
    #        if (! dictField.isSystem() && dictField.isSql() && isConfigurationkeyEnabled(dictField.configurationKeyId()) && ! fieldSet.in([dictField.tableid(), dictField.id()]))
    #        {
    #            fieldSet.add([dictField.tableid(), dictField.id()]);
    #
    #            select firstonly RecID from sqlDictionary
    #                where sqlDictionary.tabId   == dictTable.id()   &&
    #                      sqlDictionary.fieldId == dictField.id() &&
    #                      sqlDictionary.name    == dictField.name();
    #
    #            if (! sqlDictionary.RecId)
    #            {
    #                select firstonly fieldId from sqlDictionary
    #                    where sqlDictionary.tabId   == dictTable.id()  &&
    #                          sqlDictionary.name == dictField.name();
    #
    #                if (sqlDictionary.fieldId)
    #                {
    #                    if (! forAllFields && ! _silent)
    #                    {
    #                        boxRet = Box::yesAllNoAllCancel(strFmt("In SQLDictionary in table %1 field %2 has code %3, but in system %4. Correct SQLDictionary?",
    #                            dictTable.name(), dictField.name(), sqlDictionary.fieldId, dictField.id()), DialogButton::Yes);
    #
    #                        if (boxRet == DialogButton::YesToAll)
    #                        {
    #                            forAllFields = true;
    #                        }
    #                    }
    #
    #                    if (_silent || forAllFields || boxRet == DialogButton::Yes)
    #                    {
    #                        ttsbegin;
    #                        select forupdate sqlDictionaryCorr
    #                            where sqlDictionaryCorr.tabId   == dictTable.id() &&
    #                                  sqlDictionaryCorr.fieldId == dictField.id();
    #
    #                        if (sqlDictionaryCorr.RecId)
    #                        {
    #                            df = new DictField(dictTable.id(), fieldname2id(dictTable.id(), sqlDictionaryCorr.name));
    #
    #                            lastDataId ++;
    #                            currentFieldId = lastDataId;
    #                            update_recordset sqlDictionaryUpd
    #                            setting fieldId = currentFieldId
    #                                where sqlDictionaryUpd.tabId    == dictTable.id() &&
    #                                      sqlDictionaryUpd.fieldId  == sqlDictionary.fieldId;
    #
    #                            if (df)
    #                            {
    #                                if (! checkField(dictTable, df, true))
    #                                {
    #                                    return false;
    #                                }
    #                            }
    #                            else
    #                            {
    #                                sqlDictionaryCorr.delete();
    #                            }
    #                        }
    #                        else
    #                        {
    #                            currentFieldId = sqlDictionary.fieldId;
    #                        }
    #
    #                        update_recordset sqlDictionaryUpd
    #                        setting fieldId = dictField.id()
    #                            where sqlDictionaryUpd.tabId    == dictTable.id() &&
    #                                  sqlDictionaryUpd.fieldId  == currentFieldId;
    #                        ttscommit;
    #                    }
    #                    else if (boxRet == DialogButton::Cancel)
    #                    {
    #                        return false;
    #                    }
    #                }
    #            }
    #        }
    #        return true;
    #    }
    #
    #    boolean checkTable(DictTable dictTable, boolean _silent = false)
    #    {
    #        DictField       dictFieldMacro;
    #        SQLDictionary   sqlDictionary,
    #                        sqlDictionaryCorr,
    #                        sqlDictionaryUpd;
    #        DialogButton    boxRet;
    #        DictTable       dt;
    #        boolean         tst;
    #        TableId         currentTableId;
    #        ;
    #
    #        tst = dictTable.isMap();
    #        tst = dictTable.isTmp();
    #        tst = dictTable.isView();
    #        tst = tableSet.in(dictTable.id());
    #
    #        if (! dictTable.isMap() && ! dictTable.isTmp() /*&& ! dictTable.isView()*/ && ! tableSet.in(dictTable.id()))
    #        {
    #            tableSet.add(dictTable.id());
    #
    #            select firstonly RecID from sqlDictionary
    #                where sqlDictionary.tabId   == dictTable.id() &&
    #                      sqlDictionary.name    == dictTable.name();
    #
    #            if (! sqlDictionary.RecId)
    #            {
    #                select firstonly tabId from sqlDictionary
    #                    where sqlDictionary.fieldId   == 0 &&
    #                          sqlDictionary.name    == dictTable.name();
    #                if (sqlDictionary.tabId)
    #                {
    #                    if (! forAllTables && ! _silent)
    #                    {
    #                        boxRet = Box::yesAllNoAllCancel(strFmt("In SQLDictionary table %1 has code %2, but in system %3. Correct SQLDictionary?",
    #                            dictTable.name(), sqlDictionary.tabId, dictTable.id()), DialogButton::Yes);
    #
    #                        if (boxRet == DialogButton::YesToAll)
    #                        {
    #                            forAllTables = true;
    #                        }
    #                    }
    #
    #                    if (_silent || forAllTables || boxRet == DialogButton::Yes)
    #                    {
    #                        ttsbegin;
    #                        select firstonly forupdate sqlDictionaryCorr
    #                            where sqlDictionaryCorr.tabId   == dictTable.id();
    #
    #                        if (sqlDictionaryCorr.RecId)
    #                        {
    #                            dt = new DictTable(tablename2id(sqlDictionaryCorr.name));
    #
    #                            lastDataId ++;
    #                            currentTableId = lastDataId;
    #                            update_recordset sqlDictionaryUpd
    #                            setting tabId = currentTableId
    #                                where sqlDictionaryUpd.tabId == sqlDictionary.tabId;
    #
    #                            if (dt)
    #                            {
    #                                if (! checkTable(dt, true))
    #                                {
    #                                    return false;
    #                                }
    #                            }
    #                            else
    #                            {
    #                                delete_from sqlDictionaryCorr
    #                                    where sqlDictionaryCorr.tabId   == dictTable.id();
    #                            }
    #                        }
    #                        else
    #                        {
    #                            currentTableId = sqlDictionary.tabId;
    #                        }
    #
    #                        update_recordset sqlDictionaryUpd
    #                        setting tabId = dictTable.id()
    #                            where sqlDictionaryUpd.tabId == currentTableId;
    #
    #                        ttscommit;
    #                    }
    #                    else if (boxRet == DialogButton::Cancel)
    #                    {
    #                        return false;
    #                    }
    #                }
    #            }
    #            dictFieldMacro = dictTable.fieldObject(dictTable.fieldCnt2Id(1));
    #
    #            while (dictFieldMacro)
    #            {
    #                if (checkField(dictTable, dictFieldMacro))
    #                {
    #                    dictFieldMacro = dictTable.fieldObject(dictTable.fieldNext(dictFieldMacro.id()));
    #                }
    #                else
    #                {
    #                    return false;
    #                }
    #            }
    #        }
    #        return true;
    #    }
    #    ;
    #
    #    //dictTableMacro = new DictTable(tablename2id('InventTable'));
    #    while (dictTableMacro)
    #    {
    #        if (checkTable(dictTableMacro))
    #        {
    #            //break;
    #            dictTableMacro   = dictionary.tableObject(dictionary.tableNext(dictTableMacro.id()));
    #        }
    #        else
    #        {
    #            return;// false;
    #        }
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{B748F153-C147-406B-BF18-663A52B4ED5D}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_checkDisabledUsers unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_checkDisabledUsers
    #static void trud_checkDisabledUsers(Args _args)
    #{
    #    xAxaptaUserManager axUsrMgr;
    #    xAxaptaUserDetails axUsrDet;
    #    UserInfo userInfo;
    #    UserInfo userInfoUpdate;
    #    str userID;
    #    str domainName;
    #    str userSid;
    #    userAccountType accountType;
    #
    #
    #    axUsrMgr = new xAxaptaUserManager();
    #    while select userInfo where userInfo.enable == true
    #    {
    #        userID = userInfo.networkAlias;
    #        domainName = userInfo.networkDomain;
    #        accountType = userInfo.accountType;
    #        try
    #        {
    #            axUsrDet = axUsrMgr.getSIDFromName(userID, domainName, accountType);
    #        }
    #        catch(Exception::Error)
    #        {
    #            ttsBegin;
    #            select forUpdate userInfoUpdate
    #                where userInfoUpdate.id == userInfo.id;
    #
    #            info(userInfo.id);
    #            //userInfoUpdate.enable = false;
    #            //userInfoUpdate.doUpdate();
    #            ttsCommit;
    #        }
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{C05F8BCF-D151-440B-B537-7198C981F624}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_clearCache unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_clearCache
    #static void trud_clearCache(Args _args)
    #{
    #
    #    ;
    #    SysFlushDictionary::main(null);
    #    SysFlushData::main(null);
    #    SysFlushAOD::main(null);
    #    SysFlushReportServer::main(null);
    #    Label::flush('DEV', 'en-us');
    #    classFactory.globalObjectCache().clear('SysOperationAttributedDataContractInfo.buildDataMemberMaps');
    #
    # /*
    #
    #--1. Update SYSBCProxy account
    #UPDATE [SYSBCPROXYUSERACCOUNT]
    #   SET [SID] = SDB.SID
    #      ,[NETWORKDOMAIN] = SDB.NETWORKDOMAIN
    #      ,[NETWORKALIAS] = SDB.NETWORKALIAS
    # from [AX_LOG_2012_R3_CU8_orig]..SYSBCPROXYUSERACCOUNT as SDB
    #
    #  --2. SYNC PARAMETERS
    # UPDATE [SYNCPARAMETERS]
    #   SET [HOURSTORESYNCTRANS] = SDB.HOURSTONOTIFYTRANS
    #      ,[MSMQSERVERNAME] = SDB.MSMQSERVERNAME
    #      ,[KEY_] = SDB.KEY_
    #      ,[MSMQNAME] = SDB.MSMQNAME
    #      ,[SYNCSERVICEUSER] = SDB.SYNCSERVICEUSER
    #      ,[MAXSYNCATTEMPTS] = SDB.MAXSYNCATTEMPTS
    #      ,[HOURSTONOTIFYTRANS] = SDB.HOURSTONOTIFYTRANS
    # from [AX_LOG_2012_R3_CU8_orig]..[SYNCPARAMETERS] as SDB
    #
    # --7. EP Global Parameters
    #UPDATE [EPGLOBALPARAMETERS]
    #   SET [HOMEPAGESITEID] = SDB.HOMEPAGESITEID
    #      ,[EPINITIALSEARCHRESULTDISPLAYCOUNT] = SDB.EPINITIALSEARCHRESULTDISPLAYCOUNT
    #      ,[EPOVERFLOWSEARCHRESULTDISPLAYCOUNT] = SDB.EPOVERFLOWSEARCHRESULTDISPLAYCOUNT
    #      ,[DEVELOPMENTSITEID] = SDB.DEVELOPMENTSITEID
    #      ,[DEFAULTROLECENTER] = SDB.DEFAULTROLECENTER
    #      ,[KEY_] = SDB.KEY_
    #      ,[LISTPAGEROWSDISPLAYED] = SDB.LISTPAGEROWSDISPLAYED
    #      ,[SEARCHSERVERURL] = SDB.SEARCHSERVERURL
    #from [AX_LOG_2012_R3_CU8_orig]..[EPGLOBALPARAMETERS] SDB
    #
    #--8. SRS SERVERS
    #UPDATE [SRSSERVERS]
    #   SET [SERVERID] = SDB.SERVERID
    #      ,[ISDEFAULTREPORTMODELSERVER] = SDB.ISDEFAULTREPORTMODELSERVER
    #      ,[SERVERURL] = SDB.SERVERURL
    #      ,[ISDEFAULTREPORTLIBRARYSERVER] = SDB.ISDEFAULTREPORTLIBRARYSERVER
    #      ,[AXAPTAREPORTFOLDER] = SDB.AXAPTAREPORTFOLDER
    #      ,[DESCRIPTION] = SDB.DESCRIPTION
    #      ,[DATASOURCENAME] = SDB.DATASOURCENAME
    #      ,[REPORTMANAGERURL] = SDB.REPORTMANAGERURL
    #      ,[SERVERINSTANCE] = SDB.SERVERINSTANCE
    #      ,[AOSID] = SDB.AOSID
    #      ,[CONFIGURATIONID] = SDB.CONFIGURATIONID
    #from [AX_LOG_2012_R3_CU8_orig]..[SRSSERVERS] SDB
    #
    #--14. Help server settings
    #UPDATE [SysGlobalConfiguration]
    #   SET [Value] = SDB.Value
    #from [AX_LOG_2012_R3_CU8_orig].. SysGlobalConfiguration SDB
    #WHERE SDB.Name = 'HelpServerLocation'
    #and [SysGlobalConfiguration].Name = 'HelpServerLocation'
    #
    #--14. Delete any existing server session
    #delete from SYSSERVERSESSIONS
    #delete from SYSCLIENTSESSIONS
    #delete from SqlSyncInfo
    #update SYSSQMSETTINGS SET GLOBALGUID = '{00000000-0000-0000-0000-000000000000}'
    #
    #
    #truncate table SYSBCPROXYUSERACCOUNT
    #insert into SYSBCPROXYUSERACCOUNT select * from AX_DEV_2012_F_CU3_OLD.dbo.SYSBCPROXYUSERACCOUNT
    #
    #truncate table EPGLOBALPARAMETERS
    #insert into EPGLOBALPARAMETERS select * from AX_DEV_2012_F_CU3_OLD.dbo.EPGLOBALPARAMETERS
    #
    #
    #truncate table SYSGLOBALCONFIGURATION
    #insert into SYSGLOBALCONFIGURATION select * from AX_DEV_2012_F_CU3_OLD.dbo.SYSGLOBALCONFIGURATION
    #
    #truncate table BIConfiguration
    #insert into BIConfiguration select * from AX_DEV_2012_F_CU3_OLD.dbo.BIConfiguration
    #
    #truncate table BIAnalysisServer
    #insert into BIAnalysisServer  select * from AX_DEV_2012_F_CU3_OLD.dbo.BIAnalysisServer
    #
    #truncate table SRSSERVERS
    #insert into SRSSERVERS select * from AX_DEV_2012_F_CU3_OLD.dbo.SRSSERVERS
    #
    #//optional
    #truncate table BATCH
    #truncate table BATCHCONSTRAINTS
    #truncate table BATCHCONSTRAINTSHISTORY
    #truncate table BATCHHISTORY
    #truncate table BATCHJOB
    #truncate table BATCHJOBALERTS
    #truncate table BATCHJOBHISTORY
    #
    #
    #
    # //users
    #
    #truncate table sysconfig;
    #insert into sysconfig select * from AX_GRA_2012_CU2.dbo.sysconfig
    #
    #DECLARE @TABLEID bigint
    #DECLARE @RECIDNEXT bigint
    #
    #truncate table SYSUSERINFO
    #insert into SYSUSERINFO select * from AX_GRA_2012_CU2.dbo.SYSUSERINFO
    #SET @TABLEID = (select TABLEID from [SQLDICTIONARY] where SQLNAME = 'SYSUSERINFO' and FIELDID = 0)
    #SET @RECIDNEXT = (select max(RECID) from SYSUSERINFO) + 1
    #UPDATE SYSTEMSEQUENCES set NEXTVAL = @RECIDNEXT where TABID = @TABLEID
    #
    #truncate table SYSUSERLOG
    #
    #truncate table SYSUSERPROFILES
    #insert into SYSUSERPROFILES select * from AX_GRA_2012_CU2.dbo.SYSUSERPROFILES
    #SET @TABLEID = (select TABLEID from [SQLDICTIONARY] where SQLNAME = 'SYSUSERPROFILES' and FIELDID = 0)
    #SET @RECIDNEXT = (select max(RECID) from SYSUSERINFO) + 1
    #UPDATE SYSTEMSEQUENCES set NEXTVAL = @RECIDNEXT where TABID = @TABLEID
    #
    #truncate table USERGROUPINFO
    #insert into USERGROUPINFO select * from AX_GRA_2012_CU2.dbo.USERGROUPINFO
    #SET @TABLEID = (select TABLEID from [SQLDICTIONARY] where SQLNAME = 'USERGROUPINFO' and FIELDID = 0)
    #SET @RECIDNEXT = (select max(RECID) from SYSUSERINFO) + 1
    #UPDATE SYSTEMSEQUENCES set NEXTVAL = @RECIDNEXT where TABID = @TABLEID
    #
    #truncate table USERGROUPLIST
    #insert into USERGROUPLIST select * from AX_GRA_2012_CU2.dbo.USERGROUPLIST
    #SET @TABLEID = (select TABLEID from [SQLDICTIONARY] where SQLNAME = 'USERGROUPLIST' and FIELDID = 0)
    #SET @RECIDNEXT = (select max(RECID) from SYSUSERINFO) + 1
    #UPDATE SYSTEMSEQUENCES set NEXTVAL = @RECIDNEXT where TABID = @TABLEID
    #
    #
    #truncate table USERINFO
    #insert into USERINFO select * from AX_GRA_2012_CU2.dbo.USERINFO
    #SET @TABLEID = (select TABLEID from [SQLDICTIONARY] where SQLNAME = 'USERINFO' and FIELDID = 0)
    #SET @RECIDNEXT = (select max(RECID) from SYSUSERINFO) + 1
    #UPDATE SYSTEMSEQUENCES set NEXTVAL = @RECIDNEXT where TABID = @TABLEID
    #
    #
    #
    #truncate table SECURITYROLEASSIGNMENTRULE
    #truncate table SECURITYSEGREGATIONOFDUTIESCONFLICT
    #truncate table SECURITYSEGREGATIONOFDUTIESRULE
    #truncate table SECURITYTASKPERMISSION
    #truncate table SECURITYUSERROLE
    #insert into SECURITYUSERROLE select * from AX_GRA_2012_CU2.dbo.SECURITYUSERROLE
    #SET @TABLEID = (select TABLEID from [SQLDICTIONARY] where SQLNAME = 'SECURITYUSERROLE' and FIELDID = 0)
    #SET @RECIDNEXT = (select max(RECID) from SYSUSERINFO) + 1
    #UPDATE SYSTEMSEQUENCES set NEXTVAL = @RECIDNEXT where TABID = @TABLEID
    #
    #truncate table SECURITYUSERROLECONDITION
    #truncate table USERINFOSTARTUPMODEL
    #insert into USERINFOSTARTUPMODEL select * from AX_GRA_2012_CU2.dbo.USERINFOSTARTUPMODEL
    #SET @TABLEID = (select TABLEID from [SQLDICTIONARY] where SQLNAME = 'USERINFOSTARTUPMODEL' and FIELDID = 0)
    #SET @RECIDNEXT = (select max(RECID) from SYSUSERINFO) + 1
    #UPDATE SYSTEMSEQUENCES set NEXTVAL = @RECIDNEXT where TABID = @TABLEID
    #
    #
    #
    #
    # */
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{6991E165-B0BA-4314-9567-02C2544D3A33}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_confirmPO unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_confirmPO
    #static void trud_confirmPO(Args _args)
    #{
    #    PurchTable          purchTable;
    #    PurchFormLetter     purchFormLetter;
    #
    #    ;
    #    ttsBegin;
    #
    #    purchTable = purchTable::find("001793", true);
    #
    #    purchFormLetter = purchFormLetter::construct(DocumentStatus::PurchaseOrder);
    #    purchFormLetter.update(purchTable,'');
    #
    #
    #    ttsAbort;
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{826FB1D5-DF60-44BF-91D5-64510FA662CD}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_deletePartition unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_deletePartition
    #static void trud_deletePartition(Args _args)
    #{
    #    Dictionary      dictionary  = new Dictionary();
    #    DictTable       dictTableMacro   = dictionary.tableObject(dictionary.tableCnt2Id(1));
    #    Set             tableSet = new Set(Types::Integer),
    #                    fieldSet = new Set(Types::container);
    #    boolean         forAllTables, forAllFields;
    #    RefRecId        curPartition;
    #
    #    str             sSQL;
    #
    #    str             sSQLGlobal;
    #
    #    TextBuffer      tb = new TextBuffer();
    #
    #    container       partitionsIdCon;
    #
    #    Partitions      partitions;
    #
    #    /*
    #    UserConnection connection;
    #    Statement  statement;
    #    str        sql;
    #    ResultSet  resultSet;
    #    SqlStatementExecutePermission perm;
    #    */
    #
    #    Query           query;
    #    QueryRun        queryRun;
    #    QueryBuildDataSource        qBDS;
    #    int             i;
    #    //Dialog          d = new Dialog("Delete partition");
    #    //DialogField     df = d.addField(extendedTypeStr(Partition));
    #    SysOperationProgress  progress = new SysOperationProgress();
    #
    #    boolean checkTable(DictTable dictTable, boolean _silent = false)
    #    {
    #        DictTable       dt;
    #        boolean         tst;
    #        TableId         currentTableId;
    #
    #
    #        ;
    #
    #        tst = dictTable.isMap();
    #        tst = dictTable.isTmp();
    #        tst = dictTable.isView();
    #        tst = tableSet.in(dictTable.id());
    #
    #        if (! dictTable.isMap() && ! dictTable.isTmp() && ! dictTable.isView() &&
    #             dictTable.dataPerPartition() &&
    #             dictTable.tableType() == TableType::Regular &&
    #             dictTable.name(DbBackend::Sql)
    #             )
    #
    #        {
    #            //if (! connection)
    #            //{
    #            //    connection = new UserConnection();
    #            //}
    #            //sSQL = strfmt( @"select count(*) from  %1 where %1.Partition = %2",
    #            //            dictTable.name(DbBackend::Sql),
    #            //            int642str(curPartition));
    #            for (i = 1; i <= conLen(partitionsIdCon); i++)
    #            {
    #                curPartition = conPeek(partitionsIdCon, i);
    #                sSQL = strfmt( "delete %1 where %1.Partition = %2; \nGO",
    #                        dictTable.name(DbBackend::Sql),
    #                        int642str(curPartition));
    #
    #                sSQLGlobal += sSQL + '\n';
    #            }
    #            //info(sSQL);
    #
    #    /*
    #            perm = new SqlStatementExecutePermission(sql);
    #            perm.assert();
    #            statement = connection.createStatement();
    #            resultSet = statement.executeQuery(sql);
    #            // End the scope of the assert call.
    #            CodeAccessPermission::revertAssert();
    #    */
    #        }
    #
    #        return true;
    #    }
    #    ;
    #    progress.setCaption("Deleting from partition");
    #    progress.setTotal(7400);
    #
    #    query = new query();
    #    qBDS = query.addDataSource(tableNum(Partitions));
    #    qBDS.addRange(fieldNum(Partitions, PartitionKey));
    #
    #    queryRun = new queryRun(query);
    #
    #    if (queryRun.prompt())
    #    {
    #
    #    //d.run();
    #    //if (d.closedOk())
    #    //{
    #        while (queryRun.next())
    #        {
    #            partitions = queryRun.get(tableNum(partitions));
    #            partitionsIdCon += partitions.RecId;
    #            if (partitions.RecId == getcurrentpartitionrecid())
    #            {
    #                throw error(strFmt("Can't delete current partition"));
    #            }
    #
    #        }
    #
    #        //curPartition = df.value();
    #        if (! conLen(partitionsIdCon))
    #        {
    #            throw error(strFmt("Enter current partition"));
    #        }
    #        //
    #
    #        //dictTableMacro = new DictTable(tablename2id('InventTable'));
    #        while (dictTableMacro)
    #        {
    #            progress.setText(strFmt("%1", dictTableMacro.name()));
    #            checkTable(dictTableMacro);
    #
    #            dictTableMacro   = dictionary.tableObject(dictionary.tableNext(dictTableMacro.id()));
    #
    #            progress.incCount();
    #
    #
    #        }
    #        for (i = 1; i <= conLen(partitionsIdCon); i++)
    #        {
    #            curPartition = conPeek(partitionsIdCon, i);
    #            select partitions
    #                where partitions.RecId == curPartition;
    #            if (partitions.PartitionKey != 'initial')
    #            {
    #                sSQL = strFmt('DELETE FROM Partitions where RECID = %1', int642str(curPartition));
    #                sSQLGlobal += sSQL + '\n';
    #            }
    #        }
    #
    #        BOX::info('Press OK to copy SQL text to clipboard. Stop AOS before running SQL command');
    #
    #        tb.setText(sSQLGlobal);
    #        tb.toClipboard();
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{FEE5F1C0-F183-40AF-A063-7B8D8233B767}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_devHints unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_devHints
    #static void trud_devHints(Args _args)
    #{
    #    //1.
    #    //for proportional split class TSPProportionalDivide
    #
    #    //2.
    #    //run base table parms job - GNS SR025328_ClientMatrix_trud  , GSEUpdatePosCompetenciesJobDialog, GSEUpdatePosCompetenciesJob
    #
    #    //3.
    #    // copy data to invoice from PO \Classes\VendDocumentTableType_Invoice\defaultAdditionalFields
    #
    #    //4.
    #    //DEVGroupByHelper for grouping in reports, SR031055_FuturesPosReport_trud
    #
    #    //5.
    #    //SR030902_SummarisedCustRep_trud  SSRS with UIBuilder, REB R2 CU7 application
    #
    #    //6. Create ledger journal, also process some data on packing slip and reverse on invoice
    #    //SR030593_PurchProcCat_trud   class \Classes\GRAProjectAccurals\createLJT, GRANGE AX 2012 CU2
    #    //for the ledger journal creation \Classes\DEVPostClosedLoads\createLevyVoucher(check also job trud_copyLedgerJour for proper Voucher creation)
    #
    #    //7.
    #    // Marking \Classes\DEVLoad\markReversalPurchLine
    #
    #    //8.
    #    //Settlement and new line creation for PO invoice \Classes\DEVPrepaymentTransfer\createNegPurchPrePaymentInvoice
    #
    #    //9.
    #    //Perform some action based on Ledger Journal trans lines  \Classes\LedgerJournalTransUpdateCust\updateNow
    #    //Perform check that also will be using during validate \Classes\LedgerJournalTransUpdateCust\checkVoucher
    #
    #    //10.import files from dir psv
    #    //SharedProject_ImportFromFileDir_trud.xpo
    #
    #    //11 lookup to LedgerJournalId (LedgerJournalTable)
    #    //\Forms\DEVLoadLevies\Data Sources\DEVLoadLevies\Fields\LedgerJournalId\Methods\jumpRef
    #
    #    //12.Ledger posting debug on PO invoiceing
    #    //\Data Dictionary\Tables\AccountingDistributionTmp\Fields\LedgerDimension
    #
    #    //13. PO end posing
    #    //\Classes\PurchInvoiceJournalPost\postJournalPost
    #    //main transaction in \Classes\FormletterService\run
    #
    #    //14. correct way of checking buttons
    #    //\Data Dictionary\Tables\DEVContractLoads\Methods\isConfirmEnabled
    #
    #    //15. SSRS report dev
    #    // & vbcrlf & - for new line
    #    //for e-mails \Classes\DEV\findLogElAddressByDirTypeAndDesc
    #    //new print management report and e-mail placeholders - SR037524_PrintManagementEmailTemplate(MS Dynamics AX 2012 R3 CU11 DSQ VAR)
    #
    #    //16. dialog for asking update related data - DEVPreUpdateDialogTransport
    #
    #
    #    //17. allow custom methods in RunBase dialog
    #    //dlgContractId.control().registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(DEVOnCostCreateByCharge, contract_Lookup), this);
    #    //public void  contract_Lookup(FormStringControl  _formControl)
    #
    #    //18. dates checks
    #    //validate intersections periods
    #    //(  ( ! DeliveryChargerates.EndDate || (DeliveryChargerates.EndDate  >= this.StartDate) )          &&
    #    //    ( (DeliveryChargerates.StartDate <= this.EndDate) ||  ! this.EndDate) )
    #    //apply 'any in the interval' range
    #    //strFmt('((%1 <= %4) && ((%2 == %5) || (%2 >= %3)))', fieldStr(t, StartDate), fieldStr(t, EndDate),
    #    // date2StrXpp(F.FromDate), date2StrXpp(F.ToDate ? F.ToDate : dateMax()), date2StrXpp(dateNull())
    #
    #    //19. Filter in the form based on tmp table as filter values
    #    //DEVDeliveryChargeRates
    #
    #    //20.runas user to test security -(first run as admin to store the pass)
    #    //C:\Windows\System32\runas.exe /savecred /user:SCALABLE\sdstest  "E:\Program Files (x86)\Microsoft Dynamics AX\60\Client\Bin\Ax32.exe  \"E:\Temp\trud\AX_LOG_2012_R2_CU7_ISV.axc\""
    #    //disable admin right - job - securityutil::sysadminmode(false);
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{B66FFD98-D8EC-4478-800A-34175D7162E0}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_postPO unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_postPO
    #static void trud_postPO(Args _args)
    #{
    #    PurchFormLetter                 purchFormLetter;
    #
    #    //PurchTable _purchTable = PurchTable::find("000592");
    #    PurchTable _purchTable = PurchTable::find("001330");
    #
    #    ttsBegin;
    #    // Confirm order
    #    //purchFormLetter = purchFormLetter::construct(DocumentStatus::PurchaseOrder);
    #    //purchFormLetter.update(_purchTable,'');
    #
    #    // Invoice order
    #    purchFormLetter = purchFormLetter::construct(DocumentStatus::Invoice);
    #    //purchFormLetter.parmLoadFromSysLastValue(false);
    #    purchFormLetter.update(_purchTable,
    #                           "001330",
    #                           systemDateGet(), PurchUpdate::PackingSlip);
    #
    #    //ttsAbort;
    #    //ttscommit;
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{C4259DF6-B50B-4B7B-89B8-4A2F11C74ACF}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_postPOMultiple unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_postPOMultiple
    #static void trud_postPOMultiple(Args _args)
    #{
    #    PurchFormLetter                 purchFormLetter;
    #
    #    //PurchTable _purchTable = PurchTable::find("000592");
    #    PurchTable          purchTable;
    #    Map                 mapPurchTable;
    #
    #    ttsBegin;
    #    // Confirm order
    #    //purchFormLetter = purchFormLetter::construct(DocumentStatus::PurchaseOrder);
    #    //purchFormLetter.update(_purchTable,'');
    #
    #    // Invoice order
    #    purchFormLetter = purchFormLetter::construct(DocumentStatus::Invoice);
    #
    #    mapPurchTable = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);
    #    purchTable = PurchTable::find("001228");
    #    mapPurchTable.insert(purchTable.RecId, purchTable);
    #
    #    purchTable = PurchTable::find("001229");
    #    mapPurchTable.insert(purchTable.RecId, purchTable);
    #
    #    purchFormLetter.parmDataSourceRecordsPacked(mapPurchTable.pack());
    #    purchFormLetter.initNewPurchParmUpdate();
    #    purchFormLetter.sumBy(AccountOrder::Account);
    #    purchFormLetter.reArrangeNow(true);
    #    purchFormLetter.update(purchTable,
    #                           "In4f9231",
    #                           systemDateGet(), PurchUpdate::All);
    #
    #    ttsAbort;
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{E56A9043-3905-4B9E-AE42-E665F205A650}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_processVendInvoiceInfoTable unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_processVendInvoiceInfoTable
    #static void trud_processVendInvoiceInfoTable(Args _args)
    #{
    #     PurchFormLetter_Invoice purchFormLetterInvoice;
    #    VendInvoiceInfoTable    vendInvoiceInfoTable;
    #
    #    ttsBegin;
    #    vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(35637297858);
    #
    #   // if (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::InReview)// && this.areAllLinesApproved(vendInvoiceInfoTable))
    #    {
    #        //this.deleteActiveInvoice(vendInvoiceInfoTable.TableRefId);
    #        purchFormLetterInvoice = PurchFormLetter_Invoice::newFromSavedInvoice(vendInvoiceInfoTable);
    #        purchFormLetterInvoice.purchParmUpdate(null);
    #        purchFormLetterInvoice.parmId('');
    #        purchFormLetterInvoice.initNewPurchParmUpdate();
    #        purchFormLetterInvoice.printFormLetter(false);
    #        purchFormLetterInvoice.usePrintManagement(false);
    #        purchFormLetterInvoice.printSalesFormLetter(false);
    #        purchFormLetterInvoice.printEUVatInvoice(false);
    #        purchFormLetterInvoice.proforma(false);
    #        purchFormLetterInvoice.parmExecutingPaymentAuthorizationTask(true);
    #        purchFormLetterInvoice.update(vendInvoiceInfoTable, vendInvoiceInfoTable.Num);
    #    }
    #    //ttsCommit;
    #    ttsAbort;
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{DCBF6B0C-CE72-4982-9D6E-165BDF281746}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_runReport unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_runReport
    #static void trud_runReport(Args _args)
    #{
    #    /*
    #    DEVDailyPricingComDP        DEVDailyPricingComDP = new DEVDailyPricingComDP();
    #    DEVDailyPricingComContract             contract = new DEVDailyPricingComContract();
    #    Query    query = new Query(Querystr(DEVCommodityBasePrice));
    #    ;
    #    contract.parmCurrencyCode('USD');
    #    contract.parmMonthsBehind(1);
    #    contract.parmMonthsAhead(3);
    #    contract.parmUnitId('T');
    #    DEVDailyPricingComDP.parmQuery(query);
    #    DEVDailyPricingComDP.parmDataContract(contract);
    #
    #    DEVDailyPricingComDP.processReport();
    #    */
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{A95AD23D-7270-4C11-BD4C-BA273E48BC60}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_runReport2 unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_runReport2
    #static void trud_runReport2(Args _args)
    #{
    #    /*
    #    DEVFuturesContractPosReportDP        dataProvider = new DEVFuturesContractPosReportDP();
    #    DEVFuturesContractPosContract             contract = new DEVFuturesContractPosContract();
    #    Query    query = new Query(Querystr(DEVFuturesContractPosQuery));
    #    ;
    #
    #    / *
    #    contract.parmCurrencyCode('USD');
    #    contract.parmMonthsBehind(1);
    #    contract.parmMonthsAhead(3);
    #    contract.parmUnitId('T');
    #    * /
    #    dataProvider.parmQuery(query);
    #    dataProvider.parmDataContract(contract);
    #
    #    dataProvider.processReport();
    #    */
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{CFC7813D-32FD-414C-BE52-AC9ABDD096BA}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_runReport3 unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_runReport3
    #static void trud_runReport3(Args _args)
    #{
    #    /*
    #    DEVSpreadPositionReptDP                 dataProvider = new DEVSpreadPositionReptDP();
    #    //DEVSpreadPositionRepContract            contract ;
    #    Object                                  contract;
    #    Query                                   query;
    #    SrsReportRunController reportRunController;
    #    args        args = new args();
    #
    #    SrsReportDataContract  reportDataContract;
    #    Map             map;
    #    MapEnumerator   mapEnumerator;
    #    ;
    #
    #
    #    reportRunController = new SrsReportRunController();
    #    reportRunController.parmArgs(args);
    #    reportRunController.parmReportName('DEVSpreadPositionRept.PrecisionDesign1');
    #    reportDataContract =     reportRunController.parmReportContract();
    #
    #    map = reportDataContract.parmQueryContracts();
    #    if (map)
    #    {
    #        mapEnumerator = map.getEnumerator();
    #        if (mapEnumerator.moveNext())
    #        {
    #            query = mapEnumerator.currentValue();
    #            dataProvider.parmQuery(query);
    #        }
    #    }
    #    contract = reportDataContract.parmRdpContract();
    #    dataProvider.parmDataContract(contract);
    #    dataProvider.processReport();
    #*/
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{C02D37B2-0374-4B6D-A27F-C43233E59ECD}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_runReportDetPos unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_runReportDetPos
    #static void trud_runReportDetPos(Args _args)
    #{
    #    /*
    #    DEVDetailedPositioningDP                 dataProvider = new DEVDetailedPositioningDP();
    #    //DEVSpreadPositionRepContract            contract ;
    #    Object                                  contract;
    #    Query                                   query;
    #    SrsReportRunController reportRunController;
    #    args        args = new args();
    #
    #    SrsReportDataContract  reportDataContract;
    #    Map             map;
    #    MapEnumerator   mapEnumerator;
    #    ;
    #
    #
    #    reportRunController = new SrsReportRunController();
    #    reportRunController.parmArgs(args);
    #    reportRunController.parmReportName('DEVDetailedPositioningSRS.PrecisionDesign1');
    #    reportDataContract =     reportRunController.parmReportContract();
    #
    #    map = reportDataContract.parmQueryContracts();
    #    if (map)
    #    {
    #        mapEnumerator = map.getEnumerator();
    #        if (mapEnumerator.moveNext())
    #        {
    #            query = mapEnumerator.currentValue();
    #            dataProvider.parmQuery(query);
    #        }
    #    }
    #    contract = reportDataContract.parmRdpContract();
    #    dataProvider.parmDataContract(contract);
    #    dataProvider.processReport();
    #*/
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{A2EFB284-E5A3-4DA9-8733-45D256BA54C4}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: trud_setDevDocumentation unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #trud_setDevDocumentation
    #static void trud_setDevDocumentation(Args _args)
    #{
    #    ;
    #    DEVLabelsCreateInfo::setDevDocumentation();
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{BF2528AB-ADB9-4DC1-84B0-1501F06106D3}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: ttsAbortJob unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #ttsAbortJob
    #static void ttsAbortJob(Args _args)
    #{
    #;
    #    ttsAbort;
    #    //ttsCommit;
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{846D4776-DE09-4E51-B850-4DC2EA005341}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: ttsCommitJob unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #ttsCommitJob
    #static void ttsCommitJob(Args _args)
    #{
    #    ttsCommit;
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{6F52D7E8-69CE-494F-A18E-B7256C47E7DE}
  ENDPROPERTIES
  

***Element: MNU

; Microsoft Dynamics AX Menu : DevelopmentTools unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #DevelopmentTools
    PROPERTIES
      Name                #DevelopmentTools
      Label               #@SYS68878
      ConfigurationKey    #SysDevelopmentMorphX
      SecurityKey         #SysDevelopment
      Origin              #{10100000-0000-1000-EB6C-8F0A0826DA1E}
    ENDPROPERTIES
    
    MENUREFERENCE
      PROPERTIES
        Name                #xRef
      ENDPROPERTIES
      
    ENDMENUREFERENCE
    SEPARATOR
    MENU #@SYS333686
      PROPERTIES
        Name                #Model
        Label               #@SYS333686
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Change current model
          MenuItemName        #SysModelChangeCurrentModel
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Create project from model
          MenuItemType        #Action
          MenuItemName        #SysModelCreateProject
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Create model
          MenuItemType        #Action
          MenuItemName        #SysModelCreateModel
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Model elements
          MenuItemName        #SysModelElements
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Models installed
          MenuItemName        #SysModelsInstalled
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENU #@SYS94883
      PROPERTIES
        Name                #UnitTest
        Label               #@SYS94883
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Show toolbar
          MenuItemName        #SysTestToolbar
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Test jobs
          MenuItemName        #SysTestJobTable
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Parameters
          MenuItemName        #SysTestParameters
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    SEPARATOR
    MENU #@SYS4001376
      PROPERTIES
        Name                #VersionUpdate
        Label               #@SYS4001376
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Import AOD file
          MenuItemName        #sysaodImport
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Model elements (baseline)
          MenuItemName        #SysModelElementsBaseLine
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Export baseline element IDs
          MenuItemType        #Action
          MenuItemName        #SysCheckListItem_SysUpgradeExportIds
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Configure rules for code upgrade
          MenuItemName        #SysCheckListItem_SysUpgradeRuleConfig
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Detect code upgrade conflicts
          MenuItemType        #Action
          MenuItemName        #SysUpgradeDetectConflicts
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Compare layers
          MenuItemType        #Action
          MenuItemName        #SysCompareCreateProject
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #EDT relation migration tool
          MenuItemName        #SysEDTMigration
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@SYS334719
        PROPERTIES
          Name                #ConvertSecKeyAssociations
          Label               #@SYS334719
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Update mode
            MenuItemType        #Action
            MenuItemName        #SysSecurityKeysConvertUpdateMode
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Report only mode
            MenuItemType        #Action
            MenuItemName        #SysSecurityKeysConvertReportOnlyMode
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENUITEM
        PROPERTIES
          Name                #Estimation report
          MenuItemName        #SysUpgradeEstimate
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Parameters
          MenuItemName        #SysUpgradeParameters
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Code profiler
        MenuItemName        #SysCodeProfilerStartStop
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Debugger
        MenuItemType        #Action
        MenuItemName        #SysDebugger
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Tracing cockpit
        MenuItemName        #SysTraceCockpit
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Reverse engineer
        MenuItemName        #SysVisioAddIn
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Number of records
        MenuItemName        #SysTableRowCount
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Type hierarchy browser
        MenuItemName        #SysTypeHierarchyBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Type hierarchy context
        MenuItemName        #SysTypeHierarchyContext
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUREFERENCE
      PROPERTIES
        Name                #AIFDevelopmentTools
      ENDPROPERTIES
      
    ENDMENUREFERENCE
    MENUREFERENCE
      PROPERTIES
        Name                #WebDevelopment
      ENDPROPERTIES
      
    ENDMENUREFERENCE
    MENUREFERENCE
      PROPERTIES
        Name                #Wizards
      ENDPROPERTIES
      
    ENDMENUREFERENCE
    MENUREFERENCE
      PROPERTIES
        Name                #LabelTools
      ENDPROPERTIES
      
    ENDMENUREFERENCE
    MENUREFERENCE
      PROPERTIES
        Name                #SRSReportingToolsMenu
      ENDPROPERTIES
      
    ENDMENUREFERENCE
    SEPARATOR
    MENU #@SYS340555
      PROPERTIES
        Name                #Caches
        Label               #@SYS340555
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Refresh dictionary
          MenuItemType        #Action
          MenuItemName        #SysFlushDictionary
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Refresh data
          MenuItemType        #Action
          MenuItemName        #SysFlushData
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Refresh elements
          MenuItemType        #Action
          MenuItemName        #SysFlushAOD
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Refresh report server
          MenuItemType        #Action
          MenuItemName        #SysFlushReportServer
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Embedded resources
        MenuItemName        #SysImageResources
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Customize
        MenuItemName        #SysUserSetupToolbar
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Options
        MenuItemName        #SysUserSetup
      ENDPROPERTIES
      
    ENDMENUITEM
  ENDMENU
  

***Element: MNU

; Microsoft Dynamics AX Menu : GlobalToolsMenu unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #GlobalToolsMenu
    PROPERTIES
      Name                #GlobalToolsMenu
      Label               #@SYS24039
      Origin              #{100F0000-0000-1000-FCC4-2023DD7F885F}
    ENDPROPERTIES
    
    MENUITEM
      PROPERTIES
        Name                #Telephone list
        MenuItemName        #emplworklocalPhone
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Session date and time
        MenuItemName        #SystemDate
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Calculator
        MenuItemType        #Action
        MenuItemName        #Calculator
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Calculator for units
        MenuItemName        #UnitOfMeasureCalculator
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Print archive
        MenuItemName        #sysprintArchiveuser
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Select company accounts
        MenuItemName        #SysDataAreaSelect
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Select currency
        MenuItemName        #SysCurrencySelect
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Manage alert rules
        MenuItemName        #EventRule
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Alerts - event inbox
        MenuItemName        #EventAlertInbox
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Task recorder
        MenuItemType        #Action
        MenuItemName        #SysTaskRecorderToolbar
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUREFERENCE
      PROPERTIES
        Name                #SRSReportingToolsMenu
      ENDPROPERTIES
      
    ENDMENUREFERENCE
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Customize
        MenuItemName        #SysUserSetupToolbar
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Options
        MenuItemName        #SysUserSetup
      ENDPROPERTIES
      
    ENDMENUITEM
  ENDMENU
  

***Element: MNU

; Microsoft Dynamics AX Menu : SysContextMenu unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #SysContextMenu
    PROPERTIES
      Name                #SysContextMenu
      Label               #@SYS28637
      SecurityKey         #SysDevelopment
      Origin              #{100E0000-0000-1000-FB09-5DBF82A26477}
    ENDPROPERTIES
    
    MENUITEM
      PROPERTIES
        Name                #Add to project
        MenuItemType        #Action
        MenuItemName        #DEVCommentsTool
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare new
        MenuItemType        #Action
        MenuItemName        #DEVsysCompareNew
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare old
        MenuItemType        #Action
        MenuItemName        #DEVsysCompareOld
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare existing code to proposed fix
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleCompareUpgrade
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Auto-resolve source code rule conflict
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleAutoResolve
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare altered code to original code
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleCompareOrigina
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Revert auto-resolve source code rule conflict
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleRevertResolve
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as resolved
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsResolved
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as unresolved
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsUnresolved
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as resolved (including subnodes)
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsResolvedRecursive
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as unresolved (including subnodes)
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsUnresolvedRecursi
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Rerun conflict detection
        MenuItemType        #Action
        MenuItemName        #SysUpgradeDetectConflictsRerun
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENU #@SYS24666
      PROPERTIES
        Name                #MenuxRef
        Label               #@SYS24666
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Used by
          MenuItemName        #XRefReferencesUsedBy
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Using (instant view)
          MenuItemType        #Action
          MenuItemName        #xRefUpdateTmpReferences
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Names
          MenuItemName        #XRefNames
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Using
          MenuItemName        #XRefReferencesUsing
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Update
          MenuItemType        #Action
          MenuItemName        #xRefUpdate
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Check model
          MenuItemType        #Action
          MenuItemName        #DEV_checkModel
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENU #@SYS310448
      PROPERTIES
        Name                #SecTools
        Label               #@SYS310448
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #XRef analyzer
          MenuItemName        #syssecanalysisaddIn
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Metadata analyzer
          MenuItemName        #syssecanalysisaddInmetadataAnalyzer
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #View related security roles
          MenuItemName        #SysSecObjectsAnalyze
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #View related security objects
          MenuItemName        #SysSecObjectsInRole
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Apply changes
          MenuItemType        #Action
          MenuItemName        #SysSecSecurityApply
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Table browser
        MenuItemName        #sysTableBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Auto-report
        MenuItemName        #SysTableForm
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Reverse engineer
        MenuItemName        #SysVisioAddIn
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Extract XML documentation
        MenuItemType        #Output
        MenuItemName        #SysXmlDocumentationCreateFile
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Run tests
        MenuItemType        #Action
        MenuItemName        #SysTestToolbarOpen
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Type hierarchy browser
        MenuItemName        #SysTypeHierarchyBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Compare
        MenuItemType        #Action
        MenuItemName        #sysCompare
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compile forward
        MenuItemType        #Action
        MenuItemName        #sysCompileForward
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Impact Analysis
        MenuItemType        #Action
        MenuItemName        #SysImpactAnalysis
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Find and replace
        MenuItemType        #Action
        MenuItemName        #SysSourceReplaceText
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Syntactic renaming
        MenuItemType        #Action
        MenuItemName        #SysSourceReplaceSyntax
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Duplicates
        MenuItemName        #SysDictIndexShowDuplicates
      ENDPROPERTIES
      
    ENDMENUITEM
    MENU #@SYS16245
      PROPERTIES
        Name                #MenuCopy
        Label               #@SYS16245
        NeededAccessLevel   #NoAccess
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Entire path
          MenuItemType        #Action
          MenuItemName        #SysTreeNodePathCopyToClipboard
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Name
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeNameCopyToClipboard
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Copy to current layer
          MenuItemType        #Action
          MenuItemName        #systreenodecopyToCurrentLayer
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Check best practices
        MenuItemType        #Action
        MenuItemName        #SysBPCheck
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Check form style best practices
        MenuItemName        #SysBPStyleCheckAnalysis
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Source code title case update
        MenuItemType        #Action
        MenuItemName        #SysSourceNameWash
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Generate Axd query
        MenuItemType        #Action
        MenuItemName        #AxdGenerateAxdQuery
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #AIF Document Service Wizard
        MenuItemName        #AxdWizard
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Register service
        MenuItemType        #Action
        MenuItemName        #AifRegisterService
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Help properties
        MenuItemName        #HelpTopicID
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Lookup in Issue Search
        MenuItemName        #SysLcsIssueSearchAotItem
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENU #@SYS53405
      PROPERTIES
        Name                #SysContextMenuOpenNewWindow
        Label               #@SYS53405
        SetCompany          #Yes
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Open application object window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeApplObjectOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open parent in window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeParentOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open new window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@SYS57839
        PROPERTIES
          Name                #MenuOpenOldLayer
          Label               #@SYS57839
          NeededAccessLevel   #NoAccess
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #usp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldUsp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #usr
            MenuItemType        #Action
            MenuItemName        #SysOpenOldUsr
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #cup
            MenuItemType        #Action
            MenuItemName        #SysOpenOldCup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #cus
            MenuItemType        #Action
            MenuItemName        #SysOpenOldCus
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #vap
            MenuItemType        #Action
            MenuItemName        #SysOpenOldVap
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #var
            MenuItemType        #Action
            MenuItemName        #SysOpenOldVar
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #isp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldIsp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #isv
            MenuItemType        #Action
            MenuItemName        #SysOpenOldIsv
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #slp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSlp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #sln
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSln
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #fpp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldFpp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #fpk
            MenuItemType        #Action
            MenuItemName        #SysOpenOldFpk
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #glp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldGlp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #gls
            MenuItemType        #Action
            MenuItemName        #SysOpenOldGls
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #syp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSyp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #sys
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSys
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENUITEM
        PROPERTIES
          Name                #Open used table
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowTable
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used table field group
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowFieldGroup
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used Extended Data Type
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowExtendedType
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used Enum
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowEnum
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used class
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowClass
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used form
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowForm
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used report
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowReport
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used menu item
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowMenuItem
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Properties
        MenuItemType        #Action
        MenuItemName        #SysTreeNodeShowProperties
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Full CIL generation from X++
        MenuItemType        #Action
        MenuItemName        #SysXppILFullBuild
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Incremental CIL generation from X++
        MenuItemType        #Action
        MenuItemName        #SysXppILIncrementalBuild
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Approval wizard...
        MenuItemName        #WorkflowAOTWizardApproval
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Task wizard...
        MenuItemName        #WorkflowAOTWizardTask
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Workflow type wizard...
        MenuItemName        #WorkflowAOTWizardType
      ENDPROPERTIES
      
    ENDMENUITEM
  ENDMENU
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : DEVSysTraceExecPlan unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #DEVSysTraceExecPlan
    Type: 1
    PROPERTIES
      Name                #DEVSysTraceExecPlan
      Label               #@SYS73676
      HelpText            #Inspect prior and current execution plan for the statement.
      Object              #DEVSysTraceExecPlan
      SecurityKey         #AdminMisc
      ViewUserLicense     #Functional
      MaintainUserLicense #Functional
      Origin              #{77429155-CE48-4ABF-BCAA-11EC1AD55284}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : DEVSysTaskRecorderToolbarOld unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #DEVSysTaskRecorderToolbarOld
    Type: 1
    PROPERTIES
      Name                #DEVSysTaskRecorderToolbarOld
      Label               #Task recorder(old)
      Object              #SysTaskRecorderToolbar
      ViewUserLicense     #Functional
      MaintainUserLicense #Functional
      Origin              #{727E3EF6-2AE5-4F7B-8C60-5EFE65BEA9DB}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : SysSecRoleEntryPoint unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #SysSecRoleEntryPoint
    Type: 1
    PROPERTIES
      Name                #SysSecRoleEntryPoint
      Label               #@SDT247
      HelpText            #@SDT248
      Object              #SysSecEntryPointManager
      ViewUserLicense     #Functional
      MaintainUserLicense #Functional
      Origin              #{030E1569-A8AE-4E33-8A3B-1491F10D5027}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : SysSecRoleEntryPointDeveloper unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #SysSecRoleEntryPointDeveloper
    Type: 1
    PROPERTIES
      Name                #SysSecRoleEntryPointDeveloper
      Label               #@SDT46
      HelpText            #@SDT246
      Object              #SysSecEntryPointManager
      ViewUserLicense     #Functional
      MaintainUserLicense #Functional
      Origin              #{F9D2A65C-10FC-47AE-9E42-6B3E2487774E}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : DEVCommentsTool unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #DEVCommentsTool
    Type: 3
    PROPERTIES
      Name                #DEVCommentsTool
      Label               #Add to project
      ObjectType          #Class
      Object              #DEVCommentsTool
      ViewUserLicense     #Functional
      MaintainUserLicense #Functional
      Origin              #{936693D1-AAC5-4931-8547-6FFF6C95D446}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : DEVsysCompareNew unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #DEVsysCompareNew
    Type: 3
    PROPERTIES
      Name                #DEVsysCompareNew
      Label               #Compare new
      HelpText            #@SYS68610
      ObjectType          #Class
      Object              #systreenodecompareContext
      Parameters          #new
      ConfigurationKey    #SysDevelopmentMorphX
      SecurityKey         #SysDevelopment
      ViewUserLicense     #Functional
      MaintainUserLicense #Functional
      WebAccess           #None
      Origin              #{3CEFCD1B-11C1-4F25-9268-0AC90684B9B1}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : DEVsysCompareOld unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #DEVsysCompareOld
    Type: 3
    PROPERTIES
      Name                #DEVsysCompareOld
      Label               #Compare old
      HelpText            #@SYS68610
      ObjectType          #Class
      Object              #systreenodecompareContext
      Parameters          #old
      ConfigurationKey    #SysDevelopmentMorphX
      SecurityKey         #SysDevelopment
      ViewUserLicense     #Functional
      MaintainUserLicense #Functional
      WebAccess           #None
      Origin              #{AB28BB3A-2541-439B-876D-06FDA36CE747}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : xRefUpdateTmpReferences unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #xRefUpdateTmpReferences
    Type: 3
    PROPERTIES
      Name                #xRefUpdateTmpReferences
      Label               #@SYS58914
      HelpText            #@SYS58913
      ObjectType          #Class
      Object              #xRefUpdateTmpReferences
      EnumTypeParameter   #NoYes
      EnumParameter       #Yes
      LinkedPermissionType #Form
      LinkedPermissionObject  #XRefTmpReferences
      ConfigurationKey    #SysDevelopmentMorphX
      SecurityKey         #SysDevelopment
      ViewUserLicense     #Enterprise
      MaintainUserLicense #Enterprise
      MultiSelect         #Yes
      WebAccess           #None
      Origin              #{03170000-0000-1000-5B25-E1E2261A413E}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: SPV

; Microsoft Dynamics AX PRIVILEGE : SysSecRoleEntryPointMaintain unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  PRIVILEGE #SysSecRoleEntryPointMaintain
    PROPERTIES
      Name                #SysSecRoleEntryPointMaintain
      Label               #@SDT249
      Origin              #{1E2B57A9-A7C0-4623-AD72-18C0980D8DF0}
    ENDPROPERTIES
    
    ENTRYPOINTS #Entry Points
      ENTRYPOINT #SysSecRoleEntryPoint
        PROPERTIES
          Name                #SysSecRoleEntryPoint
          ObjectType          #MenuItemDisplay
          ObjectName          #SysSecRoleEntryPoint
          AccessLevel         #Delete
        ENDPROPERTIES
        
      ENDENTRYPOINT
      
    ENTRYPOINT #SysSecRoleEntryPointDeveloper
      PROPERTIES
        Name                #SysSecRoleEntryPointDeveloper
        ObjectType          #MenuItemDisplay
        ObjectName          #SysSecRoleEntryPointDeveloper
        AccessLevel         #Read
      ENDPROPERTIES
      
    ENDENTRYPOINT
    
ENDENTRYPOINTS

PERMISSIONSET #Permissions
  PROPERTIES
  ENDPROPERTIES
  
  TABLES #Tables
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

FORMS #Forms
ENDFORMS

ENDPERMISSIONSET

ENDPRIVILEGE


***Element: SRO

; Microsoft Dynamics AX ROLE : SysSecDevToolRoleDenis unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  ROLE #SysSecDevToolRoleDenis
    PROPERTIES
      Name                #SysSecDevToolRoleDenis
      Label               #Security development tool role Denis
      Description         #Auto-generated role for user Denis (Security development tool)
      Origin              #{449925E1-E706-4751-A1A4-DE5973D57943}
    ENDPROPERTIES
    
    DUTIES #Duties
      DUTY #DEVContractManagement
        PROPERTIES
          Name                #DEVContractManagement
        ENDPROPERTIES
        
      ENDDUTY
      
  ENDDUTIES
  
PRIVILEGES #Privileges
ENDPRIVILEGES

PERMISSIONSET #Permissions
  PROPERTIES
  ENDPROPERTIES
  
  TABLES #Tables
  ENDTABLES
  
FORMS #Forms
ENDFORMS

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ENDPERMISSIONSET

SUBROLES #Sub Roles
ENDSUBROLES

ENDROLE


***Element: SRO

; Microsoft Dynamics AX ROLE : SysSecRoleEntryPoint unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  ROLE #SysSecRoleEntryPoint
    PROPERTIES
      Name                #SysSecRoleEntryPoint
      Label               #@SDT249
      Description         #@SDT250
      Origin              #{FC084C31-184C-4303-A1A9-E5C47CD51280}
    ENDPROPERTIES
    
    DUTIES #Duties
    ENDDUTIES
    
  PRIVILEGES #Privileges
    PRIVILEGE #SysEDTSetup
      PROPERTIES
        Name                #SysEDTSetup
      ENDPROPERTIES
      
    ENDPRIVILEGE
    
  PRIVILEGE #SysSecRoleEntryPointMaintain
    PROPERTIES
      Name                #SysSecRoleEntryPointMaintain
    ENDPROPERTIES
    
  ENDPRIVILEGE
  
PRIVILEGE #SysSecRoleMaintain
  PROPERTIES
    Name                #SysSecRoleMaintain
  ENDPROPERTIES
  
ENDPRIVILEGE

ENDPRIVILEGES

PERMISSIONSET #Permissions
  PROPERTIES
  ENDPROPERTIES
  
  TABLES #Tables
  ENDTABLES
  
FORMS #Forms
ENDFORMS

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ENDPERMISSIONSET

SUBROLES #Sub Roles
ENDSUBROLES

ENDROLE


***Element: PRN

; Microsoft Dynamics AX Project : DEV_DEV unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #DEV_DEV
  PRIVATE
  PROPERTIES
    Name                #DEV_DEV
    Origin              #{0ED32E3E-4F2E-4913-A5BD-5260AB393EBE}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Data_Dictionary
      PROPERTIES
        Name                #Data_Dictionary
        ProjectGroupType    #DataDictionary
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Tables
        PROPERTIES
          Name                #Tables
          ProjectGroupType    #Tables
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 51153
          NODETYPE 204
          NAME #DEVDebugInfo
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 50045
          NODETYPE 204
          NAME #DEVRunBaseBuilderVars
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 107842
          NODETYPE 204
          NAME #DEVTableBuilderVars
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 107840
          NODETYPE 204
          NAME #DEVLabelsCreateInfo
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 107841
          NODETYPE 204
          NAME #DEVMultiBatchTaskTable
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 107844
          NODETYPE 204
          NAME #SysSecEntryPointTmp
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 107845
          NODETYPE 204
          NAME #SysSecOrganizationsTmp
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 107846
          NODETYPE 204
          NAME #SysSecRecordedEntryPoint
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 2543
          NODETYPE 204
          NAME #SysVersionControlMorphXRevisionTable
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 516
          NODETYPE 204
          NAME #xRefReferences
        ENDNODE
        ENDGROUP
        
      GROUP #Extended_Data_Types
        PROPERTIES
          Name                #Extended_Data_Types
          ProjectGroupType    #ExtendedDataTypes
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 41
          UTILOBJECTID 105957
          NODETYPE 234
          NAME #SysSecEntryPointKey
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 41
          UTILOBJECTID 105958
          NODETYPE 234
          NAME #SysSecObjectAOTDisplayName
        ENDNODE
        ENDGROUP
        
      GROUP #Base_Enums
        PROPERTIES
          Name                #Base_Enums
          ProjectGroupType    #BaseEnums
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 40
          UTILOBJECTID 101940
          NODETYPE 209
          NAME #DEVConversionErrorMessage
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 40
          UTILOBJECTID 101939
          NODETYPE 209
          NAME #DEVSysDSRefreshAction
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 40
          UTILOBJECTID 101937
          NODETYPE 209
          NAME #DEVLabelActionType
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 40
          UTILOBJECTID 101938
          NODETYPE 209
          NAME #SysSecDevelopmentType
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Macros
      PROPERTIES
        Name                #Macros
        ProjectGroupType    #Macros
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 4
        UTILOBJECTID 0
        NODETYPE 218
        NAME #SysSecEntryPointManager
      ENDNODE
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 61441
        NODETYPE 329
        NAME #Application
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033508
        NODETYPE 329
        NAME #DEV
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033510
        NODETYPE 329
        NAME #DEVCRMConnectorHelper
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 2436
        NODETYPE 329
        NAME #EditorScripts
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 61444
        NODETYPE 329
        NAME #Info
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50710
        NODETYPE 329
        NAME #DEVPropertyMap
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033474
        NODETYPE 329
        NAME #DEVCommentsTool
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033514
        NODETYPE 329
        NAME #DEVDevImportExcelTemplate
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50720
        NODETYPE 329
        NAME #DEVWizard
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033515
        NODETYPE 329
        NAME #DEVLabelsCreateHelper
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033516
        NODETYPE 329
        NAME #DEVMultiBatchTemplate
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033517
        NODETYPE 329
        NAME #DEVMultiBatchTemplate2
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 6257
        NODETYPE 329
        NAME #SysBPCheck
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 6532
        NODETYPE 329
        NAME #SysBPCheckExtendedType
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 6539
        NODETYPE 329
        NAME #SysBPCheckFormEditControl
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 6553
        NODETYPE 329
        NAME #SysBPCheckMemberFunction
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 968
        NODETYPE 329
        NAME #SysContextMenu
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 4794
        NODETYPE 329
        NAME #SysLabelEdit
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033519
        NODETYPE 329
        NAME #SysSecEntryPointManager
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033520
        NODETYPE 329
        NAME #SysSecEntryPointManagerSetup
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1033521
        NODETYPE 329
        NAME #SysSecurityRecorder_1CC4B7A84D53
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 6594
        NODETYPE 329
        NAME #SysSetupForm
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1059
        NODETYPE 329
        NAME #SysTreeNode
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 955
        NODETYPE 329
        NAME #SysTreenodeCompareContext
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 970
        NODETYPE 329
        NAME #SysTreeNodeVirtualVCS
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1923
        NODETYPE 329
        NAME #SysWorkflowHelper
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #DEVEnumCreator
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #DEVRunBaseBuilder
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #DEVSysTraceExecPlan
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #DEVTableBuilder
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #DEVLabelsCreateInfo
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysCompareForm
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysImportDialog
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysLabelInterval
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysModelsInstalledList
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecAssignOM
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecDutyLookup
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecEntryPointManager
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecLoadEPTrace
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecPrivilegeLookup
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecReferenceDutiesForEntryPoint
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecReferencePrivilegesForEntryPoint
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecRoleLookup
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecSetEntryPointRights
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysSecSetEntryPointRightsForPrivilege
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysTaskRecorderSaveTask
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysTraceSQL
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlCheckIn
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #xRefReferencesUsedByTypedTree
      ENDNODE
      ENDGROUP
      
    GROUP #Jobs
      PROPERTIES
        Name                #Jobs
        ProjectGroupType    #Jobs
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #checkNumSeq
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #dimensionCombValuesforMainAccount
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #DEVfixDemoRoleNames
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_approvePO
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_checkDataDictionary
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_checkDisabledUsers
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_clearCache
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_confirmPO
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_deletePartition
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_devHints
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_postPO
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_postPOMultiple
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_processVendInvoiceInfoTable
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_runReport
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_runReport2
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_runReport3
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_runReportDetPos
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #trud_setDevDocumentation
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #ttsAbortJob
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #ttsCommitJob
      ENDNODE
      ENDGROUP
      
    GROUP #Menus
      PROPERTIES
        Name                #Menus
        ProjectGroupType    #Menus
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 16
        UTILOBJECTID 0
        NODETYPE 205
        NAME #DevelopmentTools
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 16
        UTILOBJECTID 0
        NODETYPE 205
        NAME #GlobalToolsMenu
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 16
        UTILOBJECTID 0
        NODETYPE 205
        NAME #SysContextMenu
      ENDNODE
      ENDGROUP
      
    GROUP #Menu_Items
      PROPERTIES
        Name                #Menu_Items
        ProjectGroupType    #MenuItems
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Display
        PROPERTIES
          Name                #Display
          ProjectGroupType    #Display
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 1
          UTILOBJECTID 0
          NODETYPE 296
          NAME #DEVSysTraceExecPlan
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 1
          UTILOBJECTID 0
          NODETYPE 296
          NAME #DEVSysTaskRecorderToolbarOld
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 1
          UTILOBJECTID 0
          NODETYPE 296
          NAME #SysSecRoleEntryPoint
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 1
          UTILOBJECTID 0
          NODETYPE 296
          NAME #SysSecRoleEntryPointDeveloper
        ENDNODE
        ENDGROUP
        
      GROUP #Action
        PROPERTIES
          Name                #Action
          ProjectGroupType    #Action
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #DEVCommentsTool
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #DEVsysCompareNew
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #DEVsysCompareOld
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #xRefUpdateTmpReferences
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Security
      PROPERTIES
        Name                #Security
        ProjectGroupType    #Security
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Privileges
        PROPERTIES
          Name                #Privileges
          ProjectGroupType    #SecurityPrivileges
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 134
          UTILOBJECTID 0
          NODETYPE 1628
          NAME #SysSecRoleEntryPointMaintain
        ENDNODE
        ENDGROUP
        
      GROUP #Roles
        PROPERTIES
          Name                #Roles
          ProjectGroupType    #SecurityRoles
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 133
          UTILOBJECTID 0
          NODETYPE 1626
          NAME #SysSecDevToolRoleDenis
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 133
          UTILOBJECTID 0
          NODETYPE 1626
          NAME #SysSecRoleEntryPoint
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
