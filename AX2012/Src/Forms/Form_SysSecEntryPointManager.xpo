Exportfile for AOT version 1.0 or later
Formatversion: 1

FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSecEntryPointManager
  PROPERTIES
    Name                #SysSecEntryPointManager
    Origin              #{1D698C77-11BD-4584-A553-C5F2564486F6}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends SysSecBaseForm
      #{
      #    #AOT
      #    #AviFiles
      #    #SysSecUI
      #    #Properties
      #    #SysSecEntryPointManager
      #
      #    ImageListAppl_SecurityAccess imageList_access;
      #    ImageListAppl_Aot imageListAppl_AOT;
      #
      #    Map accessRightsMap;
      #    Map oldAccessRightsMap;
      #    SecurityRoleName currentRoleName;
      #    SecurityRoleAotName currentRoleAOTName;
      #    SysSecDevelopmentType currentDevelopmentType;
      #    recid currentRoleID;
      #    IdentifierName currentDevelopmentObject;
      #    Map treeParents;
      #    Map menuItemTreeReferences;
      #
      #    Map curAccessTree;
      #    Map oldAccessTree;
      #    Map nodeHasChildWithNewAccessTree;
      #    Map oldAccessTreeDiscoveredNodes;
      #
      #    Map newIndicatedItems;
      #    Map prevIndicatedItems;
      #
      #    int workSpaceHandle;
      #    boolean wasFormRunHookEnabled;
      #    int curMainWindowHandle;
      #    TreeItemIdx richClientRootItemIdx;
      #    TreeItemIdx webRootItemIdx;
      #    TreeItemIdx servicesRootItemIdx;
      #    boolean isRecording;
      #    boolean recordingIsDirty;
      #    boolean recordingGridFilter;
      #    str prevRecordingFilePath;
      #    str prevEPTraceFilePath;
      #    FormRun epTraceFormRun;
      #
      #    boolean disableSysAdminRoleAssignment;
      #
      #    boolean skipRun;
      #    boolean labelsLoaded;
      #    boolean licenseInfoLoaded;
      #    boolean layerModelLoaded;
      #
      #    ImageRes accessImages[7];
      #
      #    Map disabledUserRolesMap;
      #    Map userRoleOrgRecords;
      #    recid newUserRole;
      #    recid curUserRoleDisabled;
      #
      #    Map systemUserAccessRightsMap;
      #    SysFormSplitter_Y  _formSplitterY;
      #    SysFormSplitter_X _formSplitterX;
      #
      #    boolean referencesShown;
      #    SysSecTree  secTree;
      #    SysSecHelper secHelper;
      #    TreeNode securityNode;
      #}
    ENDSOURCE
    SOURCE #AddFilterOnRecordedObjects
      #public void AddFilterOnRecordedObjects()
      #{
      #    QueryBuildDataSource qbds;
      #    QueryBuildRange qbr;
      #
      #    if(!recordingGridFilter)
      #    {
      #        qbds = SysSecEntryPointTmp_ds.query().dataSourceTable(tableNum(SysSecEntryPointTmp));
      #        qbr = qbds.addRange(fieldNum(SysSecEntryPointTmp, Recorded));
      #        qbr.value('1');
      #        qbr.status(RangeStatus::Locked);
      #        recordingGridFilter = true;
      #    }
      #    EntryPointsGrid_Recorded.visible(true);
      #    ClearRecordedFilter.visible(true);
      #}
    ENDSOURCE
    SOURCE #AreLabelsLoaded
      #public boolean AreLabelsLoaded()
      #{
      #    return labelsLoaded;
      #}
    ENDSOURCE
    SOURCE #BuildMetaDataCaches
      #public void BuildMetaDataCaches()
      #{
      #    #AOT
      #    TreeNode tn;
      #
      #    container parents;
      #
      #    #Properties
      #    identifierName itemValue;
      #    str itemType, itemTypeKey;
      #    TreeNodeIterator servicesIterator, operationsIterator;
      #    TreeNode servicesNode, serviceNode, operationNode;
      #
      #    void processMenuNode(TreeNode _menuNode)
      #    {
      #        TreeNode subMenuNode;
      #        TreeNode childNode;
      #        container curCon;
      #        str menuItemKey = '';
      #
      #        if(_menuNode == null)
      #            return;
      #
      #        itemvalue =  findProperty(_menuNode.AOTgetProperties(), #PropertyMenuItemName);
      #
      #        if(itemvalue)
      #        {
      #            itemtype  = findProperty(_menuNode.AOTgetProperties(),#PropertyMenuItemType);
      #            if(itemType == '' || itemType == 'Display')
      #            {
      #                itemTypeKey = #EntryPointObjectKeyDisplayMenuItem;
      #            }
      #            else if(itemType == 'Action')
      #            {
      #                itemTypeKey = #EntryPointObjectKeyActionMenuItem;
      #            }
      #            else if(itemType == 'Output')
      #            {
      #                itemTypeKey = #EntryPointObjectKeyOutputMenuItem;
      #            }
      #            menuItemKey = strFmt('%1.%2.%3', strLwr(itemTypeKey), strLwr(itemValue), '');
      #        }
      #
      #        childNode = _menuNode.AOTfirstChild();
      #        while (childNode)
      #        {
      #            parents = conIns(parents, conLen(parents)+1, _menuNode.treeNodePath());
      #            switch (childNode.handle())
      #            {
      #                case classNum(MenuReference):
      #                    subMenuNode = TreeNode::findNode(#MenusPath +'\\' +childNode.AOTname());
      #                    processMenuNode(subMenuNode);
      #                    break;
      #
      #                default:
      #                    processMenuNode(childNode);
      #                    break;
      #            }
      #
      #            parents = conDel(parents, conLen(parents), 1);
      #
      #            childNode = childNode.AOTnextSibling();
      #        }
      #
      #        treeParents.insert(_menuNode.treeNodePath(), parents);
      #
      #        if(menuItemKey != '')
      #        {
      #            if(!menuItemTreeReferences.exists(menuItemKey))
      #            {
      #                menuItemTreeReferences.insert(menuItemKey, [_menuNode.treeNodePath()]);
      #            }
      #            else
      #            {
      #                curCon = menuItemTreeReferences.lookup(menuItemKey);
      #                menuItemTreeReferences.remove(menuItemKey);
      #                menuItemTreeReferences.insert(menuItemKey, conIns(curCon, conLen(curCon)+1, _menuNode.treeNodePath()));
      #            }
      #        }
      #        _menuNode.treeNodeRelease();
      #    }
      #
      #    treeParents = new Map(Types::String, Types::Container);
      #    menuItemTreeReferences = new Map(Types::String, Types::Container);
      #    parents = conNull();
      #
      #    //Cache rich client parents
      #    tn = TreeNode::findNode(#MenusPath + @'\MainMenu');
      #    processMenuNode(tn);
      #
      #    //Cache services
      #    servicesNode = TreeNode::findNode(#ServicesPath);
      #    servicesIterator = servicesNode.AOTiterator();
      #    serviceNode = servicesIterator.next();
      #    while(serviceNode != null)
      #    {
      #        parents = conNull();
      #        parents = conIns(parents, conLen(parents)+1, servicesNode.treeNodePath());
      #        treeParents.insert(serviceNode.treeNodePath(), parents);
      #        parents = conIns(parents, conLen(parents)+1, serviceNode.treeNodePath());
      #
      #        operationsIterator = serviceNode.AOTfindChild(#ServiceOperations).AOTiterator();
      #        operationNode = operationsIterator.next();
      #        while(operationNode != null)
      #        {
      #            treeParents.insert(operationNode.treeNodePath(), parents);
      #            operationNode = operationsIterator.next();
      #        }
      #        serviceNode = servicesIterator.next();
      #    }
      #
      #}
    ENDSOURCE
    SOURCE #canClose
      #public boolean canClose()
      #{
      #    boolean ret;
      #
      #    ret = super();
      #
      #    if(isRecording)
      #    {
      #        warning(strFmt("@SDT73"));
      #        return false;
      #    }
      #    element.CheckRecordingIsDirty();
      #
      #    return ret;
      #}
    ENDSOURCE
    SOURCE #CheckRecordingIsDirty
      #public void CheckRecordingIsDirty()
      #{
      #    DialogButton dialogButton;
      #
      #    if(recordingIsDirty)
      #    {
      #        dialogButton = Box::yesNoOnce(strFmt("@SDT74"),
      #                            strFmt("@SDT75"), DialogButton::Yes, 'EntryPointRecorderIsDirty');
      #
      #        if(dialogButton == DialogButton::Yes)
      #        {
      #            element.SaveRecording();
      #        }
      #        else
      #        {
      #            recordingIsDirty = false;
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #ClearEntryPointReferenceTree
      #public void ClearEntryPointReferenceTree()
      #{
      #    if(referencesShown)
      #    {
      #        EntryPointReferenceTree.deleteAll();
      #        referencesShown = false;
      #    }
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    if(!skipRun)
      #    {
      #        if(isDeveloper())
      #        {
      #            //Turn off form run hook
      #            SysSecEntryPointManager::FormRunHookStatus(false);
      #
      #            //Remove pointer in GOC
      #            if(infolog.globalCache().isSet(curuserId() + #SecEntryPointFormKey, #SecEntryPointFormKey))
      #            {
      #                infolog.globalCache().remove(curuserId() + #SecEntryPointFormKey, #SecEntryPointFormKey);
      #            }
      #
      #            element.UndoRoleAssignmentChanges();
      #        }
      #
      #        //Release all objects in menu tree
      #        MenuTree.deleteAll();
      #
      #        //Release all maps
      #        systemUserAccessRightsMap = null;
      #        accessRightsMap = null;
      #        oldAccessRightsMap = null;
      #        treeParents = null;
      #        menuItemTreeReferences = null;
      #        curAccessTree = null;
      #        oldAccessTree = null;
      #        nodeHasChildWithNewAccessTree = null;
      #        oldAccessTreeDiscoveredNodes = null;
      #        newIndicatedItems = null;
      #        prevIndicatedItems = null;
      #    }
      #
      #    super();
      #}
    ENDSOURCE
    SOURCE #closeForm
      #public void closeForm()
      #{
      #    element.close();
      #}
    ENDSOURCE
    SOURCE #CurrentDevelopmentObject
      #public IdentifierName CurrentDevelopmentObject()
      #{
      #    return currentDevelopmentObject;
      #}
    ENDSOURCE
    SOURCE #CurrentDevelopmentType
      #public SysSecDevelopmentType CurrentDevelopmentType()
      #{
      #    return currentDevelopmentType;
      #}
    ENDSOURCE
    SOURCE #GetAccessRightForMenuItem
      #public AccessRight GetAccessRightForMenuItem(MenuItemType _menuItemType, identifierName _menuItemName)
      #{
      #    str typeKey, objectKey;
      #
      #    if(_menuItemName == '')
      #        return -1;
      #
      #    if(currentRoleAOTName == '')
      #        return -1;
      #
      #    switch(_menuItemType)
      #    {
      #        case MenuItemType::Display:
      #            typeKey = #EntryPointObjectKeyDisplayMenuItem;
      #            break;
      #        case MenuItemType::Output:
      #            typeKey = #EntryPointObjectKeyOutputMenuItem;
      #            break;
      #        case MenuItemType::Action:
      #            typeKey = #EntryPointObjectKeyActionMenuItem;
      #            break;
      #
      #        default:
      #            throw error(strFmt("@SDT76", _menuItemType));
      #    }
      #
      #    objectKey = strFmt('%1.%2.%3', typeKey, strLwr(_menuItemName), '');
      #    if(accessRightsMap != null)
      #    {
      #        if(accessRightsMap.exists(objectKey))
      #        {
      #            return accessRightsMap.lookup(objectKey);
      #        }
      #    }
      #
      #    return AccessRight::NoAccess;
      #}
    ENDSOURCE
    SOURCE #GetAccessRightForObjectKey
      #public AccessRight GetAccessRightForObjectKey(str _objectKey)
      #{
      #    if(accessRightsMap != null && accessRightsMap.exists(_objectKey))
      #    {
      #        return accessRightsMap.lookup(_objectKey);
      #    }
      #    return AccessRight::NoAccess;
      #}
    ENDSOURCE
    SOURCE #GetCurrentRoleAOTname
      #public SecurityRoleAotName GetCurrentRoleAOTname()
      #{
      #    return currentRoleAOTName;
      #}
    ENDSOURCE
    SOURCE #GetCurrentRoleName
      #public SecurityRoleName GetCurrentRoleName()
      #{
      #    return currentRoleName;
      #}
    ENDSOURCE
    SOURCE #GetEntryPointKeyForSysSecTreeItem
      #public SysSecEntryPointKey GetEntryPointKeyForSysSecTreeItem(FormTreeItem _formTreeItem)
      #{
      #    SysSecSecurableObject securableObjectUnder = element.GetLinkedWebMenuItem(_formTreeItem);
      #
      #    if(securableObjectUnder != null && (
      #        securableObjectUnder.getType() == SecurableType::MenuItemDisplay ||
      #        securableObjectUnder.getType() == SecurableType::MenuItemAction ||
      #        securableObjectUnder.getType() == SecurableType::MenuItemOutput ||
      #        securableObjectUnder.getType() == SecurableType::WebUrlItem ||
      #        securableObjectUnder.getType() == SecurableType::WebActionItem ||
      #        securableObjectUnder.getType() == SecurableType::WebManagedContentItem ||
      #        securableObjectUnder.getType() == SecurableType::ServiceOperation))
      #    {
      #        return strFmt('%1.%2.%3', SysSecEntryPointManager::GetTypeKeyForSecurableType(securableObjectUnder.getType()),
      #                            strLwr(securableObjectUnder.getName()), strLwr(securableObjectUnder.getChildName()));
      #    }
      #    return '';
      #}
    ENDSOURCE
    SOURCE #getFirstSelectedTaskRecId
      #public RecId getFirstSelectedTaskRecId()
      #{
      #    return 0;
      #}
    ENDSOURCE
    SOURCE #getHelper
      #SysSecHelper getHelper()
      #{
      #    return secHelper;
      #}
    ENDSOURCE
    SOURCE #GetLinkedWebMenuItem
      #public SysSecSecurableObject GetLinkedWebMenuItem(FormTreeItem _formTreeItem, boolean _returnParent = true)
      #{
      #    SysSecSecurableObject linkedWebMenuItem;
      #    Object objectUnder;
      #    SysSecSecurableObject curObjectUnder;
      #    Object data;
      #    TreeNode webNode;
      #    str menuItemName;
      #    str menuItemType;
      #    SecurableObject securableObject;
      #
      #    if(!_formTreeItem)
      #        return null;
      #
      #    objectUnder = _formTreeItem.data();
      #    if(!objectUnder)
      #        return null;
      #
      #    if(objectUnder is SysSecSecurableObject)
      #    {
      #        curObjectUnder = objectUnder as SysSecSecurableObject;
      #        data = curObjectUnder.getData();
      #        if(data is TreeNode)
      #        {
      #            webNode = data as TreeNode;
      #
      #            if(strStartsWith(webNode.treeNodePath(), #WebModulesPath) ||
      #                strStartsWith(webNode.treeNodePath(), #WebMenusPath))
      #            {
      #                menuItemName = findProperty(webNode.AOTgetProperties(), #PropertyMenuItemName);
      #                menuItemType = findProperty(webNode.AOTgetProperties(), #PropertyMenuItemType);
      #                if(menuItemName != '' && menuItemType != '')
      #                {
      #                    securableObject.RecId = 1;
      #                    securableObject.Name = menuItemName;
      #                    securableObject.Type = SecurableType::WebUrlItem;
      #                    if(strLwr(menuItemType) == 'action')
      #                    {
      #                        securableObject.Type = SecurableType::WebActionItem;
      #                    }
      #                    linkedWebMenuItem = new SysSecSecurableObject(this as Object, secTree, null, securableObject);
      #                    return linkedWebMenuItem;
      #                }
      #            }
      #        }
      #        if(_returnParent)
      #        {
      #            return curObjectUnder;
      #        }
      #    }
      #    return null;
      #}
    ENDSOURCE
    SOURCE #GetMenuItemKeyForNode
      #public str GetMenuItemKeyForNode(TreeNode _node)
      #{
      #    #Properties
      #    identifierName itemValue;
      #    str itemType, itemTypeKey;
      #    str key = '';
      #
      #    itemvalue =  findProperty(_node.AOTgetProperties(), #PropertyMenuItemName);
      #    itemtype  = findProperty(_node.AOTgetProperties(),#PropertyMenuItemType);
      #
      #    if(itemType == '' || itemType == 'Display')
      #    {
      #        itemTypeKey = #EntryPointObjectKeyDisplayMenuItem;
      #    }
      #    else if(itemType == 'Action')
      #    {
      #        itemTypeKey = #EntryPointObjectKeyActionMenuItem;
      #    }
      #    else if(itemType == 'Output')
      #    {
      #        itemTypeKey = #EntryPointObjectKeyOutputMenuItem;
      #    }
      #
      #    if(itemValue)
      #    {
      #        key = strFmt('%1.%2.%3', itemTypeKey, strLwr(itemValue), '');
      #    }
      #    return key;
      #
      #}
    ENDSOURCE
    SOURCE #GetSelectionDataGrid
      #public SysSecEntryPointTmp GetSelectionDataGrid()
      #{
      #    SysSecEntryPointTmp tmpData;
      #    SysSecEntryPointTmp entryPointGridData;
      #    for (entryPointGridData = getFirstSelection(SysSecEntryPointTmp_ds);
      #            entryPointGridData;
      #            entryPointGridData = SysSecEntryPointTmp_ds.getNext())
      #    {
      #        tmpData.ObjectType = entryPointGridData.ObjectType;
      #        tmpData.ObjectKey = entryPointGridData.ObjectKey;
      #        tmpData.ObjectAOTDisplayName = entryPointGridData.ObjectAOTDisplayName;
      #        tmpData.ObjectAOTName = entryPointGridData.ObjectAOTName;
      #        tmpData.ObjectAOTChildName = entryPointGridData.ObjectAOTChildName;
      #        tmpData.AccessRight = entryPointGridData.AccessRight;
      #        tmpData.NewAccessRight = entryPointGridData.AccessRight;
      #        tmpData.SystemUserRight = entryPointGridData.SystemUserRight;
      #        tmpData.ObjectLabel = entryPointGridData.ObjectLabel;
      #        tmpData.UserLicenseApplies = entryPointGridData.UserLicenseApplies;
      #        tmpData.MaintainUserLicense = entryPointGridData.MaintainUserLicense;
      #        tmpData.ViewUserLicense = entryPointGridData.ViewUserLicense;
      #        tmpData.ObjectAOTLayer = entryPointGridData.ObjectAOTLayer;
      #        tmpData.ObjectAOTModel = entryPointGridData.ObjectAOTModel;
      #        tmpData.insert();
      #    }
      #
      #    return tmpData;
      #}
    ENDSOURCE
    SOURCE #getTree
      #SysSecTree getTree()
      #{
      #    return secTree;
      #}
    ENDSOURCE
    SOURCE #getTreeControl
      #FormTreeControl getTreeControl()
      #{
      #    return MenuTree;
      #}
    ENDSOURCE
    SOURCE #GetTreeData
      #public SysSecEntryPointTmp GetTreeData()
      #{
      #    TreeItemIdx idx;
      #    Object  objectUnder;
      #    FormTreeItem itemUnder;
      #    TreeNode nodeUnder;
      #    SysSecSecurableObject sysSecObjUnder;
      #    SysSecEntryPointTmp tmpData;
      #    Map addedEntryPoints = new Map(Types::String, Types::String);
      #    SysSecEntryPointKey entryPointKey;
      #    boolean refreshGrid = false;
      #    SysSecEntryPointTmp restorePos;
      #
      #    void AddNode(FormTreeItem _item, TreeNode _node, SysSecSecurableObject sysSecObj = null)
      #    {
      #        TreeNode menuItemNode;
      #
      #        tmpData.clear();
      #
      #        if(sysSecObj != null)
      #        {
      #            if(SysSecEntryPointManager::GetTypeKeyForSecurableType(sysSecObj.getType()) != '')
      #            {
      #                tmpData.ObjectType = sysSecObj.getType();
      #                tmpData.ObjectAOTName = sysSecObj.getName();
      #                tmpData.ObjectAOTChildName = sysSecObj.getChildName();
      #            }
      #        }
      #        else if(SysTreeNode::path2ApplObjectType(_node.treeNodePath()) == UtilElementType::Service &&
      #            _node.AOTparent() != null &&
      #            _node.AOTparent().AOTparent() != null &&
      #            _node.AOTparent().AOTparent() != null &&
      #            _node.AOTparent().AOTparent().AOTparent() != null &&
      #            _node.AOTparent().AOTparent().AOTparent().treeNodePath() == #ServicesPath)
      #        {
      #            tmpData.ObjectType = SecurableType::ServiceOperation;
      #            tmpData.ObjectAOTName = _node.AOTparent().AOTparent().AOTname();
      #            tmpData.ObjectAOTChildName = _node.AOTname();
      #        }
      #        else
      #        {
      #            menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(_node);
      #            if(menuItemNode)
      #            {
      #                tmpData.ObjectType = SysSecEntryPointManager::GetSecurableMenuItemType(menuItemNode);
      #                tmpData.ObjectAOTName = menuItemNode.AOTname();
      #            }
      #        }
      #
      #        if(tmpData.ObjectAOTName != '')
      #        {
      #            entryPointKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(tmpData);
      #            if(!addedEntryPoints.exists(entryPointKey))
      #            {
      #                tmpData.AccessRight = this.StateImage2AccessRight(_item.stateImage());
      #                tmpData.NewAccessRight = this.StateImage2AccessRight(_item.stateImage());
      #
      #                tmpData.SystemUserRight = AccessRight::NoAccess;
      #                if(systemUserAccessRightsMap != null && systemUserAccessRightsMap.exists(entryPointKey))
      #                {
      #                    tmpData.SystemUserRight = systemUserAccessRightsMap.lookup(entryPointKey);
      #                }
      #
      #                if(labelsLoaded)
      #                {
      #                    select ObjectLabel from SysSecEntryPointTmp where SysSecEntryPointTmp.ObjectKey == entryPointKey;
      #                    tmpData.ObjectLabel = SysSecEntryPointTmp.ObjectLabel;
      #                    refreshGrid = true;
      #                }
      #
      #                if(licenseInfoLoaded)
      #                {
      #                    select UserLicenseApplies, MaintainUserLicense, ViewUserLicense from SysSecEntryPointTmp
      #                            where SysSecEntryPointTmp.ObjectKey == entryPointKey;
      #                    tmpData.UserLicenseApplies = SysSecEntryPointTmp.UserLicenseApplies;
      #                    tmpData.MaintainUserLicense = SysSecEntryPointTmp.MaintainUserLicense;
      #                    tmpData.ViewUserLicense = SysSecEntryPointTmp.ViewUserLicense;
      #                    tmpData.EffectiveUserLicense = SysSecEntryPointTmp.EffectiveUserLicense;
      #                    refreshGrid = true;
      #                }
      #
      #                if(layerModelLoaded)
      #                {
      #                    select ObjectAOTLayer, ObjectAOTModel from SysSecEntryPointTmp
      #                            where SysSecEntryPointTmp.ObjectKey == entryPointKey;
      #                    tmpData.ObjectAOTLayer = SysSecEntryPointTmp.ObjectAOTLayer;
      #                    tmpData.ObjectAOTModel = SysSecEntryPointTmp.ObjectAOTModel;
      #                    refreshGrid = true;
      #                }
      #
      #                if(refreshGrid && restorePos.RecId == 0)
      #                {
      #                    restorePos = SysSecEntryPointTmp.data();
      #                }
      #
      #                tmpData.ObjectKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(tmpData);
      #
      #                if(tmpData.ObjectType == SecurableType::ServiceOperation)
      #                {
      #                    tmpData.ObjectAOTDisplayName = strFmt('%1.%2', tmpData.ObjectAOTName, tmpData.ObjectAOTChildName);
      #                }
      #                else
      #                {
      #                    tmpData.ObjectAOTDisplayName = tmpData.ObjectAOTName;
      #                }
      #
      #                tmpData.insert();
      #                addedEntryPoints.insert(entryPointKey, '');
      #            }
      #        }
      #    }
      #
      #    void ProcessTree(int _rootItemIdxLevel)
      #    {
      #        TreeItemIdx treeItemIdx, firstChildIdx;
      #        FormTreeItem treeItem;
      #
      #        treeItemIdx = _rootItemIdxLevel;
      #        while(treeItemIdx)
      #        {
      #            treeItem = MenuTree.getItem(treeItemIdx);
      #            objectUnder = treeItem.data();
      #            if(objectUnder)
      #            {
      #                if(objectUnder is TreeNode)
      #                {
      #                    nodeUnder = objectUnder as TreeNode;
      #                    if(nodeUnder)
      #                    {
      #                        AddNode(treeItem, nodeUnder);
      #                    }
      #                }
      #                else
      #                {
      #                    sysSecObjUnder = objectUnder as SysSecSecurableObject;
      #                    sysSecObjUnder = element.GetLinkedWebMenuItem(treeItem);
      #                    if(sysSecObjUnder)
      #                    {
      #                        AddNode(treeItem, null, sysSecObjUnder);
      #                    }
      #                }
      #            }
      #
      #            firstChildIdx = MenuTree.getChild(treeItemIdx);
      #            if (firstChildIdx)
      #            {
      #                ProcessTree(firstChildIdx);
      #            }
      #            treeItemIdx = MenuTree.getNextSibling(treeItemIdx);
      #        }
      #    }
      #
      #    idx = MenuTree.getSelection();
      #    if (!idx)
      #    {
      #        return tmpData;
      #    }
      #
      #    itemUnder = MenuTree.getItem(idx);
      #    if (!itemUnder)
      #    {
      #        return tmpData;
      #    }
      #
      #    objectUnder = itemUnder.data();
      #    if(!objectUnder)
      #    {
      #        return tmpData;
      #    }
      #
      #    if(objectUnder is TreeNode)
      #    {
      #        nodeUnder = objectUnder as TreeNode;
      #        if (!nodeUnder)
      #        {
      #            return tmpData;
      #        }
      #
      #        AddNode(itemUnder, nodeUnder);
      #        ProcessTree(MenuTree.getChild(idx));
      #    }
      #    else
      #    {
      #        sysSecObjUnder = objectUnder as SysSecSecurableObject;
      #        sysSecObjUnder = element.GetLinkedWebMenuItem(itemUnder);
      #
      #        if(sysSecObjUnder)
      #        {
      #            AddNode(itemUnder, null, sysSecObjUnder);
      #            ProcessTree(MenuTree.getChild(idx));
      #        }
      #    }
      #
      #    if(refreshGrid)
      #    {
      #        SysSecEntryPointTmp_ds.research(true);
      #        SysSecEntryPointTmp_ds.findRecord(restorePos);
      #        SysSecEntryPointTmp_ds.setCurrent();
      #    }
      #
      #    return tmpData;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysContextMenu sysContextMenu;
      #
      #    imageListAppl_AOT = new ImageListAppl_Aot();
      #    imageList_access = new ImageListAppl_SecurityAccess();
      #
      #    accessImages[1+AccessRight::NoAccess]   = imageList_access.image(#ImageNoAccess);
      #    accessImages[1+AccessRight::View]       = imageList_access.image(#ImageView);
      #    accessImages[1+AccessRight::Edit]       = imageList_access.image(#ImageEdit);
      #    accessImages[1+AccessRight::Add]        = imageList_access.image(#ImageAdd);
      #    accessImages[1+AccessRight::Correction] = imageList_access.image(#ImageSecuritykey);
      #    accessImages[1+AccessRight::Delete]     = imageList_access.image(#ImageFullControl);
      #
      #    isRecording = false;
      #    skipRun = false;
      #    newUserRole = 0;
      #    curUserRoleDisabled = false;
      #    labelsLoaded = false;
      #    prevRecordingFilePath = '';
      #    prevEPTraceFilePath = '';
      #    recordingGridFilter = false;
      #
      #    super();
      #
      #    if (SysContextMenu::startedFrom(this.args()))
      #    {
      #        sysContextMenu = this.args().parmObject();
      #        securityNode = sysContextMenu.first();
      #
      #        if(securityNode &&
      #            !(strStartsWith(securityNode.treeNodePath(), #SecRolesPath + '\\') ||
      #                strStartsWith(securityNode.treeNodePath(), #SecDutiesPath + '\\') ||
      #                strStartsWith(securityNode.treeNodePath(), #SecPrivilegesPath + '\\')))
      #        {
      #            warning(strFmt("@SDT77"));
      #            skipRun = true;
      #            element.close();
      #            return;
      #        }
      #    }
      #
      #    _formSplitterX = new SysFormSplitter_X(XSplitter, MenuTree, this);
      #    _formSplitterY = new SysFormSplitter_Y(YSplitter, EntryPointsGrid, this);
      #    EntryPointReferenceTree.setImagelist(imageListAppl_AOT.imageList());
      #    EntryPointReferenceTree.setStateImagelist(imageList_access.imageList());
      #
      #    //Developers can only have form active once
      #    if(isDeveloper())
      #    {
      #        if(!SysSecEntryPointManager::IsInSingleClientSessionMode())
      #        {
      #            skipRun = true;
      #            error(strFmt("@SDT78"));
      #            element.close();
      #            return;
      #        }
      #
      #        //Add pointer to form in global object cache
      #        if(infolog.globalCache().isSet(curUserId() + 'SecEntryPointForm', #SecEntryPointFormKey))
      #        {
      #            skipRun = true;
      #            error(strFmt("@SDT79"));
      #            element.close();
      #            return;
      #        }
      #        else
      #        {
      #            infolog.globalCache().set(curUserId() + #SecEntryPointFormKey, #SecEntryPointFormKey, element);
      #        }
      #    }
      #    else
      #    {
      #        TestWorkSpace.enabled(false);
      #        TestWorkSpace.visible(false);
      #        ObjectType.enabled(false);
      #        ObjectType.visible(false);
      #        SettingsGroup.visible(false);
      #        CurrentObject.label(strFmt("@SDT80"));
      #        TraceButtonGroup.visible(false);
      #        TraceFileGroup.visible(false);
      #        AdminUIButtonGroup.visible(true);
      #        OpenRoleInNewWindow.enabled(false);
      #        YSplitter.visible(true);
      #        EntryPointReferenceGroup.visible(true);
      #    }
      #}
    ENDSOURCE
    SOURCE #InitControls
      #public void InitControls()
      #{
      #    //Initialize controls
      #    FilterOnPermissionChanges.visible(false);
      #    FilterOnPermissionChanges.value(0);
      #    EntryPointsGrid_OldAccessRight.visible(false);
      #}
    ENDSOURCE
    SOURCE #initUI
      #public void initUI()
      #{
      #    SecurityRole role;
      #    SecurityTask task;
      #    str objectLabel;
      #
      #    if(skipRun)
      #        return;
      #
      #    element.LoadMetaData();
      #
      #    if(securityNode != null)
      #    {
      #        if(strStartsWith(securityNode.treeNodePath(), #SecRolesPath))
      #        {
      #            ObjectType.selection(SysSecDevelopmentType::Role);
      #            select firstOnly Name from role where role.AotName == securityNode.AOTname();
      #            objectLabel = role.Name;
      #        }
      #        else if(strStartsWith(securityNode.treeNodePath(), #SecDutiesPath))
      #        {
      #            ObjectType.selection(SysSecDevelopmentType::Duty);
      #            select firstOnly Name from task where task.AotName == securityNode.AOTname() &&
      #                                                task.Type == SecurityTaskType::Duty;
      #            objectLabel = task.Name;
      #        }
      #        else
      #        {
      #            ObjectType.selection(SysSecDevelopmentType::Privilege);
      #            select firstOnly Name from task where task.AotName == securityNode.AOTname() &&
      #                                                task.Type == SecurityTaskType::Privilege;
      #            objectLabel = task.Name;
      #        }
      #        ObjectType.modified();
      #        CurrentObject.text(objectLabel);
      #        this.SelectObject();
      #    }
      #    else
      #    {
      #        SysSecEntryPointTmp_ds.executeQuery();
      #    }
      #}
    ENDSOURCE
    SOURCE #IsLayerModelInfoLoaded
      #public boolean IsLayerModelInfoLoaded()
      #{
      #    return layerModelLoaded;
      #}
    ENDSOURCE
    SOURCE #IsLicenseInfoLoaded
      #public boolean IsLicenseInfoLoaded()
      #{
      #    return licenseInfoLoaded;
      #}
    ENDSOURCE
    SOURCE #launch
      #public boolean launch(FormTreeItem _item)
      #{
      #    Menu         nodeParent;
      #    Object       objectUnder;
      #    TreeNode menuItemNode;
      #
      #    if ( !_item)
      #    {
      #        return false;
      #    }
      #
      #    objectUnder = _item.data();
      #    if(objectUnder is TreeNode)
      #    {
      #        nodeParent = objectUnder as TreeNode;
      #        if (!nodeParent)
      #        {
      #            return false;
      #        }
      #
      #        if (nodeParent.handle() == classnum(Menu))
      #        {
      #            return false;
      #        }
      #
      #        if(!isDeveloper())
      #            return false;
      #
      #        menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeParent);
      #        if(menuItemNode)
      #        {
      #            menuItemNode.AOTrun();
      #        }
      #    }
      #
      #    return true;
      #
      #}
    ENDSOURCE
    SOURCE #LoadAdditionalMetadata
      #public void LoadAdditionalMetadata()
      #{
      #    SysOperationProgress    progress;
      #    SecurableType curType = -1;
      #    TreeNode entryPointNode;
      #    AccessRight entryPointRight;
      #    str itemConfigurationKey;
      #    UserLicenseType maxLicenseType = UserLicenseType::None;
      #
      #    void updateUI()
      #    {
      #        SysSecEntryPointTmp_ds.research();
      #        SysSecEntryPointTmp_ds.refreshEx(-1);
      #        EntryPointsGrid.visible(true);
      #        infolog.endLengthyOperation();
      #    }
      #
      #    infolog.startLengthyOperation();
      #    EntryPointsGrid.visible(false);
      #
      #    try
      #    {
      #        select count(RecId) from SysSecEntryPointTmp;
      #
      #        progress = SysOperationProgress::newGeneral(#aviupdate, strFmt("@SDT81"), SysSecEntryPointTmp.RecId);
      #        progress.update(true);
      #        progress.updateInterval(1);
      #
      #        while select forUpdate SysSecEntryPointTmp
      #            order by SysSecEntryPointTmp.ObjectType
      #        {
      #            if(curType != SysSecEntryPointTmp.ObjectType)
      #            {
      #                curType = SysSecEntryPointTmp.ObjectType;
      #                progress.setText(strfmt("@SDT82", curType));
      #            }
      #
      #            entryPointNode = SysSecEntryPointManager::GetNodeForSecurableType(SysSecEntryPointTmp.ObjectType,
      #                SysSecEntryPointTmp.ObjectAOTName, SysSecEntryPointTmp.ObjectAOTChildName);
      #
      #            if(entryPointNode != null)
      #            {
      #                if(SysSecEntryPointTmp.ObjectType != SecurableType::ServiceOperation)
      #                {
      #                    //Update license info
      #                    SysSecEntryPointTmp.ViewUserLicense = symbol2Enum(enumNum(UserLicenseType), entryPointNode.AOTgetProperty('ViewUserLicense'));
      #                    SysSecEntryPointTmp.MaintainUserLicense = symbol2Enum(enumNum(UserLicenseType), entryPointNode.AOTgetProperty('MaintainUserLicense'));
      #                    SysSecEntryPointTmp.UserLicenseApplies = NoYes::No;
      #
      #                    itemConfigurationKey = entryPointNode.AOTgetProperty(#PropertyConfigurationKey);
      #                    if(!itemConfigurationKey || isConfigurationkeyEnabled(configurationKeyName2Id(itemConfigurationKey)))
      #                    {
      #                        SysSecEntryPointTmp.UserLicenseApplies = NoYes::Yes;
      #                        if(accessrightsMap != null && accessRightsMap.exists(SysSecEntryPointTmp.ObjectKey))
      #                        {
      #                            entryPointRight = accessRightsMap.lookup(SysSecEntryPointTmp.ObjectKey);
      #                            if(entryPointRight > AccessRight::View)
      #                            {
      #                                SysSecEntryPointTmp.EffectiveUserLicense = SysSecEntryPointTmp.MaintainUserLicense;
      #                            }
      #                            else if(entryPointRight == AccessRight::View)
      #                            {
      #                                SysSecEntryPointTmp.EffectiveUserLicense = SysSecEntryPointTmp.ViewUserLicense;
      #                            }
      #
      #                            if(SysSecEntryPointTmp.EffectiveUserLicense > maxLicenseType)
      #                            {
      #                                maxLicenseType = SysSecEntryPointTmp.EffectiveUserLicense;
      #                            }
      #                        }
      #                    }
      #
      #                    //Update label
      #                    SysSecEntryPointTmp.ObjectLabel = SysLabel::labelId2String2(entryPointNode.AOTgetProperty(#PropertyLabel));
      #
      #                    //Update layer/model information
      #                    if(SysSecEntryPointTmp.ObjectType == SecurableType::ServiceOperation)
      #                    {
      #                        //For service operations are not stored granular so display service layer/model
      #                        SysSecEntryPointTmp.ObjectAOTLayer = entryPointNode.AOTparent().AOTparent().AOTLayer();
      #                        SysSecEntryPointTmp.ObjectAOTModel = SysModelStore::displayName(entryPointNode.AOTparent().AOTparent().AOTGetModel());
      #                    }
      #                    else
      #                    {
      #                        SysSecEntryPointTmp.ObjectAOTLayer = entryPointNode.AOTLayer();
      #                        SysSecEntryPointTmp.ObjectAOTModel = SysModelStore::displayName(entryPointNode.AOTGetModel());
      #                    }
      #
      #                    SysSecEntryPointTmp.update();
      #                }
      #            }
      #
      #            progress.incCount();
      #        }
      #        licenseInfoLoaded = true;
      #        CurObjectLicenseType.selection(maxLicenseType);
      #        CurObjectLicenseType.visible(true);
      #        EntryPointsGrid_UserLicenseApplies.visible(true);
      #        EntryPointsGrid_EffectiveUserLicense.visible(true);
      #
      #        labelsLoaded = true;
      #        EntryPointsGrid_ObjectLabel.visible(true);
      #
      #        layerModelLoaded = true;
      #        EntryPointsGrid_ObjectAOTLayer.visible(true);
      #        EntryPointsGrid_ObjectAOTModel.visible(true);
      #    }
      #    catch
      #    {
      #        updateUI();
      #        throw Exception::Error;
      #    }
      #    updateUI();
      #}
    ENDSOURCE
    SOURCE #LoadEntryPointPermissions
      #public boolean LoadEntryPointPermissions(boolean _isLoadingNewObject)
      #{
      #    AccessRight accessRightVar, parentRight;
      #
      #    str typeKey;
      #    SecurableName securableName;
      #    SecurableChildName securableChildName;
      #    int j, k;
      #    SysSecEntryPointKey objectKey;
      #    container treeReferences;
      #    container menuParents;
      #    str menuPath, parentMenuPath;
      #    boolean foundNewRight = false;
      #    str servicePath;
      #    MapIterator mapIterator;
      #    container entryPointCon;
      #    container entryPointPermissions;
      #    int i;
      #
      #    accessRightsMap = new Map(Types::String, Types::Enum);
      #    if(currentRoleAOTName == '')
      #    {
      #        return true;
      #    }
      #
      #    entryPointPermissions = SysSecEntryPointManager::GetEntryPointPermissionsForRole(currentRoleID);
      #    for(i = 1; i <= conLen(entryPointPermissions); i = i+2)
      #    {
      #        objectKey = conPeek(entryPointPermissions, i);
      #
      #        entryPointCon = str2con(objectKey, '.');
      #        typeKey = conPeek(entryPointCon, 1);
      #        securableName = conPeek(entryPointCon, 2);
      #        securableChildName = '';
      #        if(conLen(entryPointCon) == 3)
      #        {
      #            securableChildName = conPeek(entryPointCon, 3);
      #        }
      #
      #        accessRightVar = conPeek(entryPointPermissions, i+1);
      #        accessRightsMap.insert(objectKey, accessRightVar);
      #
      #        //Update list view
      #        if(oldAccessRightsMap != null && oldAccessRightsMap.exists(objectKey))
      #        {
      #            if(accessRightVar != oldAccessRightsMap.lookup(objectKey))
      #            {
      #                foundNewRight = true;
      #            }
      #        }
      #        else
      #        {
      #            foundNewRight = true;
      #        }
      #
      #        update_recordSet SysSecEntryPointTmp setting OldAccessRight = SysSecEntryPointTmp.AccessRight, accessRight = accessRightVar
      #            where SysSecEntryPointTmp.ObjectKey == objectKey;
      #
      #        //Build the in memory access tree when loading a new object
      #        if(_isLoadingNewObject && typeKey == #EntryPointObjectKeyServiceOperation)
      #        {
      #            curAccessTree.insert(strFmt(#ServiceOperationPath,securableName, securableChildName), accessRightVar);
      #            servicePath = strFmt(#ServicePath,securableName);
      #
      #            parentRight = accessRight::NoAccess;
      #            if(curAccessTree.exists(servicePath))
      #            {
      #                parentRight = curAccessTree.lookup(servicePath);
      #            }
      #            if(parentRight < accessRightVar)
      #            {
      #                curAccessTree.remove(servicePath);
      #                curAccessTree.insert(servicePath, accessRightVar);
      #            }
      #        }
      #        else if(_isLoadingNewObject && menuItemTreeReferences.exists(objectKey))
      #        {
      #            treeReferences = menuItemTreeReferences.lookup(objectKey);
      #            for(j = 1; j <= conLen(treeReferences); j++)
      #            {
      #                menuPath = conPeek(treeReferences, j);
      #
      #                if(curAccessTree != null && curAccessTree.exists(menuPath))
      #                {
      #                    curAccessTree.remove(menuPath);
      #                    curAccessTree.insert(menuPath, accessRightVar);
      #
      #                    if(treeParents.exists(menuPath))
      #                    {
      #                        menuParents = treeParents.lookup(menuPath);
      #                    }
      #                    else
      #                    {
      #                        menuParents = conNull();
      #                    }
      #
      #                    //Update the parents
      #                    for(k = 1; k <= conLen(menuParents); k++)
      #                    {
      #                        parentMenuPath = conPeek(menuParents, k);
      #
      #                        if(curAccessTree.exists(parentMenuPath))
      #                        {
      #                            parentRight = curAccessTree.lookup(parentMenuPath);
      #                            if(parentRight < accessRightVar)
      #                            {
      #                                curAccessTree.remove(parentMenuPath);
      #                                curAccessTree.insert(parentMenuPath, accessRightVar);
      #                            }
      #                        }
      #                    }
      #                }
      #            }
      #        }
      #    }
      #
      #    //Update permissions that no longer exist and so are now NoAccess
      #    if(oldAccessRightsMap != null)
      #    {
      #        mapIterator = new MapIterator(oldAccessRightsMap);
      #
      #        while(mapIterator.more())
      #        {
      #            if(!accessRightsMap.exists(mapIterator.key()))
      #            {
      #                foundNewRight = true;
      #                //Update list view
      #                select forUpdate AccessRight from SysSecEntryPointTmp
      #                    where SysSecEntryPointTmp.ObjectKey == mapIterator.key();
      #
      #                SysSecEntryPointTmp.OldAccessRight = SysSecEntryPointTmp.AccessRight;
      #                SysSecEntryPointTmp.AccessRight = accessRight::NoAccess;
      #                SysSecEntryPointTmp.update();
      #            }
      #            mapIterator.next();
      #        }
      #    }
      #
      #    if(!_isLoadingNewObject && foundNewRight)
      #    {
      #        //Rebuild the in memory access tree to handle incremental changes
      #        element.ReBuildInMemoryAccessTree();
      #    }
      #
      #    return foundNewRight;
      #}
    ENDSOURCE
    SOURCE #LoadMetaData
      #public void LoadMetaData()
      #{
      #    List                    list = new List( Types::Class);
      #    #resAppl
      #    #Admin
      #    selectableDataArea      thisCompany = curext();
      #    SysOperationProgress    progress;
      #    Menu                    node;
      #    Label                   label = new Label();
      #
      #    infolog.startLengthyOperation();
      #    progress = SysOperationProgress::newGeneral(#aviupdate, strFmt("@SDT83"), 2);
      #    progress.updateInterval(0);
      #
      #    //Prepare tree
      #    MenuTree.setImagelist(imageListAppl_AOT.imageList());
      #    MenuTree.setStateImagelist(imageList_access.imageList());
      #    element.InitControls();
      #
      #    //Load and calculate permissions
      #    progress.setText(strfmt("@SDT84"));
      #    element.LoadSystemUserPermissions();
      #    SysSecEntryPointTmp.setTmpData(element.PopulateEntryPoints());
      #    curAccessTree = null;
      #    progress.incCount();
      #    progress.setText(strFmt("@SDT85"));
      #
      #    element.BuildMetaDataCaches();
      #
      #    //Initialize main menu tree
      #    node = TreeNode::findNode(strFmt('%1\\%2', #MenusPath, #MainMenu));
      #    richClientRootItemIdx = SysFormTreeControl::addTreeItem(MenuTree, "@SYS322952",
      #        FormTreeAdd::Root, node, imageListAppl_AOT.image(node.AOTbitmapId()), node.AOTchildNodeCount());
      #    MenuTree.expand(richClientRootItemIdx);
      #
      #    //Use sec admin UI code for EP tree
      #    node = TreeNode::findNode(strFmt('%1', #WebPath));
      #    webRootItemIdx = SysFormTreeControl::addTreeItem(MenuTree, "@SYS322953",
      #        FormTreeAdd::Root, node, imageListAppl_AOT.image(node.AOTbitmapId()), node.AOTchildNodeCount());
      #
      #    //Initialize services tree
      #    node = TreeNode::findNode(strFmt('%1', #ServicesPath));
      #    servicesRootItemIdx = SysFormTreeControl::addTreeItem(MenuTree, "@SYS322954",
      #        FormTreeAdd::Root, node, imageListAppl_AOT.image(node.AOTbitmapId()), node.AOTchildNodeCount());
      #
      #    infolog.endLengthyOperation();
      #}
    ENDSOURCE
    SOURCE #LoadPermissions
      #public void LoadPermissions()
      #{
      #    this.SetPermissions(true);
      #}
    ENDSOURCE
    SOURCE #LoadRecording
      #public void LoadRecording()
      #{
      #    #File
      #    str fileName;
      #    XmlDocument doc;
      #    XmlElement list, entryPointElement;
      #    SecurableType entryPointType;
      #    SecurableName securableName;
      #    SecurableChildName securableChildName;
      #    SysSecEntryPointKey entryPointKey;
      #
      #    void resetUI()
      #    {
      #        EntryPointsGrid.visible(true);
      #        infolog.endLengthyOperation();
      #        element.unLock();
      #    }
      #
      #    element.CheckRecordingIsDirty();
      #
      #    fileName = WinAPI::getOpenFileName(element.hWnd(),["@SDT86", #AllFilesName + #xml],
      #                prevRecordingFilePath, strFmt("@SDT87"), '', '', 0);
      #    if (fileName != '')
      #    {
      #        prevRecordingFilePath = System.IO.Path::GetDirectoryName(fileName);
      #
      #        doc = SysImportExportHelper::importXMLFromFile(fileName);
      #        if(doc == null)
      #        {
      #            throw error(strFmt("@SDT88"));
      #        }
      #        list = doc.getNamedElement(#RecordingFileXmlRoot);
      #        if(list == null)
      #        {
      #            throw error(strFmt("@SDT88"));
      #        }
      #
      #        //Clear existing recorded objects
      #        element.lock();
      #        infolog.startLengthyOperation();
      #        EntryPointsGrid.visible(false);
      #
      #        try
      #        {
      #            update_recordSet SysSecEntryPointTmp setting Recorded = NoYes::No;
      #            entryPointElement = list.firstChild();
      #            while(entryPointElement)
      #            {
      #                entryPointType = symbol2Enum(enumnum(SecurableType),
      #                                    entryPointElement.getAttribute(#RecordingFileXmlElementTypeAttribute));
      #                securableName = entryPointElement.getAttribute(#RecordingFileXmlElementAOTNameAttribute);
      #                securableChildName = entryPointElement.getAttribute(#RecordingFileXmlElementOperationAttribute);
      #
      #                entryPointKey = strFmt('%1.%2.%3', SysSecEntryPointManager::GetTypeKeyForSecurableType(entryPointType),
      #                        strLwr(securableName), strLwr(securableChildName));
      #
      #                select forUpdate SysSecEntryPointTmp where SysSecEntryPointTmp.ObjectKey == entryPointKey;
      #                SysSecEntryPointTmp.Recorded = NoYes::Yes;
      #                SysSecEntryPointTmp.update();
      #
      #                entryPointElement = entryPointElement.nextSibling();
      #            }
      #            element.AddFilterOnRecordedObjects();
      #            SysSecEntryPointTmp_ds.executeQuery();
      #        }
      #        catch
      #        {
      #            resetUI();
      #            throw Exception::Error;
      #        }
      #        resetUI();
      #    }
      #}
    ENDSOURCE
    SOURCE #LoadSystemUserPermissions
      #public void LoadSystemUserPermissions()
      #{
      #    SecurityRole systemUserRole;
      #    container permissionsContainer, permission;
      #    int i;
      #    SecurableType type;
      #    str typeKey, securableName, securableChildName, objectKey;
      #    AccessRight accessRight;
      #
      #    systemUserAccessRightsMap = new Map(Types::String, Types::Enum);
      #
      #    select firstOnly RecId from systemUserRole where systemUserRole.AotName == 'SystemUser';
      #    permissionsContainer = SecurityUtil::GetRolePermissions(systemUserRole.RecId);
      #
      #    for (i = 1; i <= conLen(permissionsContainer); i++)
      #    {
      #        permission = conPeek(permissionsContainer, i);
      #        type = conPeek(permission,2);
      #        typeKey = SysSecEntryPointManager::GetTypeKeyForSecurableType(type);
      #        securableName = conPeek(permission,1);
      #        securableChildName = conPeek(permission,3);
      #        accessRight = conPeek(permission,4);
      #        objectKey = strFmt('%1.%2.%3', typeKey, strLwr(securableName), strLwr(securableChildName));
      #        systemUserAccessRightsMap.insert(objectKey, accessRight);
      #    }
      #}
    ENDSOURCE
    SOURCE #MapDutyOrPrivilegeToRole
      #public void MapDutyOrPrivilegeToRole()
      #{
      #    TreeNode devRole = SysSecEntryPointManager::FindOrCreateUniqueRoleForCurrentUser();
      #    SecurityRole securityRole;
      #    TreeNode childNode;
      #    TreeNodeIterator tIterator;
      #    str typeToAdd;
      #    SecurityTask task;
      #
      #    if(!SysSecEntryPointManager::ObjectEditableVCS(devRole))
      #    {
      #        error(strFmt("@SDT89", devRole.AOTname()));
      #        return;
      #    }
      #
      #    //Remove existing duty/privileges
      #    tIterator = devRole.AOTfindChild('Duties').AOTiterator();
      #    childNode = tIterator.next();
      #    while(childNode)
      #    {
      #        childNode.AOTdelete();
      #        childNode = tIterator.next();
      #    }
      #
      #    tIterator = devRole.AOTfindChild('Privileges').AOTiterator();
      #    childNode = tIterator.next();
      #    while(childNode)
      #    {
      #        childNode.AOTdelete();
      #        childNode = tIterator.next();
      #    }
      #
      #    if(CurrentObject.text() != '')
      #    {
      #        //Add duty/privilege
      #        typeToAdd = 'Privileges';
      #        if(element.CurrentDevelopmentType() == SysSecDevelopmentType::Duty)
      #        {
      #            typeToAdd = 'Duties';
      #            select firstOnly AOTName from task where task.Name == CurrentObject.text() && task.Type == SecurityTaskType::Duty;
      #        }
      #        else
      #        {
      #            select firstOnly AOTName from task where task.Name == CurrentObject.text() && task.Type == SecurityTaskType::Privilege;
      #        }
      #
      #        if(task.AotName == '')
      #        {
      #            devRole.AOTrestore();
      #            error(strFmt("@SDT90", element.CurrentDevelopmentType(), currentObject.text()));
      #            return;
      #        }
      #
      #        //Validate object exists
      #        if(TreeNode::findNode(strFmt('%1\\%2', #SecurityPath, typeToAdd)).AOTfindChild(task.AotName) == null)
      #        {
      #            devRole.AOTrestore();
      #            error(strFmt("@SDT91", CurrentObject.text()));
      #            return;
      #        }
      #
      #        currentDevelopmentObject = task.AotName;
      #        currentRoleAOTName = devRole.AOTname();
      #        currentRoleName = devRole.AOTgetProperty(#PropertyLabel);
      #
      #        select RecId from securityRole where securityRole.AotName == currentRoleAOTName;
      #        currentRoleId = securityRole.RecId;
      #
      #        childNode = devRole.AOTfindChild(typeToAdd).AOTadd(task.AotName);
      #        childNode.AOTsetProperty('Name', element.CurrentDevelopmentObject());
      #    }
      #
      #    //Avoid current form loosing focus due to compiler output
      #    WinAPI::enableWindow(infolog.hWnd(), false);
      #    try
      #    {
      #        devRole.AOTsave();
      #    }
      #    catch
      #    {
      #        WinAPI::enableWindow(infolog.hWnd(), true);
      #        throw Exception::Error;
      #    }
      #    WinAPI::enableWindow(infolog.hWnd(), true);
      #}
    ENDSOURCE
    SOURCE #MarkObjectsAsRecorded
      #public void MarkObjectsAsRecorded(List _entryPointkeys)
      #{
      #    ListEnumerator listEnumerator = _entryPointkeys.getEnumerator();
      #    SysSecEntryPointKey curObjectKey;
      #
      #    element.lockWindowUpdate(true);
      #
      #    ttsBegin;
      #    update_recordSet SysSecEntryPointTmp setting Recorded = NoYes::No;
      #    ttsCommit;
      #
      #    while(listEnumerator.moveNext())
      #    {
      #        curObjectKey = listEnumerator.current();
      #
      #        select firstOnly forUpdate SysSecEntryPointTmp where SysSecEntryPointTmp.ObjectKey == curObjectKey;
      #        SysSecEntryPointTmp.Recorded = NoYes::Yes;
      #        SysSecEntryPointTmp.update();
      #    }
      #
      #    element.AddFilterOnRecordedObjects();
      #    SysSecEntryPointTmp_ds.executeQuery();
      #
      #    element.lockWindowUpdate(false);
      #    WinAPI::setFocus(element.hWnd());
      #}
    ENDSOURCE
    SOURCE #OpenRoleWorkSpace
      #public void OpenRoleWorkSpace(str _treeNodeToRun = '')
      #{
      #    SecurityUserRole userRole;
      #    SecurityRole sysAdminRole, systemUserRole;
      #    DialogButton dialogButton;
      #    str warningMessage;
      #    str dialogOwner;
      #    Map inMemOrgs;
      #    MapEnumerator orgsEnumerator;
      #    OMUserRoleOrganization userRoleOrganization;
      #
      #    if(currentRoleAOTName == '')
      #        return;
      #
      #    if(SysSecEntryPointManager::EnvironmentHasADGroups())
      #    {
      #        throw error(strFmt("@SDT92"));
      #    }
      #
      #    if(!isDeveloper())
      #    {
      #        throw error(strFmt("@SDT93"));
      #    }
      #
      #    if(_treeNodeToRun)
      #    {
      #        if(!SysSecEntryPointManager::IsQuickLaunchEnabled())
      #        {
      #            dialogButton = Box::yesNo(strFmt("@SDT94"),
      #                            dialogButton::Yes, strFmt("@SDT46"));
      #
      #            if(dialogButton == DialogButton::No)
      #            {
      #                return;
      #            }
      #
      #            if(!SysSecEntryPointManager::EnableQuickLaunch())
      #            {
      #                return;
      #            }
      #        }
      #    }
      #
      #    select firstOnly Recid from sysAdminRole where sysAdminRole.AotName == '-SYSADMIN-';
      #    select firstOnly RecId from systemUserRole where systemUserRole.AotName == 'SystemUser';
      #
      #    if(!disableSysAdminRoleAssignment)
      #    {
      #        warningMessage = strFmt("@SDT95",
      #                                currentRoleName, "@SYS323369", "@SYS344030");
      #
      #        dialogOwner = 'SecurityWorkspaceWarning';
      #    }
      #    else
      #    {
      #        warningMessage = strFmt("@SDT96",
      #                                currentRoleName, "@SYS323369", "@SYS344030");
      #
      #        select RecId from userRole where userRole.SecurityRole == sysAdminRole.RecId && userRole.User == curUserId();
      #        warningMessage += '\n\n';
      #        warningMessage += strFmt("@SDT97", "@SYS344030");
      #        warningMessage += '\n\t';
      #        warningMessage += strFmt("@SDT98");
      #        warningMessage += '\n\t';
      #        warningMessage += strFmt("@SDT99");
      #        warningMessage += '\n\t';
      #        warningMessage += strFmt("@SDT100", userRole.RecId);
      #
      #        dialogOwner = 'SecurityWorkspaceWarningDisableSysAdmin';
      #    }
      #
      #    dialogButton = Box::yesNoOnce(strFmt("@SDT101"),
      #                            warningMessage, DialogButton::Yes, dialogOwner);
      #
      #    if(dialogButton != DialogButton::Yes)
      #    {
      #        return;
      #    }
      #
      #    //Assign user to current role
      #
      #    //Disable all current role assigments to user except SysAdmin role
      #    ttsBegin;
      #    try
      #    {
      #        while select forUpdate userRole where userRole.User == curUserId() &&
      #                    userRole.SecurityRole != sysAdminRole.RecId &&
      #                    userRole.SecurityRole != currentRoleId &&
      #                    userRole.SecurityRole != systemUserRole.RecId &&
      #                    userRole.AssignmentStatus != RoleAssignmentStatus::Disabled
      #        {
      #            if(disabledUserRolesMap == null)
      #            {
      #                disabledUserRolesMap = new Map(Types::Int64, Types::Int64);
      #            }
      #            disabledUserRolesMap.insert(userRole.RecId, userRole.AssignmentStatus);
      #            userRole.AssignmentStatus = RoleAssignmentStatus::Disabled;
      #            userRole.update();
      #        }
      #
      #        select forUpdate userRole where userRole.User == curUserId() &&
      #                            userRole.SecurityRole == currentRoleID;
      #
      #        if(userRole.RecId == 0)
      #        {
      #            //Assign user to role
      #            userRole.SecurityRole = currentRoleId;
      #            userRole.User = curUserId();
      #            userRole.insert();
      #            newUserRole = userRole.RecId;
      #        }
      #        else
      #        {
      #            //Enable the role assignment if it was disabled
      #            if(userRole.AssignmentStatus == RoleAssignmentStatus::Disabled)
      #            {
      #                userRole.AssignmentStatus = RoleAssignmentStatus::Enabled;
      #                userRole.update();
      #                curUserRoleDisabled = userRole.RecId;
      #            }
      #        }
      #
      #        userRoleOrgRecords = new Map(Types::Int64, Types::Int64);
      #
      #        //Assign organizations
      #        if(infolog.globalCache().isSet(curUserId() + #AssignOMOwnerKey, #AssignOMKey))
      #        {
      #            inMemOrgs = infolog.globalCache().get(curUserId() + #AssignOMOwnerKey, #AssignOMKey);
      #            if(inMemOrgs != null)
      #            {
      #                orgsEnumerator = inMemOrgs.getEnumerator();
      #                while(orgsEnumerator.moveNext())
      #                {
      #                    userRoleOrganization.User = curUserId();
      #                    userRoleOrganization.OMInternalOrganization = orgsEnumerator.currentKey();
      #                    userRoleOrganization.omHierarchyType = orgsEnumerator.currentValue();
      #                    userRoleOrganization.SecurityRole = currentRoleID;
      #                    userRoleOrganization.insert();
      #                    userRoleOrgRecords.insert(userRoleOrganization.RecId, 0);
      #                }
      #
      #                //Synchronize the user role conditions
      #                SysSecurityDynamicRoleAssignment::synchronize(currentRoleID);
      #            }
      #        }
      #    }
      #    catch
      #    {
      #        //If exception thrown transaction will not be commited and aborted so empty caches
      #        disabledUserRolesMap = null;
      #        newUserRole = 0;
      #        curUserRoleDisabled = 0;
      #        throw Exception::Error;
      #    }
      #    ttsCommit;
      #
      #    //Quick launch
      #    if(_treeNodeToRun)
      #    {
      #        if(infolog.globalCache().isSet(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey))
      #        {
      #            infolog.globalCache().remove(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey);
      #        }
      #        infolog.globalCache().set(curUserId() + #SecEntryPoint, #OpenInWorkspaceKey, _treeNodeToRun, false);
      #    }
      #
      #    //Reload permissions on client
      #    SysSecurity::reload(false, false, false, false);
      #
      #    //Switch off sysadmin mode
      #    if(disableSysAdminRoleAssignment)
      #    {
      #        SysSecEntryPointManager::DisableCurrentSysAdminAssignment();
      #    }
      #
      #    SecurityUtil::sysAdminMode(false);
      #    wasFormRunHookEnabled = MarkControlsButtonState.toggleValue();
      #
      #    if(wasFormRunHookEnabled)
      #    {
      #        SysSecEntryPointManager::FormRunHookStatus(false);
      #    }
      #
      #    try
      #    {
      #        curMainWindowHandle = infolog.hWnd();
      #
      #        //Disable current main window
      #        WinAPI::enableWindow(curMainWindowHandle, false);
      #
      #        //Disable current form
      #        WinAPI::enableWindow(element.hWnd(), false);
      #
      #        workSpaceHandle = infolog.createWorkspaceWindow();
      #        element.setTimeOut(identifierStr(WaitForWorkSpaceToClose), 200, true);
      #    }
      #    catch
      #    {
      #        //If any exception occured turn on sysAdmin again
      #        SecurityUtil::sysAdminMode(true);
      #
      #        if(wasFormRunHookEnabled)
      #        {
      #            SysSecEntryPointManager::FormRunHookStatus(true);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #PopulateEntryPoints
      #public SysSecEntryPointTmp PopulateEntryPoints()
      #{
      #    SysSecEntryPointTmp entryPoints;
      #    TreeNode entryPointNode;
      #    str typeKey;
      #    str objectKey;
      #    str labelValue;
      #    container entryPointsCon, entryPointCon;
      #    int i;
      #    boolean isDev = isDeveloper();
      #
      #    entryPointsCon = SysSecEntryPointManager::GetEntryPointsContainer();
      #    ttsBegin;
      #    for(i = 1; i <= conLen(entryPointsCon); i++)
      #    {
      #        entryPoints.clear();
      #        entryPointCon = str2con(conPeek(entryPointsCon, i), '.');
      #
      #        entryPoints.ObjectID = conPeek(entryPointCon, 1);
      #        entryPoints.ObjectType = conPeek(entryPointCon, 2);
      #        entryPoints.ObjectAOTName = conPeek(entryPointCon, 3);
      #        if(conLen(entryPointCon) == 4)
      #        {
      #            entryPoints.ObjectAOTChildName = conPeek(entryPointCon, 4);
      #        }
      #
      #        if(entryPoints.ObjectType == SecurableType::ServiceOperation)
      #        {
      #            entryPoints.ObjectAOTDisplayName = strFmt('%1.%2', entryPoints.ObjectAOTName, entryPoints.ObjectAOTChildName);
      #        }
      #        else
      #        {
      #            entryPoints.ObjectAOTDisplayName = entryPoints.ObjectAOTName;
      #        }
      #
      #        typeKey = SysSecEntryPointManager::GetTypeKeyForSecurableType(entryPoints.ObjectType);
      #        objectKey = strFmt('%1.%2.%3', typeKey, strLwr(entryPoints.ObjectAOTName), strLwr(entryPoints.ObjectAOTChildName));
      #        entryPoints.ObjectKey = objectKey;
      #
      #        if(systemUserAccessRightsMap != null && systemUserAccessRightsMap.exists(objectKey))
      #        {
      #            entryPoints.SystemUserRight = systemUserAccessRightsMap.lookup(objectKey);
      #        }
      #
      #        //Load labels by default for business users
      #        if(!isDev && entryPoints.ObjectType != SecurableType::ServiceOperation)
      #        {
      #            entryPointNode = SysSecEntryPointManager::GetNodeForSecurableType(entryPoints.ObjectType,
      #                entryPoints.ObjectAOTName, entryPoints.ObjectAOTChildName);
      #
      #            if(entryPointNode != null)
      #            {
      #                labelValue = findProperty(entryPointNode.AOTgetProperties(), #PropertyLabel);
      #                entryPoints.ObjectLabel = SysLabel::labelId2String2(labelValue);
      #            }
      #        }
      #
      #        entryPoints.insert();
      #    }
      #
      #    ttsCommit;
      #
      #    if(!isDev)
      #    {
      #        labelsLoaded = true;
      #        EntryPointsGrid_ObjectLabel.visible(true);
      #    }
      #
      #    return entryPoints;
      #}
    ENDSOURCE
    SOURCE #ReBuildInMemoryAccessTree
      #public void ReBuildInMemoryAccessTree()
      #{
      #    #AOT
      #    TreeNode tn;
      #    Map parentsMap;
      #    MapEnumerator mapEnum;
      #    str key;
      #    TreeNodeIterator servicesIterator, operationsIterator;
      #    TreeNode servicesNode, serviceNode, operationNode;
      #    AccessRight right, serviceRight;
      #    boolean serviceHasChildWithNewRight;
      #
      #    AccessRight processMenuNode(TreeNode _menuNode)
      #    {
      #        TreeNode subMenuNode;
      #        TreeNode childNode;
      #        AccessRight curAccessRight = AccessRight::NoAccess;
      #        AccessRight childAccessRight = -1;
      #        AccessRight oldAccessRightTmp;
      #
      #        key = element.GetMenuItemKeyForNode(_menuNode);
      #
      #        curAccessRight = AccessRight::NoAccess;
      #        if(accessRightsMap != null && accessRightsMap.exists(key))
      #        {
      #            curAccessRight = accessRightsMap.lookup(key);
      #        }
      #
      #        childNode = _menuNode.AOTfirstChild();
      #        while (childNode)
      #        {
      #            parentsMap.insert(_menuNode.treeNodePath(), '');
      #            switch (childNode.handle())
      #            {
      #                case classNum(MenuReference):
      #                    subMenuNode = TreeNode::findNode(#MenusPath +'\\' +childNode.AOTname());
      #                    if(subMenuNode != null)
      #                    {
      #                        childAccessRight = processMenuNode(subMenuNode);
      #                    }
      #                    break;
      #
      #                default:
      #                    childAccessRight = processMenuNode(childNode);
      #                    break;
      #            }
      #            parentsMap.remove(_menuNode.treeNodePath());
      #
      #            if(childAccessRight > curAccessRight)
      #            {
      #                curAccessRight = childAccessRight;
      #            }
      #            childNode = childNode.AOTnextSibling();
      #        }
      #
      #        if(oldAccessTree.exists(_menuNode.treeNodePath()))
      #        {
      #            oldAccessRightTmp = oldAccessTree.lookup(_menuNode.treeNodePath());
      #
      #            if(oldAccessRightTmp != curAccessRight)
      #            {
      #                //Need to store the parents so we can indicate them in main menu
      #                mapEnum = parentsMap.getEnumerator();
      #
      #                while(mapEnum.moveNext())
      #                {
      #                    if(!nodeHasChildWithNewAccessTree.exists(mapEnum.currentKey()))
      #                    {
      #                        nodeHasChildWithNewAccessTree.insert(mapEnum.currentKey(), '');
      #                    }
      #                }
      #            }
      #        }
      #
      #        curAccessTree.insert(_menuNode.treeNodePath(), curAccessRight);
      #
      #        return curAccessRight;
      #    }
      #
      #    curAccessTree = new Map(Types::String, Types::Enum);
      #    parentsMap = new Map(Types::String, Types::String);
      #
      #    //Process rich client
      #    tn = TreeNode::findNode(#MenusPath + @'\MainMenu');
      #    processMenuNode(tn);
      #
      #    //Process service operations
      #    servicesNode = TreeNode::findNode(#ServicesPath);
      #    servicesIterator = servicesNode.AOTiterator();
      #    serviceNode = servicesIterator.next();
      #    while(serviceNode != null)
      #    {
      #        serviceRight = AccessRight::NoAccess;
      #        serviceHasChildWithNewRight = false;
      #        operationsIterator = serviceNode.AOTfindChild(#ServiceOperations).AOTiterator();
      #        operationNode = operationsIterator.next();
      #        while(operationNode != null)
      #        {
      #            key = SysSecEntryPointManager::GetKeyForEntryPointNode(operationNode);
      #            right = AccessRight::NoAccess;
      #            if(accessRightsMap != null && accessRightsMap.exists(key))
      #            {
      #                right = accessRightsMap.lookup(key);
      #            }
      #            if(right > serviceRight)
      #            {
      #                serviceRight = right;
      #            }
      #
      #            if(oldAccessTree != null && oldAccessTree.exists(operationNode.treeNodePath()))
      #            {
      #                if(right != oldAccessTree.lookup(operationNode.treeNodePath()))
      #                {
      #                    serviceHasChildWithNewRight = true;
      #                }
      #            }
      #
      #            curAccessTree.insert(operationNode.treeNodePath(), right);
      #            operationNode = operationsIterator.next();
      #        }
      #        curAccessTree.insert(serviceNode.treeNodePath(), serviceRight);
      #        if(serviceHasChildWithNewRight && nodeHasChildWithNewAccessTree != null &&
      #            !nodeHasChildWithNewAccessTree.exists(serviceNode.treeNodePath()))
      #        {
      #            nodeHasChildWithNewAccessTree.insert(serviceNode.treeNodePath(), '');
      #        }
      #
      #        serviceNode = servicesIterator.next();
      #    }
      #}
    ENDSOURCE
    SOURCE #ResetTraceButtons
      #public void ResetTraceButtons()
      #{
      #    SecurityRecorder.enabled(true);
      #    LoadEPtrace.enabled(true);
      #    SwitchBackToEPTraceForm.visible(false);
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    if(SysSecEntryPointManager::IsFormHighlightEnabled() && !SysSecEntryPointManager::SkipDefaultFormRunHook())
      #    {
      #        SysSecEntryPointManager::FormRunHookStatus(true);
      #        MarkControlsButtonState.toggleValue(1);
      #        MarkControlsButtonState.text("@SDT102");
      #    }
      #
      #    if(SysSecEntryPointManager::DisableSysAdminAssignmentSetting())
      #    {
      #        disableSysAdminRoleAssignment = true;
      #        SecurityWorkspaceEPSSRS.toggleValue(1);
      #        SecurityWorkspaceEPSSRS.text("@SDT103");
      #    }
      #    else
      #    {
      #        disableSysAdminRoleAssignment = false;
      #    }
      #
      #    super();
      #
      #    element.setTimeOut(identifierStr(initUI), 0, true);
      #}
    ENDSOURCE
    SOURCE #SaveRecording
      #public void SaveRecording()
      #{
      #    XmlDocument doc;
      #    XmlElement list, entryPointElement;
      #    str fileName;
      #    #File
      #
      #    void updateUI()
      #    {
      #        SysSecEntryPointTmp_ds.research();
      #        element.unlock();
      #        EntryPointsGrid.visible(true);
      #        infolog.endLengthyOperation();
      #    }
      #
      #    EntryPointsGrid.visible(false);
      #    element.lock();
      #
      #    try
      #    {
      #        select count(RecId) from SysSecEntryPointTmp where SysSecEntryPointTmp.Recorded == NoYes::Yes;
      #        if(SysSecEntryPointTmp.RecId == 0)
      #        {
      #            info(strFmt("@SDT104"));
      #        }
      #        else
      #        {
      #            fileName = WinAPI::getSaveFileName(element.hWnd(),["@SDT86", #AllFilesName + #xml],
      #                prevRecordingFilePath, strFmt("@SDT105"), '', '', 0);
      #            if(fileName != '')
      #            {
      #                infolog.startLengthyOperation();
      #                prevRecordingFilePath = System.IO.Path::GetDirectoryName(fileName);
      #                doc = XmlDocument::newBlank();
      #                list = doc.appendChild(doc.createElement(#RecordingFileXmlRoot));
      #                while select SysSecEntryPointTmp where SysSecEntryPointTmp.Recorded == NoYes::Yes
      #                {
      #                    entryPointElement = doc.createElement(#RecordingFileXmlElement);
      #                    entryPointElement.setAttribute(#RecordingFileXmlElementTypeAttribute,
      #                                                enum2Symbol(enumNum(SecurableType), SysSecEntryPointTmp.ObjectType));
      #                    entryPointElement.setAttribute(#RecordingFileXmlElementAOTNameAttribute, SysSecEntryPointTmp.ObjectAOTName);
      #                    if(SysSecEntryPointTmp.ObjectAOTChildName != '')
      #                    {
      #                        entryPointElement.setAttribute(#RecordingFileXmlElementOperationAttribute,
      #                                                    SysSecEntryPointTmp.ObjectAOTChildName);
      #                    }
      #                    list.appendChild(entryPointElement);
      #                }
      #                doc.save(fileName);
      #                recordingIsDirty = false;
      #            }
      #        }
      #    }
      #    catch
      #    {
      #        updateUI();
      #        throw Exception::Error;
      #    }
      #    updateUI();
      #}
    ENDSOURCE
    SOURCE #SelectObject
      #public void SelectObject()
      #{
      #    boolean needToUpdateRoleMapping = false;
      #    SecurityRole role;
      #    str prevDevelopmentObject = currentDevelopmentObject;
      #
      #    currentDevelopmentType = ObjectType.selection();
      #    currentDevelopmentObject = '';
      #    currentRoleName = '';
      #    currentRoleAOTName = '';
      #
      #    if(currentDevelopmentType != SysSecDevelopmentType::Role)
      #    {
      #        element.MapDutyOrPrivilegeToRole();
      #    }
      #    else
      #    {
      #        if(CurrentObject.text() == strFmt("@SYS344030"))
      #        {
      #            error(strFmt("@SDT106", CurrentObject.text()));
      #        }
      #        else if(CurrentObject.text() != '')
      #        {
      #            //Verify role exists
      #            select firstOnly recid, Name, AOTName from role where role.Name == CurrentObject.text();
      #            if(role.RecId != 0)
      #            {
      #                currentRoleName = role.Name;
      #                currentRoleAOTName = role.AotName;
      #                currentDevelopmentObject = role.AotName;
      #                currentRoleID = role.RecId;
      #            }
      #            else
      #            {
      #                error(strFmt("@SDT107", CurrentObject.text()));
      #            }
      #        }
      #    }
      #
      #    if(currentRoleAOTName == '')
      #    {
      #        TestWorkSpace.enabled(false);
      #        OpenRoleInNewWindow.enabled(false);
      #        ShowReferences.enabled(false);
      #    }
      #    else
      #    {
      #        OpenRoleInNewWindow.enabled(true);
      #        ShowReferences.enabled(true);
      #        if(!isRecording)
      #        {
      #            TestWorkSpace.enabled(true);
      #        }
      #    }
      #
      #    //No need to update permissions when changing type and nothing was selected already
      #    if(currentDevelopmentObject == '' && prevDevelopmentObject == '')
      #    {
      #        return;
      #    }
      #
      #    element.setTimeOut(identifierStr(LoadPermissions), 0, true);
      #}
    ENDSOURCE
    SOURCE #SetPermissions
      #public void SetPermissions(boolean _newObject = false)
      #{
      #    SysOperationProgress    progress;
      #    #AviFiles
      #    MapEnumerator mapEnum;
      #    str progressText = strFmt("@SDT108");
      #
      #    SysSecEntryPointTmp tmpData;
      #    Map selectedRows = new Map(Types::Int64, Types::Record);
      #    MapIterator mapIter;
      #    int c;
      #    SysSecEntryPointTmp curRecord;
      #    boolean foundNewRight;
      #
      #    void resetUI()
      #    {
      #        EntryPointsGrid.visible(true);
      #        infolog.endLengthyOperation();
      #        element.lockWindowUpdate(false);
      #    }
      #
      #    if(richClientRootItemIdx == 0)
      #        return;
      #
      #    infolog.startLengthyOperation();
      #
      #    if(!_newObject)
      #    {
      #        progressText = strFmt("@SDT109");
      #
      #        //Make sure we have link between dev role and duty or privilege
      #        if(element.CurrentDevelopmentType() != SysSecDevelopmentType::Role)
      #        {
      #            currentDevelopmentObject = '';
      #            currentRoleName = '';
      #            currentRoleAOTName = '';
      #            element.MapDutyOrPrivilegeToRole();
      #        }
      #    }
      #
      #    progress = SysOperationProgress::newGeneral(#aviupdate, progressText, 1 + (licenseInfoLoaded ? 1 : 0));
      #    progress.updateInterval(0);
      #    progress.setText(progressText);
      #
      #    EntryPointsGrid.visible(false);
      #
      #    curRecord = SysSecEntryPointTmp.data();
      #    for (tmpData = getFirstSelection(SysSecEntryPointTmp_ds);
      #            tmpData;
      #            tmpData = SysSecEntryPointTmp_ds.getNext())
      #    {
      #        c++;
      #        if(c > 300) //Too many selected rows, drop selection
      #        {
      #            selectedRows = null;
      #            break;
      #        }
      #        selectedRows.insert(tmpData.RecId, tmpData);
      #    }
      #
      #    prevIndicatedItems = newIndicatedItems;
      #    newIndicatedItems = new Map(Types::Int64, Types::Int64);
      #
      #    element.lockWindowUpdate(true);
      #
      #    try
      #    {
      #        if(_newObject || currentRoleAOTName == '')
      #        {
      #            element.InitControls();
      #
      #            curAccessTree = new Map(Types::String, Types::Enum);
      #            mapEnum = treeParents.getEnumerator();
      #            while(mapEnum.moveNext())
      #            {
      #                curAccessTree.insert(mapEnum.currentKey(), AccessRight::NoAccess);
      #            }
      #            oldAccessTree = null;
      #            oldAccessRightsMap = null;
      #
      #            ttsBegin;
      #            update_recordSet SysSecEntryPointTmp
      #                setting AccessRight = AccessRight::NoAccess, OldAccessRight = AccessRight::NoAccess;
      #            ttsCommit;
      #        }
      #        else
      #        {
      #            FilterOnPermissionChanges.visible(true);
      #            EntryPointsGrid_OldAccessRight.visible(true);
      #            oldAccessRightsMap = accessRightsMap;
      #            oldAccessTree = curAccessTree;
      #        }
      #        EntryPointsGrid_AccessRight.visible((currentRoleAOTName != ''));
      #
      #        nodeHasChildWithNewAccessTree = new Map(Types::String, Types::String);
      #        oldAccessTreeDiscoveredNodes = new Map(Types::Int64, Types::Enum);
      #
      #        foundNewRight = element.LoadEntryPointPermissions(_newObject);
      #
      #        element.UpdateAccessRightsInTree(MenuTree.getChild(richClientRootItemIdx), _newObject);
      #        element.UpdateAccessRightsInTree(MenuTree.getChild(webRootItemIdx), _newObject);
      #        element.UpdateAccessRightsInTree(MenuTree.getChild(servicesRootItemIdx), _newObject);
      #
      #        if(_newObject || (!_newObject && foundNewRight))
      #        {
      #            if(licenseInfoLoaded)
      #            {
      #                progress.incCount();
      #                progress.setText(strFmt("@SDT110"));
      #                element.UpdateLicenseTypes();
      #            }
      #        }
      #
      #        SysSecEntryPointTmp_ds.research();
      #        SysSecEntryPointTmp_ds.refreshEx(-1);
      #        SysSecEntryPointTmp_ds.findRecord(curRecord);
      #        SysSecEntryPointTmp_ds.setCurrent();
      #
      #        if(selectedRows)
      #        {
      #            mapIter = new MapIterator(selectedRows);
      #            while(mapIter.more())
      #            {
      #                tmpData = mapIter.value();
      #                SysSecEntryPointTmp_ds.markRecord(tmpData, 1);
      #                mapIter.next();
      #            }
      #        }
      #        progress.incCount();
      #        element.ClearEntryPointReferenceTree();
      #    }
      #    catch
      #    {
      #        resetUI();
      #        throw Exception::Error;
      #    }
      #    resetUI();
      #}
    ENDSOURCE
    SOURCE #StateImage2AccessRight
      #public AccessRight StateImage2AccessRight(int _stateImage)
      #{
      #    switch(_stateImage)
      #    {
      #        case imageList_access.image(#ImageNoAccess):
      #            return AccessRight::NoAccess;
      #        case imageList_access.image(#ImageView):
      #            return AccessRight::View;
      #        case imageList_access.image(#ImageEdit):
      #            return AccessRight::Edit;
      #        case imageList_access.image(#ImageAdd):
      #            return AccessRight::Add;
      #        case imageList_access.image(#ImageSecuritykey):
      #            return AccessRight::Correction;
      #        case imageList_access.image(#ImageFullControl):
      #            return AccessRight::Delete;
      #        default:
      #            return AccessRight::NoAccess;
      #    }
      #
      #    return AccessRight::NoAccess;
      #}
    ENDSOURCE
    SOURCE #task
      #public int task(int _taskId)
      #{
      #    int ret;
      #    int idx;
      #    FormTreeItem item;
      #    #task
      #
      #    ret = super(_taskId);
      #
      #    if ( _taskId == #TaskEnter)
      #    {
      #
      #        if (!MenuTree.getSelectedCount())
      #        {
      #            return ret;
      #        }
      #
      #        idx = MenuTree.getSelection();
      #        if (!idx)
      #        {
      #            return ret;
      #        }
      #
      #        item = MenuTree.getItem(idx);
      #
      #        element.launch(item);
      #
      #    }
      #    return ret;
      #}
    ENDSOURCE
    SOURCE #UndoRoleAssignmentChanges
      #public void UndoRoleAssignmentChanges()
      #{
      #    SecurityUserRole userRole;
      #    MapEnumerator mapEnumerator;
      #    OMUserRoleOrganization userRoleOrganization;
      #
      #    if(newUserRole != 0)
      #    {
      #        ttsBegin;
      #        delete_from userRole where userRole.RecId == newUserRole;
      #        ttsCommit;
      #        newUserRole = 0;
      #    }
      #
      #    if(curUserRoleDisabled != 0)
      #    {
      #        ttsBegin;
      #        update_recordSet userRole setting AssignmentStatus = RoleAssignmentStatus::Disabled
      #            where userRole.RecId == curUserRoleDisabled;
      #        ttsCommit;
      #        curUserRoleDisabled = 0;
      #    }
      #
      #    if(disabledUserRolesMap != null)
      #    {
      #        ttsBegin;
      #        mapEnumerator = disabledUserRolesMap.getEnumerator();
      #
      #        while(mapEnumerator.moveNext())
      #        {
      #            select forUpdate userRole where userRole.RecId == mapEnumerator.currentKey();
      #            userRole.AssignmentStatus = mapEnumerator.currentValue();
      #            userRole.update();
      #        }
      #        ttsCommit;
      #        disabledUserRolesMap = null;
      #    }
      #
      #    if(userRoleOrgRecords != null)
      #    {
      #        ttsBegin;
      #        mapEnumerator = userRoleOrgRecords.getEnumerator();
      #
      #        while(mapEnumerator.moveNext())
      #        {
      #            select forUpdate userRoleOrganization where userRoleOrganization.RecId == mapEnumerator.currentKey();
      #            userRoleOrganization.delete();
      #        }
      #        ttsCommit;
      #        userRoleOrgRecords = null;
      #
      #        if(currentRoleID != 0)
      #        {
      #            //Synchronize the user role conditions
      #            SysSecurityDynamicRoleAssignment::synchronize(currentRoleID);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #UpdateAccessRightsInTree
      #public void UpdateAccessRightsInTree(int _rootItemIdxLevel, boolean _isLoadingNewObject)
      #{
      #    FormTreeItem formTreeItem;
      #    TreeItemIdx treeItemIdx, firstChildIdx;
      #    Object objectUnder;
      #    TreeNode nodeUnder;
      #    AccessRight oldRight;
      #    AccessRight newRight;
      #    str key;
      #    SysSecEntryPointKey entryPointKey;
      #
      #    treeItemIdx = _rootItemIdxLevel;
      #    while(treeItemIdx)
      #    {
      #        formTreeItem = MenuTree.getItem(treeItemIdx);
      #        formTreeItem.stateBold(false);
      #        objectUnder = formTreeItem.data();
      #
      #        if(objectUnder is SysSecSecurableObject)
      #        {
      #            entryPointKey = element.GetEntryPointKeyForSysSecTreeItem(formTreeItem);
      #            if(currentDevelopmentObject != '' && entryPointKey != '')
      #            {
      #                if(accessRightsMap != null)
      #                {
      #                    if(accessRightsMap.exists(entryPointKey))
      #                    {
      #                        if(!_isLoadingNewObject)
      #                        {
      #                            oldRight = element.StateImage2AccessRight(formTreeItem.stateImage());
      #                        }
      #                        formTreeItem.stateImage(accessImages[1+ accessRightsMap.lookup(entryPointKey)]);
      #                        if(!_isLoadingNewObject && accessRightsMap.lookup(entryPointKey) != oldRight)
      #                        {
      #                            formTreeItem.stateBold(true);
      #                        }
      #                    }
      #                    else
      #                    {
      #                        formTreeItem.stateImage(accessImages[1+ AccessRight::NoAccess]);
      #                    }
      #                }
      #            }
      #            else
      #            {
      #                formTreeItem.stateImage(0);
      #            }
      #        }
      #        else
      #        {
      #            nodeUnder = objectUnder as TreeNode;
      #            //Check if we need to remove *
      #            if(prevIndicatedItems != null && prevIndicatedItems.exists(formTreeItem.idx()))
      #            {
      #                // BP Deviation documented
      #                formTreeItem.text(subStr(formTreeItem.text(), 0, strLen(formTreeItem.text())-1));
      #            }
      #
      #            newRight = AccessRight::NoAccess;
      #            if(curAccessTree != null && curAccessTree.exists(nodeUnder.treeNodePath()))
      #            {
      #                newRight = curAccessTree.lookup(nodeUnder.treeNodePath());
      #                if(oldAccessTree != null && oldAccessTree.exists(nodeUnder.treeNodePath()))
      #                {
      #                    oldRight = oldAccessTree.lookup(nodeUnder.treeNodePath());
      #
      #                    if(oldRight != newRight)
      #                    {
      #                        formTreeItem.stateBold(true);
      #                    }
      #                    else
      #                    {
      #                        //Check that any child permission has changed
      #                        if(nodeHasChildWithNewAccessTree != null && nodeHasChildWithNewAccessTree.exists(nodeUnder.treeNodePath()))
      #                        {
      #                            // BP Deviation documented
      #                            formTreeItem.text(formTreeItem.text() + '*');
      #                            newIndicatedItems.insert(formTreeItem.idx(), 0);
      #                        }
      #                    }
      #                }
      #            }
      #            else
      #            {
      #                key = element.GetMenuItemKeyForNode(nodeUnder);
      #                if(accessRightsMap.exists(key))
      #                {
      #                    newRight = accessRightsMap.lookup(key);
      #                }
      #
      #                if(!_isLoadingNewObject)
      #                {
      #                    oldRight = this.StateImage2AccessRight(formTreeItem.stateImage());
      #
      #                    if(newRight != oldRight)
      #                    {
      #                        formTreeItem.stateBold(true);
      #                    }
      #                    oldAccessTreeDiscoveredNodes.insert(formTreeItem.idx(), oldRight);
      #                }
      #            }
      #            if(currentDevelopmentObject == '')
      #            {
      #                formTreeItem.stateImage(0);
      #            }
      #            else
      #            {
      #                formTreeItem.stateImage(accessImages[1+newRight]);
      #            }
      #        }
      #
      #        MenuTree.setItem(formTreeItem);
      #        firstChildIdx = MenuTree.getChild(treeItemIdx);
      #        if (firstChildIdx)
      #        {
      #            element.UpdateAccessRightsInTree(firstChildIdx, _isLoadingNewObject);
      #        }
      #        treeItemIdx = MenuTree.getNextSibling(treeItemIdx);
      #    }
      #}
    ENDSOURCE
    SOURCE #UpdateLicenseTypes
      #public void UpdateLicenseTypes()
      #{
      #    UserLicenseType maxLicenseType;
      #    AccessRight entryPointRight;
      #
      #    if(licenseInfoLoaded)
      #    {
      #        ttsBegin;
      #        update_recordSet SysSecEntryPointTmp
      #            setting EffectiveUserLicense = UserLicenseType::None
      #            where SysSecEntryPointTmp.UserLicenseApplies == NoYes::Yes;
      #
      #        while select forUpdate SysSecEntryPointTmp
      #            where SysSecEntryPointTmp.UserLicenseApplies == NoYes::Yes
      #        {
      #            if(accessrightsMap != null && accessRightsMap.exists(SysSecEntryPointTmp.ObjectKey))
      #            {
      #                entryPointRight = accessRightsMap.lookup(SysSecEntryPointTmp.ObjectKey);
      #                if(entryPointRight > AccessRight::View)
      #                {
      #                    SysSecEntryPointTmp.EffectiveUserLicense = SysSecEntryPointTmp.MaintainUserLicense;
      #                    SysSecEntryPointTmp.update();
      #                }
      #                else if(entryPointRight == AccessRight::View)
      #                {
      #                    SysSecEntryPointTmp.EffectiveUserLicense = SysSecEntryPointTmp.ViewUserLicense;
      #                    SysSecEntryPointTmp.update();
      #                }
      #
      #                if(SysSecEntryPointTmp.EffectiveUserLicense > maxLicenseType)
      #                {
      #                    maxLicenseType = SysSecEntryPointTmp.EffectiveUserLicense;
      #                }
      #            }
      #        }
      #        ttsCommit;
      #
      #        CurObjectLicenseType.selection(maxLicenseType);
      #    }
      #}
    ENDSOURCE
    SOURCE #WaitForWorkSpaceToClose
      #public void WaitForWorkSpaceToClose()
      #{
      #    if(WinAPI::isWindow(workSpaceHandle))
      #    {
      #        element.setTimeOut(identifierStr(WaitForWorkSpaceToClose), 200, true);
      #    }
      #    else
      #    {
      #        if(disableSysAdminRoleAssignment)
      #        {
      #            try
      #            {
      #                SysSecEntryPointManager::EnableCurrentSysAdminAssignment();
      #            }
      #            catch
      #            {
      #                WinAPI::enableWindow(curMainWindowHandle, true);
      #                SecurityUtil::sysAdminMode(true);
      #                throw Exception::Error;
      #            }
      #        }
      #
      #        try
      #        {
      #            SecurityUtil::sysAdminMode(true);
      #
      #            if(wasFormRunHookEnabled)
      #            {
      #                SysSecEntryPointManager::FormRunHookStatus(true);
      #            }
      #            element.UndoRoleAssignmentChanges();
      #        }
      #        catch
      #        {
      #            WinAPI::enableWindow(curMainWindowHandle, true);
      #            throw Exception::Error;
      #        }
      #
      #        //Enable main window
      #        WinAPI::enableWindow(curMainWindowHandle, true);
      #
      #        //Enable current window
      #        WinAPI::enableWindow(element.hWnd(), true);
      #        WinAPI::setFocus(element.hWnd());
      #
      #        element.redraw();
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysSecEntryPointTmp
          Table               #SysSecEntryPointTmp
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #selectionChanged
          #public void selectionChanged()
          #{
          #    super();
          #
          #    if(!isDeveloper())
          #    {
          #        element.ClearEntryPointReferenceTree();
          #    }
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #buttonRole
          Table               #SecurityRole
          LinkType            #Passive
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Left                #Left edge
      Width               #Column width
      Caption             #@SDT46
      UseCaptionFromMenuItem  #Yes
      SetCompany          #No
      Mode                #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          AutoDeclaration     #Yes
          ElementPosition     #417566263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
          Caption             #@SDT111
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #AdminUIButtonGroup
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #715827880
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT112
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #MetadataButtonGroup
          ElementPosition     #1491308086
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT113
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #SettingsGroup
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          ElementPosition     #1789569705
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT114
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #TestButtonGroup
          NeededPermission    #Manual
          ElementPosition     #477218586
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT115
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #TraceButtonGroup
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          ElementPosition     #954437174
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT116
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #TraceFileGroup
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1193046468
          HierarchyParent     #ActionPaneTab
          Caption             #@SDT117
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #EntryPointsGrid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1259857071
          HierarchyParent     #RighGroup
          DataSource          #SysSecEntryPointTmp
          DataGroup           #EntryPointManager
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    #WinAPI
            #    #AOT
            #    #Properties
            #    int ret;
            #    PopupMenu contextMenu = new PopupMenu(this.hWnd());
            #
            #    int setEntryPointPermissions;
            #    int addMatchingPrivileges;
            #    int addMatchingDuties;
            #    int executeMenuitemInCurWorkSpace;
            #    int executeMenuitemInSecurityWorkSpace;
            #    int aotNewWindow;
            #    int aotPropertyWindowItem;
            #    Struct selectedData;
            #    Array selectionData;
            #
            #    TreeNode nodeUnder;
            #    SysSecEntryPointTmp entryPointTmpData;
            #    Args args;
            #    FormRun formRun;
            #    str formEntryPointRights;
            #
            #    entryPointTmpData = SysSecEntryPointTmp_ds.cursor();
            #
            #    if (entryPointTmpData.RecId != 0)
            #    {
            #        selectedData = EntryPointsGrid.getSelectedData();
            #        selectionData = selectedData.value('lines');
            #
            #        nodeUnder = SysSecEntryPointManager::GetNodeForSecurableType(entryPointTmpData.ObjectType,
            #                                                                    entryPointTmpData.ObjectAOTName,
            #                                                                    entryPointTmpData.ObjectAOTChildName);
            #
            #        //Build context menu
            #        if(nodeUnder != null && isDeveloper() && selectionData.lastIndex() == 1)
            #        {
            #            if(entryPointTmpData.ObjectType == SecurableType::MenuItemDisplay ||
            #                entryPointTmpData.ObjectType == SecurableType::MenuItemOutput ||
            #                entryPointTmpData.ObjectType == SecurableType::MenuItemAction)
            #            {
            #                executeMenuitemInCurWorkSpace = contextMenu.insertItem(strFmt("@SDT118"));
            #
            #                if(currentDevelopmentObject != '' && !isrecording)
            #                {
            #                    executeMenuitemInSecurityWorkSpace = contextMenu.insertItem(strFmt("@SDT119"));
            #                }
            #            }
            #        }
            #
            #        if(currentDevelopmentObject != '' && isDeveloper())
            #        {
            #            contextMenu.insertBreak();
            #            setEntryPointPermissions = contextMenu.insertItem(strFmt("@SDT120"));
            #        }
            #
            #        if(selectionData.lastIndex() == 1)
            #        {
            #            contextMenu.insertBreak();
            #            if(currentDevelopmentType == SysSecDevelopmentType::Role && currentRoleAOTName != '')
            #            {
            #                addMatchingDuties = contextMenu.insertItem(strFmt("@SDT121"));
            #            }
            #
            #            if(currentDevelopmentType != SysSecDevelopmentType::Privilege && currentRoleAOTName != '')
            #            {
            #                addMatchingPrivileges = contextMenu.insertItem(strFmt("@SDT122"));
            #            }
            #
            #            if(nodeUnder != null && isDeveloper())
            #            {
            #                contextMenu.insertBreak();
            #                aotNewWindow = contextMenu.insertItem(strFmt("@SDT123"));
            #                aotPropertyWindowItem = contextMenu.insertItem(strFmt("@SDT124"));
            #            }
            #        }
            #    }
            #
            #    ret = contextMenu.draw();
            #
            #    switch (ret)
            #    {
            #        case -1:
            #            break;
            #
            #        case setEntryPointPermissions:
            #            formEntryPointRights = '';
            #            if(currentDevelopmentType == SysSecDevelopmentType::Privilege)
            #            {
            #                formEntryPointRights = formstr(SysSecSetEntryPointRightsForPrivilege);
            #            }
            #            else if(currentDevelopmentType == SysSecDevelopmentType::Duty || currentDevelopmentType == SysSecDevelopmentType::Role)
            #            {
            #                formEntryPointRights = formstr(SysSecSetEntryPointRights);
            #            }
            #
            #            args = new Args(formEntryPointRights);
            #            args.caller(element);
            #            args.parmEnum(NoYes::Yes);
            #            formRun = classFactory.formRunClass(args);
            #            formRun.run();
            #            formRun.wait(true);
            #            break;
            #
            #        case addMatchingPrivileges:
            #            args = new Args(formstr(SysSecReferencePrivilegesForEntryPoint));
            #            args.caller(element);
            #
            #            args.parmEnum(entryPointTmpData.ObjectType);
            #            args.parm(strFmt('%1.%2',
            #                        entryPointTmpData.ObjectAOTName,
            #                        entryPointTmpData.ObjectAOTChildName));
            #
            #            formRun = classFactory.formRunClass(args);
            #            formRun.run();
            #            formRun.wait(true);
            #            break;
            #
            #        case addMatchingDuties:
            #            args = new Args(formstr(SysSecReferenceDutiesForEntryPoint));
            #            args.caller(element);
            #
            #            args.parmEnum(entryPointTmpData.ObjectType);
            #            args.parm(strFmt('%1.%2',
            #                        entryPointTmpData.ObjectAOTName,
            #                        entryPointTmpData.ObjectAOTChildName));
            #
            #            formRun = classFactory.formRunClass(args);
            #            formRun.run();
            #            formRun.wait(true);
            #            break;
            #
            #        case executeMenuitemInCurWorkSpace:
            #            nodeUnder.AOTrun();
            #            break;
            #
            #        case executeMenuitemInSecurityWorkSpace:
            #            element.OpenRoleWorkSpace(nodeUnder.treeNodePath());
            #            break;
            #
            #        case aotNewWindow:
            #            nodeUnder.AOTnewWindow();
            #            break;
            #
            #        case aotPropertyWindowItem:
            #            nodeUnder.AOTshowProperties();
            #            break;
            #
            #        default:
            #            break;
            #
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EntryPointReferenceGroup
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1882627329
          HierarchyParent     #RighGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridFilterOptionsGroup
          ElementPosition     #901943130
          HierarchyParent     #RighGroup
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #LicenseInformation
          ElementPosition     #1312351114
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MainGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1789569703
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #RighGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #MainGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Settings
          Width               #Column width
          ElementPosition     #835132527
          RightMargin         #2
          Columns             #3
          Columnspace         #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #XSplitter
          AutoDeclaration     #Yes
          Width               #5
          Height              #Column height
          ElementPosition     #1288490187
          HierarchyParent     #MainGroup
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterX.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #YSplitter
          AutoDeclaration     #Yes
          Visible             #No
          Width               #Column width
          Height              #5
          ElementPosition     #1617771012
          HierarchyParent     #RighGroup
          FrameType           #Raised 3D
          BackgroundColor     #Window background
          HideIfEmpty         #No
          AlignChild          #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #mouseDown
            #int mouseDown(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseDown(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
          SOURCE #mouseMove
            #int mouseMove(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseMove(x,y,button,ctrl,shift);
            #}
          ENDSOURCE
          SOURCE #mouseUp
            #int mouseUp(int x, int y, int button, boolean ctrl, boolean shift)
            #{
            #    int ret;
            #
            #    ret = super(x, y, button, ctrl, shift);
            #
            #    return _formSplitterY.mouseUp(x, y, button, ctrl, shift);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ClearRecordedFilter
          AutoDeclaration     #Yes
          Visible             #No
          HelpText            #@SDT125
          ElementPosition     #1073741822
          HierarchyParent     #GridFilterOptionsGroup
          Text                #@SDT126
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    QueryBuildDataSource qbds;
            #
            #    super();
            #
            #    qbds = SysSecEntryPointTmp_ds.query().dataSourceTable(tableNum(SysSecEntryPointTmp));
            #    qbds.clearRange(fieldNum(SysSecEntryPointTmp, Recorded));
            #
            #    recordingGridFilter = false;
            #
            #    SysSecEntryPointTmp_ds.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #LoadAdditionalMetadata
          AutoDeclaration     #Yes
          HelpText            #@SDT127
          ElementPosition     #1431655764
          HierarchyParent     #MetadataButtonGroup
          Text                #@SDT128
          ButtonDisplay       #Text & Image above
          NormalImage         #11032
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          Big                 #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.LoadAdditionalMetadata();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #LoadEPTrace
          AutoDeclaration     #Yes
          HelpText            #@SDT129
          ElementPosition     #1181116005
          HierarchyParent     #TraceButtonGroup
          Text                #@SDT130
          ButtonDisplay       #Text & Image left
          NormalImage         #7643
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysSecEntryPointTmp    epTraceData;
            #    Args                args;
            #    str                 fileName;
            #
            #    str                 axUserName;
            #    int                 axSessionId;
            #    str                 moduleName;
            #    str                 pageName;
            #    str                 entryPointName;
            #    str                 tmpEntryPointType;
            #    SecurableType       entryPointType;
            #    boolean             isPostBack;
            #    XmlReader           reader;
            #
            #    str                 entryPointKey;
            #    int                 entryPointCounter;
            #    #File
            #
            #    element.CheckRecordingIsDirty();
            #    SecurityRecorder.enabled(false);
            #    LoadEPtrace.enabled(false);
            #
            #    fileName = WinAPI::getOpenFileName(element.hWnd(),["@SDT86", #AllFilesName + #xml],
            #                prevEPTraceFilePath, strFmt("@SDT131"), '', '', 0);
            #    if (fileName != '')
            #    {
            #        prevEPTraceFilePath = System.IO.Path::GetDirectoryName(fileName);
            #        try
            #        {
            #            //Parse xml file
            #            reader = XmlReader::newFile(fileName);
            #            axUserName = '';
            #            isPostBack = false;
            #            entryPointCounter = 1;
            #
            #            while(reader.read())
            #            {
            #                if(reader.name() == 'Data')
            #                {
            #                    if(reader.getAttribute2('Name') == 'AxUserName')
            #                    {
            #                        reader.read();
            #                        axUserName = reader.value();
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'AxSessionId')
            #                    {
            #                        reader.read();
            #                        axSessionId = str2int(reader.value());
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'ModuleName')
            #                    {
            #                        reader.read();
            #                        moduleName = reader.value();
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'PageName')
            #                    {
            #                        reader.read();
            #                        pageName = reader.value();
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'MenuItemName')
            #                    {
            #                        reader.read();
            #                        entryPointName = reader.value();
            #                        entryPointType = securableType::WebUrlItem;
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'EntryPointName')
            #                    {
            #                        reader.read();
            #                        entryPointName = reader.value();
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'EntryPointType')
            #                    {
            #                        reader.read();
            #                        tmpEntryPointType = reader.value();
            #                        entryPointType = symbol2Enum(enumNum(SecurableType), tmpEntryPointType);
            #                    }
            #                    else if(reader.getAttribute2('Name') == 'IsPostBack')
            #                    {
            #                        reader.read();
            #                        isPostBack = (reader.value() == 'true');
            #                    }
            #                }
            #
            #                if(reader.name() == 'EventData')
            #                {
            #                    if(axUserName != '' && entryPointName != '')
            #                    {
            #                        epTraceData.clear();
            #                        epTraceData.EPTraceUserName = axUserName;
            #                        epTraceData.EPTraceSessionId = axSessionId;
            #                        epTraceData.EPTraceModuleName = moduleName;
            #                        epTraceData.EPTracePageName = pageName;
            #                        epTraceData.EPTraceIsPostBack = isPostBack;
            #                        epTraceData.ObjectAOTName = entryPointName;
            #                        epTraceData.ObjectType = entryPointType;
            #                        epTraceData.AccessRight = AccessRight::NoAccess;
            #                        epTraceData.SystemUserRight = AccessRight::NoAccess;
            #                        //Object key field is unique and entry points can be traced multiple times, just assign unique number
            #                        epTraceData.ObjectKey = int2str(entryPointCounter);
            #
            #                        entryPointKey = SysSecEntryPointManager::GetKeyForSysSecEntryPointTmp(epTraceData);
            #
            #                        if(accessRightsMap != null && accessRightsMap.exists(entryPointKey))
            #                        {
            #                            epTraceData.AccessRight = accessRightsMap.lookup(entryPointKey);
            #                        }
            #
            #                        if(systemUserAccessRightsMap != null && systemUserAccessRightsMap.exists(entryPointKey))
            #                        {
            #                            epTraceData.SystemUserRight = systemUserAccessRightsMap.lookup(entryPointKey);
            #                        }
            #
            #                        epTraceData.insert();
            #
            #                        axUserName = '';
            #                        isPostBack = false;
            #                        entryPointCounter++;
            #                    }
            #                }
            #            }
            #
            #            SwitchBackToEPTraceForm.visible(true);
            #
            #            args = new Args(formStr(SysSecLoadEPTrace));
            #            args.parm(fileName);
            #            args.caller(element);
            #            args.record(epTraceData);
            #            epTraceFormRun = classFactory.formRunClass(args);
            #            epTraceFormRun.run();
            #            epTraceFormRun.wait();
            #        }
            #        catch
            #        {
            #            element.ResetTraceButtons();
            #            throw Exception::Error;
            #        }
            #    }
            #    element.ResetTraceButtons();
            #
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #LoadRecording
          AutoDeclaration     #Yes
          HelpText            #@SDT132
          ElementPosition     #1968526675
          HierarchyParent     #TraceButtonGroup
          Text                #@SDT133
          ButtonDisplay       #Text & Image left
          NormalImage         #802
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          ForcedToOverflow    #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.LoadRecording();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #MarkControlsButtonState
          AutoDeclaration     #Yes
          HelpText            #@SDT134
          ElementPosition     #1717986916
          HierarchyParent     #SettingsGroup
          Text                #@SDT135
          NormalImage         #12262
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          MultiSelect         #Yes
          ToggleButton        #Check
          AcquireFocus        #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    DialogButton dialogButton;
            #
            #    super();
            #
            #    if(MarkControlsButtonState.toggleValue())
            #    {
            #        if(!SysSecEntryPointManager::IsFormHighlightEnabled())
            #        {
            #            dialogButton = Box::yesNo(strFmt("@SDT136"),
            #                            dialogButton::Yes, strFmt("@SDT46"));
            #
            #            if(dialogButton == DialogButton::No)
            #            {
            #                MarkControlsButtonState.toggleValue(0);
            #                return;
            #            }
            #
            #            if(!SysSecEntryPointManager::EnableFormHighlight())
            #            {
            #                MarkControlsButtonState.toggleValue(0);
            #                return;
            #            }
            #        }
            #
            #        MarkControlsButtonState.text("@SDT102");
            #    }
            #    else
            #    {
            #        MarkControlsButtonState.text("@SDT135");
            #    }
            #
            #    //Enable/disable feature
            #    SysSecEntryPointManager::FormRunHookStatus(MarkControlsButtonState.toggleValue());
            #
            #    //Cache user preference
            #    SysSecEntryPointManager::SkipDefaultFormRunHook((MarkControlsButtonState.toggleValue() == 0));
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #OMAssignOrganizations
          HelpText            #@SDT137
          ElementPosition     #858993458
          HierarchyParent     #SettingsGroup
          Text                #@SDT138
          ButtonDisplay       #Text & Image left
          NormalImage         #10858
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    Args                args = new Args(formStr(SysSecAssignOM));
            #    FormRun             fr = classFactory.formRunClass(args);
            #
            #    super();
            #
            #    fr.init();
            #    fr.run();
            #    fr.wait();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Refresh
          Left                #Right edge
          Width               #30
          HelpText            #@SDT139
          ElementPosition     #1717986916
          HierarchyParent     #Settings
          Text                #@SDT140
          ButtonDisplay       #Image only
          NormalImage         #1088
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.SetPermissions();
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SaveRecording
          AutoDeclaration     #Yes
          HelpText            #@SDT141
          ElementPosition     #1574821340
          HierarchyParent     #TraceButtonGroup
          Text                #@SDT142
          ButtonDisplay       #Text & Image left
          NormalImage         #12467
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          ForcedToOverflow    #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    element.SaveRecording();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SecurityRecorder
          AutoDeclaration     #Yes
          HelpText            #@SDT143
          ElementPosition     #787410670
          HierarchyParent     #TraceButtonGroup
          Text                #@SYS107735
          NormalImage         #27110
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    SysGlobalCache globalCache = appl.globalCache();
            #    SysSecRecordedEntryPoint recordedObjects;
            #    DialogButton dialogButton;
            #
            #    void updateUIOnStop()
            #    {
            #        SecurityRecorder.normalImage('27110');
            #        SecurityRecorder.text("@SYS107735");
            #        LoadEPtrace.enabled(true);
            #        SaveRecording.enabled(true);
            #        LoadRecording.enabled(true);
            #
            #        if(currentRoleAOTName != '')
            #        {
            #            TestWorkSpace.enabled(true);
            #        }
            #        element.lockWindowUpdate(false);
            #    }
            #
            #    super();
            #
            #    if(!SysSecEntryPointManager::IsClientRecorderEnabled())
            #    {
            #        dialogButton = Box::yesNo(strFmt("@SDT144"),
            #                            dialogButton::Yes, strFmt("@SDT46"));
            #
            #        if(dialogButton == DialogButton::No)
            #        {
            #            return;
            #        }
            #        SysSecEntryPointManager::EnableClientRecorder();
            #    }
            #
            #    isRecording = !isRecording;
            #
            #    if(isRecording)
            #    {
            #        LoadEPtrace.enabled(false);
            #        SaveRecording.enabled(false);
            #        LoadRecording.enabled(false);
            #        TestWorkSpace.enabled(false);
            #
            #        element.CheckRecordingIsDirty();
            #        element.lockWindowUpdate(true);
            #        EntryPointsGrid.visible(false);
            #        try
            #        {
            #            ttsBegin;
            #            delete_from recordedObjects where recordedObjects.User == curUserId() &&
            #                                                recordedObjects.SessionId == sessionId();
            #            update_recordSet SysSecEntryPointTmp setting Recorded = NoYes::No;
            #            ttsCommit;
            #            SysSecEntryPointTmp_ds.research();
            #            SysSecEntryPointTmp_ds.refreshEx(-1);
            #            SecurityRecorder.normalImage('27106');
            #            SecurityRecorder.text("@SYS107734");
            #
            #            if(!globalCache.isSet(curUserId() + #SecEntryPoint, #EntryPointRecorderKey))
            #            {
            #                appl.globalCache().set(curUserId() + #SecEntryPoint, #EntryPointRecorderKey, #EntryPointRecorderKey, false);
            #            }
            #        }
            #        catch
            #        {
            #            EntryPointsGrid.visible(true);
            #            throw Exception::Error;
            #        }
            #        EntryPointsGrid.visible(true);
            #    }
            #    else
            #    {
            #        try
            #        {
            #            if(globalCache.isSet(curUserId() + #SecEntryPoint, #EntryPointRecorderKey))
            #            {
            #                appl.globalCache().remove(curUserId() + #SecEntryPoint, #EntryPointRecorderKey);
            #            }
            #
            #            select count(RecId) from recordedObjects where recordedObjects.User == curUserId() &&
            #                                                            recordedObjects.SessionId == sessionId();
            #            if(recordedObjects.RecId == 0)
            #            {
            #                info(strFmt("@SDT145"));
            #            }
            #            else
            #            {
            #                infolog.startLengthyOperation();
            #                element.lockWindowUpdate(true);
            #
            #                recordingIsDirty = true;
            #                ttsBegin;
            #                update_recordSet SysSecEntryPointTmp setting Recorded = NoYes::Yes
            #                    exists join recordedObjects where recordedObjects.SecurableObject == SysSecEntryPointTmp.ObjectID &&
            #                        recordedObjects.User == curUserId() && recordedObjects.SessionId == sessionId();
            #                ttsCommit;
            #
            #                element.AddFilterOnRecordedObjects();
            #                SysSecEntryPointTmp_ds.executeQuery();
            #            }
            #        }
            #        catch
            #        {
            #            updateUIOnStop();
            #            throw Exception::Error;
            #        }
            #        updateUIOnStop();
            #
            #        infolog.endLengthyOperation();
            #    }
            #
            #    element.lockWindowUpdate(false);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SecurityWorkspaceEPSSRS
          AutoDeclaration     #Yes
          HelpText            #@SDT146
          ElementPosition     #1288490187
          HierarchyParent     #SettingsGroup
          Text                #@SDT147
          NormalImage         #12350
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          MultiSelect         #Yes
          ToggleButton        #Check
          AcquireFocus        #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    if(SecurityWorkspaceEPSSRS.toggleValue())
            #    {
            #        if(strLwr(curUserId()) == 'admin')
            #        {
            #            SecurityWorkspaceEPSSRS.toggleValue(0);
            #            error(strFmt("@SDT148"));
            #            return;
            #        }
            #
            #        if(!SysSecEntryPointManager::IsSingleServerRunning())
            #        {
            #            SecurityWorkspaceEPSSRS.toggleValue(0);
            #            error(strFmt("@SDT149"));
            #            return;
            #        }
            #
            #        disableSysAdminRoleAssignment = true;
            #        SecurityWorkspaceEPSSRS.text("@SDT103");
            #    }
            #    else
            #    {
            #        disableSysAdminRoleAssignment = false;
            #        SecurityWorkspaceEPSSRS.text("@SDT147");
            #    }
            #
            #    //Cache user preference
            #    SysSecEntryPointManager::DisableSysAdminAssignmentSetting((SecurityWorkspaceEPSSRS.toggleValue()));
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ShowReferences
          AutoDeclaration     #Yes
          Enabled             #No
          HelpText            #@SDT150
          ElementPosition     #1073741822
          HierarchyParent     #EntryPointReferenceGroup
          Text                #@SDT151
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    TreeItemIdx rootIdx;
            #
            #    super();
            #
            #    EntryPointReferenceTree.deleteAll();
            #    if(currentDevelopmentObject == '')
            #    {
            #        return;
            #    }
            #
            #    if(currentDevelopmentType == SysSecDevelopmentType::Role)
            #    {
            #        rootIdx = SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', CurrentObject.text(), currentRoleAOTName),
            #            FormTreeAdd::Root, currentRoleAOTName, imageListAppl_AOT.image(#ImageSecurityRole), 1);
            #
            #        this.processRole(currentRoleID, rootIdx);
            #    }
            #
            #    //Expand entire tree
            #    if(rootIdx != 0)
            #    {
            #        referencesShown = true;
            #        SysFormTreeControl::expandTree(EntryPointReferenceTree, rootIdx);
            #    }
            #}
          ENDSOURCE
          SOURCE #processRole
            #public void processRole(recid _roleId, TreeItemIdx _rootIdx)
            #{
            #    SecurityRoleTaskGrant roleTaskGrant;
            #    SecurityTaskEntryPoint taskEntryPoint;
            #    SecuritySubTask subTask;
            #    SecurityTask privilege;
            #    SecurityTask duty;
            #    TreeItemIdx currentDutyIdx;
            #    TreeItemIdx subRoleRootIdx;
            #
            #    SecuritySubRole subRole;
            #    SecurityRole role2;
            #
            #    SecurityTaskName prevDutyName = '';
            #
            #    //Process all role-duty-privileges
            #    while select Name, AOTName from duty group by Name, AOTName
            #            join Name, AOTName from privilege group by Name, AOTName
            #            join maxOf(PermissionGroup) from taskEntryPoint
            #                group by taskEntryPoint.PermissionGroup
            #                where taskEntryPoint.EntryPoint == SysSecEntryPointTmp.ObjectID &&
            #                        privilege.RecId == taskEntryPoint.SecurityTask
            #            exists join subTask
            #                where subTask.SecuritySubTask == privilege.RecId &&
            #                        subTask.SecurityTask == duty.RecId &&
            #                        duty.IsEnabled == NoYes::Yes &&
            #                        privilege.IsEnabled == NoYes::Yes
            #            exists join roleTaskGrant
            #                where roleTaskGrant.SecurityRole == _roleId &&
            #                        roleTaskGrant.SecurityTask == duty.RecId
            #    {
            #        if(prevDutyName != duty.Name)
            #        {
            #            currentDutyIdx = SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', duty.Name, duty.AotName),
            #                    _rootIdx, duty.AotName, imageListAppl_AOT.image(#ImageSecurityDuty), 1);
            #        }
            #
            #        SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', privilege.Name, privilege.AotName),
            #                    currentDutyIdx, privilege.AotName, imageListAppl_AOT.image(#ImageSecurityPrivilege), 1,
            #                    accessImages[1+taskEntryPoint.PermissionGroup]);
            #
            #        prevDutyName = duty.Name;
            #    }
            #
            #    //Process all role-privileges
            #    while select Name, AOTName from privilege group by Name, AOTName
            #            join maxOf(PermissionGroup) from taskEntryPoint
            #                group by taskEntryPoint.PermissionGroup
            #                where taskEntryPoint.EntryPoint == SysSecEntryPointTmp.ObjectID &&
            #                        privilege.RecId == taskEntryPoint.SecurityTask
            #            exists join roleTaskGrant
            #                where roleTaskGrant.SecurityRole == _roleId &&
            #                        roleTaskGrant.SecurityTask == privilege.RecId
            #    {
            #        SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', privilege.Name, privilege.AotName),
            #                    _rootIdx, privilege.AotName, imageListAppl_AOT.image(#ImageSecurityPrivilege), 1,
            #                    accessImages[1+taskEntryPoint.PermissionGroup]);
            #    }
            #
            #    //Recursively process sub roles
            #    while select SecuritySubrole from subRole
            #            where subRole.SecurityRole == _roleId
            #            join Name, AOTName from role2
            #                where role2.RecId == subRole.SecuritySubRole &&
            #                    role2.IsEnabled == NoYes::Yes
            #    {
            #        subRoleRootIdx = SysFormTreeControl::addTreeItem(EntryPointReferenceTree, strFmt('%1 (%2)', role2.Name, role2.AotName),
            #            _rootIdx, role2.AotName, imageListAppl_AOT.image(#ImageSecurityRole), 1);
            #        this.processRole(role2.RecId, subRoleRootIdx);
            #    }
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #SwitchBackToEPTraceForm
          AutoDeclaration     #Yes
          Visible             #No
          HelpText            #@SDT152
          ElementPosition     #1879048189
          HierarchyParent     #GridFilterOptionsGroup
          Text                #@SDT153
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #
            #    if(epTraceFormRun != null)
            #    {
            #        WinAPI::setFocus(epTraceFormRun.hWnd());
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #TestWorkSpace
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          Enabled             #No
          HelpText            #@SDT154
          ElementPosition     #1431655764
          HierarchyParent     #TestButtonGroup
          Text                #@SDT155
          NormalImage         #412
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          MultiSelect         #Yes
          Big                 #Yes
          Primary             #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.OpenRoleWorkSpace();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #EntryPointsGrid_Recorded
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #330382098
          HierarchyParent     #EntryPointsGrid
          BackgroundColor     #Window background
          Label               #@SDT23
          DataSource          #SysSecEntryPointTmp
          DataField           #Recorded
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #EntryPointsGrid_UserLicenseApplies
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1610612727
          HierarchyParent     #EntryPointsGrid
          BackgroundColor     #Window background
          Label               #@SDT27
          DataSource          #SysSecEntryPointTmp
          DataField           #UserLicenseApplies
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #FilterOnPermissionChanges
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1610612733
          HierarchyParent     #GridFilterOptionsGroup
          Label               #@SDT156
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    QueryBuildDataSource qbds;
            #    QueryBuildRange qbr;
            #    boolean ret;
            #
            #    ret = super();
            #
            #    qbds = SysSecEntryPointTmp_ds.query().dataSourceTable(tableNum(SysSecEntryPointTmp));
            #    if(FilterOnPermissionChanges.value())
            #    {
            #        qbr = qbds.addRange(fieldNum(SysSecEntryPointTmp, AccessRight));
            #        qbr.value('(AccessRight != OldAccessRight)');
            #        qbr.status(RangeStatus::Hidden);
            #    }
            #    else
            #    {
            #        qbds.clearRange(fieldNum(SysSecEntryPointTmp, AccessRight));
            #    }
            #    SysSecEntryPointTmp_ds.executeQuery();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #CurObjectLicenseType
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          AlignControl        #No
          ElementPosition     #1431655764
          HierarchyParent     #LicenseInformation
          Label               #@SDT157
          EnumType            #UserLicenseType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_AccessRight
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #825955245
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT158
          DataSource          #SysSecEntryPointTmp
          DataField           #AccessRight
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_EffectiveUserLicense
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1404123916
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT2
          DataSource          #SysSecEntryPointTmp
          DataField           #EffectiveUserLicense
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_ObjectAOTLayer
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1817101539
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT159
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTLayer
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_ObjectType
          ElementPosition     #495573147
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT160
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectType
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_OldAccessRight
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #991146294
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT21
          DataSource          #SysSecEntryPointTmp
          DataField           #OldAccessRight
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EntryPointsGrid_SystemUserRight
          ElementPosition     #1156337343
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT25
          DataSource          #SysSecEntryPointTmp
          DataField           #SystemUserRight
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #ObjectType
          AutoDeclaration     #Yes
          AlignControl        #No
          HelpText            #@SDT161
          ElementPosition     #858993458
          HierarchyParent     #Settings
          Label               #@SDT162
          EnumType            #SysSecDevelopmentType
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    CurrentObject.text('');
            #    element.SelectObject();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #OpenRoleInNewWindow
          AutoDeclaration     #Yes
          HelpText            #@SDT163
          ElementPosition     #1431655764
          HierarchyParent     #AdminUIButtonGroup
          Text                #@SDT164
          ButtonDisplay       #Text & Image left
          NormalImage         #1008
          ImageLocation       #EmbeddedResource
          DataSource          #buttonRole
          MenuItemName        #SysSecRolesEditTasks
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    select buttonRole where buttonRole.AotName == currentRoleAOTName;
            #    buttonRole_ds.setRecord(buttonRole);
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CurrentObject
          AutoDeclaration     #Yes
          Width               #Column width
          AlignControl        #No
          HelpText            #@SDT165
          ElementPosition     #1288490187
          HierarchyParent     #Settings
          Label               #@SDT166
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    str lookupForm;
            #    SysSecDevelopmentType selectedType = ObjectType.selection();
            #    FormRun formRun;
            #    Args args;
            #
            #    switch(selectedType)
            #    {
            #        case SysSecDevelopmentType::Role:
            #            lookupForm = formStr(SysSecRoleLookup);
            #            break;
            #        case SysSecDevelopmentType::Duty:
            #            lookupForm = formStr(SysSecDutyLookup);
            #            break;
            #        case SysSecDevelopmentType::Privilege:
            #            lookupForm = formStr(SysSecPrivilegeLookup);
            #            break;
            #    }
            #
            #    if(lookupForm != '')
            #    {
            #        args = new Args(lookupForm);
            #        args.caller(this);
            #        formRun = classfactory.formRunClass(args);
            #        formRun.init();
            #        this.performFormLookup(formRun);
            #    }
            #}
          ENDSOURCE
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    element.SelectObject();
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EntryPointsGrid_ObjectAOTDisplayName
          Width               #250
          ElementPosition     #660764196
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT167
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTDisplayName
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EntryPointsGrid_ObjectAOTModel
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1982292588
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT168
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectAOTModel
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EntryPointsGrid_ObjectLabel
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1321528392
          HierarchyParent     #EntryPointsGrid
          Label               #@SDT169
          DataSource          #SysSecEntryPointTmp
          DataField           #ObjectLabel
        ENDPROPERTIES
        
        METHODS
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    return EntryPointsGrid.showContextMenu(_menuHandle);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #EntryPointReferenceTree
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #EntryPointReferenceGroup
        ENDPROPERTIES
        
        METHODS
          SOURCE #context
            #public void context()
            #{
            #    #WinAPI
            #    int selectedMenu;
            #    int mouseX, mouseY;
            #    TreeItemIdx idx;
            #    PopupMenu contextMenu = new PopupMenu(element.hWnd());
            #    int newWindow;
            #    FormTreeItem itemUnder;
            #    SysSecDevelopmentType treeItemObjectType;
            #    SecurityRoleName treeItemObjectAOTName;
            #    MenuFunction menuFunc;
            #    xArgs args;
            #    SecurityRole selectedRole;
            #
            #    [mouseX, mouseY] = WinAPI::getCursorPos();
            #    [mouseX, mouseY] = WinAPI::screenToClient(element.hWnd(), mouseX, mouseY);
            #
            #    idx = EntryPointReferenceTree.getSelection();
            #    if (!idx)
            #    {
            #        return;
            #    }
            #
            #    itemUnder = EntryPointReferenceTree.getItem(idx);
            #    if (!itemUnder)
            #    {
            #        return;
            #    }
            #
            #    treeItemObjectAOTName = itemUnder.data();
            #    if (treeItemObjectAOTName == '')
            #    {
            #        return;
            #    }
            #
            #    treeItemObjectType = SysSecDevelopmentType::Role;
            #    if(itemUnder.image() == imageListAppl_AOT.image(#ImageSecurityPrivilege))
            #    {
            #        treeItemObjectType = SysSecDevelopmentType::Privilege;
            #    }
            #    else if(itemUnder.image() == imageListAppl_AOT.image(#ImageSecurityDuty))
            #    {
            #        treeItemObjectType = SysSecDevelopmentType::Duty;
            #    }
            #
            #    //Build context menu
            #    switch(treeItemObjectType)
            #    {
            #        case SysSecDevelopmentType::Role:
            #            if(hasMenuItemAccess('SysSecRolesEditTasks', MenuItemType::Display))
            #            {
            #                newWindow = contextMenu.insertItem(strFmt("@SYS327211"));
            #            }
            #            break;
            #        case SysSecDevelopmentType::Duty:
            #            if(hasMenuItemAccess('SysSecTasksEditPS', MenuItemType::Display))
            #            {
            #                newWindow = contextMenu.insertItem(strFmt("@SDT170"));
            #            }
            #            break;
            #        case SysSecDevelopmentType::Privilege:
            #            if(hasMenuItemAccess('SysSecTasksEditPS', MenuItemType::Display))
            #            {
            #                newWindow = contextMenu.insertItem(strFmt("@SDT170"));
            #            }
            #            break;
            #    }
            #
            #    selectedMenu = contextMenu.draw();
            #
            #    switch (selectedMenu)
            #    {
            #        case -1:
            #            break;
            #        case newWindow:
            #            switch(treeItemObjectType)
            #            {
            #                case SysSecDevelopmentType::Role:
            #                    menuFunc = new MenuFunction('SysSecRolesEditTasks', MenuItemType::Display);
            #                    args = new xArgs();
            #                    select selectedRole where selectedRole.AotName == treeItemObjectAOTName;
            #                    args.record(selectedRole);
            #                    menuFunc.run(Args);
            #                    break;
            #                case SysSecDevelopmentType::Duty:
            #                case SysSecDevelopmentType::Privilege:
            #                    menuFunc = new MenuFunction('SysSecTasksEditPS', MenuItemType::Display);
            #                    menuFunc.run();
            #                    break;
            #            }
            #            break;
            #        default:
            #            break;
            #
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #MenuTree
          Width               #300
          Height              #Column height
          HelpText            #@SDT171
          DragDrop            #Manual
          ElementPosition     #858993458
          HierarchyParent     #MainGroup
        ENDPROPERTIES
        
        METHODS
          SOURCE #context
            #public void context()
            #{
            #    #WinAPI
            #    #AOT
            #    #Properties
            #    int selectedMenu;
            #    int mouseX, mouseY;
            #    TreeItemIdx idx, childIdx;
            #    PopupMenu contextMenu = new PopupMenu(element.hWnd());
            #
            #    int expandAll;
            #    int findMenuItems;
            #    int setEntryPointPermissions;
            #    int addMatchingPrivileges;
            #    int addMatchingDuties;
            #    int executeMenuitemInCurWorkSpace;
            #    int executeMenuitemInSecurityWorkSpace;
            #    int aotNewWindow;
            #    int aotPropertyWindowItem;
            #    int aotNewWindowMenuItem;
            #    int aotPropertyMenuItem;
            #
            #    FormTreeItem itemUnder;
            #    Object objectUnder;
            #    Object sysSecObjData;
            #    TreeNode nodeUnder, menuItemNode, linkedMenuItemNode;
            #    str formEntryPointRights;
            #    SysSecEntryPointKey entryPointKey;
            #    SysSecSecurableObject securableObjectUnder;
            #    SysSecSecurableObject linkedSecurableObject;
            #    SysSecSecurableObject sysSecObjToUse;
            #
            #    Args args;
            #    FormRun formRun;
            #
            #    [mouseX, mouseY] = WinAPI::getCursorPos();
            #    [mouseX, mouseY] = WinAPI::screenToClient(element.hWnd(), mouseX, mouseY);
            #
            #    idx = MenuTree.getSelection();
            #    if (!idx)
            #    {
            #        return;
            #    }
            #
            #    itemUnder = MenuTree.getItem(idx);
            #    if (!itemUnder)
            #    {
            #        return;
            #    }
            #
            #    objectUnder = itemUnder.data();
            #    if(!objectUnder)
            #    {
            #        return;
            #    }
            #
            #    //Build context menu
            #    if(objectUnder is SysSecSecurableObject)
            #    {
            #        securableObjectUnder = objectUnder as SysSecSecurableObject;
            #        linkedSecurableObject = element.GetLinkedWebMenuItem(itemUnder, false);
            #        if(currentDevelopmentObject != '' && isDeveloper())
            #        {
            #            setEntryPointPermissions = contextMenu.insertItem(strFmt("@SDT172"));
            #        }
            #
            #        entryPointKey = element.GetEntryPointKeyForSysSecTreeItem(itemUnder);
            #        if(entryPointKey != '')
            #        {
            #            contextMenu.insertBreak();
            #            if(currentDevelopmentType == SysSecDevelopmentType::Role && currentRoleAOTName != '')
            #            {
            #                addMatchingDuties = contextMenu.insertItem(strFmt("@SDT121"));
            #            }
            #
            #            if(currentDevelopmentType != SysSecDevelopmentType::Privilege && currentRoleAOTName != '')
            #            {
            #                addMatchingPrivileges = contextMenu.insertItem(strFmt("@SDT122"));
            #            }
            #        }
            #
            #        if(isDeveloper())
            #        {
            #            contextMenu.insertBreak();
            #            aotNewWindow = contextMenu.insertItem(strFmt("@SDT123"));
            #            aotPropertyWindowItem = contextMenu.insertItem(strFmt("@SDT124"));
            #
            #            if(linkedSecurableObject != null)
            #            {
            #                aotNewWindowMenuItem = contextMenu.insertItem(strFmt("@SDT173"));
            #                aotPropertyMenuItem = contextMenu.insertItem(strFmt("@SDT174"));
            #            }
            #        }
            #    }
            #    else
            #    {
            #        nodeUnder = objectUnder as TreeNode;
            #
            #        expandAll = contextMenu.insertItem(strFmt("@SDT175"));
            #        contextMenu.insertBreak();
            #
            #        if(findProperty(nodeUnder.AOTgetProperties(), #PropertyMenuItemName))
            #        {
            #            if(isDeveloper())
            #            {
            #                executeMenuitemInCurWorkSpace = contextMenu.insertItem(strFmt("@SDT118"));
            #                if(currentRoleAOTName != '' && !isrecording)
            #                {
            #                    executeMenuitemInSecurityWorkSpace = contextMenu.insertItem(strFmt("@SDT119"));
            #                }
            #            }
            #
            #            contextMenu.insertBreak();
            #            findMenuItems = contextMenu.insertItem(strFmt("@SDT176"));
            #        }
            #
            #        if(currentDevelopmentObject != '' && isDeveloper())
            #        {
            #            setEntryPointPermissions = contextMenu.insertItem(strFmt("@SDT172"));
            #        }
            #
            #        if(findProperty(nodeUnder.AOTgetProperties(), #PropertyMenuItemName) ||
            #            SysSecEntryPointManager::TreeNodeIsServiceOperation(nodeUnder))
            #        {
            #            contextMenu.insertBreak();
            #
            #            if(currentDevelopmentType == SysSecDevelopmentType::Role && currentRoleAOTName != '')
            #            {
            #                addMatchingDuties = contextMenu.insertItem(strFmt("@SDT121"));
            #            }
            #
            #            if(currentDevelopmentType != SysSecDevelopmentType::Privilege && currentRoleAOTName != '')
            #            {
            #                addMatchingPrivileges = contextMenu.insertItem(strFmt("@SDT122"));
            #            }
            #        }
            #
            #        if(isDeveloper())
            #        {
            #            contextMenu.insertBreak();
            #            aotNewWindow = contextMenu.insertItem(strFmt("@SDT123"));
            #            aotPropertyWindowItem = contextMenu.insertItem(strFmt("@SDT124"));
            #
            #            if(findProperty(nodeUnder.AOTgetProperties(), #PropertyMenuItemName))
            #            {
            #                aotNewWindowMenuItem = contextMenu.insertItem(strFmt("@SDT177"));
            #                aotPropertyMenuItem = contextMenu.insertItem(strFmt("@SDT178"));
            #            }
            #        }
            #    }
            #
            #    selectedMenu = contextMenu.draw();
            #
            #    switch (selectedMenu)
            #    {
            #        case -1:
            #            break;
            #
            #        case findMenuItems:
            #            this.DiscoverLinkedMenuItems(itemUnder);
            #            break;
            #
            #        case expandAll:
            #            MenuTree.expand(idx, FormTreeExpand::Expand);
            #            childIdx = MenuTree.getChild(idx);
            #            if(childIdx != 0)
            #            {
            #                SysFormTreeControl::expandTree(MenuTree, childIdx);
            #            }
            #            break;
            #
            #        case setEntryPointPermissions:
            #            formEntryPointRights = '';
            #            if(currentDevelopmentType == SysSecDevelopmentType::Privilege)
            #            {
            #                formEntryPointRights = formstr(SysSecSetEntryPointRightsForPrivilege);
            #            }
            #            else if(currentDevelopmentType == SysSecDevelopmentType::Duty || currentDevelopmentType == SysSecDevelopmentType::Role)
            #            {
            #                formEntryPointRights = formstr(SysSecSetEntryPointRights);
            #            }
            #
            #            args = new Args(formEntryPointRights);
            #            args.caller(element);
            #            args.parmEnum(NoYes::No);
            #            formRun = classFactory.formRunClass(args);
            #            formRun.run();
            #            formRun.wait(true);
            #            break;
            #
            #        case addMatchingPrivileges:
            #            args = new Args(formstr(SysSecReferencePrivilegesForEntryPoint));
            #            args.caller(element);
            #
            #            if(securableObjectUnder != null)
            #            {
            #                sysSecObjToUse = securableObjectUnder;
            #                if(linkedSecurableObject != null)
            #                {
            #                    sysSecObjToUse = linkedSecurableObject;
            #                }
            #                args.parmEnum(sysSecObjToUse.getType());
            #                args.parm(strFmt('%1.%2', sysSecObjToUse.getName(), sysSecObjToUse.getChildName()));
            #            }
            #            else if(SysSecEntryPointManager::TreeNodeIsServiceOperation(nodeUnder))
            #            {
            #                args.parmEnum(SecurableType::ServiceOperation);
            #                args.parm(strFmt('%1.%2',
            #                    nodeUnder.AOTparent().AOTparent().AOTname(),
            #                    nodeUnder.AOTname()));
            #            }
            #            else
            #            {
            #                menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #                if(menuItemNode)
            #                {
            #                    args.parmEnum(SysSecEntryPointManager::GetSecurableMenuItemType(menuItemNode));
            #                    args.parm(menuItemNode.AOTname());
            #                }
            #            }
            #
            #            if(args.parm() != '')
            #            {
            #                formRun = classFactory.formRunClass(args);
            #                formRun.run();
            #                formRun.wait(true);
            #            }
            #            break;
            #
            #        case addMatchingDuties:
            #            args = new Args(formstr(SysSecReferenceDutiesForEntryPoint));
            #            args.caller(element);
            #
            #            if(securableObjectUnder != null)
            #            {
            #                sysSecObjToUse = securableObjectUnder;
            #                if(linkedSecurableObject != null)
            #                {
            #                    sysSecObjToUse = linkedSecurableObject;
            #                }
            #                args.parmEnum(sysSecObjToUse.getType());
            #                args.parm(strFmt('%1.%2', sysSecObjToUse.getName(), sysSecObjToUse.getChildName()));
            #            }
            #            else if(SysSecEntryPointManager::TreeNodeIsServiceOperation(nodeUnder))
            #            {
            #                args.parmEnum(SecurableType::ServiceOperation);
            #                args.parm(strFmt('%1.%2',
            #                    nodeUnder.AOTparent().AOTparent().AOTname(),
            #                    nodeUnder.AOTname()));
            #            }
            #            else
            #            {
            #                menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #                if(menuItemNode)
            #                {
            #                    args.parmEnum(SysSecEntryPointManager::GetSecurableMenuItemType(menuItemNode));
            #                    args.parm(menuItemNode.AOTname());
            #                }
            #            }
            #
            #            if(args.parm() != '')
            #            {
            #                formRun = classFactory.formRunClass(args);
            #                formRun.run();
            #                formRun.wait(true);
            #            }
            #            break;
            #
            #        case executeMenuitemInCurWorkSpace:
            #            element.launch(itemUnder);
            #            break;
            #
            #        case executeMenuitemInSecurityWorkSpace:
            #            linkedMenuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #            if(linkedMenuItemNode != null)
            #            {
            #                element.OpenRoleWorkSpace(linkedMenuItemNode.treeNodePath());
            #            }
            #            break;
            #
            #        case aotNewWindow:
            #            if(securableObjectUnder != null)
            #            {
            #                sysSecObjData = securableObjectUnder.getData();
            #                if(sysSecObjData is TreeNode)
            #                {
            #                    nodeUnder = sysSecObjData as TreeNode;
            #                    nodeUnder.AOTnewWindow();
            #                }
            #            }
            #            else
            #            {
            #                nodeUnder.AOTnewWindow();
            #            }
            #            break;
            #
            #        case aotPropertyWindowItem:
            #            if(securableObjectUnder != null)
            #            {
            #                sysSecObjData = securableObjectUnder.getData();
            #                if(sysSecObjData is TreeNode)
            #                {
            #                    nodeUnder = sysSecObjData as TreeNode;
            #                    nodeUnder.AOTshowProperties();
            #                }
            #            }
            #            else
            #            {
            #                nodeUnder.AOTshowProperties();
            #            }
            #            break;
            #
            #        case aotNewWindowMenuItem:
            #            if(linkedSecurableObject != null)
            #            {
            #                nodeUnder = SysSecEntryPointManager::GetNodeForSecurableType(linkedSecurableObject.getType(),
            #                    linkedSecurableObject.getName(), linkedSecurableObject.getChildName());
            #                if(nodeUnder)
            #                {
            #                    nodeUnder.AOTnewWindow();
            #                }
            #            }
            #            else
            #            {
            #                menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #                if(menuItemNode)
            #                {
            #                    menuItemNode.AOTnewWindow();
            #                }
            #            }
            #            break;
            #
            #        case aotPropertyMenuItem:
            #            if(linkedSecurableObject != null)
            #            {
            #                nodeUnder = SysSecEntryPointManager::GetNodeForSecurableType(linkedSecurableObject.getType(),
            #                    linkedSecurableObject.getName(), linkedSecurableObject.getChildName());
            #                if(nodeUnder)
            #                {
            #                    nodeUnder.AOTshowProperties();
            #                }
            #            }
            #            else
            #            {
            #                menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #                if(menuItemNode)
            #                {
            #                    menuItemNode.AOTshowProperties();
            #                }
            #            }
            #            break;
            #
            #        default:
            #            break;
            #
            #    }
            #}
          ENDSOURCE
          SOURCE #DiscoverLinkedMenuItems
            #private boolean DiscoverLinkedMenuItems(FormTreeItem _formTreeItem)
            #{
            #    #Properties
            #    boolean         retValue = false;
            #    Label           label = new Label();
            #    int             stateIcon;
            #    TreeNode        nodeUnder;
            #    Object          objectUnder;
            #    TreeNode        menuItemNode, formNode, designNode, partsNode;
            #    str             menuItemKey;
            #
            #    void processFormSubNode(TreeNode _formSubNode)
            #    {
            #        TreeNodeIterator tIterator = _formSubNode.AOTiterator();
            #        TreeNode controlMenuItemNode;
            #        TreeNode controlNode = tIterator.next();
            #        str l, c, text, formatStr;
            #
            #        while(controlNode != null)
            #        {
            #            controlMenuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(controlNode);
            #
            #            if(controlMenuItemNode)
            #            {
            #                l = findProperty(controlNode.AOTgetProperties(),#PropertyText);
            #                formatStr = '%1';
            #                if(l == '')
            #                {
            #                    formatStr = '- %1 -';
            #                    l = findProperty(controlMenuItemNode.AOTgetProperties(), #PropertyLabel);
            #                }
            #
            #                if(SysLabel::isLabelId(l))
            #                {
            #                    text = strFmt(formatStr, label.extractString(l));
            #                }
            #                else
            #                {
            #                    text = strFmt(formatStr, l);
            #                }
            #
            #                c = strFmt('%1 (%2.%3)', text, SysSecEntryPointManager::GetSecurableMenuItemType(controlMenuItemNode), controlMenuItemNode.AOTname());
            #
            #                retValue = true;
            #
            #                menuItemKey = element.GetMenuItemKeyForNode(controlNode);
            #
            #                if(currentRoleAOTName == '')
            #                {
            #                    stateIcon = 0;
            #                }
            #                else
            #                {
            #                    stateIcon = accessImages[1+ AccessRight::NoAccess];
            #                    if(accessRightsMap != null && accessRightsMap.exists(menuItemKey))
            #                    {
            #                        stateIcon = accessImages[1+ accessRightsMap.lookup(menuItemKey)];
            #                    }
            #                }
            #                SysFormTreeControl::addTreeItem(MenuTree, c, _formTreeItem.idx(), controlNode,
            #                    imageListAppl_AOT.image(controlNode.AOTbitmapId()), 0, stateIcon);
            #
            #            }
            #            controlNode = tIterator.next();
            #        }
            #    }
            #
            #    objectUnder = _formTreeItem.data();
            #    if(objectUnder == null)
            #        return false;
            #
            #    if(objectUnder is SysSecSecurableObject)
            #    {
            #        return false;
            #    }
            #
            #    nodeUnder = objectUnder as TreeNode;
            #    menuItemNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #    if(menuItemNode != null)
            #    {
            #        formNode = SysSecEntryPointManager::GetLinkedFormNode(menuItemNode);
            #        if(formNode)
            #        {
            #            designNode = formNode.AOTfindChild('Designs').AOTfindChild('DesignList');
            #            if(designNode)
            #            {
            #                processFormSubNode(designNode);
            #            }
            #
            #            partsNode = formNode.AOTfindChild('Parts');
            #            if(partsNode)
            #            {
            #                processFormSubNode(partsNode);
            #            }
            #        }
            #    }
            #
            #    if(retValue)
            #    {
            #        if(!_formTreeItem.children())
            #        {
            #            _formTreeItem.children(true);
            #            MenuTree.setItem(_formTreeItem);
            #            MenuTree.expand(_formTreeItem.idx());
            #        }
            #    }
            #
            #    return retValue;
            #}
          ENDSOURCE
          SOURCE #expanding
            #public boolean expanding(int _Idx, FormTreeExpand _action, anytype _data)
            #{
            #    #ResAppl
            #    #Properties
            #    FormTreeItem    parent = this.getItem(_idx);
            #    boolean         ret;
            #    str             c, l;
            #    Object          objectUnder;
            #    SysSecSecurableObject sysSecSecurableObject;
            #    TreeNode        nodeParent, nodeChild, nodeShown;
            #    TreeItemIdx     treeItemIdx;
            #    Label           label = new Label();
            #    int             stateIcon;
            #    FormTreeItem    formTreeItem, childTreeItem;
            #    boolean         isServiceNode = false;
            #    TreeItemIdx     childItemIdx;
            #    SysSecEntryPointKey entryPointKey;
            #    SecurableObject         curSecurableObject;
            #
            #    ret = super(_Idx, _action, _data);
            #
            #    if (parent.stateExpandedOnce())
            #        return ret;
            #
            #    objectUnder = parent.data();
            #
            #    //Perf optimization: Load EP objects only when expanding EP node first time
            #    if(_Idx == webRootItemIdx && objectUnder is TreeNode)
            #    {
            #        secTree = new SysSecTree(element as Object, false, SysSecTreeSubType::SecurableObjects);
            #        secTree.fillTree();
            #        secHelper = new SysSecHelper(element as Object);
            #        curSecurableObject.RecId = 1;
            #        curSecurableObject.Type = #SecurableTypeEP;
            #        sysSecSecurableObject = new SysSecSecurableObject(element as Object, secTree, null, curSecurableObject);
            #        sysSecSecurableObject.setData(TreeNode::findNode(strFmt('%1', #WebPath)));
            #        sysSecSecurableObject.setIdx(webRootItemIdx);
            #        formTreeItem = MenuTree.getItem(webRootItemIdx);
            #        FormTreeItem.data(sysSecSecurableObject);
            #        objectUnder = SysSecSecurableObject;
            #        MenuTree.setItem(FormTreeItem);
            #    }
            #
            #    if(objectUnder is SysSecSecurableObject)
            #    {
            #        sysSecSecurableObject = objectUnder as SysSecSecurableObject;
            #        sysSecSecurableObject.expandChildren();
            #
            #        childItemIdx = MenuTree.getChild(_idx);
            #        while(childItemIdx != 0)
            #        {
            #            childTreeItem = MenuTree.getItem(childItemIdx);
            #            stateIcon = 0;
            #            entryPointKey = element.GetEntryPointKeyForSysSecTreeItem(childTreeItem);
            #            if(entryPointKey != '')
            #            {
            #                if(accessRightsMap != null)
            #                {
            #                    if(accessRightsMap.exists(entryPointKey))
            #                    {
            #                        stateIcon = accessImages[1+ accessRightsMap.lookup(entryPointKey)];
            #                        if(oldAccessRightsMap != null && oldAccessRightsMap.exists(entryPointKey))
            #                        {
            #                            if(accessRightsMap.lookup(entryPointKey) != oldAccessRightsMap.lookup(entryPointKey))
            #                            {
            #                                childTreeItem.stateBold(true);
            #                            }
            #                        }
            #                    }
            #                    else
            #                    {
            #                        stateIcon = accessImages[1+ AccessRight::NoAccess];
            #                    }
            #                }
            #            }
            #            childTreeItem.stateImage(stateIcon);
            #            MenuTree.setItem(childTreeItem);
            #
            #            childItemidx = MenuTree.getNextSibling(childItemidx);
            #        }
            #    }
            #    else
            #    {
            #        nodeParent = objectUnder as TreeNode;
            #
            #        if(Global::strStartsWith(nodeParent.treeNodePath(),strFmt('%1\\', #FormsPath)))
            #        {
            #            return ret;
            #        }
            #
            #        if (nodeParent)
            #        {
            #            if(nodeParent.AOTparent() != null && nodeParent.AOTparent().treeNodePath() == #ServicesPath)
            #            {
            #                isServiceNode = true;
            #                nodeChild = nodeParent.AOTfindChild(#ServiceOperations).AOTfirstChild();
            #            }
            #            else
            #            {
            #                nodeChild = nodeParent.AOTfirstChild();
            #            }
            #        }
            #        while(nodeChild)
            #        {
            #            nodeShown = nodeChild;
            #            if (nodeChild.handle() == classnum(MenuReference))
            #            {
            #                nodeShown = TreeNode::findNode('Menus\\' + nodeChild.AOTname());
            #                l = findProperty(nodeShown.AOTgetProperties(),#PropertyLabel);
            #                c = label.extractString(l);
            #            }
            #            else if(nodeChild.handle() == classnum(Menu))
            #            {
            #                l = findProperty(nodeShown.AOTgetProperties(),#PropertyLabel);
            #                c = label.extractString(l);
            #            }
            #            else
            #            {
            #                c = label.extractString(nodeShown.AOTname());
            #            }
            #
            #            if(currentDevelopmentObject == '')
            #            {
            #                stateIcon = 0;
            #            }
            #            else if(curAccessTree != null && curAccessTree.exists(nodeShown.treeNodePath()))
            #            {
            #                stateIcon = accessImages[1+ curAccessTree.lookup(nodeShown.treeNodePath())];
            #            }
            #            else
            #            {
            #                stateIcon = accessImages[1+ AccessRight::NoAccess];
            #            }
            #
            #            treeItemIdx = SysFormTreeControl::addTreeItem(MenuTree, c, _Idx, nodeShown,
            #                imageListAppl_AOT.image(nodeShown.AOTbitmapId()), (isServiceNode ? 0 : nodeShown.AOTchildNodeCount()), stateIcon);
            #
            #            if(oldAccessTree != null)
            #            {
            #                if(oldAccessTree.exists(nodeShown.treeNodePath()))
            #                {
            #                    if(curAccessTree.lookup(nodeShown.treeNodePath()) != oldAccessTree.lookup(nodeShown.treeNodePath()))
            #                    {
            #                        formTreeItem = MenuTree.getItem(treeItemIdx);
            #                        FormTreeItem.stateBold(true);
            #                        MenuTree.setItem(FormTreeItem);
            #                    }
            #                    else
            #                    {
            #                        if(nodeHasChildWithNewAccessTree.exists(nodeShown.treeNodePath()))
            #                        {
            #                            formTreeItem = MenuTree.getItem(treeItemIdx);
            #                            // BP Deviation documented
            #                            FormTreeItem.text(FormTreeItem.text() + '*');
            #                            newIndicatedItems.insert(treeItemIdx, 0);
            #                            MenuTree.setItem(FormTreeItem);
            #                        }
            #                    }
            #                }
            #            }
            #
            #            nodeChild = nodeChild.AOTnextSibling();
            #        }
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #keyDown
            #public boolean keyDown(int _vKey, boolean _Ctrl, boolean _Shift)
            #{
            #    boolean ret;
            #    int idx;
            #    FormTreeItem item;
            #    #KeyPressed
            #
            #    ret = super(_vKey, _Ctrl, _Shift);
            #
            #    if (!MenuTree.getSelectedCount())
            #    {
            #        return ret;
            #    }
            #
            #    idx = MenuTree.getSelection();
            #    if (!idx)
            #    {
            #        return ret;
            #    }
            #
            #    item = MenuTree.getItem( idx);
            #
            #    if(_vKey == #return)
            #        element.launch( item);
            #    else if( _vKey == #delete)
            #    {
            #        if(!MenuTree.getParent( idx))
            #        {
            #            return ret;
            #        }
            #        MenuTree.delete( idx);
            #
            #    }
            #    return ret;
            #
            #}
          ENDSOURCE
          SOURCE #mouseDown
            #public int mouseDown(int _x, int _y, int _button, boolean _Ctrl, boolean _Shift)
            #{
            #    int ret;
            #    int idx;
            #
            #    ret = super(_x, _y, _button, _Ctrl, _Shift);
            #
            #    [idx] = this.hitTest(_x, _y);
            #
            #    MenuTree.select(idx);
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #selectInGrid
            #public void selectInGrid()
            #{
            #    Object objectUnder;
            #    TreeNode nodeUnder;
            #    FormTreeItem formTreeItem;
            #    SysSecEntryPointKey objectKey;
            #    TreeNode entryPointNode;
            #
            #    formTreeItem = MenuTree.getItem(MenuTree.getSelection());
            #
            #    if(!formTreeItem)
            #    {
            #        return;
            #    }
            #
            #    objectUnder = formTreeItem.data();
            #    if (!objectUnder)
            #    {
            #        return;
            #    }
            #
            #    if(objectUnder is SysSecSecurableObject)
            #    {
            #        objectKey = element.GetEntryPointKeyForSysSecTreeItem(formTreeItem);
            #    }
            #    else
            #    {
            #        nodeUnder = formTreeItem.data();
            #        if (!nodeUnder)
            #        {
            #            return;
            #        }
            #
            #        if(strStartsWith(nodeUnder.treeNodePath(), #MenusPath) || strStartsWith(nodeUnder.treeNodePath(), #FormsPath))
            #        {
            #            entryPointNode = SysSecEntryPointManager::GetLinkedMenuItemNode(nodeUnder);
            #        }
            #        else if(SysSecEntryPointManager::TreeNodeIsServiceOperation(nodeUnder))
            #        {
            #            entryPointNode = nodeUnder;
            #        }
            #
            #        if(entryPointNode != null)
            #        {
            #            objectKey = SysSecEntryPointManager::GetKeyForEntryPointNode(entryPointNode);
            #        }
            #    }
            #
            #    element.lock();
            #    SysSecEntryPointTmp_ds.markAllLoadedRecords(0);
            #    SysSecEntryPointTmp_ds.refreshEx(-1);
            #    if(objectKey != '' && SysSecEntryPointTmp_ds.findValue(
            #        fieldName2id(tableNum('SysSecEntryPointTmp'), 'ObjectKey'), objectKey))
            #    {
            #        SysSecEntryPointTmp_ds.setCurrent();
            #        SysSecEntryPointTmp_ds.mark(1);
            #    }
            #    element.unLock();
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _OldItem, FormTreeItem _NewItem, FormTreeSelect _how)
            #{
            #    super(_OldItem, _NewItem, _how);
            #
            #    MenuTree.selectInGrid();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
      ReadPermissions     #No
      UpdatePermissions   #No
      CreatePermissions   #No
    ENDPROPERTIES
    
    PERMISSIONSET #Delete
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
      TABLE #SecurityRole
        PROPERTIES
          Table               #SecurityRole
          EffectiveAccess     #Create
          ManagedBy           #Manual
        ENDPROPERTIES
        
      ENDTABLE
      
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
  ASSOCIATEDFORM #SysSecAssignOM
    PROPERTIES
      Form                #SysSecAssignOM
      AccessLevel         #Delete
      SystemManaged       #No
      ManagedBy           #
    ENDPROPERTIES
    
  ENDASSOCIATEDFORM
  
ASSOCIATEDFORM #SysSecDutyLookup
  PROPERTIES
    Form                #SysSecDutyLookup
    AccessLevel         #Read
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecLoadEPTrace
  PROPERTIES
    Form                #SysSecLoadEPTrace
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecPrivilegeLookup
  PROPERTIES
    Form                #SysSecPrivilegeLookup
    AccessLevel         #Read
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecReferenceDutiesForEntryPoint
  PROPERTIES
    Form                #SysSecReferenceDutiesForEntryPoint
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecReferencePrivilegesForEntryPoint
  PROPERTIES
    Form                #SysSecReferencePrivilegesForEntryPoint
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecRoleLookup
  PROPERTIES
    Form                #SysSecRoleLookup
    AccessLevel         #Read
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecSetEntryPointRights
  PROPERTIES
    Form                #SysSecSetEntryPointRights
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ASSOCIATEDFORM #SysSecSetEntryPointRightsForPrivilege
  PROPERTIES
    Form                #SysSecSetEntryPointRightsForPrivilege
    AccessLevel         #Delete
    SystemManaged       #No
    ManagedBy           #
  ENDPROPERTIES
  
ENDASSOCIATEDFORM

ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


END
